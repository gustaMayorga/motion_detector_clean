================================================================================
INFORME DEL SISTEMA DE VIGILANCIA IA
Generado el 2025-03-29 18:55:22
================================================================================

1. ESTRUCTURA DEL PROYECTO
================================================================================

📁 /
    📄 Dockerfile
    📄 INSTALACION.md
    📄 PROJECT_README.md
    📄 app.log
    📄 app.py
    📄 arquitectura.txt
    📄 create_project_structure.ps1
    📄 docker-compose.yml
    📄 extract_system_info.py
    📄 init_config.ps1
    📄 requirements-ai.txt
    📄 requirements-extras.txt
    📄 requirements.txt
    📄 resumen.txt
    📄 setup_simple.py
    📄 setup_vigilancia.py
    📄 test_face_recognition.py
    📄 test_opencv_face.py
    📁 agent_templates/
    📁 alert_captures/
    📁 config/
        📄 agents_config.json
        📄 alerts_config.json
        📄 analytics.json
        📄 api_keys.json
        📄 cameras_config.json
        📄 detection_config.json
        📄 industrial_safety.json
        📄 known_faces.json
        📄 modes_config.json
        📄 settings.json
        📄 system_config.json
        📄 whatsapp.json
        📁 active_models/
        📁 forensic/
            📄 forensic.db
            📁 evidence/
        📁 industrial/
            📄 industrial_config.json
        📁 roi/
            📄 f8b753ef-3fda-4b39-a8d2-ac08f389fc2c.json
    📁 data/
        📁 face/
        📁 forensic/
            📁 evidence/
        📁 images/
        📁 known_faces/
            📄 persons.pkl
            📄 trained_model.yml
            📁 person_1/
                📄 face_1.jpg
            📁 person_2/
                📄 face_1.jpg
            📁 person_3/
                📄 face_1.jpg
            📁 person_4/
                📄 face_1.jpg
        📁 loitering/
        📁 motion/
        📁 objects/
        📁 temp/
        📁 videos/
    📁 datasets/
    📁 detection_snapshots/
    📁 docs/
        📄 TECHNICAL_DOCS.md
        📄 TESTING_GUIDE.md
        📄 USER_GUIDE.md
    📁 instance/
        📄 app.db
    📁 logs/
        📄 surveillance.log
    📁 models/
        📄 weapon_detection.pt
        📁 yolo/
    📁 recordings/
    📁 snapshots/
    📁 src/
        📄 agent_factory.py
        📄 agent_manager.py
        📄 agent_templates.py
        📄 ai_agents.py
        📄 alert_manager.py
        📄 analytics_manager.py
        📄 assault_detection_agent.py
        📄 camera_manager.py
        📄 database.py
        📄 dataset_manager.py
        📄 email_connector.py
        📄 ensemble_detection_agent.py
        📄 external_ai.py
        📄 external_ai_agent.py
        📄 face_recognition.py
        📄 forensic_analysis.py
        📄 generative_description_agent.py
        📄 geo_manager.py
        📄 industrial_agents.py
        📄 industrial_safety.py
        📄 industrial_safety_agent.py
        📄 industrial_safety_manager.py
        📄 mcp_framework.py
        📄 model_trainer.py
        📄 modes_config.py
        📄 motion_detector.py
        📄 object_detector.py
        📄 operation_mode.py
        📄 operation_mode_router.py
        📄 retail_security_agent.py
        📄 roi_manager.py
        📄 training_api.py
        📄 video_capture.py
        📄 whatsapp_alert_agent.py
        📄 whatsapp_connector.py
        📁 ai_modules/
            📄 detection_manager.py
            📄 face_recognition_enhanced.py
            📄 fire_smoke_detector.py
            📄 pose_detector.py
            📄 water_flood_detector.py
        📁 routes/
            📄 api.py
            📄 main.py
            📄 views.py
        📁 utils/
            📄 error_handler.py
            📄 hardware_detector.py
            📄 init_db.py
            📄 logger.py
    📁 static/
        📄 favicon.ico
        📁 css/
            📄 agent_factory.css
            📄 alerts.css
            📄 cameras.css
            📄 dashboard.css
            📄 diagnostics.css
            📄 main.css
            📄 settings.css
            📄 style.css
            📄 testing.css
            📄 whatsapp.css
        📁 img/
            📄 camera-placeholder.jpg
        📁 js/
            📄 alerts.js
            📄 cameras.js
            📄 cameras_advanced.js
            📄 detection_testing.js
            📄 diagnostics.js
            📄 main.js
            📄 monitoring.js
    📁 templates/
        📄 advanced_detectors.html
        📄 advanced_settings.html
        📄 agent_factory.html
        📄 agents.html
        📄 ai_systems.html
        📄 alerts.html
        📄 assault_config.html
        📄 base.html
        📄 camera_debug.html
        📄 camera_testing.html
        📄 cameras.html
        📄 cameras_advanced.html
        📄 commercial.html
        📄 config.html
        📄 dashboard.html
        📄 dataset_details.html
        📄 datasets.html
        📄 error.html
        📄 faces.html
        📄 forensic.html
        📄 hardware_monitor.html
        📄 index.html
        📄 industrial.html
        📄 maps.html
        📄 modes.html
        📄 monitoring.html
        📄 placeholder.html
        📄 roi_config.html
        📄 settings.html
        📄 system_diagnostics.html
        📄 training.html
        📄 training_details.html
        📄 trainings.html
        📄 webcam_test.html
        📄 whatsapp_config.html
        📁 components/
            📄 camera_stream.html
        📁 errors/
            📄 404.html
            📄 500.html
        📁 modes/
            📄 forensic.html
            📄 normal.html
            📄 retail.html
        📁 partials/
    📁 tests/
        📄 test_alert_manager.py
    📁 test_captures/
        📄 test_20250328_233652.jpg
        📄 test_20250328_233744.jpg
        📄 test_20250328_234052.jpg
        📄 test_20250329_000009.jpg
        📄 test_20250329_000146.jpg
    📁 tools/
        📄 camera_tester.py
        📄 module_checker.py
        📄 test_mediapipe.py
        📄 test_ppe_detection.py
    📁 ultimos_archivos_modificados/
        📄 PROJECT_README.md
        📄 app.py
        📄 extract_system_info.py
        📄 resumen.txt
        📁 instance/
            📄 app.db
        📁 logs/
            📄 surveillance.log
        📁 src/
            📄 camera_manager.py
            📁 routes/
                📄 api.py
            📁 utils/
                📄 init_db.py
        📁 templates/
            📄 dashboard.html
        📁 ultimos_archivos_modificados/
            📄 PROJECT_README.md
            📄 extract_system_info.py
            📄 resumen.txt
            📁 instance/
                📄 app.db
            📁 logs/
                📄 surveillance.log
            📁 templates/
                📄 dashboard.html
            📁 ultimos_archivos_modificados/
                📄 extract_system_info.py
                📄 resumen.txt
                📁 ultimos_archivos_modificados/
                    📄 extract_system_info.py
                    📄 resumen.txt


2. ÚLTIMOS ARCHIVOS MODIFICADOS
================================================================================

📄 resumen.txt
   Última modificación: 2025-03-29 18:55:22

📄 extract_system_info.py
   Última modificación: 2025-03-29 18:55:00

📄 ultimos_archivos_modificados\resumen.txt
   Última modificación: 2025-03-29 18:48:40

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\resumen.txt
   Última modificación: 2025-03-29 18:48:40

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\resumen.txt
   Última modificación: 2025-03-29 18:48:40

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\resumen.txt
   Última modificación: 2025-03-29 18:48:40

📄 ultimos_archivos_modificados\extract_system_info.py
   Última modificación: 2025-03-29 18:44:19

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\extract_system_info.py
   Última modificación: 2025-03-29 18:44:19

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\extract_system_info.py
   Última modificación: 2025-03-29 18:44:19

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\extract_system_info.py
   Última modificación: 2025-03-29 18:44:19

📄 templates\dashboard.html
   Última modificación: 2025-03-29 18:26:15

📄 ultimos_archivos_modificados\templates\dashboard.html
   Última modificación: 2025-03-29 18:26:15

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\templates\dashboard.html
   Última modificación: 2025-03-29 18:26:15

📄 src\camera_manager.py
   Última modificación: 2025-03-29 18:26:15

📄 ultimos_archivos_modificados\src\camera_manager.py
   Última modificación: 2025-03-29 18:26:15

📄 app.py
   Última modificación: 2025-03-29 18:26:15

📄 ultimos_archivos_modificados\app.py
   Última modificación: 2025-03-29 18:26:15

📄 logs\surveillance.log
   Última modificación: 2025-03-29 15:48:39

📄 ultimos_archivos_modificados\logs\surveillance.log
   Última modificación: 2025-03-29 15:48:39

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\logs\surveillance.log
   Última modificación: 2025-03-29 15:48:39



3. CONTENIDO DE LOS ARCHIVOS
================================================================================

📄 Dockerfile
--------------------------------------------------------------------------------
FROM python:3.9-slim

WORKDIR /app

# Dependencias para OpenCV
RUN apt-get update && apt-get install -y \
    libgl1-mesa-glx \
    libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 5000

CMD ["python", "app.py"] 

--------------------------------------------------------------------------------

📄 INSTALACION.md
--------------------------------------------------------------------------------
# Guía de Instalación y Configuración

Este documento detalla los pasos necesarios para instalar, configurar y poner en marcha el Sistema de Vigilancia Inteligente.

## Requisitos del Sistema

### Hardware Recomendado
- CPU: Intel Core i7 o superior / AMD Ryzen 7 o superior
- RAM: Mínimo 16GB (32GB recomendado para procesamiento múltiple de cámaras)
- GPU: NVIDIA con soporte CUDA (mínimo 4GB VRAM) para inferencia de modelos
- Almacenamiento: SSD 256GB o superior
- Conexión a Internet: Requerida para servicios de IA externos

### Software Prerrequisito
- Sistema Operativo: Ubuntu 20.04 LTS o superior / Windows 10/11 con WSL2
- Python 3.8 o superior
- Git
- Docker (opcional, para despliegue containerizado)
- CUDA Toolkit 11.4+ (para aceleración GPU)
- OpenCV
- Numpy, Pandas (para análisis de datos)
- FFmpeg (opcional, para procesamiento de video avanzado)

## Instalación Paso a Paso

### 1. Configurar Entorno Virtual

```bash
# Clonar el repositorio
git clone https://github.com/tu-usuario/vigilancia-ia.git
cd vigilancia-ia

# Crear entorno virtual
python -m venv venv

# Activar entorno virtual
# En Linux/Mac:
source venv/bin/activate
# En Windows:
venv\Scripts\activate

# Instalar dependencias principales
pip install -r requirements.txt

# Si deseas utilizar las funcionalidades avanzadas de análisis de datos, asegúrate de instalar:
pip install pandas numpy matplotlib
```

### 2. Instalación Manual de Dependencias (Si hay problemas)

Si encuentras errores de módulos faltantes como "No module named 'requests'", instala las dependencias manualmente:

```bash
# Dependencias fundamentales
pip install flask opencv-python numpy pillow requests

# Dependencias para IA
pip install torch torchvision tensorflow

# Dependencias para APIs externas
pip install anthropic google-generativeai

# Otras dependencias
pip install paho-mqtt geopy python-dateutil
```

### 3. Configuración Inicial

```bash
# Crear directorios necesarios
mkdir -p config datasets models logs agent_templates agents

# Copiar archivo de configuración de ejemplo
cp config_example.json config/system_config.json

# Editar configuración según necesidades
nano config/system_config.json
```

### 4. Configuración de APIs Externas (Opcional)

Para utilizar servicios externos como Claude, Gemini o WhatsApp, se deben configurar las respectivas claves API:

```bash
# Crear archivo de configuración para APIs externas
cp api_keys_example.json config/api_keys.json

# Editar para agregar claves propias
nano config/api_keys.json
```

El archivo debe tener una estructura similar a:

```json
{
  "anthropic": "sk-ant-api-key...",
  "google": "AIza...",
  "whatsapp": {
    "api_key": "EAAG...",
    "phone_id": "123456789",
    "business_account_id": "987654321"
  }
}
```

### 5. Inicialización del Sistema

```bash
# Inicializar la base de datos
python init_db.py

# Cargar modelos base (descarga modelos preentrenados)
python download_models.py

# Verificar instalación
python check_installation.py
```

### 6. Iniciando el Sistema

```bash
# Iniciar en modo desarrollo
python app.py

# Alternativamente, para producción con gunicorn:
gunicorn -w 4 -b 0.0.0.0:5000 app:app
```

El sistema estará disponible en: `http://localhost:5000`

## Solución de Problemas Específicos

### Módulos Python Faltantes

Si encuentras errores como `ModuleNotFoundError: No module named 'xxx'`:

```bash
# Instalar el módulo faltante
pip install xxx

# Ejemplo para el error con 'requests'
pip install requests
```

### Errores con NumPy o Dependencias de Compilación

En algunos sistemas, pueden ocurrir errores con la instalación de NumPy o módulos que requieren compilación:

```bash
# Para Windows, instalar primero las herramientas de compilación de Visual Studio
# Luego, intentar la instalación con:
pip install --only-binary :all: numpy opencv-python

# En Linux, instalar las herramientas de desarrollo necesarias:
sudo apt-get install build-essential libssl-dev libffi-dev python3-dev
```

### Problemas con CUDA y PyTorch

Si PyTorch no detecta la GPU:

```bash
# Desinstalar la versión actual
pip uninstall torch torchvision

# Instalar la versión específica para tu CUDA
# Ejemplo para CUDA 11.8:
pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118
```

## Configuración de Cámaras

### Añadir Cámaras

Las cámaras se pueden añadir desde la interfaz web o mediante el archivo de configuración:

1. **Desde la interfaz**: Navegar a "Cámaras" > "Añadir Cámara"

2. **Desde archivo de configuración**:
   ```json
   {
     "cameras": [
       {
         "id": "cam1",
         "name": "Cámara Principal",
         "url": "rtsp://usuario:contraseña@192.168.1.100:554/stream1",
         "type": "rtsp"
       },
       {
         "id": "cam2",
         "name": "Webcam Local",
         "url": "0",
         "type": "local"
       }
     ]
   }
   ```

## Entrenamiento de Modelos

### Crear un Dataset

1. Navegar a "IA" > "Entrenamiento"
2. Seleccionar "Crear Dataset"
3. Definir nombre, descripción y categorías
4. Subir imágenes o capturar desde cámaras
5. Etiquetar imágenes según las categorías

### Entrenar un Modelo

1. En la sección "Entrenamiento", seleccionar "Entrenar Modelo"
2. Elegir el dataset a utilizar
3. Configurar hiperparámetros (o usar valores por defecto)
4. Iniciar entrenamiento
5. El sistema notificará cuando el modelo esté listo

## Creación de Agentes

### Crear un Nuevo Agente

1. Navegue a "IA" > "Agentes de IA"
2. Seleccione "Crear Agente"
3. Elija una plantilla (Detección, Alertas, Análisis, etc.)
4. Configure los parámetros específicos
5. Seleccione el modelo a utilizar (si aplica)
6. Active el agente

## Configuración para Modo Industrial

1. Navegue a "Seguridad" > "Modo Industrial"
2. Configure reglas de seguridad específicas
3. Defina equipos de protección requeridos
4. Establezca zonas permitidas/prohibidas
5. Configure umbrales de detección para incendios o peligros

## Sistema de Mapas y Guardias

### Configurar el Sistema de Mapas

1. Navegue a "Seguridad" > "Mapas y Guardias"
2. Establezca ubicaciones importantes
3. Cree rutas para rondas de vigilancia
4. Defina geocercas para áreas restringidas
5. Registre guardias y asigne rutas

## Solución de Problemas Comunes

### El Sistema No Detecta la GPU

Verifique que:
- CUDA está correctamente instalado: `nvcc --version`
- Las bibliotecas de CUDA están en PATH
- La versión de PyTorch es compatible con su versión de CUDA

### Problemas con Conexión a Cámaras

- Verifique que la cámara esté encendida y conectada a la red
- Confirme que la URL/credenciales son correctas
- Pruebe la conexión con VLC u otra herramienta
- Verifique que el puerto no esté bloqueado por firewall

### Errores en Servicios de IA Externos

- Verifique que las claves API son correctas y están activas
- Compruebe su conexión a Internet
- Revise los logs para errores específicos: `logs/external_ai.log`

### Sistema Lento o con Bajo Rendimiento

- Reduzca la resolución de procesamiento de cámaras
- Ajuste el intervalo de frames (procesar menos frames)
- Utilice modelos más ligeros para la detección
- Considere añadir o mejorar GPU

## Mantenimiento

### Respaldo de Datos

```bash
# Respaldar configuración y modelos
./scripts/backup.sh
```

### Actualización del Sistema

```bash
# Actualizar desde el repositorio
git pull
pip install -r requirements.txt
./scripts/update_models.sh
```

## Pruebas y Verificación

### Pruebas Automatizadas

```bash
# Ejecutar suite de pruebas
pytest tests/

# Pruebas específicas
pytest tests/test_detection.py
```

### Verificación Manual

1. **Detección básica**: Verificar que el sistema detecta objetos correctamente
2. **Reconocimiento facial**: Probar con caras conocidas/desconocidas
3. **Alertas**: Provocar una situación de alerta y verificar notificaciones
4. **Agentes personalizados**: Verificar que funcionan según lo configurado
5. **Conexiones externas**: Comprobar comunicación con servicios de IA y WhatsApp

## Información Adicional

- **Documentación completa**: Disponible en `/docs`
- **Ejemplos de configuración**: Disponibles en `/examples`
- **Modelos preentrenados**: Descargables desde la sección "IA" > "Modelos"

## Soporte

Para problemas o consultas, contacte a soporte en:
- Email: soporte@sistemavigilancia.com
- Foro: https://comunidad.sistemavigilancia.com



Guía de Instalación y Ejecución del Sistema de Vigilancia IA
Esta guía te mostrará cómo configurar y ejecutar el Sistema de Vigilancia IA desde cero utilizando un entorno virtual Python.
Requisitos previos
Python 3.8 o superior
pip (gestor de paquetes de Python)
Git (opcional, si deseas clonar el repositorio)
1. Configuración del entorno virtual

# 1. Crear un directorio para el proyecto
mkdir vigilancia-ia
cd vigilancia-ia

# 2. Crear un entorno virtual
python -m venv vigilai_env

# 3. Activar el entorno virtual
# En Windows:
vigilai_env\Scripts\activate

# En macOS/Linux:
source vigilai_env/bin/activate

# Si usas Git:
git clone https://github.com/tu-usuario/vigilancia-ia.git .

# O si ya tienes los archivos, simplemente colócalos en el directorio


# Instalar las dependencias básicas
pip install flask opencv-python numpy pillow requests

# Instalar las dependencias adicionales
pip install -r requirements.txt


# Crear directorios necesarios
mkdir -p config data logs static/img static/js static/css templates/partials


# Ejecutar el script de configuración
python setup_vigilancia.py


# Ejecutar la aplicación
python app.py


7. Acceder a la interfaz web
Abre tu navegador web y accede a:
Verificación de funcionalidad
Página de inicio: Deberías ver el panel de control principal
Cámaras: Navega a la sección de cámaras para configurar los flujos de video
Alertas: Revisa la sección de alertas para ver las notificaciones del sistema
Modos de operación: Prueba los diferentes modos (Normal, Industrial, Comercial, Forense)
Configuración: Ajusta los parámetros del sistema según tus necesidades
Solución de problemas comunes
Error de importación de módulos
Asegúrate de que estás ejecutando la aplicación desde el directorio raíz del proyecto.
Error "Template not found"
Verifica que la estructura de directorios incluya todas las carpetas necesarias y que los archivos de plantilla estén en el lugar correcto.
Error con librerías de OpenCV
Algunas funcionalidades de OpenCV pueden requerir dependencias adicionales. En Linux, puedes necesitar instalar:

sudo apt-get install libsm6 libxext6 libxrender-dev

Error en la carga de modelos de IA
Asegúrate de que los directorios de modelos existan y contengan los archivos necesarios:

mkdir -p models/detection models/recognition

Pruebas básicas
Para comprobar que el sistema está funcionando correctamente:
Navega a la página de configuración y ajusta los parámetros básicos
Añade una cámara de prueba (puedes usar archivos de video locales)
Cambia entre diferentes modos de operación y verifica que la interfaz responde correctamente
Revisa los logs en la carpeta logs para detectar posibles errores
---
Si necesitas más ayuda o encuentras problemas específicos, consulta el archivo docs/TESTING_GUIDE.md para información detallada sobre la depuración del sistema.

--------------------------------------------------------------------------------

📄 PROJECT_README.md
--------------------------------------------------------------------------------
# Sistema de Vigilancia Inteligente

Este documento registra el desarrollo y estructura del Sistema de Vigilancia Inteligente, un proyecto que combina visión por computadora, inteligencia artificial y vigilancia en tiempo real.

## Estructura del Proyecto 

vigilancia-ia/
├── app.py # Aplicación principal Flask
├── config/ # Archivos de configuración
│ └── system_config.json # Configuración del sistema
├── data/ # Datos persistentes
│ └── known_faces/ # Rostros conocidos para reconocimiento facial
├── models/ # Modelos de IA preentrenados
├── src/ # Código fuente de componentes
│ ├── agent_manager.py # Gestión de agentes de IA
│ ├── alert_manager.py # Sistema de gestión de alertas
│ ├── camera_manager.py # Gestión de cámaras
│ ├── face_recognition.py # Reconocimiento facial
│ ├── mcp_framework.py # Framework de comunicación entre componentes
│ ├── model_trainer.py # Entrenamiento de modelos de IA
│ ├── motion_detector.py # Detección de movimiento
│ ├── object_detector.py # Detección de objetos
│ ├── operation_mode.py # Gestión de modos de operación
│ └── video_capture.py # Captura de video
├── static/ # Archivos estáticos para la web
│ ├── css/
│ │ └── style.css # Estilos CSS
│ └── js/
│ └── main.js # JavaScript principal
└── templates/ # Plantillas HTML
├── alerts.html # Página de alertas
├── base.html # Plantilla base
├── cameras.html # Gestión de cámaras
├── dashboard.html # Panel de control
├── index.html # Página de inicio
└── modes.html # Modos de vigilancia



## Historial de Desarrollo

### Fase 1: Estructura Base
- Creación de la estructura básica de archivos
- Implementación del patrón MVC
- Configuración del servidor Flask
- Creación de plantillas HTML y CSS básico

### Fase 2: Componentes Core
- Creación de gestores de cámaras, alertas y agentes
- Implementación del framework MCP para comunicación
- Integración de detección de movimiento básica

### Fase 3: Interfaces Web
- Implementación de herencia de plantillas con Jinja2
- Mejora de la interfaz con CSS más detallado
- Implementación de interactividad con JavaScript
- Configuración de endpoints API REST

### Fase 4: Captura de Video y Detección
- Implementación de captura de video multihilo
- Integración de detección de objetos simulada
- Visualización de streams de cámara en el dashboard
- Endpoints para controlar cámaras remotamente

### Fase 5: Reconocimiento Facial
- Implementación de detección facial con OpenCV
- Sistema de reconocimiento de personas conocidas
- API para registrar nuevos rostros
- Visualización de resultados de reconocimiento

## Componentes Principales

### MCP Framework
El sistema utiliza un patrón de comunicación basado en mensajes llamado MCP (Message Communication Protocol), que permite la comunicación asíncrona entre los diferentes componentes y agentes.

### Sistema de Cámaras
El sistema puede gestionar múltiples cámaras simultáneamente, cada una en su propio hilo. Soporta diferentes fuentes de video:
- Webcams locales
- Cámaras IP por RTSP/HTTP
- Archivos de video pregrabados

### Detección de Objetos
Utiliza un sistema de detección de objetos basado en modelos preentrenados (simulado en la versión actual). Detecta personas, vehículos y otros objetos relevantes.

### Reconocimiento Facial
Implementa reconocimiento facial para identificar personas conocidas. El sistema puede:
- Detectar rostros en los frames de video
- Reconocer personas registradas
- Almacenar nuevos rostros para entrenamiento
- Mostrar nombres e información sobre personas reconocidas

### Sistema de Alertas
Genera alertas basadas en detecciones y reglas configurables. Las alertas pueden enviarse por:
- Notificaciones en la interfaz web
- Correo electrónico (simulado)
- SMS (simulado)

## Modos de Operación

El sistema soporta diferentes modos de operación que ajustan la sensibilidad y comportamiento:

- **normal**: Vigilancia estándar con detección básica de movimiento
- **barrio_privado**: Optimizado para vigilancia residencial con detección de perímetro
- **aeropuerto**: Configuración para espacios grandes con alto tránsito
- **comercial**: Enfocado en seguridad de locales comerciales

## Próximos Pasos

1. ~~Implementar reconocimiento facial~~ (Completado)
2. Mejorar sistema de alertas con filtros y reglas avanzadas
3. Implementar grabación de video cuando se detectan eventos
4. Mejorar la interfaz de usuario con más controles y visualizaciones
5. Implementar sistema de autenticación de usuarios



Recomendación para el Próximo Paso del Desarrollo
Después de analizar el estado actual del sistema y las opciones disponibles, recomiendo avanzar primero con el sistema de mejoras para la detección y gestión de alarmas por las siguientes razones:
Ventajas de implementar primero la gestión de alarmas mejorada:
1. Soluciona un problema visible y actual: Las falsas detecciones ya están ocurriendo en el sistema existente, lo que puede generar alertas innecesarias y reducir la confianza en el sistema.
Proporciona valor inmediato: Al definir zonas de interés y reglas más inteligentes, el sistema ganará precisión inmediatamente sin necesitar cambios arquitectónicos mayores.
3. Implementación incremental: Podemos implementarlo por fases:
Primero: Definición de zonas de interés (ROI)
Segundo: Reglas de alarma configurables
Tercero: Sistema de clasificación de alarmas
Base para futuras mejoras: Un buen sistema de alarmas servirá como fundamento para cuando implementemos agentes de IA más avanzados, ya que estos podrán enviar sus resultados a un sistema de reglas ya maduro.
Plan de implementación propuesto:
Fase 1: Zonas de Interés (ROI)
Crear una interfaz para dibujar zonas en el video
Implementar la lógica para filtrar detecciones según zonas
Guardar/cargar configuraciones de zonas por cámara
Fase 2: Sistema de Reglas
Crear un editor de reglas con condiciones configurables
Implementar evaluador de reglas en tiempo real
Integrar con el sistema de alertas existente
Fase 3: Clasificación de Alarmas
Implementar niveles de alarma (información, advertencia, alarma, crítica)
Agregar acciones personalizables por nivel de alarma
Mejorar la visualización de alertas en la interfaz
Una vez que estas mejoras estén implementadas y funcionando correctamente, sería un buen momento para avanzar con el sistema de agentes de IA más avanzado, ya que estos agentes podrán aprovechar la infraestructura de reglas y alarmas mejorada.
¿Te parece bien comenzar con la implementación de las zonas de interés (ROI) como primer paso?


ok creo que debemos avanzar y mejorar!

1- sistema de entrenamientos y dataset para las IA, para que puedan aprender y mejorar sobre algun tema especifico, ejemplo Un agente especializado en sospechosos de hurto en un supermercado, otro ejemplo un sospechoso merodeando, activar sistema de seguimiento por camaras enviar alertas y fotos de momentos claves a estación de monitoreo o guardia.
2- aparte de editar los agentes quiero poder tener control total de crear agentes nuevos, entrenarlos con dataset espesificos, que puedan tener retroalimentación de los eventos y aprender en base a respuestas humanas. aparte quisiera tener un agente puntual el cual pueda interpretar por ejemplo un intento de asalto o intento de robo, comprendiendo la situación, ejemplo una persona con armas, personas levantando las 2 manos, personas tirandose al piso etc.
3- Agregar el modo industrial, este modo identifica posibles peligros, focos de incendio, cumplimiento de reglas de seguridad e higene de la empresa. 
4- sería bueno hacer conexión con sistemas de IA externo como claude, google gemini, u otras?
5- conexión con Whatsapp para el envío automatico de eventos a guardias.
6- gestión e interacción con mapas, coordenadas, etc. para poder enviar datos o recibir datos de rondas de los guardias, etc.

## Nuevas Funcionalidades Implementadas

### 1. Sistema de Entrenamiento de IA y Datasets Personalizados

Hemos implementado un sistema completo para entrenar modelos de IA con datasets específicos:

- **Gestor de Datasets**: Permite crear, gestionar y organizar conjuntos de datos para diferentes situaciones de seguridad
- **Etiquetado de Imágenes**: Interfaz para clasificar y etiquetar imágenes para entrenamiento
- **Entrenamiento de Modelos**: Proceso automatizado para generar modelos de IA a partir de los datasets
- **Especialización por casos de uso**: Soporte para modelos especializados en situaciones específicas como hurtos, merodeo, comportamientos sospechosos, etc.

Este sistema permite crear agentes altamente especializados para situaciones específicas, mejorando significativamente la precisión y reduciendo las falsas alarmas.

### 2. Creación Dinámica de Agentes

Hemos desarrollado una "fábrica de agentes" que permite:

- **Crear nuevos agentes** desde la interfaz web sin necesidad de programación
- **Plantillas de agentes** para diferentes propósitos: detección, alertas, análisis de situaciones, etc.
- **Configuración flexible** con parámetros personalizables
- **Sistema de retroalimentación** que permite a los agentes aprender de las respuestas humanas
- **Agente de análisis situacional** capaz de interpretar escenarios complejos como intentos de robo, asaltos o comportamientos sospechosos

### 3. Modo Industrial

Se ha añadido un modo especializado para entornos industriales que incluye:

- **Detección de peligros**: Identificación automática de situaciones de riesgo
- **Monitoreo de incendios**: Detección temprana de focos de incendio o humo
- **Cumplimiento de seguridad**: Verificación del uso de equipos de protección personal (EPP)
- **Reglas de higiene**: Monitoreo del cumplimiento de protocolos de higiene y seguridad
- **Zonas restringidas**: Alerta cuando personas ingresan a áreas peligrosas o no autorizadas

### 4. Integración con Servicios de IA Externos

Se ha implementado conexión con servicios avanzados de IA como:

- **Claude de Anthropic**: Para análisis avanzado de situaciones y comprensión de contextos complejos
- **Google Gemini**: Para reconocimiento y análisis de imágenes con alta precisión
- **Interfaz unificada**: Conector que permite alternar entre diferentes servicios según necesidades
- **Modo híbrido**: Combina modelos locales e IA externa para optimizar rendimiento y costos

Estas integraciones permiten análisis mucho más sofisticados de situaciones complejas, como identificar asaltos basándose en la postura de las personas, presencia de armas, y otros factores contextuales.

### 5. Conexión con WhatsApp

Se ha implementado un sistema completo de notificaciones por WhatsApp:

- **Envío automático** de alertas importantes a guardias y responsables de seguridad
- **Compartición de imágenes** capturadas en el momento de la detección
- **Comandos por mensaje**: Posibilidad de enviar comandos básicos a través de mensajes
- **Gestión de cooldown**: Sistema inteligente para evitar sobrecarga de notificaciones
- **Personalización de mensajes** según tipo y severidad de alertas

### 6. Sistema de Gestión Geográfica y Seguimiento

Se ha desarrollado un sistema completo de gestión geoespacial:

- **Mapas interactivos**: Visualización en tiempo real de guardias, ubicaciones y zonas
- **Creación de rutas**: Definición de recorridos para rondas de vigilancia
- **Geocercas**: Creación de perímetros virtuales con alertas automáticas
- **Seguimiento de guardias**: Monitoreo de posición y cumplimiento de rutas
- **Alertas por desviación**: Notificaciones cuando los guardias se desvían de rutas o tiempos establecidos
- **Integración con cámaras**: Asociación de ubicaciones físicas con cámaras del sistema

## Conclusión

Con estas nuevas funcionalidades, el Sistema de Vigilancia Inteligente se ha transformado en una solución extremadamente versátil y potente, capaz de adaptarse a múltiples escenarios de seguridad, desde comercial hasta industrial, con capacidades avanzadas de IA y gestión de personal de seguridad.

La arquitectura modular basada en agentes permite seguir expandiendo el sistema según sea necesario, añadiendo nuevas capacidades y adaptándose a requisitos específicos de diferentes entornos de seguridad.



Plan de Implementación para Completar el Sistema
Me alegra que el sistema básico esté funcionando. Ahora vamos a elaborar un plan detallado para implementar las funcionalidades restantes:
1. Creación y Configuración de Agentes
Implementación necesaria:
Interfaz de creación de agentes: Formulario web para crear nuevos agentes especificando roles, comportamientos y parámetros
Sistema de plantillas: Biblioteca de plantillas de agentes predefinidos
Panel de configuración: Para ajustar parámetros de los agentes existentes
Monitoreo de agentes: Visualización del estado y rendimiento de los agentes
2. Sistema de Entrenamiento con Datasets Personalizados
Implementación necesaria:
Gestor de datasets: Interfaz para subir, etiquetar y organizar imágenes
Pipeline de entrenamiento: Sistema para entrenar modelos con los datasets
Validación y pruebas: Herramientas para verificar rendimiento de modelos
Exportación e implementación: Mecanismo para integrar nuevos modelos al sistema
3. Modo Industrial
Implementación necesaria:
Detector de EPP: Para identificar equipos de protección personal
Zonas de riesgo: Definición y monitoreo de áreas peligrosas
Detector de incendios/humo: Algoritmos especializados para detectar fuego
Reglas de seguridad industrial: Sistema para definir y verificar cumplimiento
Alertas específicas: Notificaciones adaptadas al contexto industrial
4. Seguridad del Sistema
Implementación necesaria:
Sistema de autenticación: Login/logout con niveles de acceso
Gestión de usuarios: Creación y administración de cuentas
Registro de actividad: Seguimiento de acciones de usuarios
Cifrado de datos sensibles: Protección de información crítica
Gestión de backups: Respaldo automático de configuraciones y datos
5. Sistema de Alertas Avanzado
Implementación necesaria:
Configuración de umbrales: Personalización de condiciones para disparar alertas
Enriquecimiento de alertas: Añadir contexto y recomendaciones
Canales múltiples: Email, SMS, WhatsApp, aplicación móvil
Escalamiento: Reglas para escalar alertas no atendidas
Programación: Activación/desactivación según horarios
6. Integración de Correo Electrónico
Implementación necesaria:
Configuración SMTP: Conexión con servidores de correo
Plantillas de mensajes: Diseño de correos para diferentes tipos de alertas
Gestión de destinatarios: Listas de correo según roles y responsabilidades
7. Configuración completa de WhatsApp
Implementación necesaria:
Webhook para respuestas: Recepción de comandos desde WhatsApp
Reglas de cooldown: Evitar spam de mensajes
Confirmación de recepción: Verificar que alertas fueron recibidas
Mensajes multimedia: Envío de imágenes, videos y ubicaciones
8. Otras Mejoras Importantes
Visualización avanzada:
Dashboard personalizable: Widgets configurables según necesidades
Reportes históricos: Análisis de eventos pasados
Heatmaps: Mapas de calor para visualizar zonas de actividad
Integración con sistemas externos:
APIs para otros sistemas: Integración con plataformas de terceros
Exportación de datos: Respaldo en la nube o sistemas corporativos
Integración con sistemas de control de acceso: Puertas, torniquetes, etc.
Performance:
Optimización para múltiples cámaras: Procesamiento distribuido
Caché inteligente: Reducir carga de procesamiento
Compresión adaptativa: Ajuste automático según ancho de banda
Hoja de Ruta Recomendada
Fase 1: Fundamentos (1-2 semanas)
Sistema de autenticación y seguridad
Configuración completa de alertas básicas
Integración de correo electrónico
Fase 2: IA Avanzada (2-3 semanas)
Sistema de entrenamiento con datasets
Creación y gestión de agentes
Mejora del sistema de detección
Fase 3: Modos especializados (2-3 semanas)
Modo industrial completo
Sistema de geocercas y seguimiento
Integración de WhatsApp bidireccional
Fase 4: Refinamiento (2-3 semanas)
UI/UX mejorada
Optimización de rendimiento
Documentación completa
4. Testing y depuración final


-------------------------------------------------------------------
Proximos pasos:

Estrategias de mejora para convertir VigIA en un sistema de seguridad integral
Para transformar tu sistema de vigilancia inteligente en una solución de seguridad completa y adaptable a diversos sectores, podemos implementar las siguientes tecnologías y técnicas:
1. Mejoras en Inteligencia Artificial y Análisis de Video

Redes neuronales transformers para análisis de video: Implementar arquitecturas como VideoSwin o ViViT que superan a los modelos tradicionales en comprensión contextual de escenas.
Aprendizaje por refuerzo para cámaras PTZ: Sistemas que aprendan automáticamente a controlar cámaras móviles para seguir objetos de interés, optimizando los ángulos de visión.
Análisis de comportamiento predictivo: Algoritmos que identifiquen patrones anómalos antes de que se conviertan en incidentes (merodeadores que evolucionan hacia intrusiones).
Reconocimiento de actividades complejas: Detección de interacciones sospechosas entre personas (intercambios, seguimientos, confrontaciones).
Análisis de multitudes y control de aforo: Detección de densidad de personas, comportamientos grupales anómalos y control preciso de ocupación.

2. Integración con Otros Sistemas de Seguridad

Integración con sistemas de control de acceso: Validación cruzada entre detecciones visuales y registros de acceso (tarjetas RFID, biometría).
Interfaz con sistemas de alarma e incendio: Respuesta coordinada ante emergencias, usando las cámaras para verificar alarmas.
Interconexión con BMS (Building Management Systems): Integración con sistemas de gestión de edificios para control holístico.
Comunicación con sistemas de televigilancia municipal: Para barrios y espacios públicos, habilitando coordinación con centros de monitoreo gubernamentales.
Integración con drones de vigilancia: Para inspección automática de perímetros extensos en respuesta a alertas.

3. Mejoras en Ciberseguridad

Cifrado de extremo a extremo: Para todas las comunicaciones y almacenamiento de video.
Firewalls de aplicación y análisis de tráfico anómalo: Protección contra intentos de intrusión en la red de cámaras.
Autenticación multifactor para acceso administrativo: Incrementar seguridad para evitar accesos no autorizados.
Federación de identidades y SSO: Para entornos corporativos con múltiples sistemas de gestión.
Sandboxing completo: Aislar componentes críticos en contenedores para prevenir compromiso total del sistema.

4. Arquitectura Distribuida y Redundante

Procesamiento de borde (Edge Computing): Desplegar capacidades de análisis en dispositivos perimetrales reduciendo latencia.
Arquitectura de microservicios containerizada: Facilitar el despliegue, la escalabilidad y el mantenimiento.
Malla de servicios (Service Mesh): Mejorar la comunicación entre componentes con descubrimiento, balanceo y resilencia.
Replicación geográfica: Múltiples centros de procesamiento para tolerancia a fallos regionales.
Infraestructura como código (IaC): Automatizar despliegues para mantener consistencia en todas las instalaciones.

5. Almacenamiento y Gestión de Datos

Sistemas de almacenamiento jerárquico: Combinar almacenamiento rápido para datos recientes con archivado económico para registros históricos.
Compresión inteligente basada en contenido: Ajustar dinámicamente la calidad del video según el contenido (mayor resolución donde hay personas).
Blockchain para cadena de custodia: Garantizar la integridad de evidencias mediante hashes almacenados en blockchain.
Gestión del ciclo de vida de la información: Políticas automatizadas para retención y eliminación conforme a regulaciones.
Data lake para análisis histórico: Permita análisis retrospectivos de patrones de seguridad a largo plazo.

6. Comunicaciones Avanzadas

Red 5G privada: Para transmisión de video de alta densidad con baja latencia.
Protocolos de malla inalámbrica: Para entornos donde el cableado es difícil o costoso.
Sistemas redundantes satelitales: Como respaldo para ubicaciones críticas o remotas.
WebRTC para transmisión P2P segura: Reducir carga en servidores centrales para visualización.
Comunicación interoperable con servicios de emergencia: Integración con estándares como CAP (Common Alerting Protocol).

7. Interfaces y Experiencia de Usuario

Realidad aumentada para personal de seguridad: Superponer información de amenazas sobre video en tiempo real para guardias.
Visualización geoespacial 3D: Para complejos industriales y campus grandes.
Gestión mediante comandos de voz: Interfaces conversacionales para operaciones manos-libres.
Dashboards personalizables por rol: Diferentes vistas para personal de seguridad, administración y emergencias.
Aplicaciones móviles seguras: Para monitoreo remoto y notificaciones.

8. Adaptaciones Específicas por Sector
Barrios y Edificios

Integración con intercomunicadores y porteros eléctricos
Reconocimiento de vehículos y residentes
Detección de visitantes recurrentes no registrados

Empresas

Monitoreo de áreas restringidas y clasificadas
Análisis de comportamiento en ubicaciones sensibles
Correlación con registros de actividad de los sistemas informáticos

Industrias

Detección de elementos de protección personal
Monitoreo de procedimientos de seguridad operacional
Detección de fugas, humo o condiciones peligrosas

Retail

Análisis de tráfico de clientes y mapas de calor
Detección de comportamientos de shoplifting
Integración con sistemas antihurto EAS

Gobierno

Verificación de identidad multinivel
Análisis forense avanzado
Controles de acceso por niveles de autorización

9. Inteligencia Situacional

Fusión de sensores heterogéneos: Combinar datos de cámaras, micrófonos, sensores ambientales y de movimiento.
Gemelos digitales de instalaciones: Modelos 3D interactivos para visualizar todos los aspectos de seguridad.
Análisis de amenazas basado en OSINT: Incorporar fuentes abiertas para contextualizar riesgos (eventos sociales, climatología).
Correlación temporal de eventos: Identificar patrones complejos que ocurren en secuencia a través de múltiples sensores.

10. Cumplimiento Normativo y Ético

Difuminado automático de rostros en áreas públicas: Para cumplir con GDPR y otras regulaciones de privacidad.
Sistema de trazabilidad de acceso a datos: Registro inmutable de quién accede a qué grabaciones y por qué motivo.
Auditoría automatizada de sesgos en IA: Verificación continua para evitar discriminación algorítmica.
Proporcionalidad configurable: Ajuste de la intensidad de monitoreo según el nivel de riesgo y requisitos legales.

Al implementar estas tecnologías y enfoques de manera modular, tu sistema VigIA podría convertirse en una plataforma de seguridad verdaderamente completa, aplicable a cualquier entorno y escalable según necesidades específicas. La clave estará en mantener la filosofía de diseño modular, permitiendo que cada cliente active solo los componentes relevantes para su caso de uso.


RESPUESTA:

Análisis de Viabilidad y Complejidad de las Mejoras Propuestas
Evaluación General
Las mejoras descritas en el PROJECT_README.md representan una visión ambiciosa y completa para un sistema de vigilancia de última generación. Evaluaré la viabilidad y complejidad de implementación para cada categoría principal:
1. Mejoras en IA y Análisis de Video
Viabilidad: Alta a Media
Complejidad: Media a Alta
Implementable a corto plazo:
Análisis de comportamiento predictivo básico
Reconocimiento de actividades simples
Control de aforo y análisis de densidad
Desafíos técnicos:
Las arquitecturas transformer para video (VideoSwin, ViViT) requieren GPU potentes
El aprendizaje por refuerzo para cámaras PTZ necesita un entorno de simulación antes de implementación real
2. Integración con Otros Sistemas de Seguridad
Viabilidad: Alta
Complejidad: Media
Implementable a corto plazo:
API REST para sistemas de control de acceso
Interfaz con sistemas de alarma estándar
Webhooks para notificaciones bidireccionales
Consideraciones:
Se requieren APIs documentadas de los sistemas externos
Necesitará protocolos de autenticación seguros
3. Mejoras en Ciberseguridad
Viabilidad: Alta
Complejidad: Media
Implementable a corto plazo:
Cifrado de datos en tránsito (HTTPS)
Autenticación multifactor
Firewalls básicos y reglas de acceso
Consideraciones:
El cifrado de extremo a extremo para video aumenta la carga computacional
La federación de identidades requiere infraestructura adicional
4. Arquitectura Distribuida
Viabilidad: Media
Complejidad: Alta
Implementable a corto plazo:
Contenedores Docker para componentes individuales
Balanceo de carga básico
Desafíos significativos:
Edge computing requiere hardware especializado
La arquitectura de microservicios completa necesita rediseño sustancial
5. Modo Industrial (Ya implementado parcialmente)
Viabilidad: Alta
Complejidad: Media-Baja
Ya implementado:
Detección de EPP
Análisis de posturas
Detección básica de fuego/humo
Próximos pasos viables:
Mejorar la precisión con modelos específicos
Añadir más reglas de seguridad industrial específicas por sector
Plan de Implementación Recomendado
Fase 1 (Corto plazo - 1-3 meses)
Perfeccionar el modo industrial existente:
Entrenamiento de modelos específicos para EPP con datos reales
Mejora de la interfaz de usuario para configuración de zonas
Generación de reportes automatizados
Mejoras de seguridad básicas:
Implementar HTTPS en toda la aplicación
Añadir autenticación multifactor
Cifrado de datos sensibles
Integración con sistemas básicos:
APIs para sistemas de control de acceso
Webhooks para alarmas
Fase 2 (Medio plazo - 3-6 meses)
Mejoras en IA:
Implementar análisis de comportamiento predictivo simple
Detección de actividades sospechosas básicas
Control de aforo y densidad de personas
Arquitectura distribuida inicial:
Dockerización de componentes
Mejora de la escalabilidad horizontal
Interfaces avanzadas:
Visualización geoespacial básica
Dashboards personalizables por rol
Fase 3 (Largo plazo - 6-12 meses)
IA avanzada:
Implementar modelos transformer para análisis de video
Aprendizaje por refuerzo para cámaras PTZ
Análisis forense avanzado
Arquitectura completa:
Edge computing para procesamiento en cámaras
Microservicios completos con service mesh
Replicación geográfica
Funcionalidades sectoriales:
Implementación de soluciones verticales específicas
Integración con sistemas gubernamentales
Consideraciones de Recursos
Para implementar estas mejoras se necesitaría:
1. Equipo de desarrollo:
2-3 desarrolladores backend (Python/Flask)
1-2 especialistas en ML/Computer Vision
1 especialista en seguridad informática
1 desarrollador frontend
Infraestructura:
Servidores con GPUs para entrenamiento de modelos
Almacenamiento escalable para videos
Entornos de staging y producción
3. Presupuesto aproximado:
Fase 1: $50,000 - $80,000
Fase 2: $100,000 - $150,000
Fase 3: $200,000 - $300,000
Conclusión
El proyecto tiene una base sólida con el modo industrial ya implementado. Es completamente viable implementar la mayoría de las mejoras propuestas, pero recomiendaría un enfoque por fases priorizando:
Primero: Perfeccionar lo existente y añadir seguridad básica
Segundo: Mejorar capacidades de IA e iniciar arquitectura distribuida
Tercero: Implementar características avanzadas y especializadas
El mayor desafío técnico está en la implementación de modelos de IA avanzados y la arquitectura distribuida completa, que requieren experiencia especializada y recursos computacionales significativos.

---------------

Próximos Pasos
Si encuentras errores adicionales en la aplicación, sería útil que los compartieras para poder abordarlos. Si deseas mejorar la robustez de la aplicación, podrías considerar:
Implementar más validaciones en las API
Mejorar el manejo de errores en las funciones principales
Agregar funcionalidad de registro más detallada para facilitar la depuración


Detector de asalto:

Datos e Información sobre el Sistema de Detección de Asaltos
Este agente implementa una funcionalidad avanzada para detectar posibles situaciones de asalto o robo, utilizando análisis de comportamiento:
Detección de múltiples comportamientos sospechosos:
Manos levantadas (indicador clásico de asalto a un banco o tienda)
Personas en el suelo (posibles rehenes o víctimas)
Movimientos bruscos/corriendo (huida o pánico)
Armas visibles
Rostros cubiertos (pasamontañas, máscaras)
Cambios súbitos en agrupaciones de personas (dispersión o concentración repentina)
Análisis multi-frame:
Mantiene un historial de detecciones para analizar comportamientos a lo largo del tiempo
Detecta cambios súbitos en el número de personas (indicador de pánico)
Evaluación ponderada de amenazas:
Asigna diferentes pesos a cada comportamiento sospechoso
Calcula un "nivel de amenaza" combinado
Aplica un multiplicador por combinación de factores (múltiples comportamientos sospechosos simultáneos son más alarmantes)
4. Sistema de alertas críticas:
Genera alertas de alta prioridad cuando se supera un umbral
Incluye capturas de imagen de la situación
Implementa un sistema de "cooldown" para evitar alertas repetitivas
3. Implementación práctica del detector
La implementación actual incluye algunos métodos que están "simulados" en esta versión. Para una implementación completa, estos métodos necesitarían:
Detección de manos levantadas:
Requeriría un modelo de estimación de poses (como OpenPose, MediaPipe o BlazePose)
Detectaría la posición relativa de las articulaciones de hombros, codos y muñecas
Detección de rostros cubiertos:
Requeriría un detector facial más avanzado
Analizaría la visibilidad de características faciales
Detección de movimiento rápido:
Implementaría seguimiento de objetos entre frames
Calcularía vectores de velocidad para cada persona detectada
En una implementación más avanzada, el sistema podría integrarse con otros modelos especializados o utilizar aprendizaje por refuerzo para mejorar la precisión de las detecciones con el tiempo.
4. Acceso a la configuración
La página de configuración del detector de asaltos ya está implementada y accesible en /assault-config. Desde allí, los usuarios pueden:
Activar/desactivar el detector
Ajustar el umbral de confianza
Seleccionar qué comportamientos sospechosos considerar
Configurar los destinatarios de alertas
Probar el detector

------------------------------
IMPORTANTE!!
Otras Mejoras Recomendadas
Para mejorar la robustez general del sistema, recomendaría implementar pruebas unitarias para los componentes clave, lo que ayudaría a detectar estos problemas antes de que aparezcan en producción.
También sería útil añadir comprobaciones de tipo en las funciones críticas para evitar errores inesperados cuando los datos no son del tipo esperado.

Evaluación del Estado Actual del Sistema y Pasos Pendientes
Estado de Implementación: 40% completado
Desglose por áreas principales:
| Área | Estado | Completitud |
|------|--------|-------------|
| Sistema base (cámaras, detección, interfaz) | Funcional | 80% |
| Detección de asaltos | Simulado, sin detección real de posturas | 30% |
| Modo industrial | Estructura básica implementada | 40% |
| Gestión de datasets y entrenamiento | Parcialmente implementado | 35% |
| Sistema de alertas avanzado | Estructura básica, falta refinamiento | 45% |
| Creación dinámica de agentes | Parcialmente implementado | 40% |
| Integración con IA externa | No implementado | 0% |
| Conexión WhatsApp | Estructura básica | 25% |
| Gestión geoespacial | No implementado | 0% |
| Robustez (pruebas, validaciones de tipo) | No implementado | 5% |
Próximos pasos críticos:
Implementar validación de tipos y manejo de errores (prioridad alta)
Esto reducirá significativamente los errores que estamos encontrando
Debería agregarse a todas las funciones públicas de las clases principales
Integrar detección real de poses humanas para el detector de asaltos
Reemplazar la simulación actual con un modelo real como MediaPipe
Esto permitiría probar la detección de manos levantadas con la webcam
3. Desarrollar pruebas unitarias para los componentes clave
Comenzar con AlertManager, CameraManager y el detector de asaltos
Implementar pruebas para los escenarios más críticos
Respuesta a tu pregunta sobre pruebas:
Actualmente, el sistema de detección de asaltos está simulado, por lo que no detectará realmente si levantas las manos frente a la webcam. Para implementar esta funcionalidad necesitamos:
Integrar una biblioteca de detección de poses como MediaPipe o BlazePose:
Modificar el método _detect_raised_hands en AssaultDetectionAgent para usar detección real:
3. Luego podrías probar el sistema activando la webcam y levantando las manos para ver si genera una alerta.



---------------------------------------------------

Estado actual del sistema
Basado en las interacciones, parece que hay un sistema de vigilancia inteligente con un módulo industrial que tiene varios problemas:
Problemas con la visualización de cámaras - No se puede ver el video en vivo de la cámara web
Configuración de zonas de peligro - No se pueden dibujar o editar áreas
Errores de configuración - Errores como 'IndustrialSafetyManager' object has no attribute 'fire_detection_enabled'
Alertas - Las alertas manuales parecen funcionar pero hay problemas con la detección automática
Integración con Bootstrap - Errores como "bootstrap is not defined"
Componentes principales
Para entender mejor el sistema, vamos a listar sus componentes principales:
app.py - El servidor Flask principal, con endpoints API para diversas funcionalidades
src/industrial_safety.py - Gestor de seguridad industrial que maneja configuraciones
src/industrial_safety_agent.py - Agente encargado de la detección de problemas de seguridad
4. src/alert_manager.py - Sistema para gestionar alertas
templates/industrial.html - Interfaz de usuario para configurar el modo industrial
Lo que está funcionando
Carga básica del sistema
Módulo de alertas manuales
Interfaz básica de usuario
Lo que no está funcionando
Visualización de video en vivo
Configuración de áreas de detección
Detección automática de incendios/EPP
Guardado de configuraciones
Plan para resolver los problemas
Necesitamos un enfoque sistemático para solucionar los problemas pendientes:
Visualización de cámaras: Implementar correctamente el streaming de video
Configuración de zonas: Asegurar que el canvas y sus eventos funcionan correctamente
Integración con Bootstrap: Verificar que todas las dependencias estén cargadas
Atributos de IndustrialSafetyManager: Asegurarnos de que todos los atributos necesarios estén definidos
Mejorar el manejo de errores: Para tener mejor información sobre lo que falla
Voy a crear un resumen completo con recomendaciones para el usuario.
</think>
Diagnóstico y Plan Completo del Sistema de Vigilancia Industrial
Vamos a hacer un repaso general del sistema, analizando lo que funciona, lo que falta, y cómo podemos mejorarlo.
Estado Actual del Sistema
Lo que está funcionando:
Inicialización básica del sistema
Interfaz general del módulo industrial
Sistema de alertas manuales
Configuraciones básicas en la interfaz
Visualización de estadísticas
Backend API para ciertas funcionalidades
Lo que NO está funcionando:
Visualización de video en vivo de las cámaras
Definición y guardado de zonas de peligro
Detección automática de incendios/EPP
Configuración efectiva de parámetros
Sistema de notificaciones emergentes
Arquitectura del Sistema
El sistema está compuesto por estos componentes principales:
Backend (Python/Flask):
app.py: Servidor principal con endpoints API
src/industrial_safety.py: Gestor de seguridad industrial
src/industrial_safety_agent.py: Agente encargado de la detección
src/alert_manager.py: Sistema para gestionar alertas
Frontend (HTML/JavaScript):
templates/industrial.html: Interfaz de usuario
Funcionalidades JavaScript para interactuar con APIs
Plan de Acción para Completar el Sistema
1. Visualización de Video en Vivo
2. Atributos Faltantes en IndustrialSafetyManager
3. Corregir la Funcionalidad de Zonas
La funcionalidad de creación de zonas requiere:
Un canvas que permita dibujar sobre la imagen de la cámara
JavaScript para manejar los eventos de dibujo
Almacenamiento de coordenadas en el backend
API para guardar y cargar zonas
Ya has implementado parte de esto, pero falta asegurarse de que el HTML contenga la estructura necesaria:
4. Debugging Mejorado
Para ayudar a identificar problemas específicos, agrega estas funciones de diagnóstico:
Resumen de Tareas Pendientes
Implementar visualización de video en vivo
Asegurarse de que camera-stream existe y recibe datos
Añadir manejo de errores en la carga de stream
Corregir configuración de zonas
Verificar estructura HTML para zonas
Asegurar que initZoneCanvas se ejecuta correctamente
Implementar guardado de zonas en backend
Arreglar configuración de detección de incendios
Asegurar que IndustrialSafetyManager tiene todos los atributos
Corregir endpoint /api/industrial/fire-detection/config
Mejorar sistema de alertas
Asegurar carga correcta de Bootstrap
Implementar mostrado de alertas en tiempo real
Testing integral
Probar cada componente individualmente
Verificar integración entre componentes
Recomendaciones Finales
Revisar errores en consola: Los errores específicos te dan pistas sobre qué está fallando
Implementar cambios gradualmente: Resuelve un problema a la vez y prueba
Verificar conexiones backend-frontend: Asegura que las API responden correctamente
Revisar nombres de variables: Asegúrate de que coincidan en frontend y backend
Con estas correcciones e implementaciones, deberías tener un sistema de vigilancia industrial completamente funcional, capaz de monitorear cámaras, detectar riesgos y gestionar alertas.

Visión General del Sistema de Vigilancia Inteligente
1. Arquitectura General del Sistema
Estructura Principal
El sistema está basado en una arquitectura modular y extensible con los siguientes componentes:
Sistema de Vigilancia Inteligente
├── Núcleo del Sistema (Core)
│   ├── Servidor Flask (app.py)
│   ├── Gestión de Hilos (threading.py)
│   └── API RESTful
├── Gestión de Cámaras
│   ├── Captura de Video (video_capture.py)
│   ├── Transmisión MJPEG/H264
│   └── Control PTZ (si aplica)
├── Framework MCP (Mission Control & Processing)
│   ├── Orquestador MCP
│   ├── Sistema de Agentes Inteligentes
│   └── Gestión de Prioridad de Tareas
├── Procesamiento de Imágenes
│   ├── Detección de Objetos (object_detector.py)
│   ├── Reconocimiento Facial (face_recognition.py)
│   ├── Análisis de Comportamientos (varios agentes)
│   └── Modelos de Machine Learning
├── Sistema de Alertas
│   ├── Gestor de Alertas (alert_manager.py)
│   ├── Notificaciones (WhatsApp, Email, etc.)
│   └── Histórico y Estadísticas
├── Interfaz de Usuario
│   ├── Dashboard Web
│   ├── Configuración del Sistema
│   ├── Visualización de Cámaras
│   └── Gestión de Alertas
└── Módulos Especializados
    ├── Modo Industrial (industrial_safety.py)
    ├── Detección de Asaltos (assault_detection_agent.py)
    ├── Análisis de Situaciones (situation_analysis_agent.py)
    └── Tracking Geográfico (geo_manager.py)



Flujo de Datos
Captura de Video: Las cámaras envían frames a video_capture.py
Procesamiento: Los frames son analizados por diversos detectores y agentes
Análisis: Los resultados de la detección son procesados por agentes especializados
Alertas: Las situaciones relevantes generan alertas en alert_manager.py
Notificaciones: Las alertas pueden activar notificaciones por varios canales
Visualización: Todo se muestra en el dashboard web en tiempo real
2. Sistema de Inteligencia Artificial
Framework MCP (Mission Control & Processing)
El corazón del sistema de IA es el framework MCP, un sistema propio basado en agentes con estas características:
Orquestador MCP: Gestiona el ciclo de vida de los agentes y coordina sus actividades
Agentes Inteligentes: Entidades autónomas especializadas en tareas específicas
Comunicación Entre Agentes: Sistema de mensajes para coordinación y colaboración
Priorización: Capacidad para asignar recursos según la importancia de las tareas
Tipos de Agentes Implementados
Agentes de Detección: Procesan imágenes buscando objetos o situaciones específicas
DetectionAgent: Agente genérico de detección de objetos
AssaultDetectionAgent: Especializado en detectar posibles asaltos
IndustrialSafetyAgent: Enfocado en riesgos industriales
Agentes de Análisis: Analizan resultados para identificar situaciones complejas
SituationAnalysisAgent: Utiliza IA externa para comprender escenarios complejos
FireDetectionAgent: Especializado en detectar incendios/humo
Agentes de Notificación: Gestionan la comunicación de alertas
AlertAgent: Gestiona el envío de alertas a través de la interfaz
WhatsAppAlertAgent: Especializado en enviar notificaciones por WhatsApp
Agentes de Gestión: Administran recursos del sistema
CameraAgent: Gestiona el estado y configuración de las cámaras
GuardTrackingAgent: Monitorea la posición geográfica de guardias
Sistema de Creación de Agentes
Existe un sistema inicial para crear nuevos agentes de forma dinámica:
AgentTemplateManager: Gestor de plantillas para crear nuevos agentes
Interfaz web para configurar parámetros básicos
Capacidad para asociar modelos de ML con agentes específicos
3. Sistema de Gestión de Cámaras
Fuentes de Video Compatibles
Cámaras IP (RTSP, HTTP, MJPEG)
Webcams USB
Archivos de video (para pruebas/simulación)
Transmisiones RTMP/HLS
Características de Gestión
Multihilo: Cada cámara funciona en su propio hilo para no bloquear el sistema
Auto-reconexión: Intentos automáticos de reconexión si se pierde la señal
Configuración Dinámica: Ajustes de resolución, FPS, etc. en tiempo real
Transmisión Adaptativa: Ajuste de calidad según disponibilidad de red
ROI (Regiones de Interés)
Definición de zonas específicas para análisis en cada cámara
Diferentes configuraciones de sensibilidad por zona
Reglas específicas asociadas a cada región
4. Modos Preconfigurados
El sistema ofrece varios modos predefinidos que ajustan todos los parámetros para escenarios específicos:
Modo Normal
Configuración estándar para vigilancia general
Detección de movimiento básica
Reconocimiento facial para control de acceso
Modo Comercial
Optimizado para tiendas y comercios
Detección de comportamientos sospechosos
Análisis de flujo de clientes
Alertas de intrusión fuera de horario
Modo Aeropuerto
Alta sensibilidad para grandes espacios
Reconocimiento facial avanzado
Detección de objetos abandonados
Seguimiento de personas específicas
Modo Residencial (Barrio Privado)
Enfocado en control de acceso
Detección de intrusiones perimetrales
Reconocimiento de vehículos
Alertas de comportamientos inusuales
Modo Industrial
Detección de equipos de protección personal (EPP)
Monitoreo de zonas peligrosas
Detección temprana de incendios
Cumplimiento de protocolos de seguridad
5. Machine Learning y Deep Learning
Modelos Implementados
1. Detección de Objetos: YOLOv5/v8 para identificar personas, vehículos, objetos
Reconocimiento Facial: Sistema basado en CNN para identificación de personas
Análisis Postural: Detección de posturas (manos levantadas, persona caída)
Detección de Anomalías: Identificación de comportamientos inusuales
5. Clasificación de Situaciones: Categorización de escenarios (normal, sospechoso, peligroso)
Sistema de Entrenamiento
Gestor de Datasets: Para crear conjuntos de datos personalizados
Herramientas de Etiquetado: Interfaz para clasificar y etiquetar imágenes
Procesos de Entrenamiento: Flujos automatizados para reentrenar modelos
Validación y Testing: Herramientas para evaluar el rendimiento de los modelos
Integración con IA Externa
Conectores para servicios como Claude, Google Gemini
Capacidad de análisis de alto nivel para situaciones complejas
Interpretación contextual avanzada mediante LLMs
6. Dashboard y Sistema de Alertas
Dashboard Principal
Visión general del estado del sistema
Monitoreo de cámaras activas
Estadísticas de detecciones y alertas
Controles rápidos para configuración
Visualización de Cámaras
Stream en vivo de múltiples cámaras
Superposición de detecciones y metadatos
Herramientas de zoom y control PTZ
Reproducción de eventos históricos
Sistema de Alertas
Alertas en Tiempo Real: Notificaciones inmediatas en dashboard
Clasificación por Severidad: Priorización de alertas (informativa, advertencia, crítica)
Filtros y Búsqueda: Herramientas para gestionar grandes volúmenes de alertas
Confirmación y Seguimiento: Workflow para atender y resolver alertas
Notificaciones
Integración WhatsApp: Envío de alertas y capturas por WhatsApp
Correo Electrónico: Resúmenes y alertas críticas
Notificaciones Push: Para aplicaciones móviles (planificado)
Integración con Sistemas Externos: APIs para conectar con otras plataformas
7. Estado Actual y Próximos Pasos
Estado de Implementación
| Módulo | Estado | Completitud |
|--------|--------|-------------|
| Sistema Base | Funcional | 85% |
| Gestión de Cámaras | Funcional | 80% |
| Framework MCP | Operativo | 70% |
| Detección de Objetos | Implementado | 75% |
| Reconocimiento Facial | Básico | 60% |
| Detección de Asaltos | Parcial | 40% |
| Modo Industrial | En desarrollo | 45% |
| Dashboard | Funcional | 70% |
| Sistema de Alertas | Operativo | 65% |
| Integración WhatsApp | Básica | 30% |
| Gestión Geoespacial | Inicial | 20% |
| IA Externa | Conceptual | 15% |
Próximos Desarrollos Prioritarios
Completar Modo Industrial
Finalizar visualización de cámaras en vivo
Implementar gestión de zonas de peligro
Mejorar detección de incendios y EPP
Mejorar Sistema de Agentes
Completar interfaz de creación dinámica de agentes
Implementar retroalimentación y aprendizaje continuo
Mejorar la coordinación entre agentes
Ampliar Capacidades de ML/DL
Implementar sistema completo de entrenamiento
Mejorar detección postural para identificar asaltos
Desarrollar modelos específicos para comportamientos sospechosos
Expandir Integración con Servicios Externos
Completar conexión con Claude/Gemini para análisis avanzado
Mejorar sistema de notificaciones WhatsApp
Implementar APIs para sistemas de terceros
Desarrollar Gestión Geoespacial
Completar sistema de seguimiento de guardias
Implementar geocercas y rutas
Integrar mapas interactivos en dashboard
8. Arquitectura Técnica
Stack Tecnológico
Backend: Python con Flask
Frontend: HTML5, JavaScript, Bootstrap
Base de Datos: SQLite (desarrollo), PostgreSQL (producción)
ML/DL: PyTorch, TensorFlow, OpenCV
Comunicación: RESTful APIs, WebSockets
Despliegue: Docker, opcionalmente Kubernetes

Diagrama de Componentes

                  ┌─────────────┐
                  │  Frontend   │
                  │  Dashboard  │
                  └──────┬──────┘
                         │
                         ▼
┌─────────────┐    ┌──────────────┐    ┌─────────────┐
│  Cámaras    │───▶│ Flask Server │◀───│ Servicios   │
│  y Sensores │    │    (API)     │    │ Externos    │
└─────────────┘    └──────┬───────┘    └─────────────┘
                         │
        ┌────────────────┼────────────────┐
        │                │                │
        ▼                ▼                ▼
┌─────────────┐    ┌──────────────┐    ┌─────────────┐
│ Detección y │    │ Framework MCP│    │ Sistema de  │
│ Análisis    │───▶│ (Orquestador)│───▶│ Alertas     │
└─────────────┘    └──────────────┘    └─────────────┘


9. Recomendaciones para el Desarrollo Futuro
Priorizar la Robustez
Implementar pruebas unitarias para componentes críticos
Mejorar manejo de errores y validación de tipos
Implementar capacidades de auto-recuperación
Enfoque Gradual en ML/DL
Comenzar con modelos simples bien ajustados
Implementar evaluación sistemática de precisión
Crear proceso para mejorar modelos con nuevos datos
Arquitectura Modular
Continuar el enfoque de módulos independientes
Documentar interfaces entre componentes
Facilitar la adición de nuevos agentes y funcionalidades
4. Escalabilidad
Diseñar para crecimiento en número de cámaras
Optimizar procesamiento para reducir carga de CPU/GPU
Considerar despliegue distribuido para grandes instalaciones
Esta visión general del sistema proporciona un mapa completo de la arquitectura actual, capacidades y direcciones futuras del sistema de vigilancia inteligente.

--------------------------------
Nueva estructura de proyecto

4. Verificar y actualizar la estructura de archivos del proyecto
Para asegurarnos de que todos los archivos estén en su lugar, aquí está la estructura de directorios del proyecto:


proyecto/
├── app.py
├── config/
│   ├── system_config.json
│   └── forensic/
├── data/
│   ├── videos/
│   └── forensic/
│       └── evidence/
├── src/
│   ├── assault_detection_agent.py
│   ├── camera_manager.py
│   ├── ensemble_detection_agent.py
│   ├── forensic_analysis.py
│   ├── generative_description_agent.py
│   ├── industrial_safety_agent.py
│   ├── mcp_framework.py
│   ├── object_detector.py
│   ├── operation_mode_router.py
│   ├── retail_security_agent.py
│   └── ... (otros archivos)
├── static/
│   ├── css/
│   ├── js/
│   └── img/
├── templates/
│   ├── advanced_settings.html
│   ├── base.html
│   ├── commercial.html
│   ├── dashboard.html
│   ├── forensic.html
│   ├── industrial.html
│   └── ... (otros templates)
├── tools/
│   └── test_ppe_detection.py
├── docs/
│   ├── TECHNICAL_DOCS.md
│   ├── TESTING_GUIDE.md
│   └── USER_GUIDE.md
├── requirements.txt
└── README.md


5. Instrucciones para ejecutar y probar el sistema
Una vez corregidos los errores, puedes iniciar el sistema con estos pasos:
Asegúrate de tener todas las dependencias instaladas:
2. Verifica que existan los directorios necesarios:
Inicia la aplicación:
Accede al sistema a través del navegador:
El sistema ahora incluye todas las nuevas funcionalidades:
IA generativa para descripciones
Ensemble de modelos para mayor precisión
Configuración avanzada personalizable
Análisis forense completo

   # Ejecutar en la terminal
   pip install -r requirements.txt

      mkdir -p config/forensic data/videos data/forensic/evidence

         ls src/

            python app.py


-------------------------------------------

DATOS GENERALES:

Resumen Tecnológico del Sistema de Vigilancia IA
1. Tecnologías Principales
Backend
Python: Lenguaje principal del sistema
Flask: Framework web para la API REST y servidor web
Blueprints de Flask: Para organización modular de rutas (main_bp, api_bp)
Jinja2: Motor de plantillas para renderizar HTML
Base de Datos
SQLAlchemy: ORM (Object-Relational Mapping) para interactuar con la base de datos
SQLite: Base de datos por defecto para almacenamiento (configurable para otros sistemas)
Modelos de datos: Camera, Alert, DetectionEvent para gestionar entidades del sistema
Procesamiento de Imágenes
OpenCV (cv2): Biblioteca principal para captura de video, procesamiento de imágenes y detección
Múltiples backends de cámaras: MSMF (Media Foundation), DirectShow, Video for Windows
2. Módulos del Sistema
Módulo de Cámaras
Sistema de gestión de cámaras: Permite configurar, monitorear y administrar cámaras IP, RTSP y webcams
Detección dinámica de interfaces: Intenta automáticamente diferentes métodos de conexión a cámaras
Streaming en tiempo real: Captura y transmisión de video mediante HTTP streaming
Módulo de Detección y AI
Detectores avanzados: Integración con sistemas de IA para detección
Tipos de detección:
Detección de poses (personas)
Reconocimiento facial
Detección de incendios/humo
Detección de agua/inundaciones
Procesamiento asíncrono: Sistema de colas para análisis en segundo plano
Módulo de Alertas
Sistema de notificaciones: Generación y gestión de alertas en tiempo real
Clasificación por severidad: Alertas críticas, altas, medias, bajas
Gestión del ciclo de vida: Creación, notificación, resolución de alertas
Módulo de Diagnósticos
Monitoreo de recursos: CPU, memoria, disco usando psutil
Diagnóstico de cámaras: Pruebas de conectividad y rendimiento
Monitoreo de red: Análisis de tráfico y estado de la red
Herramientas forenses: Análisis post-evento y recuperación de datos
Módulo de Configuración
Gestión centralizada: Interfaz para todos los parámetros del sistema
Perfiles de operación: Modos normal, mejorado, crítico y bajo consumo
Integración con APIs externas: Configuración para WhatsApp, Telegram, Email, SMS
3. Arquitectura y Patrones
Arquitectura del Sistema
Arquitectura modular: Componentes independientes y reutilizables
Patrón MVC: Separación de modelo, vista y controlador
API RESTful: Interfaces programáticas para integración con otros sistemas
Blueprints de Flask: Organización de rutas por funcionalidad
Gestión de Datos
Modelos relacionales: Estructura de datos normalizada
Operaciones CRUD: Creación, lectura, actualización y eliminación de entidades
Migraciones: Esquema de base de datos actualizable
4. Interfaz de Usuario
Frontend
HTML5/CSS3: Estructura y estilos modernos
JavaScript: Interactividad del lado del cliente
Jinja2 Templates: Renderizado de vistas dinámicas
Diseño responsivo: Adaptación a diferentes tamaños de pantalla
Componentes reutilizables: Sistema modular de componentes de UI
Elementos UI
Dashboard: Visualización centralizada del estado del sistema
Monitoreo en tiempo real: Visualización de cámaras y alertas
Gestor de cámaras: Configuración y control
Centro de alertas: Gestión y visualización de alertas
Diagnósticos y estadísticas: Monitoreo de recursos y rendimiento
Panel de configuración: Ajustes del sistema
5. Integraciones y APIs
APIs Externas
Servicios de mensajería: WhatsApp, Telegram, Email, SMS
Servicios cloud: Google Cloud, Firebase
OpenAI: Integración para análisis inteligente
Home Assistant/Zoneminder: Integración con sistemas de domótica
Seguridad
Gestión de claves API: Almacenamiento seguro de credenciales
Verificación de endpoints: Validación de solicitudes
Registro de actividad: Logging detallado de acciones del sistema
6. Utilidades y Herramientas
Utilidades del Sistema
Logging avanzado: Registro multinivel de eventos y errores
Manejo de excepciones: Captura y gestión centralizada de errores
Creación de directorios: Gestión automática de estructura de archivos
Gestión de recursos: Control de memoria y CPU
Herramientas de Desarrollo
Infraestructura para pruebas: Endpoints de prueba para validación
Datos de demostración: Inicialización automática para desarrollo
Funciones de diagnóstico: Herramientas para depuración
7. Modo de Operación
El sistema implementa diferentes modos de operación que pueden ser configurados según las necesidades:
Modo normal: Equilibrio entre funcionalidad y uso de recursos
Modo mejorado: Mayor sensibilidad y procesamiento avanzado
Modo bajo consumo: Operación con recursos mínimos
Modo crítico: Máxima sensibilidad para situaciones de emergencia
Cada módulo del sistema puede adaptarse a estos modos, ajustando parámetros como frecuencia de muestreo, sensibilidad de detección y consumo de recursos.
---
Este sistema integra tecnologías modernas de procesamiento de imágenes, IA y desarrollo web para crear una plataforma completa de vigilancia inteligente, adaptable a diversos entornos y necesidades de seguridad.

--------------------------------------------------------------------------------

📄 app.log (ERROR AL LEER: 'utf-8' codec can't decode byte 0xf3 in position 57: invalid continuation byte)

📄 app.py
--------------------------------------------------------------------------------
from flask import Flask, send_from_directory, render_template, g
from src.database import db
from src.utils.logger import setup_logging
from src.utils.error_handler import register_error_handlers
import os
from datetime import datetime

def create_app():
app = Flask(__name__)

    # Configuración
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev_key_change_in_production')
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get(
        'DATABASE_URL', 'sqlite:///app.db'
    )
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Inicializar extensiones
    db.init_app(app)
    
    # Configurar logging
    logger = setup_logging(app)
    
    # Registrar manejadores de error
    register_error_handlers(app)
    
    # Registrar funciones para usar en todas las plantillas
    @app.context_processor
    def utility_processor():
        return {'now': datetime.now}
    
    # Registrar filtro de fecha personalizado
    @app.template_filter('date')
    def format_date(value):
        if isinstance(value, str):
            try:
                value = datetime.fromisoformat(value)
except:
                return value
        if isinstance(value, datetime):
            return value.strftime('%d/%m/%Y %H:%M')
        return str(value)
    
    # Registrar blueprints (rutas)
    from src.routes.main import main_bp
    from src.routes.api import api_bp
    
    app.register_blueprint(main_bp)
    app.register_blueprint(api_bp, url_prefix='/api')
    
    # Crear tablas en la primera ejecución
    with app.app_context():
        db.create_all()
        logger.info("Tablas de base de datos creadas/verificadas")
        
        # Inicializar datos de demostración si estamos en modo debug
        if app.debug:
            from src.utils.init_db import initialize_demo_data
            initialize_demo_data()
            logger.info("Datos de demostración inicializados")
    
    # Crear directorio para capturas de test si no existe
    test_captures_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'test_captures')
    if not os.path.exists(test_captures_dir):
        os.makedirs(test_captures_dir)
    
    # Permitir servir archivos de capturas de test
    @app.route('/test_captures/<path:filename>')
    def test_captures(filename):
        return send_from_directory('test_captures', filename)
    
    # Crear otros directorios necesarios
    directories = ['snapshots', 'recordings', 'alert_captures']
    for directory in directories:
        dir_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), directory)
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
            logger.info(f"Directorio creado: {directory}")
    
    # Crear directorios necesarios al iniciar la aplicación
    def create_directories_function(app):
        """Crea los directorios necesarios para la aplicación"""
        directories = [
            'snapshots', 
            'recordings', 
            'alert_captures', 
            'detection_snapshots',
            'test_captures'
        ]
        for directory in directories:
            if not os.path.exists(directory):
                os.makedirs(directory)
                app.logger.info(f"Directorio creado: {directory}")

    create_directories_function(app)
    
    # Servir archivos de capturas y grabaciones
    @app.route('/detection_snapshots/<path:filename>')
    def detection_snapshots(filename):
        return send_from_directory('detection_snapshots', filename)

    @app.route('/recordings/<path:filename>')
    def recordings(filename):
        return send_from_directory('recordings', filename)

    @app.route('/snapshots/<path:filename>')
    def snapshots(filename):
        return send_from_directory('snapshots', filename)

    @app.route('/alert_captures/<path:filename>')
    def alert_captures(filename):
        return send_from_directory('alert_captures', filename)
    
    # Asegurarse de que el directorio de diagnóstico existe
    @app.route('/diagnostics/<path:filename>')
    def diagnostics(filename):
        diagnostics_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'diagnostics')
        if not os.path.exists(diagnostics_dir):
            os.makedirs(diagnostics_dir)
        return send_from_directory('diagnostics', filename)
    
    @app.route('/camera/testing')
    def camera_testing():
        """Página de prueba de detectores en tiempo real"""
        return render_template('camera_testing.html')
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(host='0.0.0.0', port=5000, debug=True)


--------------------------------------------------------------------------------

📄 arquitectura.txt
--------------------------------------------------------------------------------
graph TD
    A[Frontend Web] --> B[API REST]
    B --> C[Gestor de Configuración]
    B --> D[Gestor de Cámaras]
    B --> E[Gestor de Alertas]
    B --> F[Gestor de Modos de Operación]
    
    C --> G[Base de Datos]
    D --> H[Procesador de Video]
    E --> I[Sistema de Notificaciones]
    F --> J[Perfiles Predefinidos]
    
    H --> K[Detección de Movimiento]
    H --> L[Reconocimiento Facial]
    H --> M[Análisis de Comportamiento]
    H --> N[Detección de Objetos]
    
    I --> O[Alertas WhatsApp]
    I --> P[Email]
    I --> Q[Activación de Dispositivos]
    
    J --> R[Modo Barrio Privado]
    J --> S[Modo Aeropuerto]
    J --> T[Modo Comercial]
    J --> U[Modo Personalizado]

--------------------------------------------------------------------------------

📄 create_project_structure.ps1
--------------------------------------------------------------------------------
# Crear directorios principales
$directories = @(
    "config",
    "data/face",
    "data/motion", 
    "data/objects",
    "data/loitering",
    "models",
    "logs",
    "src",
    "static",
    "templates"
)

foreach ($dir in $directories) {
    New-Item -ItemType Directory -Path $dir -Force
}

# Crear archivos Python y HTML
$files = @{
    "src/motion_detector.py" = @"
import cv2
import numpy as np

class MotionDetector:
    def __init__(self):
        self.background_subtractor = cv2.createBackgroundSubtractorMOG2()
        
    def detect_motion(self, frame):
        # Aplicar sustracción de fondo
        fg_mask = self.background_subtractor.apply(frame)
        return fg_mask
"@

    "src/agent_manager.py" = @"
class AgentManager:
    def __init__(self):
        self.agents = {}
        
    def register_agent(self, agent_id, agent_type):
        self.agents[agent_id] = {
            'type': agent_type,
            'status': 'inactive'
        }
        
    def activate_agent(self, agent_id):
        if agent_id in self.agents:
            self.agents[agent_id]['status'] = 'active'
"@

    "src/alert_manager.py" = @"
class AlertManager:
    def __init__(self):
        self.subscribers = []
        
    def add_subscriber(self, subscriber):
        self.subscribers.append(subscriber)
        
    def send_alert(self, message, level='info'):
        for subscriber in self.subscribers:
            subscriber.notify(message, level)
"@

    "src/camera_manager.py" = @"
class CameraManager:
    def __init__(self):
        self.cameras = {}
        
    def add_camera(self, camera_id, stream_url):
        self.cameras[camera_id] = {
            'url': stream_url,
            'status': 'offline'
        }
        
    def start_camera(self, camera_id):
        if camera_id in self.cameras:
            self.cameras[camera_id]['status'] = 'online'
"@

    "src/operation_mode.py" = @"
class OperationMode:
    def __init__(self):
        self.current_mode = 'normal'
        self.available_modes = ['normal', 'training', 'maintenance']
        
    def set_mode(self, mode):
        if mode in self.available_modes:
            self.current_mode = mode
            return True
        return False
"@

    "src/model_trainer.py" = @"
class ModelTrainer:
    def __init__(self):
        self.model = None
        self.training_data = []
        
    def add_training_data(self, data, label):
        self.training_data.append((data, label))
        
    def train_model(self):
        if len(self.training_data) > 0:
            # Implementar lógica de entrenamiento
            pass
"@

    "src/training_api.py" = @"
from flask import Blueprint, request, jsonify

training_bp = Blueprint('training', __name__)

@training_bp.route('/train', methods=['POST'])
def train_model():
    return jsonify({'status': 'success'})

@training_bp.route('/status', methods=['GET'])
def get_training_status():
    return jsonify({'status': 'ready'})
"@

    "app.py" = @"
from flask import Flask, render_template
from src.training_api import training_bp

app = Flask(__name__)
app.register_blueprint(training_bp, url_prefix='/api/training')

@app.route('/')
def index():
    return render_template('base.html')

if __name__ == '__main__':
    app.run(debug=True)
"@

    "templates/base.html" = @"
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Vigilancia</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="{{ url_for('index') }}">Inicio</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        {% block content %}
        {% endblock %}
    </main>
    
    <footer>
        <p>&copy; 2024 Sistema de Vigilancia</p>
    </footer>
</body>
</html>
"@
}

# Crear los archivos con el contenido
foreach ($file in $files.Keys) {
    $content = $files[$file]
    New-Item -ItemType File -Path $file -Force
    Set-Content -Path $file -Value $content
}

Write-Host "¡Estructura del proyecto creada exitosamente!"

--------------------------------------------------------------------------------

📄 docker-compose.yml
--------------------------------------------------------------------------------
version: '3.8'

services:
  app:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    depends_on:
      - db
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/surveillance
      - PYTHONUNBUFFERED=1
    
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=surveillance
    ports:
      - "5432:5432"

volumes:
  postgres_data: 

--------------------------------------------------------------------------------

📄 extract_system_info.py
--------------------------------------------------------------------------------
import os
import time
import datetime
import shutil
from pathlib import Path

def get_files_sorted_by_time(directory, exclude_dirs=None, exclude_patterns=None):
    """Obtiene los archivos ordenados por tiempo de modificación (más reciente primero)"""
    if exclude_dirs is None:
        exclude_dirs = ['.git', '__pycache__', '.venv', 'venv', 'vigilai_env', 'node_modules']
    
    if exclude_patterns is None:
        exclude_patterns = [
            'vigilai_env/Lib', 'vigilai_env\\Lib',
            '.venv/Lib', '.venv\\Lib',
            'venv/Lib', 'venv\\Lib',
            'site-packages', 'dist-packages',
            'pip/_vendor', 'pip\\_vendor'
        ]
    
    file_list = []
    for root, dirs, files in os.walk(directory):
        # Excluir directorios no deseados
        dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
        
        # Excluir si la ruta coincide con algún patrón a excluir
        if should_exclude_path(root, exclude_patterns):
            dirs[:] = []  # No explorar subdirectorios
            continue
            
        for file in files:
            file_path = os.path.join(root, file)
            try:
                mod_time = os.path.getmtime(file_path)
                file_list.append((file_path, mod_time))
            except Exception as e:
                print(f"Error al acceder a {file_path}: {e}")
    
    # Ordenar por tiempo de modificación (más reciente primero)
    file_list.sort(key=lambda x: x[1], reverse=True)
    return file_list

def format_datetime(timestamp):
    """Formatea una marca de tiempo en una fecha legible"""
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

def get_file_extension(file_path):
    """Retorna la extensión del archivo"""
    _, ext = os.path.splitext(file_path)
    return ext.lower()

def is_binary_file(file_path):
    """Verifica si un archivo es binario basado en su extensión"""
    binary_extensions = ['.pyc', '.png', '.jpg', '.jpeg', '.gif', '.pdf', '.zip', 
                         '.tar', '.gz', '.exe', '.dll', '.so', '.bin', '.dat', 
                         '.mp3', '.mp4', '.avi', '.mov', '.sqlite', '.db']
    return get_file_extension(file_path) in binary_extensions

def should_exclude_directory(root, exclude_dirs):
    """Determina si un directorio debe ser excluido basado en nombres de directorios"""
    for exclude_dir in exclude_dirs:
        if exclude_dir in root.split(os.sep):
            return True
    return False

def should_exclude_path(path, exclude_patterns):
    """Determina si una ruta debe ser excluida basado en patrones"""
    # Normalizar slashes para que funcione en cualquier SO
    normalized_path = path.replace('\\', '/').lower()
    
    for pattern in exclude_patterns:
        pattern = pattern.lower().replace('\\', '/')
        if pattern in normalized_path:
            return True
    return False

def generate_system_report(project_dir, output_file, recent_files_count=20):
    """Genera un informe completo del sistema"""
    # Directorios a excluir
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    # Patrones de ruta a excluir
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor',
        'python3', 'python2',
        'bin/python', 'Scripts'
    ]
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # Encabezado del informe
        f.write("=" * 80 + "\n")
        f.write(f"INFORME DEL SISTEMA DE VIGILANCIA IA\n")
        f.write(f"Generado el {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 80 + "\n\n")
        
        # Sección 1: Estructura del directorio
        f.write("1. ESTRUCTURA DEL PROYECTO\n")
        f.write("=" * 80 + "\n\n")
        
        # Recorrer y mostrar la estructura de directorios
        for root, dirs, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
            
            # Saltar este directorio si debe ser excluido
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                dirs[:] = []  # No explorar subdirectorios
                continue
            
            level = root.replace(project_dir, '').count(os.sep)
            indent = ' ' * 4 * level
            rel_path = os.path.relpath(root, project_dir)
            if rel_path == '.':
                f.write(f"{indent}📁 /\n")
            else:
                f.write(f"{indent}📁 {os.path.basename(root)}/\n")
            
            sub_indent = ' ' * 4 * (level + 1)
            for file in sorted(files):
                if not file.startswith('.'):
                    f.write(f"{sub_indent}📄 {file}\n")
        
        f.write("\n\n")
        
        # Sección 2: Archivos recientes
        f.write("2. ÚLTIMOS ARCHIVOS MODIFICADOS\n")
        f.write("=" * 80 + "\n\n")
        
        recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:recent_files_count]
        for file_path, mod_time in recent_files:
            rel_path = os.path.relpath(file_path, project_dir)
            f.write(f"📄 {rel_path}\n")
            f.write(f"   Última modificación: {format_datetime(mod_time)}\n\n")
        
        f.write("\n\n")
        
        # Sección 3: Contenido de los archivos
        f.write("3. CONTENIDO DE LOS ARCHIVOS\n")
        f.write("=" * 80 + "\n\n")
        
        for root, _, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
            
            for file in sorted(files):
                if file.startswith('.') or file == output_file:
                    continue
                
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, project_dir)
                
                if is_binary_file(file_path):
                    f.write(f"📄 {rel_path} (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)\n\n")
                    continue
                
                try:
                    # Intentar leer el archivo
                    with open(file_path, 'r', encoding='utf-8') as source_file:
                        content = source_file.read()
                        
                    f.write(f"📄 {rel_path}\n")
                    f.write("-" * 80 + "\n")
                    f.write(content)
                    f.write("\n\n")
                    f.write("-" * 80 + "\n\n")
                except Exception as e:
                    f.write(f"📄 {rel_path} (ERROR AL LEER: {str(e)})\n\n")
        
        # Sección 4: Resumen final
        f.write("4. RESUMEN DEL SISTEMA\n")
        f.write("=" * 80 + "\n\n")
        
        # Contar archivos por tipo
        file_types = {}
        total_files = 0
        total_lines = 0
        
        for root, _, files in os.walk(project_dir):
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
                
            for file in files:
                if file.startswith('.'):
                    continue
                    
                file_path = os.path.join(root, file)
                ext = get_file_extension(file_path)
                
                if ext not in file_types:
                    file_types[ext] = 0
                file_types[ext] += 1
                total_files += 1
                
                if not is_binary_file(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as source_file:
                            lines = len(source_file.readlines())
                            total_lines += lines
                    except:
                        pass
        
        f.write(f"Total de archivos: {total_files}\n")
        f.write(f"Total de líneas de código (aproximado): {total_lines}\n\n")
        
        f.write("Distribución por tipo de archivo:\n")
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
            if ext == '':
                ext = '(sin extensión)'
            f.write(f"  {ext}: {count} archivos\n")

if __name__ == "__main__":
    # Directorio del proyecto (directorio actual)
    project_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Nombre del archivo de salida
    output_file = os.path.join(project_dir, "resumen.txt")
    
    print(f"Generando informe del sistema en: {output_file}")
    print(f"Excluyendo entornos virtuales y sus librerías...")
    generate_system_report(project_dir, output_file)
    print(f"Informe completado. El archivo generado tiene un tamaño de: {os.path.getsize(output_file) / (1024*1024):.2f} MB")
    
    # Crear una copia adicional con los últimos 10 archivos modificados
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor'
    ]
    
    recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:10]
    recent_files_dir = os.path.join(project_dir, "ultimos_archivos_modificados")
    
    # Crear directorio si no existe
    if not os.path.exists(recent_files_dir):
        os.makedirs(recent_files_dir)
    
    # Copiar los archivos más recientes
    for file_path, _ in recent_files:
        if os.path.exists(file_path):
            # Crear estructura de directorios si es necesario
            rel_path = os.path.relpath(file_path, project_dir)
            dest_path = os.path.join(recent_files_dir, rel_path)
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
            
            # Copiar el archivo
            try:
                shutil.copy2(file_path, dest_path)
                print(f"Copiado: {rel_path}")
            except Exception as e:
                print(f"Error al copiar {rel_path}: {e}")
    
    print(f"Se han copiado los {len(recent_files)} archivos más recientes a: {recent_files_dir}") 

--------------------------------------------------------------------------------

📄 init_config.ps1
--------------------------------------------------------------------------------
# Crear directorio de configuración si no existe
New-Item -Path "config\active_models" -ItemType Directory -Force

# Configuración principal del sistema
$systemConfig = @{
  "app_name" = "Sistema de Vigilancia Inteligente"
  "cameras" = @()
  "current_mode" = "normal"
  "available_modes" = @("normal", "barrio_privado", "aeropuerto", "comercial")
  "auto_start" = $false
}
$systemConfig | ConvertTo-Json | Out-File -FilePath "config\system_config.json" -Encoding utf8

# Configuración de modos de operación
$modesConfig = @{
  "normal" = @{
    "description" = "Modo estándar con detección básica de movimiento"
    "agents" = @{
      "motion_detection" = @{
        "enabled" = $true
        "min_area" = 500
        "threshold" = 25
      }
      "facial_recognition" = @{
        "enabled" = $false
      }
      "object_detection" = @{
        "enabled" = $false
      }
      "loitering_detection" = @{
        "enabled" = $false
      }
    }
    "alerts" = @{
      "motion_detection" = @{
        "enabled" = $true
        "cooldown" = 30
      }
      "face_recognition" = @{
        "enabled" = $false
      }
      "object_detection" = @{
        "enabled" = $false
      }
      "loitering_detection" = @{
        "enabled" = $false
      }
    }
    "notifications" = @{
      "email" = $false
      "whatsapp" = $false
      "telegram" = $false
      "webhook" = $false
      "hardware" = $false
    }
  }
  "barrio_privado" = @{
    "description" = "Configuración para seguridad en barrios privados"
    "agents" = @{
      "motion_detection" = @{
        "enabled" = $true
        "min_area" = 1000
        "threshold" = 30
      }
      "facial_recognition" = @{
        "enabled" = $true
      }
      "object_detection" = @{
        "enabled" = $false
      }
      "loitering_detection" = @{
        "enabled" = $true
        "loitering_threshold" = 60
      }
    }
    "alerts" = @{
      "motion_detection" = @{
        "enabled" = $true
        "cooldown" = 60
      }
      "face_recognition" = @{
        "enabled" = $true
        "cooldown" = 120
      }
      "object_detection" = @{
        "enabled" = $false
      }
      "loitering_detection" = @{
        "enabled" = $true
        "cooldown" = 90
      }
    }
    "notifications" = @{
      "email" = $true
      "whatsapp" = $true
      "telegram" = $false
      "webhook" = $false
      "hardware" = $true
    }
  }
  "aeropuerto" = @{
    "description" = "Configuración para seguridad en aeropuertos"
    "agents" = @{
      "motion_detection" = @{
        "enabled" = $true
        "min_area" = 300
        "threshold" = 20
      }
      "facial_recognition" = @{
        "enabled" = $true
      }
      "object_detection" = @{
        "enabled" = $true
        "stationary_frames" = 30
      }
      "loitering_detection" = @{
        "enabled" = $true
        "loitering_threshold" = 120
      }
    }
    "alerts" = @{
      "motion_detection" = @{
        "enabled" = $false
        "cooldown" = 30
      }
      "face_recognition" = @{
        "enabled" = $true
        "cooldown" = 60
      }
      "object_detection" = @{
        "enabled" = $true
        "cooldown" = 30
      }
      "loitering_detection" = @{
        "enabled" = $true
        "cooldown" = 60
      }
    }
    "notifications" = @{
      "email" = $true
      "whatsapp" = $true
      "telegram" = $true
      "webhook" = $true
      "hardware" = $true
    }
  }
  "comercial" = @{
    "description" = "Configuración para comercios y tiendas"
    "agents" = @{
      "motion_detection" = @{
        "enabled" = $true
        "min_area" = 400
        "threshold" = 25
      }
      "facial_recognition" = @{
        "enabled" = $true
      }
      "object_detection" = @{
        "enabled" = $true
        "stationary_frames" = 100
      }
      "loitering_detection" = @{
        "enabled" = $true
        "loitering_threshold" = 300
      }
    }
    "alerts" = @{
      "motion_detection" = @{
        "enabled" = $true
        "cooldown" = 120
      }
      "face_recognition" = @{
        "enabled" = $true
        "cooldown" = 300
      }
      "object_detection" = @{
        "enabled" = $true
        "cooldown" = 180
      }
      "loitering_detection" = @{
        "enabled" = $true
        "cooldown" = 180
      }
    }
    "notifications" = @{
      "email" = $true
      "whatsapp" = $true
      "telegram" = $false
      "webhook" = $false
      "hardware" = $true
    }
  }
}
$modesConfig | ConvertTo-Json -Depth 10 | Out-File -FilePath "config\modes_config.json" -Encoding utf8

# Configuración de detección de movimiento
$detectionConfig = @{
  "min_area" = 500
  "threshold" = 25
  "blur_size" = 21
  "dilate_iterations" = 2
  "detection_cooldown" = 1
  "exclusion_zones" = @()
  "inclusion_zones" = @()
}
$detectionConfig | ConvertTo-Json | Out-File -FilePath "config\detection_config.json" -Encoding utf8

# Configuración de agentes de IA
$agentsConfig = @{
  "agents" = @{
    "motion_detection" = $true
    "facial_recognition" = $false
    "object_detection" = $false
    "loitering_detection" = $false
  }
  "agent_config" = @{
    "facial_recognition" = @{
      "known_faces_file" = "config/known_faces.json"
    }
    "object_detection" = @{
      "stationary_frames" = 50
    }
    "loitering_detection" = @{
      "loitering_threshold" = 60
    }
  }
}
$agentsConfig | ConvertTo-Json -Depth 5 | Out-File -FilePath "config\agents_config.json" -Encoding utf8

# Configuración de alertas
$alertsConfig = @{
  "enabled_notifiers" = @{
    "email" = $false
    "whatsapp" = $false
    "telegram" = $false
    "webhook" = $false
    "hardware" = $false
  }
  "notifier_config" = @{
    "email" = @{
      "smtp_server" = "smtp.gmail.com"
      "smtp_port" = 587
      "username" = ""
      "password" = ""
      "recipients" = @()
    }
    "whatsapp" = @{
      "api_key" = ""
      "phone_numbers" = @()
    }
    "telegram" = @{
      "bot_token" = ""
      "chat_ids" = @()
    }
    "webhook" = @{
      "url" = ""
      "auth_token" = ""
    }
    "hardware" = @{
      "gpio_enabled" = $false
      "gpio_pin" = 17
      "serial_enabled" = $false
      "serial_port" = "COM1"
      "serial_baud" = 9600
    }
  }
  "alert_types" = @{
    "motion_detection" = @{
      "enabled" = $true
      "cooldown" = 30
      "send_image" = $true
      "description" = "Movimiento detectado"
    }
    "face_recognition" = @{
      "enabled" = $true
      "cooldown" = 60
      "send_image" = $true
      "description" = "Rostro detectado"
    }
    "object_detection" = @{
      "enabled" = $true
      "cooldown" = 60
      "send_image" = $true
      "description" = "Objeto abandonado detectado"
    }
    "loitering_detection" = @{
      "enabled" = $true
      "cooldown" = 60
      "send_image" = $true
      "description" = "Actividad sospechosa detectada"
    }
  }
}
$alertsConfig | ConvertTo-Json -Depth 5 | Out-File -FilePath "config\alerts_config.json" -Encoding utf8

# Configuración de cámaras
@() | ConvertTo-Json | Out-File -FilePath "config\cameras_config.json" -Encoding utf8

# Rostros conocidos (para reconocimiento facial)
@{} | ConvertTo-Json | Out-File -FilePath "config\known_faces.json" -Encoding utf8

Write-Output "Archivos de configuración inicializados correctamente en la carpeta config\"

--------------------------------------------------------------------------------

📄 requirements-ai.txt
--------------------------------------------------------------------------------
# IA y ML
torch==2.0.0
torchvision==0.15.0
torchaudio==2.0.0
tensorflow==2.12.0
transformers==4.29.0
nltk==3.8.1
onnxruntime==1.14.1 

--------------------------------------------------------------------------------

📄 requirements-extras.txt
--------------------------------------------------------------------------------
# Extras
reportlab==3.6.12
fpdf==1.7.2
deepdiff==6.3.0
anthropic==0.5.0
google-generativeai==0.1.0
pytest==7.4.0
pytest-cov==4.1.0
alembic==1.11.1
geopy==2.2.0
folium==0.12.1
gunicorn==21.2.0 

--------------------------------------------------------------------------------

📄 requirements.txt
--------------------------------------------------------------------------------
# Dependencias principales
Flask==2.3.3
SQLAlchemy==2.0.20
Werkzeug==2.3.7
Jinja2==3.1.2
opencv-python==4.8.0.76
numpy==1.24.3
Pillow==10.0.0

# Procesamiento de IA (opcionales pero recomendadas)
tensorflow>=2.12.0
torch>=2.0.1
onnxruntime>=1.15.1
mediapipe>=0.10.3
face-recognition>=1.3.0

# Utilidades
python-dotenv==1.0.0
requests==2.31.0
pyyaml==6.0.1
pytz==2023.3

# Procesamiento de imágenes y visión computacional
scikit-image==0.20.0
scipy==1.10.1

# IA y detección
tensorflow-cpu==2.12.0  # Versión CPU para entornos sin GPU
face-recognition==1.3.0  # Para reconocimiento facial
dlib==19.24.1  # Necesario para face_recognition

# Visualización y análisis de datos
matplotlib==3.7.1
pandas==2.0.0

# Comunicación y WebSockets
Flask-SocketIO==5.3.3
python-engineio==4.4.1
python-socketio==5.8.0

# Autenticación y seguridad
Flask-Login==0.6.2
flask-jwt-extended==4.5.2
bcrypt==4.0.1

# Para modelos YOLOv5 (detección de fuego/humo)
torchvision==0.14.1

# Procesamiento de datos
scikit-learn>=1.2.2

# MQTT y comunicación
paho-mqtt>=1.5.1

# Framework web adicionales
Flask-WTF>=1.1.1

# Base de datos
SQLAlchemy>=2.0.19

# Procesamiento de imágenes adicionales
imutils>=0.5.4

# IA y ML - actualizado para Python 3.12
torchaudio>=2.2.0
tensorflow>=2.15.0
anthropic>=0.5.0
google-generativeai>=0.1.0

# Geocodificación y mapas
geopy>=2.2.0
folium>=0.12.1

# Pruebas
pytest>=7.4.0
pytest-cov>=4.1.0

# Dependencias para características avanzadas
reportlab>=3.6.12    # Para generación de PDFs en análisis forense
fpdf>=1.7.2          # Alternativa para generación de PDFs
nltk>=3.8.1          # Para procesamiento de texto en descripciones
transformers>=4.35.0 # Para modelos de IA generativa
deepdiff>=6.3.0      # Para comparación de datos en análisis forense

# Para manejo de tareas/colas (opcional)
# celery==5.2.7
# redis==4.5.4

--------------------------------------------------------------------------------

📄 resumen.txt
--------------------------------------------------------------------------------
================================================================================
INFORME DEL SISTEMA DE VIGILANCIA IA
Generado el 2025-03-29 18:55:22
================================================================================

1. ESTRUCTURA DEL PROYECTO
================================================================================

📁 /
    📄 Dockerfile
    📄 INSTALACION.md
    📄 PROJECT_README.md
    📄 app.log
    📄 app.py
    📄 arquitectura.txt
    📄 create_project_structure.ps1
    📄 docker-compose.yml
    📄 extract_system_info.py
    📄 init_config.ps1
    📄 requirements-ai.txt
    📄 requirements-extras.txt
    📄 requirements.txt
    📄 resumen.txt
    📄 setup_simple.py
    📄 setup_vigilancia.py
    📄 test_face_recognition.py
    📄 test_opencv_face.py
    📁 agent_templates/
    📁 alert_captures/
    📁 config/
        📄 agents_config.json
        📄 alerts_config.json
        📄 analytics.json
        📄 api_keys.json
        📄 cameras_config.json
        📄 detection_config.json
        📄 industrial_safety.json
        📄 known_faces.json
        📄 modes_config.json
        📄 settings.json
        📄 system_config.json
        📄 whatsapp.json
        📁 active_models/
        📁 forensic/
            📄 forensic.db
            📁 evidence/
        📁 industrial/
            📄 industrial_config.json
        📁 roi/
            📄 f8b753ef-3fda-4b39-a8d2-ac08f389fc2c.json
    📁 data/
        📁 face/
        📁 forensic/
            📁 evidence/
        📁 images/
        📁 known_faces/
            📄 persons.pkl
            📄 trained_model.yml
            📁 person_1/
                📄 face_1.jpg
            📁 person_2/
                📄 face_1.jpg
            📁 person_3/
                📄 face_1.jpg
            📁 person_4/
                📄 face_1.jpg
        📁 loitering/
        📁 motion/
        📁 objects/
        📁 temp/
        📁 videos/
    📁 datasets/
    📁 detection_snapshots/
    📁 docs/
        📄 TECHNICAL_DOCS.md
        📄 TESTING_GUIDE.md
        📄 USER_GUIDE.md
    📁 instance/
        📄 app.db
    📁 logs/
        📄 surveillance.log
    📁 models/
        📄 weapon_detection.pt
        📁 yolo/
    📁 recordings/
    📁 snapshots/
    📁 src/
        📄 agent_factory.py
        📄 agent_manager.py
        📄 agent_templates.py
        📄 ai_agents.py
        📄 alert_manager.py
        📄 analytics_manager.py
        📄 assault_detection_agent.py
        📄 camera_manager.py
        📄 database.py
        📄 dataset_manager.py
        📄 email_connector.py
        📄 ensemble_detection_agent.py
        📄 external_ai.py
        📄 external_ai_agent.py
        📄 face_recognition.py
        📄 forensic_analysis.py
        📄 generative_description_agent.py
        📄 geo_manager.py
        📄 industrial_agents.py
        📄 industrial_safety.py
        📄 industrial_safety_agent.py
        📄 industrial_safety_manager.py
        📄 mcp_framework.py
        📄 model_trainer.py
        📄 modes_config.py
        📄 motion_detector.py
        📄 object_detector.py
        📄 operation_mode.py
        📄 operation_mode_router.py
        📄 retail_security_agent.py
        📄 roi_manager.py
        📄 training_api.py
        📄 video_capture.py
        📄 whatsapp_alert_agent.py
        📄 whatsapp_connector.py
        📁 ai_modules/
            📄 detection_manager.py
            📄 face_recognition_enhanced.py
            📄 fire_smoke_detector.py
            📄 pose_detector.py
            📄 water_flood_detector.py
        📁 routes/
            📄 api.py
            📄 main.py
            📄 views.py
        📁 utils/
            📄 error_handler.py
            📄 hardware_detector.py
            📄 init_db.py
            📄 logger.py
    📁 static/
        📄 favicon.ico
        📁 css/
            📄 agent_factory.css
            📄 alerts.css
            📄 cameras.css
            📄 dashboard.css
            📄 diagnostics.css
            📄 main.css
            📄 settings.css
            📄 style.css
            📄 testing.css
            📄 whatsapp.css
        📁 img/
            📄 camera-placeholder.jpg
        📁 js/
            📄 alerts.js
            📄 cameras.js
            📄 cameras_advanced.js
            📄 detection_testing.js
            📄 diagnostics.js
            📄 main.js
            📄 monitoring.js
    📁 templates/
        📄 advanced_detectors.html
        📄 advanced_settings.html
        📄 agent_factory.html
        📄 agents.html
        📄 ai_systems.html
        📄 alerts.html
        📄 assault_config.html
        📄 base.html
        📄 camera_debug.html
        📄 camera_testing.html
        📄 cameras.html
        📄 cameras_advanced.html
        📄 commercial.html
        📄 config.html
        📄 dashboard.html
        📄 dataset_details.html
        📄 datasets.html
        📄 error.html
        📄 faces.html
        📄 forensic.html
        📄 hardware_monitor.html
        📄 index.html
        📄 industrial.html
        📄 maps.html
        📄 modes.html
        📄 monitoring.html
        📄 placeholder.html
        📄 roi_config.html
        📄 settings.html
        📄 system_diagnostics.html
        📄 training.html
        📄 training_details.html
        📄 trainings.html
        📄 webcam_test.html
        📄 whatsapp_config.html
        📁 components/
            📄 camera_stream.html
        📁 errors/
            📄 404.html
            📄 500.html
        📁 modes/
            📄 forensic.html
            📄 normal.html
            📄 retail.html
        📁 partials/
    📁 tests/
        📄 test_alert_manager.py
    📁 test_captures/
        📄 test_20250328_233652.jpg
        📄 test_20250328_233744.jpg
        📄 test_20250328_234052.jpg
        📄 test_20250329_000009.jpg
        📄 test_20250329_000146.jpg
    📁 tools/
        📄 camera_tester.py
        📄 module_checker.py
        📄 test_mediapipe.py
        📄 test_ppe_detection.py
    📁 ultimos_archivos_modificados/
        📄 PROJECT_README.md
        📄 app.py
        📄 extract_system_info.py
        📄 resumen.txt
        📁 instance/
            📄 app.db
        📁 logs/
            📄 surveillance.log
        📁 src/
            📄 camera_manager.py
            📁 routes/
                📄 api.py
            📁 utils/
                📄 init_db.py
        📁 templates/
            📄 dashboard.html
        📁 ultimos_archivos_modificados/
            📄 PROJECT_README.md
            📄 extract_system_info.py
            📄 resumen.txt
            📁 instance/
                📄 app.db
            📁 logs/
                📄 surveillance.log
            📁 templates/
                📄 dashboard.html
            📁 ultimos_archivos_modificados/
                📄 extract_system_info.py
                📄 resumen.txt
                📁 ultimos_archivos_modificados/
                    📄 extract_system_info.py
                    📄 resumen.txt


2. ÚLTIMOS ARCHIVOS MODIFICADOS
================================================================================

📄 resumen.txt
   Última modificación: 2025-03-29 18:55:22

📄 extract_system_info.py
   Última modificación: 2025-03-29 18:55:00

📄 ultimos_archivos_modificados\resumen.txt
   Última modificación: 2025-03-29 18:48:40

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\resumen.txt
   Última modificación: 2025-03-29 18:48:40

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\resumen.txt
   Última modificación: 2025-03-29 18:48:40

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\resumen.txt
   Última modificación: 2025-03-29 18:48:40

📄 ultimos_archivos_modificados\extract_system_info.py
   Última modificación: 2025-03-29 18:44:19

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\extract_system_info.py
   Última modificación: 2025-03-29 18:44:19

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\extract_system_info.py
   Última modificación: 2025-03-29 18:44:19

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\extract_system_info.py
   Última modificación: 2025-03-29 18:44:19

📄 templates\dashboard.html
   Última modificación: 2025-03-29 18:26:15

📄 ultimos_archivos_modificados\templates\dashboard.html
   Última modificación: 2025-03-29 18:26:15

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\templates\dashboard.html
   Última modificación: 2025-03-29 18:26:15

📄 src\camera_manager.py
   Última modificación: 2025-03-29 18:26:15

📄 ultimos_archivos_modificados\src\camera_manager.py
   Última modificación: 2025-03-29 18:26:15

📄 app.py
   Última modificación: 2025-03-29 18:26:15

📄 ultimos_archivos_modificados\app.py
   Última modificación: 2025-03-29 18:26:15

📄 logs\surveillance.log
   Última modificación: 2025-03-29 15:48:39

📄 ultimos_archivos_modificados\logs\surveillance.log
   Última modificación: 2025-03-29 15:48:39

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\logs\surveillance.log
   Última modificación: 2025-03-29 15:48:39



3. CONTENIDO DE LOS ARCHIVOS
================================================================================

📄 Dockerfile
--------------------------------------------------------------------------------
FROM python:3.9-slim

WORKDIR /app

# Dependencias para OpenCV
RUN apt-get update && apt-get install -y \
    libgl1-mesa-glx \
    libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 5000

CMD ["python", "app.py"] 

--------------------------------------------------------------------------------

📄 INSTALACION.md
--------------------------------------------------------------------------------
# Guía de Instalación y Configuración

Este documento detalla los pasos necesarios para instalar, configurar y poner en marcha el Sistema de Vigilancia Inteligente.

## Requisitos del Sistema

### Hardware Recomendado
- CPU: Intel Core i7 o superior / AMD Ryzen 7 o superior
- RAM: Mínimo 16GB (32GB recomendado para procesamiento múltiple de cámaras)
- GPU: NVIDIA con soporte CUDA (mínimo 4GB VRAM) para inferencia de modelos
- Almacenamiento: SSD 256GB o superior
- Conexión a Internet: Requerida para servicios de IA externos

### Software Prerrequisito
- Sistema Operativo: Ubuntu 20.04 LTS o superior / Windows 10/11 con WSL2
- Python 3.8 o superior
- Git
- Docker (opcional, para despliegue containerizado)
- CUDA Toolkit 11.4+ (para aceleración GPU)
- OpenCV
- Numpy, Pandas (para análisis de datos)
- FFmpeg (opcional, para procesamiento de video avanzado)

## Instalación Paso a Paso

### 1. Configurar Entorno Virtual

```bash
# Clonar el repositorio
git clone https://github.com/tu-usuario/vigilancia-ia.git
cd vigilancia-ia

# Crear entorno virtual
python -m venv venv

# Activar entorno virtual
# En Linux/Mac:
source venv/bin/activate
# En Windows:
venv\Scripts\activate

# Instalar dependencias principales
pip install -r requirements.txt

# Si deseas utilizar las funcionalidades avanzadas de análisis de datos, asegúrate de instalar:
pip install pandas numpy matplotlib
```

### 2. Instalación Manual de Dependencias (Si hay problemas)

Si encuentras errores de módulos faltantes como "No module named 'requests'", instala las dependencias manualmente:

```bash
# Dependencias fundamentales
pip install flask opencv-python numpy pillow requests

# Dependencias para IA
pip install torch torchvision tensorflow

# Dependencias para APIs externas
pip install anthropic google-generativeai

# Otras dependencias
pip install paho-mqtt geopy python-dateutil
```

### 3. Configuración Inicial

```bash
# Crear directorios necesarios
mkdir -p config datasets models logs agent_templates agents

# Copiar archivo de configuración de ejemplo
cp config_example.json config/system_config.json

# Editar configuración según necesidades
nano config/system_config.json
```

### 4. Configuración de APIs Externas (Opcional)

Para utilizar servicios externos como Claude, Gemini o WhatsApp, se deben configurar las respectivas claves API:

```bash
# Crear archivo de configuración para APIs externas
cp api_keys_example.json config/api_keys.json

# Editar para agregar claves propias
nano config/api_keys.json
```

El archivo debe tener una estructura similar a:

```json
{
  "anthropic": "sk-ant-api-key...",
  "google": "AIza...",
  "whatsapp": {
    "api_key": "EAAG...",
    "phone_id": "123456789",
    "business_account_id": "987654321"
  }
}
```

### 5. Inicialización del Sistema

```bash
# Inicializar la base de datos
python init_db.py

# Cargar modelos base (descarga modelos preentrenados)
python download_models.py

# Verificar instalación
python check_installation.py
```

### 6. Iniciando el Sistema

```bash
# Iniciar en modo desarrollo
python app.py

# Alternativamente, para producción con gunicorn:
gunicorn -w 4 -b 0.0.0.0:5000 app:app
```

El sistema estará disponible en: `http://localhost:5000`

## Solución de Problemas Específicos

### Módulos Python Faltantes

Si encuentras errores como `ModuleNotFoundError: No module named 'xxx'`:

```bash
# Instalar el módulo faltante
pip install xxx

# Ejemplo para el error con 'requests'
pip install requests
```

### Errores con NumPy o Dependencias de Compilación

En algunos sistemas, pueden ocurrir errores con la instalación de NumPy o módulos que requieren compilación:

```bash
# Para Windows, instalar primero las herramientas de compilación de Visual Studio
# Luego, intentar la instalación con:
pip install --only-binary :all: numpy opencv-python

# En Linux, instalar las herramientas de desarrollo necesarias:
sudo apt-get install build-essential libssl-dev libffi-dev python3-dev
```

### Problemas con CUDA y PyTorch

Si PyTorch no detecta la GPU:

```bash
# Desinstalar la versión actual
pip uninstall torch torchvision

# Instalar la versión específica para tu CUDA
# Ejemplo para CUDA 11.8:
pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118
```

## Configuración de Cámaras

### Añadir Cámaras

Las cámaras se pueden añadir desde la interfaz web o mediante el archivo de configuración:

1. **Desde la interfaz**: Navegar a "Cámaras" > "Añadir Cámara"

2. **Desde archivo de configuración**:
   ```json
   {
     "cameras": [
       {
         "id": "cam1",
         "name": "Cámara Principal",
         "url": "rtsp://usuario:contraseña@192.168.1.100:554/stream1",
         "type": "rtsp"
       },
       {
         "id": "cam2",
         "name": "Webcam Local",
         "url": "0",
         "type": "local"
       }
     ]
   }
   ```

## Entrenamiento de Modelos

### Crear un Dataset

1. Navegar a "IA" > "Entrenamiento"
2. Seleccionar "Crear Dataset"
3. Definir nombre, descripción y categorías
4. Subir imágenes o capturar desde cámaras
5. Etiquetar imágenes según las categorías

### Entrenar un Modelo

1. En la sección "Entrenamiento", seleccionar "Entrenar Modelo"
2. Elegir el dataset a utilizar
3. Configurar hiperparámetros (o usar valores por defecto)
4. Iniciar entrenamiento
5. El sistema notificará cuando el modelo esté listo

## Creación de Agentes

### Crear un Nuevo Agente

1. Navegue a "IA" > "Agentes de IA"
2. Seleccione "Crear Agente"
3. Elija una plantilla (Detección, Alertas, Análisis, etc.)
4. Configure los parámetros específicos
5. Seleccione el modelo a utilizar (si aplica)
6. Active el agente

## Configuración para Modo Industrial

1. Navegue a "Seguridad" > "Modo Industrial"
2. Configure reglas de seguridad específicas
3. Defina equipos de protección requeridos
4. Establezca zonas permitidas/prohibidas
5. Configure umbrales de detección para incendios o peligros

## Sistema de Mapas y Guardias

### Configurar el Sistema de Mapas

1. Navegue a "Seguridad" > "Mapas y Guardias"
2. Establezca ubicaciones importantes
3. Cree rutas para rondas de vigilancia
4. Defina geocercas para áreas restringidas
5. Registre guardias y asigne rutas

## Solución de Problemas Comunes

### El Sistema No Detecta la GPU

Verifique que:
- CUDA está correctamente instalado: `nvcc --version`
- Las bibliotecas de CUDA están en PATH
- La versión de PyTorch es compatible con su versión de CUDA

### Problemas con Conexión a Cámaras

- Verifique que la cámara esté encendida y conectada a la red
- Confirme que la URL/credenciales son correctas
- Pruebe la conexión con VLC u otra herramienta
- Verifique que el puerto no esté bloqueado por firewall

### Errores en Servicios de IA Externos

- Verifique que las claves API son correctas y están activas
- Compruebe su conexión a Internet
- Revise los logs para errores específicos: `logs/external_ai.log`

### Sistema Lento o con Bajo Rendimiento

- Reduzca la resolución de procesamiento de cámaras
- Ajuste el intervalo de frames (procesar menos frames)
- Utilice modelos más ligeros para la detección
- Considere añadir o mejorar GPU

## Mantenimiento

### Respaldo de Datos

```bash
# Respaldar configuración y modelos
./scripts/backup.sh
```

### Actualización del Sistema

```bash
# Actualizar desde el repositorio
git pull
pip install -r requirements.txt
./scripts/update_models.sh
```

## Pruebas y Verificación

### Pruebas Automatizadas

```bash
# Ejecutar suite de pruebas
pytest tests/

# Pruebas específicas
pytest tests/test_detection.py
```

### Verificación Manual

1. **Detección básica**: Verificar que el sistema detecta objetos correctamente
2. **Reconocimiento facial**: Probar con caras conocidas/desconocidas
3. **Alertas**: Provocar una situación de alerta y verificar notificaciones
4. **Agentes personalizados**: Verificar que funcionan según lo configurado
5. **Conexiones externas**: Comprobar comunicación con servicios de IA y WhatsApp

## Información Adicional

- **Documentación completa**: Disponible en `/docs`
- **Ejemplos de configuración**: Disponibles en `/examples`
- **Modelos preentrenados**: Descargables desde la sección "IA" > "Modelos"

## Soporte

Para problemas o consultas, contacte a soporte en:
- Email: soporte@sistemavigilancia.com
- Foro: https://comunidad.sistemavigilancia.com



Guía de Instalación y Ejecución del Sistema de Vigilancia IA
Esta guía te mostrará cómo configurar y ejecutar el Sistema de Vigilancia IA desde cero utilizando un entorno virtual Python.
Requisitos previos
Python 3.8 o superior
pip (gestor de paquetes de Python)
Git (opcional, si deseas clonar el repositorio)
1. Configuración del entorno virtual

# 1. Crear un directorio para el proyecto
mkdir vigilancia-ia
cd vigilancia-ia

# 2. Crear un entorno virtual
python -m venv vigilai_env

# 3. Activar el entorno virtual
# En Windows:
vigilai_env\Scripts\activate

# En macOS/Linux:
source vigilai_env/bin/activate

# Si usas Git:
git clone https://github.com/tu-usuario/vigilancia-ia.git .

# O si ya tienes los archivos, simplemente colócalos en el directorio


# Instalar las dependencias básicas
pip install flask opencv-python numpy pillow requests

# Instalar las dependencias adicionales
pip install -r requirements.txt


# Crear directorios necesarios
mkdir -p config data logs static/img static/js static/css templates/partials


# Ejecutar el script de configuración
python setup_vigilancia.py


# Ejecutar la aplicación
python app.py


7. Acceder a la interfaz web
Abre tu navegador web y accede a:
Verificación de funcionalidad
Página de inicio: Deberías ver el panel de control principal
Cámaras: Navega a la sección de cámaras para configurar los flujos de video
Alertas: Revisa la sección de alertas para ver las notificaciones del sistema
Modos de operación: Prueba los diferentes modos (Normal, Industrial, Comercial, Forense)
Configuración: Ajusta los parámetros del sistema según tus necesidades
Solución de problemas comunes
Error de importación de módulos
Asegúrate de que estás ejecutando la aplicación desde el directorio raíz del proyecto.
Error "Template not found"
Verifica que la estructura de directorios incluya todas las carpetas necesarias y que los archivos de plantilla estén en el lugar correcto.
Error con librerías de OpenCV
Algunas funcionalidades de OpenCV pueden requerir dependencias adicionales. En Linux, puedes necesitar instalar:

sudo apt-get install libsm6 libxext6 libxrender-dev

Error en la carga de modelos de IA
Asegúrate de que los directorios de modelos existan y contengan los archivos necesarios:

mkdir -p models/detection models/recognition

Pruebas básicas
Para comprobar que el sistema está funcionando correctamente:
Navega a la página de configuración y ajusta los parámetros básicos
Añade una cámara de prueba (puedes usar archivos de video locales)
Cambia entre diferentes modos de operación y verifica que la interfaz responde correctamente
Revisa los logs en la carpeta logs para detectar posibles errores
---
Si necesitas más ayuda o encuentras problemas específicos, consulta el archivo docs/TESTING_GUIDE.md para información detallada sobre la depuración del sistema.

--------------------------------------------------------------------------------

📄 PROJECT_README.md
--------------------------------------------------------------------------------
# Sistema de Vigilancia Inteligente

Este documento registra el desarrollo y estructura del Sistema de Vigilancia Inteligente, un proyecto que combina visión por computadora, inteligencia artificial y vigilancia en tiempo real.

## Estructura del Proyecto 

vigilancia-ia/
├── app.py # Aplicación principal Flask
├── config/ # Archivos de configuración
│ └── system_config.json # Configuración del sistema
├── data/ # Datos persistentes
│ └── known_faces/ # Rostros conocidos para reconocimiento facial
├── models/ # Modelos de IA preentrenados
├── src/ # Código fuente de componentes
│ ├── agent_manager.py # Gestión de agentes de IA
│ ├── alert_manager.py # Sistema de gestión de alertas
│ ├── camera_manager.py # Gestión de cámaras
│ ├── face_recognition.py # Reconocimiento facial
│ ├── mcp_framework.py # Framework de comunicación entre componentes
│ ├── model_trainer.py # Entrenamiento de modelos de IA
│ ├── motion_detector.py # Detección de movimiento
│ ├── object_detector.py # Detección de objetos
│ ├── operation_mode.py # Gestión de modos de operación
│ └── video_capture.py # Captura de video
├── static/ # Archivos estáticos para la web
│ ├── css/
│ │ └── style.css # Estilos CSS
│ └── js/
│ └── main.js # JavaScript principal
└── templates/ # Plantillas HTML
├── alerts.html # Página de alertas
├── base.html # Plantilla base
├── cameras.html # Gestión de cámaras
├── dashboard.html # Panel de control
├── index.html # Página de inicio
└── modes.html # Modos de vigilancia



## Historial de Desarrollo

### Fase 1: Estructura Base
- Creación de la estructura básica de archivos
- Implementación del patrón MVC
- Configuración del servidor Flask
- Creación de plantillas HTML y CSS básico

### Fase 2: Componentes Core
- Creación de gestores de cámaras, alertas y agentes
- Implementación del framework MCP para comunicación
- Integración de detección de movimiento básica

### Fase 3: Interfaces Web
- Implementación de herencia de plantillas con Jinja2
- Mejora de la interfaz con CSS más detallado
- Implementación de interactividad con JavaScript
- Configuración de endpoints API REST

### Fase 4: Captura de Video y Detección
- Implementación de captura de video multihilo
- Integración de detección de objetos simulada
- Visualización de streams de cámara en el dashboard
- Endpoints para controlar cámaras remotamente

### Fase 5: Reconocimiento Facial
- Implementación de detección facial con OpenCV
- Sistema de reconocimiento de personas conocidas
- API para registrar nuevos rostros
- Visualización de resultados de reconocimiento

## Componentes Principales

### MCP Framework
El sistema utiliza un patrón de comunicación basado en mensajes llamado MCP (Message Communication Protocol), que permite la comunicación asíncrona entre los diferentes componentes y agentes.

### Sistema de Cámaras
El sistema puede gestionar múltiples cámaras simultáneamente, cada una en su propio hilo. Soporta diferentes fuentes de video:
- Webcams locales
- Cámaras IP por RTSP/HTTP
- Archivos de video pregrabados

### Detección de Objetos
Utiliza un sistema de detección de objetos basado en modelos preentrenados (simulado en la versión actual). Detecta personas, vehículos y otros objetos relevantes.

### Reconocimiento Facial
Implementa reconocimiento facial para identificar personas conocidas. El sistema puede:
- Detectar rostros en los frames de video
- Reconocer personas registradas
- Almacenar nuevos rostros para entrenamiento
- Mostrar nombres e información sobre personas reconocidas

### Sistema de Alertas
Genera alertas basadas en detecciones y reglas configurables. Las alertas pueden enviarse por:
- Notificaciones en la interfaz web
- Correo electrónico (simulado)
- SMS (simulado)

## Modos de Operación

El sistema soporta diferentes modos de operación que ajustan la sensibilidad y comportamiento:

- **normal**: Vigilancia estándar con detección básica de movimiento
- **barrio_privado**: Optimizado para vigilancia residencial con detección de perímetro
- **aeropuerto**: Configuración para espacios grandes con alto tránsito
- **comercial**: Enfocado en seguridad de locales comerciales

## Próximos Pasos

1. ~~Implementar reconocimiento facial~~ (Completado)
2. Mejorar sistema de alertas con filtros y reglas avanzadas
3. Implementar grabación de video cuando se detectan eventos
4. Mejorar la interfaz de usuario con más controles y visualizaciones
5. Implementar sistema de autenticación de usuarios



Recomendación para el Próximo Paso del Desarrollo
Después de analizar el estado actual del sistema y las opciones disponibles, recomiendo avanzar primero con el sistema de mejoras para la detección y gestión de alarmas por las siguientes razones:
Ventajas de implementar primero la gestión de alarmas mejorada:
1. Soluciona un problema visible y actual: Las falsas detecciones ya están ocurriendo en el sistema existente, lo que puede generar alertas innecesarias y reducir la confianza en el sistema.
Proporciona valor inmediato: Al definir zonas de interés y reglas más inteligentes, el sistema ganará precisión inmediatamente sin necesitar cambios arquitectónicos mayores.
3. Implementación incremental: Podemos implementarlo por fases:
Primero: Definición de zonas de interés (ROI)
Segundo: Reglas de alarma configurables
Tercero: Sistema de clasificación de alarmas
Base para futuras mejoras: Un buen sistema de alarmas servirá como fundamento para cuando implementemos agentes de IA más avanzados, ya que estos podrán enviar sus resultados a un sistema de reglas ya maduro.
Plan de implementación propuesto:
Fase 1: Zonas de Interés (ROI)
Crear una interfaz para dibujar zonas en el video
Implementar la lógica para filtrar detecciones según zonas
Guardar/cargar configuraciones de zonas por cámara
Fase 2: Sistema de Reglas
Crear un editor de reglas con condiciones configurables
Implementar evaluador de reglas en tiempo real
Integrar con el sistema de alertas existente
Fase 3: Clasificación de Alarmas
Implementar niveles de alarma (información, advertencia, alarma, crítica)
Agregar acciones personalizables por nivel de alarma
Mejorar la visualización de alertas en la interfaz
Una vez que estas mejoras estén implementadas y funcionando correctamente, sería un buen momento para avanzar con el sistema de agentes de IA más avanzado, ya que estos agentes podrán aprovechar la infraestructura de reglas y alarmas mejorada.
¿Te parece bien comenzar con la implementación de las zonas de interés (ROI) como primer paso?


ok creo que debemos avanzar y mejorar!

1- sistema de entrenamientos y dataset para las IA, para que puedan aprender y mejorar sobre algun tema especifico, ejemplo Un agente especializado en sospechosos de hurto en un supermercado, otro ejemplo un sospechoso merodeando, activar sistema de seguimiento por camaras enviar alertas y fotos de momentos claves a estación de monitoreo o guardia.
2- aparte de editar los agentes quiero poder tener control total de crear agentes nuevos, entrenarlos con dataset espesificos, que puedan tener retroalimentación de los eventos y aprender en base a respuestas humanas. aparte quisiera tener un agente puntual el cual pueda interpretar por ejemplo un intento de asalto o intento de robo, comprendiendo la situación, ejemplo una persona con armas, personas levantando las 2 manos, personas tirandose al piso etc.
3- Agregar el modo industrial, este modo identifica posibles peligros, focos de incendio, cumplimiento de reglas de seguridad e higene de la empresa. 
4- sería bueno hacer conexión con sistemas de IA externo como claude, google gemini, u otras?
5- conexión con Whatsapp para el envío automatico de eventos a guardias.
6- gestión e interacción con mapas, coordenadas, etc. para poder enviar datos o recibir datos de rondas de los guardias, etc.

## Nuevas Funcionalidades Implementadas

### 1. Sistema de Entrenamiento de IA y Datasets Personalizados

Hemos implementado un sistema completo para entrenar modelos de IA con datasets específicos:

- **Gestor de Datasets**: Permite crear, gestionar y organizar conjuntos de datos para diferentes situaciones de seguridad
- **Etiquetado de Imágenes**: Interfaz para clasificar y etiquetar imágenes para entrenamiento
- **Entrenamiento de Modelos**: Proceso automatizado para generar modelos de IA a partir de los datasets
- **Especialización por casos de uso**: Soporte para modelos especializados en situaciones específicas como hurtos, merodeo, comportamientos sospechosos, etc.

Este sistema permite crear agentes altamente especializados para situaciones específicas, mejorando significativamente la precisión y reduciendo las falsas alarmas.

### 2. Creación Dinámica de Agentes

Hemos desarrollado una "fábrica de agentes" que permite:

- **Crear nuevos agentes** desde la interfaz web sin necesidad de programación
- **Plantillas de agentes** para diferentes propósitos: detección, alertas, análisis de situaciones, etc.
- **Configuración flexible** con parámetros personalizables
- **Sistema de retroalimentación** que permite a los agentes aprender de las respuestas humanas
- **Agente de análisis situacional** capaz de interpretar escenarios complejos como intentos de robo, asaltos o comportamientos sospechosos

### 3. Modo Industrial

Se ha añadido un modo especializado para entornos industriales que incluye:

- **Detección de peligros**: Identificación automática de situaciones de riesgo
- **Monitoreo de incendios**: Detección temprana de focos de incendio o humo
- **Cumplimiento de seguridad**: Verificación del uso de equipos de protección personal (EPP)
- **Reglas de higiene**: Monitoreo del cumplimiento de protocolos de higiene y seguridad
- **Zonas restringidas**: Alerta cuando personas ingresan a áreas peligrosas o no autorizadas

### 4. Integración con Servicios de IA Externos

Se ha implementado conexión con servicios avanzados de IA como:

- **Claude de Anthropic**: Para análisis avanzado de situaciones y comprensión de contextos complejos
- **Google Gemini**: Para reconocimiento y análisis de imágenes con alta precisión
- **Interfaz unificada**: Conector que permite alternar entre diferentes servicios según necesidades
- **Modo híbrido**: Combina modelos locales e IA externa para optimizar rendimiento y costos

Estas integraciones permiten análisis mucho más sofisticados de situaciones complejas, como identificar asaltos basándose en la postura de las personas, presencia de armas, y otros factores contextuales.

### 5. Conexión con WhatsApp

Se ha implementado un sistema completo de notificaciones por WhatsApp:

- **Envío automático** de alertas importantes a guardias y responsables de seguridad
- **Compartición de imágenes** capturadas en el momento de la detección
- **Comandos por mensaje**: Posibilidad de enviar comandos básicos a través de mensajes
- **Gestión de cooldown**: Sistema inteligente para evitar sobrecarga de notificaciones
- **Personalización de mensajes** según tipo y severidad de alertas

### 6. Sistema de Gestión Geográfica y Seguimiento

Se ha desarrollado un sistema completo de gestión geoespacial:

- **Mapas interactivos**: Visualización en tiempo real de guardias, ubicaciones y zonas
- **Creación de rutas**: Definición de recorridos para rondas de vigilancia
- **Geocercas**: Creación de perímetros virtuales con alertas automáticas
- **Seguimiento de guardias**: Monitoreo de posición y cumplimiento de rutas
- **Alertas por desviación**: Notificaciones cuando los guardias se desvían de rutas o tiempos establecidos
- **Integración con cámaras**: Asociación de ubicaciones físicas con cámaras del sistema

## Conclusión

Con estas nuevas funcionalidades, el Sistema de Vigilancia Inteligente se ha transformado en una solución extremadamente versátil y potente, capaz de adaptarse a múltiples escenarios de seguridad, desde comercial hasta industrial, con capacidades avanzadas de IA y gestión de personal de seguridad.

La arquitectura modular basada en agentes permite seguir expandiendo el sistema según sea necesario, añadiendo nuevas capacidades y adaptándose a requisitos específicos de diferentes entornos de seguridad.



Plan de Implementación para Completar el Sistema
Me alegra que el sistema básico esté funcionando. Ahora vamos a elaborar un plan detallado para implementar las funcionalidades restantes:
1. Creación y Configuración de Agentes
Implementación necesaria:
Interfaz de creación de agentes: Formulario web para crear nuevos agentes especificando roles, comportamientos y parámetros
Sistema de plantillas: Biblioteca de plantillas de agentes predefinidos
Panel de configuración: Para ajustar parámetros de los agentes existentes
Monitoreo de agentes: Visualización del estado y rendimiento de los agentes
2. Sistema de Entrenamiento con Datasets Personalizados
Implementación necesaria:
Gestor de datasets: Interfaz para subir, etiquetar y organizar imágenes
Pipeline de entrenamiento: Sistema para entrenar modelos con los datasets
Validación y pruebas: Herramientas para verificar rendimiento de modelos
Exportación e implementación: Mecanismo para integrar nuevos modelos al sistema
3. Modo Industrial
Implementación necesaria:
Detector de EPP: Para identificar equipos de protección personal
Zonas de riesgo: Definición y monitoreo de áreas peligrosas
Detector de incendios/humo: Algoritmos especializados para detectar fuego
Reglas de seguridad industrial: Sistema para definir y verificar cumplimiento
Alertas específicas: Notificaciones adaptadas al contexto industrial
4. Seguridad del Sistema
Implementación necesaria:
Sistema de autenticación: Login/logout con niveles de acceso
Gestión de usuarios: Creación y administración de cuentas
Registro de actividad: Seguimiento de acciones de usuarios
Cifrado de datos sensibles: Protección de información crítica
Gestión de backups: Respaldo automático de configuraciones y datos
5. Sistema de Alertas Avanzado
Implementación necesaria:
Configuración de umbrales: Personalización de condiciones para disparar alertas
Enriquecimiento de alertas: Añadir contexto y recomendaciones
Canales múltiples: Email, SMS, WhatsApp, aplicación móvil
Escalamiento: Reglas para escalar alertas no atendidas
Programación: Activación/desactivación según horarios
6. Integración de Correo Electrónico
Implementación necesaria:
Configuración SMTP: Conexión con servidores de correo
Plantillas de mensajes: Diseño de correos para diferentes tipos de alertas
Gestión de destinatarios: Listas de correo según roles y responsabilidades
7. Configuración completa de WhatsApp
Implementación necesaria:
Webhook para respuestas: Recepción de comandos desde WhatsApp
Reglas de cooldown: Evitar spam de mensajes
Confirmación de recepción: Verificar que alertas fueron recibidas
Mensajes multimedia: Envío de imágenes, videos y ubicaciones
8. Otras Mejoras Importantes
Visualización avanzada:
Dashboard personalizable: Widgets configurables según necesidades
Reportes históricos: Análisis de eventos pasados
Heatmaps: Mapas de calor para visualizar zonas de actividad
Integración con sistemas externos:
APIs para otros sistemas: Integración con plataformas de terceros
Exportación de datos: Respaldo en la nube o sistemas corporativos
Integración con sistemas de control de acceso: Puertas, torniquetes, etc.
Performance:
Optimización para múltiples cámaras: Procesamiento distribuido
Caché inteligente: Reducir carga de procesamiento
Compresión adaptativa: Ajuste automático según ancho de banda
Hoja de Ruta Recomendada
Fase 1: Fundamentos (1-2 semanas)
Sistema de autenticación y seguridad
Configuración completa de alertas básicas
Integración de correo electrónico
Fase 2: IA Avanzada (2-3 semanas)
Sistema de entrenamiento con datasets
Creación y gestión de agentes
Mejora del sistema de detección
Fase 3: Modos especializados (2-3 semanas)
Modo industrial completo
Sistema de geocercas y seguimiento
Integración de WhatsApp bidireccional
Fase 4: Refinamiento (2-3 semanas)
UI/UX mejorada
Optimización de rendimiento
Documentación completa
4. Testing y depuración final


-------------------------------------------------------------------
Proximos pasos:

Estrategias de mejora para convertir VigIA en un sistema de seguridad integral
Para transformar tu sistema de vigilancia inteligente en una solución de seguridad completa y adaptable a diversos sectores, podemos implementar las siguientes tecnologías y técnicas:
1. Mejoras en Inteligencia Artificial y Análisis de Video

Redes neuronales transformers para análisis de video: Implementar arquitecturas como VideoSwin o ViViT que superan a los modelos tradicionales en comprensión contextual de escenas.
Aprendizaje por refuerzo para cámaras PTZ: Sistemas que aprendan automáticamente a controlar cámaras móviles para seguir objetos de interés, optimizando los ángulos de visión.
Análisis de comportamiento predictivo: Algoritmos que identifiquen patrones anómalos antes de que se conviertan en incidentes (merodeadores que evolucionan hacia intrusiones).
Reconocimiento de actividades complejas: Detección de interacciones sospechosas entre personas (intercambios, seguimientos, confrontaciones).
Análisis de multitudes y control de aforo: Detección de densidad de personas, comportamientos grupales anómalos y control preciso de ocupación.

2. Integración con Otros Sistemas de Seguridad

Integración con sistemas de control de acceso: Validación cruzada entre detecciones visuales y registros de acceso (tarjetas RFID, biometría).
Interfaz con sistemas de alarma e incendio: Respuesta coordinada ante emergencias, usando las cámaras para verificar alarmas.
Interconexión con BMS (Building Management Systems): Integración con sistemas de gestión de edificios para control holístico.
Comunicación con sistemas de televigilancia municipal: Para barrios y espacios públicos, habilitando coordinación con centros de monitoreo gubernamentales.
Integración con drones de vigilancia: Para inspección automática de perímetros extensos en respuesta a alertas.

3. Mejoras en Ciberseguridad

Cifrado de extremo a extremo: Para todas las comunicaciones y almacenamiento de video.
Firewalls de aplicación y análisis de tráfico anómalo: Protección contra intentos de intrusión en la red de cámaras.
Autenticación multifactor para acceso administrativo: Incrementar seguridad para evitar accesos no autorizados.
Federación de identidades y SSO: Para entornos corporativos con múltiples sistemas de gestión.
Sandboxing completo: Aislar componentes críticos en contenedores para prevenir compromiso total del sistema.

4. Arquitectura Distribuida y Redundante

Procesamiento de borde (Edge Computing): Desplegar capacidades de análisis en dispositivos perimetrales reduciendo latencia.
Arquitectura de microservicios containerizada: Facilitar el despliegue, la escalabilidad y el mantenimiento.
Malla de servicios (Service Mesh): Mejorar la comunicación entre componentes con descubrimiento, balanceo y resilencia.
Replicación geográfica: Múltiples centros de procesamiento para tolerancia a fallos regionales.
Infraestructura como código (IaC): Automatizar despliegues para mantener consistencia en todas las instalaciones.

5. Almacenamiento y Gestión de Datos

Sistemas de almacenamiento jerárquico: Combinar almacenamiento rápido para datos recientes con archivado económico para registros históricos.
Compresión inteligente basada en contenido: Ajustar dinámicamente la calidad del video según el contenido (mayor resolución donde hay personas).
Blockchain para cadena de custodia: Garantizar la integridad de evidencias mediante hashes almacenados en blockchain.
Gestión del ciclo de vida de la información: Políticas automatizadas para retención y eliminación conforme a regulaciones.
Data lake para análisis histórico: Permita análisis retrospectivos de patrones de seguridad a largo plazo.

6. Comunicaciones Avanzadas

Red 5G privada: Para transmisión de video de alta densidad con baja latencia.
Protocolos de malla inalámbrica: Para entornos donde el cableado es difícil o costoso.
Sistemas redundantes satelitales: Como respaldo para ubicaciones críticas o remotas.
WebRTC para transmisión P2P segura: Reducir carga en servidores centrales para visualización.
Comunicación interoperable con servicios de emergencia: Integración con estándares como CAP (Common Alerting Protocol).

7. Interfaces y Experiencia de Usuario

Realidad aumentada para personal de seguridad: Superponer información de amenazas sobre video en tiempo real para guardias.
Visualización geoespacial 3D: Para complejos industriales y campus grandes.
Gestión mediante comandos de voz: Interfaces conversacionales para operaciones manos-libres.
Dashboards personalizables por rol: Diferentes vistas para personal de seguridad, administración y emergencias.
Aplicaciones móviles seguras: Para monitoreo remoto y notificaciones.

8. Adaptaciones Específicas por Sector
Barrios y Edificios

Integración con intercomunicadores y porteros eléctricos
Reconocimiento de vehículos y residentes
Detección de visitantes recurrentes no registrados

Empresas

Monitoreo de áreas restringidas y clasificadas
Análisis de comportamiento en ubicaciones sensibles
Correlación con registros de actividad de los sistemas informáticos

Industrias

Detección de elementos de protección personal
Monitoreo de procedimientos de seguridad operacional
Detección de fugas, humo o condiciones peligrosas

Retail

Análisis de tráfico de clientes y mapas de calor
Detección de comportamientos de shoplifting
Integración con sistemas antihurto EAS

Gobierno

Verificación de identidad multinivel
Análisis forense avanzado
Controles de acceso por niveles de autorización

9. Inteligencia Situacional

Fusión de sensores heterogéneos: Combinar datos de cámaras, micrófonos, sensores ambientales y de movimiento.
Gemelos digitales de instalaciones: Modelos 3D interactivos para visualizar todos los aspectos de seguridad.
Análisis de amenazas basado en OSINT: Incorporar fuentes abiertas para contextualizar riesgos (eventos sociales, climatología).
Correlación temporal de eventos: Identificar patrones complejos que ocurren en secuencia a través de múltiples sensores.

10. Cumplimiento Normativo y Ético

Difuminado automático de rostros en áreas públicas: Para cumplir con GDPR y otras regulaciones de privacidad.
Sistema de trazabilidad de acceso a datos: Registro inmutable de quién accede a qué grabaciones y por qué motivo.
Auditoría automatizada de sesgos en IA: Verificación continua para evitar discriminación algorítmica.
Proporcionalidad configurable: Ajuste de la intensidad de monitoreo según el nivel de riesgo y requisitos legales.

Al implementar estas tecnologías y enfoques de manera modular, tu sistema VigIA podría convertirse en una plataforma de seguridad verdaderamente completa, aplicable a cualquier entorno y escalable según necesidades específicas. La clave estará en mantener la filosofía de diseño modular, permitiendo que cada cliente active solo los componentes relevantes para su caso de uso.


RESPUESTA:

Análisis de Viabilidad y Complejidad de las Mejoras Propuestas
Evaluación General
Las mejoras descritas en el PROJECT_README.md representan una visión ambiciosa y completa para un sistema de vigilancia de última generación. Evaluaré la viabilidad y complejidad de implementación para cada categoría principal:
1. Mejoras en IA y Análisis de Video
Viabilidad: Alta a Media
Complejidad: Media a Alta
Implementable a corto plazo:
Análisis de comportamiento predictivo básico
Reconocimiento de actividades simples
Control de aforo y análisis de densidad
Desafíos técnicos:
Las arquitecturas transformer para video (VideoSwin, ViViT) requieren GPU potentes
El aprendizaje por refuerzo para cámaras PTZ necesita un entorno de simulación antes de implementación real
2. Integración con Otros Sistemas de Seguridad
Viabilidad: Alta
Complejidad: Media
Implementable a corto plazo:
API REST para sistemas de control de acceso
Interfaz con sistemas de alarma estándar
Webhooks para notificaciones bidireccionales
Consideraciones:
Se requieren APIs documentadas de los sistemas externos
Necesitará protocolos de autenticación seguros
3. Mejoras en Ciberseguridad
Viabilidad: Alta
Complejidad: Media
Implementable a corto plazo:
Cifrado de datos en tránsito (HTTPS)
Autenticación multifactor
Firewalls básicos y reglas de acceso
Consideraciones:
El cifrado de extremo a extremo para video aumenta la carga computacional
La federación de identidades requiere infraestructura adicional
4. Arquitectura Distribuida
Viabilidad: Media
Complejidad: Alta
Implementable a corto plazo:
Contenedores Docker para componentes individuales
Balanceo de carga básico
Desafíos significativos:
Edge computing requiere hardware especializado
La arquitectura de microservicios completa necesita rediseño sustancial
5. Modo Industrial (Ya implementado parcialmente)
Viabilidad: Alta
Complejidad: Media-Baja
Ya implementado:
Detección de EPP
Análisis de posturas
Detección básica de fuego/humo
Próximos pasos viables:
Mejorar la precisión con modelos específicos
Añadir más reglas de seguridad industrial específicas por sector
Plan de Implementación Recomendado
Fase 1 (Corto plazo - 1-3 meses)
Perfeccionar el modo industrial existente:
Entrenamiento de modelos específicos para EPP con datos reales
Mejora de la interfaz de usuario para configuración de zonas
Generación de reportes automatizados
Mejoras de seguridad básicas:
Implementar HTTPS en toda la aplicación
Añadir autenticación multifactor
Cifrado de datos sensibles
Integración con sistemas básicos:
APIs para sistemas de control de acceso
Webhooks para alarmas
Fase 2 (Medio plazo - 3-6 meses)
Mejoras en IA:
Implementar análisis de comportamiento predictivo simple
Detección de actividades sospechosas básicas
Control de aforo y densidad de personas
Arquitectura distribuida inicial:
Dockerización de componentes
Mejora de la escalabilidad horizontal
Interfaces avanzadas:
Visualización geoespacial básica
Dashboards personalizables por rol
Fase 3 (Largo plazo - 6-12 meses)
IA avanzada:
Implementar modelos transformer para análisis de video
Aprendizaje por refuerzo para cámaras PTZ
Análisis forense avanzado
Arquitectura completa:
Edge computing para procesamiento en cámaras
Microservicios completos con service mesh
Replicación geográfica
Funcionalidades sectoriales:
Implementación de soluciones verticales específicas
Integración con sistemas gubernamentales
Consideraciones de Recursos
Para implementar estas mejoras se necesitaría:
1. Equipo de desarrollo:
2-3 desarrolladores backend (Python/Flask)
1-2 especialistas en ML/Computer Vision
1 especialista en seguridad informática
1 desarrollador frontend
Infraestructura:
Servidores con GPUs para entrenamiento de modelos
Almacenamiento escalable para videos
Entornos de staging y producción
3. Presupuesto aproximado:
Fase 1: $50,000 - $80,000
Fase 2: $100,000 - $150,000
Fase 3: $200,000 - $300,000
Conclusión
El proyecto tiene una base sólida con el modo industrial ya implementado. Es completamente viable implementar la mayoría de las mejoras propuestas, pero recomiendaría un enfoque por fases priorizando:
Primero: Perfeccionar lo existente y añadir seguridad básica
Segundo: Mejorar capacidades de IA e iniciar arquitectura distribuida
Tercero: Implementar características avanzadas y especializadas
El mayor desafío técnico está en la implementación de modelos de IA avanzados y la arquitectura distribuida completa, que requieren experiencia especializada y recursos computacionales significativos.

---------------

Próximos Pasos
Si encuentras errores adicionales en la aplicación, sería útil que los compartieras para poder abordarlos. Si deseas mejorar la robustez de la aplicación, podrías considerar:
Implementar más validaciones en las API
Mejorar el manejo de errores en las funciones principales
Agregar funcionalidad de registro más detallada para facilitar la depuración


Detector de asalto:

Datos e Información sobre el Sistema de Detección de Asaltos
Este agente implementa una funcionalidad avanzada para detectar posibles situaciones de asalto o robo, utilizando análisis de comportamiento:
Detección de múltiples comportamientos sospechosos:
Manos levantadas (indicador clásico de asalto a un banco o tienda)
Personas en el suelo (posibles rehenes o víctimas)
Movimientos bruscos/corriendo (huida o pánico)
Armas visibles
Rostros cubiertos (pasamontañas, máscaras)
Cambios súbitos en agrupaciones de personas (dispersión o concentración repentina)
Análisis multi-frame:
Mantiene un historial de detecciones para analizar comportamientos a lo largo del tiempo
Detecta cambios súbitos en el número de personas (indicador de pánico)
Evaluación ponderada de amenazas:
Asigna diferentes pesos a cada comportamiento sospechoso
Calcula un "nivel de amenaza" combinado
Aplica un multiplicador por combinación de factores (múltiples comportamientos sospechosos simultáneos son más alarmantes)
4. Sistema de alertas críticas:
Genera alertas de alta prioridad cuando se supera un umbral
Incluye capturas de imagen de la situación
Implementa un sistema de "cooldown" para evitar alertas repetitivas
3. Implementación práctica del detector
La implementación actual incluye algunos métodos que están "simulados" en esta versión. Para una implementación completa, estos métodos necesitarían:
Detección de manos levantadas:
Requeriría un modelo de estimación de poses (como OpenPose, MediaPipe o BlazePose)
Detectaría la posición relativa de las articulaciones de hombros, codos y muñecas
Detección de rostros cubiertos:
Requeriría un detector facial más avanzado
Analizaría la visibilidad de características faciales
Detección de movimiento rápido:
Implementaría seguimiento de objetos entre frames
Calcularía vectores de velocidad para cada persona detectada
En una implementación más avanzada, el sistema podría integrarse con otros modelos especializados o utilizar aprendizaje por refuerzo para mejorar la precisión de las detecciones con el tiempo.
4. Acceso a la configuración
La página de configuración del detector de asaltos ya está implementada y accesible en /assault-config. Desde allí, los usuarios pueden:
Activar/desactivar el detector
Ajustar el umbral de confianza
Seleccionar qué comportamientos sospechosos considerar
Configurar los destinatarios de alertas
Probar el detector

------------------------------
IMPORTANTE!!
Otras Mejoras Recomendadas
Para mejorar la robustez general del sistema, recomendaría implementar pruebas unitarias para los componentes clave, lo que ayudaría a detectar estos problemas antes de que aparezcan en producción.
También sería útil añadir comprobaciones de tipo en las funciones críticas para evitar errores inesperados cuando los datos no son del tipo esperado.

Evaluación del Estado Actual del Sistema y Pasos Pendientes
Estado de Implementación: 40% completado
Desglose por áreas principales:
| Área | Estado | Completitud |
|------|--------|-------------|
| Sistema base (cámaras, detección, interfaz) | Funcional | 80% |
| Detección de asaltos | Simulado, sin detección real de posturas | 30% |
| Modo industrial | Estructura básica implementada | 40% |
| Gestión de datasets y entrenamiento | Parcialmente implementado | 35% |
| Sistema de alertas avanzado | Estructura básica, falta refinamiento | 45% |
| Creación dinámica de agentes | Parcialmente implementado | 40% |
| Integración con IA externa | No implementado | 0% |
| Conexión WhatsApp | Estructura básica | 25% |
| Gestión geoespacial | No implementado | 0% |
| Robustez (pruebas, validaciones de tipo) | No implementado | 5% |
Próximos pasos críticos:
Implementar validación de tipos y manejo de errores (prioridad alta)
Esto reducirá significativamente los errores que estamos encontrando
Debería agregarse a todas las funciones públicas de las clases principales
Integrar detección real de poses humanas para el detector de asaltos
Reemplazar la simulación actual con un modelo real como MediaPipe
Esto permitiría probar la detección de manos levantadas con la webcam
3. Desarrollar pruebas unitarias para los componentes clave
Comenzar con AlertManager, CameraManager y el detector de asaltos
Implementar pruebas para los escenarios más críticos
Respuesta a tu pregunta sobre pruebas:
Actualmente, el sistema de detección de asaltos está simulado, por lo que no detectará realmente si levantas las manos frente a la webcam. Para implementar esta funcionalidad necesitamos:
Integrar una biblioteca de detección de poses como MediaPipe o BlazePose:
Modificar el método _detect_raised_hands en AssaultDetectionAgent para usar detección real:
3. Luego podrías probar el sistema activando la webcam y levantando las manos para ver si genera una alerta.



---------------------------------------------------

Estado actual del sistema
Basado en las interacciones, parece que hay un sistema de vigilancia inteligente con un módulo industrial que tiene varios problemas:
Problemas con la visualización de cámaras - No se puede ver el video en vivo de la cámara web
Configuración de zonas de peligro - No se pueden dibujar o editar áreas
Errores de configuración - Errores como 'IndustrialSafetyManager' object has no attribute 'fire_detection_enabled'
Alertas - Las alertas manuales parecen funcionar pero hay problemas con la detección automática
Integración con Bootstrap - Errores como "bootstrap is not defined"
Componentes principales
Para entender mejor el sistema, vamos a listar sus componentes principales:
app.py - El servidor Flask principal, con endpoints API para diversas funcionalidades
src/industrial_safety.py - Gestor de seguridad industrial que maneja configuraciones
src/industrial_safety_agent.py - Agente encargado de la detección de problemas de seguridad
4. src/alert_manager.py - Sistema para gestionar alertas
templates/industrial.html - Interfaz de usuario para configurar el modo industrial
Lo que está funcionando
Carga básica del sistema
Módulo de alertas manuales
Interfaz básica de usuario
Lo que no está funcionando
Visualización de video en vivo
Configuración de áreas de detección
Detección automática de incendios/EPP
Guardado de configuraciones
Plan para resolver los problemas
Necesitamos un enfoque sistemático para solucionar los problemas pendientes:
Visualización de cámaras: Implementar correctamente el streaming de video
Configuración de zonas: Asegurar que el canvas y sus eventos funcionan correctamente
Integración con Bootstrap: Verificar que todas las dependencias estén cargadas
Atributos de IndustrialSafetyManager: Asegurarnos de que todos los atributos necesarios estén definidos
Mejorar el manejo de errores: Para tener mejor información sobre lo que falla
Voy a crear un resumen completo con recomendaciones para el usuario.
</think>
Diagnóstico y Plan Completo del Sistema de Vigilancia Industrial
Vamos a hacer un repaso general del sistema, analizando lo que funciona, lo que falta, y cómo podemos mejorarlo.
Estado Actual del Sistema
Lo que está funcionando:
Inicialización básica del sistema
Interfaz general del módulo industrial
Sistema de alertas manuales
Configuraciones básicas en la interfaz
Visualización de estadísticas
Backend API para ciertas funcionalidades
Lo que NO está funcionando:
Visualización de video en vivo de las cámaras
Definición y guardado de zonas de peligro
Detección automática de incendios/EPP
Configuración efectiva de parámetros
Sistema de notificaciones emergentes
Arquitectura del Sistema
El sistema está compuesto por estos componentes principales:
Backend (Python/Flask):
app.py: Servidor principal con endpoints API
src/industrial_safety.py: Gestor de seguridad industrial
src/industrial_safety_agent.py: Agente encargado de la detección
src/alert_manager.py: Sistema para gestionar alertas
Frontend (HTML/JavaScript):
templates/industrial.html: Interfaz de usuario
Funcionalidades JavaScript para interactuar con APIs
Plan de Acción para Completar el Sistema
1. Visualización de Video en Vivo
2. Atributos Faltantes en IndustrialSafetyManager
3. Corregir la Funcionalidad de Zonas
La funcionalidad de creación de zonas requiere:
Un canvas que permita dibujar sobre la imagen de la cámara
JavaScript para manejar los eventos de dibujo
Almacenamiento de coordenadas en el backend
API para guardar y cargar zonas
Ya has implementado parte de esto, pero falta asegurarse de que el HTML contenga la estructura necesaria:
4. Debugging Mejorado
Para ayudar a identificar problemas específicos, agrega estas funciones de diagnóstico:
Resumen de Tareas Pendientes
Implementar visualización de video en vivo
Asegurarse de que camera-stream existe y recibe datos
Añadir manejo de errores en la carga de stream
Corregir configuración de zonas
Verificar estructura HTML para zonas
Asegurar que initZoneCanvas se ejecuta correctamente
Implementar guardado de zonas en backend
Arreglar configuración de detección de incendios
Asegurar que IndustrialSafetyManager tiene todos los atributos
Corregir endpoint /api/industrial/fire-detection/config
Mejorar sistema de alertas
Asegurar carga correcta de Bootstrap
Implementar mostrado de alertas en tiempo real
Testing integral
Probar cada componente individualmente
Verificar integración entre componentes
Recomendaciones Finales
Revisar errores en consola: Los errores específicos te dan pistas sobre qué está fallando
Implementar cambios gradualmente: Resuelve un problema a la vez y prueba
Verificar conexiones backend-frontend: Asegura que las API responden correctamente
Revisar nombres de variables: Asegúrate de que coincidan en frontend y backend
Con estas correcciones e implementaciones, deberías tener un sistema de vigilancia industrial completamente funcional, capaz de monitorear cámaras, detectar riesgos y gestionar alertas.

Visión General del Sistema de Vigilancia Inteligente
1. Arquitectura General del Sistema
Estructura Principal
El sistema está basado en una arquitectura modular y extensible con los siguientes componentes:
Sistema de Vigilancia Inteligente
├── Núcleo del Sistema (Core)
│   ├── Servidor Flask (app.py)
│   ├── Gestión de Hilos (threading.py)
│   └── API RESTful
├── Gestión de Cámaras
│   ├── Captura de Video (video_capture.py)
│   ├── Transmisión MJPEG/H264
│   └── Control PTZ (si aplica)
├── Framework MCP (Mission Control & Processing)
│   ├── Orquestador MCP
│   ├── Sistema de Agentes Inteligentes
│   └── Gestión de Prioridad de Tareas
├── Procesamiento de Imágenes
│   ├── Detección de Objetos (object_detector.py)
│   ├── Reconocimiento Facial (face_recognition.py)
│   ├── Análisis de Comportamientos (varios agentes)
│   └── Modelos de Machine Learning
├── Sistema de Alertas
│   ├── Gestor de Alertas (alert_manager.py)
│   ├── Notificaciones (WhatsApp, Email, etc.)
│   └── Histórico y Estadísticas
├── Interfaz de Usuario
│   ├── Dashboard Web
│   ├── Configuración del Sistema
│   ├── Visualización de Cámaras
│   └── Gestión de Alertas
└── Módulos Especializados
    ├── Modo Industrial (industrial_safety.py)
    ├── Detección de Asaltos (assault_detection_agent.py)
    ├── Análisis de Situaciones (situation_analysis_agent.py)
    └── Tracking Geográfico (geo_manager.py)



Flujo de Datos
Captura de Video: Las cámaras envían frames a video_capture.py
Procesamiento: Los frames son analizados por diversos detectores y agentes
Análisis: Los resultados de la detección son procesados por agentes especializados
Alertas: Las situaciones relevantes generan alertas en alert_manager.py
Notificaciones: Las alertas pueden activar notificaciones por varios canales
Visualización: Todo se muestra en el dashboard web en tiempo real
2. Sistema de Inteligencia Artificial
Framework MCP (Mission Control & Processing)
El corazón del sistema de IA es el framework MCP, un sistema propio basado en agentes con estas características:
Orquestador MCP: Gestiona el ciclo de vida de los agentes y coordina sus actividades
Agentes Inteligentes: Entidades autónomas especializadas en tareas específicas
Comunicación Entre Agentes: Sistema de mensajes para coordinación y colaboración
Priorización: Capacidad para asignar recursos según la importancia de las tareas
Tipos de Agentes Implementados
Agentes de Detección: Procesan imágenes buscando objetos o situaciones específicas
DetectionAgent: Agente genérico de detección de objetos
AssaultDetectionAgent: Especializado en detectar posibles asaltos
IndustrialSafetyAgent: Enfocado en riesgos industriales
Agentes de Análisis: Analizan resultados para identificar situaciones complejas
SituationAnalysisAgent: Utiliza IA externa para comprender escenarios complejos
FireDetectionAgent: Especializado en detectar incendios/humo
Agentes de Notificación: Gestionan la comunicación de alertas
AlertAgent: Gestiona el envío de alertas a través de la interfaz
WhatsAppAlertAgent: Especializado en enviar notificaciones por WhatsApp
Agentes de Gestión: Administran recursos del sistema
CameraAgent: Gestiona el estado y configuración de las cámaras
GuardTrackingAgent: Monitorea la posición geográfica de guardias
Sistema de Creación de Agentes
Existe un sistema inicial para crear nuevos agentes de forma dinámica:
AgentTemplateManager: Gestor de plantillas para crear nuevos agentes
Interfaz web para configurar parámetros básicos
Capacidad para asociar modelos de ML con agentes específicos
3. Sistema de Gestión de Cámaras
Fuentes de Video Compatibles
Cámaras IP (RTSP, HTTP, MJPEG)
Webcams USB
Archivos de video (para pruebas/simulación)
Transmisiones RTMP/HLS
Características de Gestión
Multihilo: Cada cámara funciona en su propio hilo para no bloquear el sistema
Auto-reconexión: Intentos automáticos de reconexión si se pierde la señal
Configuración Dinámica: Ajustes de resolución, FPS, etc. en tiempo real
Transmisión Adaptativa: Ajuste de calidad según disponibilidad de red
ROI (Regiones de Interés)
Definición de zonas específicas para análisis en cada cámara
Diferentes configuraciones de sensibilidad por zona
Reglas específicas asociadas a cada región
4. Modos Preconfigurados
El sistema ofrece varios modos predefinidos que ajustan todos los parámetros para escenarios específicos:
Modo Normal
Configuración estándar para vigilancia general
Detección de movimiento básica
Reconocimiento facial para control de acceso
Modo Comercial
Optimizado para tiendas y comercios
Detección de comportamientos sospechosos
Análisis de flujo de clientes
Alertas de intrusión fuera de horario
Modo Aeropuerto
Alta sensibilidad para grandes espacios
Reconocimiento facial avanzado
Detección de objetos abandonados
Seguimiento de personas específicas
Modo Residencial (Barrio Privado)
Enfocado en control de acceso
Detección de intrusiones perimetrales
Reconocimiento de vehículos
Alertas de comportamientos inusuales
Modo Industrial
Detección de equipos de protección personal (EPP)
Monitoreo de zonas peligrosas
Detección temprana de incendios
Cumplimiento de protocolos de seguridad
5. Machine Learning y Deep Learning
Modelos Implementados
1. Detección de Objetos: YOLOv5/v8 para identificar personas, vehículos, objetos
Reconocimiento Facial: Sistema basado en CNN para identificación de personas
Análisis Postural: Detección de posturas (manos levantadas, persona caída)
Detección de Anomalías: Identificación de comportamientos inusuales
5. Clasificación de Situaciones: Categorización de escenarios (normal, sospechoso, peligroso)
Sistema de Entrenamiento
Gestor de Datasets: Para crear conjuntos de datos personalizados
Herramientas de Etiquetado: Interfaz para clasificar y etiquetar imágenes
Procesos de Entrenamiento: Flujos automatizados para reentrenar modelos
Validación y Testing: Herramientas para evaluar el rendimiento de los modelos
Integración con IA Externa
Conectores para servicios como Claude, Google Gemini
Capacidad de análisis de alto nivel para situaciones complejas
Interpretación contextual avanzada mediante LLMs
6. Dashboard y Sistema de Alertas
Dashboard Principal
Visión general del estado del sistema
Monitoreo de cámaras activas
Estadísticas de detecciones y alertas
Controles rápidos para configuración
Visualización de Cámaras
Stream en vivo de múltiples cámaras
Superposición de detecciones y metadatos
Herramientas de zoom y control PTZ
Reproducción de eventos históricos
Sistema de Alertas
Alertas en Tiempo Real: Notificaciones inmediatas en dashboard
Clasificación por Severidad: Priorización de alertas (informativa, advertencia, crítica)
Filtros y Búsqueda: Herramientas para gestionar grandes volúmenes de alertas
Confirmación y Seguimiento: Workflow para atender y resolver alertas
Notificaciones
Integración WhatsApp: Envío de alertas y capturas por WhatsApp
Correo Electrónico: Resúmenes y alertas críticas
Notificaciones Push: Para aplicaciones móviles (planificado)
Integración con Sistemas Externos: APIs para conectar con otras plataformas
7. Estado Actual y Próximos Pasos
Estado de Implementación
| Módulo | Estado | Completitud |
|--------|--------|-------------|
| Sistema Base | Funcional | 85% |
| Gestión de Cámaras | Funcional | 80% |
| Framework MCP | Operativo | 70% |
| Detección de Objetos | Implementado | 75% |
| Reconocimiento Facial | Básico | 60% |
| Detección de Asaltos | Parcial | 40% |
| Modo Industrial | En desarrollo | 45% |
| Dashboard | Funcional | 70% |
| Sistema de Alertas | Operativo | 65% |
| Integración WhatsApp | Básica | 30% |
| Gestión Geoespacial | Inicial | 20% |
| IA Externa | Conceptual | 15% |
Próximos Desarrollos Prioritarios
Completar Modo Industrial
Finalizar visualización de cámaras en vivo
Implementar gestión de zonas de peligro
Mejorar detección de incendios y EPP
Mejorar Sistema de Agentes
Completar interfaz de creación dinámica de agentes
Implementar retroalimentación y aprendizaje continuo
Mejorar la coordinación entre agentes
Ampliar Capacidades de ML/DL
Implementar sistema completo de entrenamiento
Mejorar detección postural para identificar asaltos
Desarrollar modelos específicos para comportamientos sospechosos
Expandir Integración con Servicios Externos
Completar conexión con Claude/Gemini para análisis avanzado
Mejorar sistema de notificaciones WhatsApp
Implementar APIs para sistemas de terceros
Desarrollar Gestión Geoespacial
Completar sistema de seguimiento de guardias
Implementar geocercas y rutas
Integrar mapas interactivos en dashboard
8. Arquitectura Técnica
Stack Tecnológico
Backend: Python con Flask
Frontend: HTML5, JavaScript, Bootstrap
Base de Datos: SQLite (desarrollo), PostgreSQL (producción)
ML/DL: PyTorch, TensorFlow, OpenCV
Comunicación: RESTful APIs, WebSockets
Despliegue: Docker, opcionalmente Kubernetes

Diagrama de Componentes

                  ┌─────────────┐
                  │  Frontend   │
                  │  Dashboard  │
                  └──────┬──────┘
                         │
                         ▼
┌─────────────┐    ┌──────────────┐    ┌─────────────┐
│  Cámaras    │───▶│ Flask Server │◀───│ Servicios   │
│  y Sensores │    │    (API)     │    │ Externos    │
└─────────────┘    └──────┬───────┘    └─────────────┘
                         │
        ┌────────────────┼────────────────┐
        │                │                │
        ▼                ▼                ▼
┌─────────────┐    ┌──────────────┐    ┌─────────────┐
│ Detección y │    │ Framework MCP│    │ Sistema de  │
│ Análisis    │───▶│ (Orquestador)│───▶│ Alertas     │
└─────────────┘    └──────────────┘    └─────────────┘


9. Recomendaciones para el Desarrollo Futuro
Priorizar la Robustez
Implementar pruebas unitarias para componentes críticos
Mejorar manejo de errores y validación de tipos
Implementar capacidades de auto-recuperación
Enfoque Gradual en ML/DL
Comenzar con modelos simples bien ajustados
Implementar evaluación sistemática de precisión
Crear proceso para mejorar modelos con nuevos datos
Arquitectura Modular
Continuar el enfoque de módulos independientes
Documentar interfaces entre componentes
Facilitar la adición de nuevos agentes y funcionalidades
4. Escalabilidad
Diseñar para crecimiento en número de cámaras
Optimizar procesamiento para reducir carga de CPU/GPU
Considerar despliegue distribuido para grandes instalaciones
Esta visión general del sistema proporciona un mapa completo de la arquitectura actual, capacidades y direcciones futuras del sistema de vigilancia inteligente.

--------------------------------
Nueva estructura de proyecto

4. Verificar y actualizar la estructura de archivos del proyecto
Para asegurarnos de que todos los archivos estén en su lugar, aquí está la estructura de directorios del proyecto:


proyecto/
├── app.py
├── config/
│   ├── system_config.json
│   └── forensic/
├── data/
│   ├── videos/
│   └── forensic/
│       └── evidence/
├── src/
│   ├── assault_detection_agent.py
│   ├── camera_manager.py
│   ├── ensemble_detection_agent.py
│   ├── forensic_analysis.py
│   ├── generative_description_agent.py
│   ├── industrial_safety_agent.py
│   ├── mcp_framework.py
│   ├── object_detector.py
│   ├── operation_mode_router.py
│   ├── retail_security_agent.py
│   └── ... (otros archivos)
├── static/
│   ├── css/
│   ├── js/
│   └── img/
├── templates/
│   ├── advanced_settings.html
│   ├── base.html
│   ├── commercial.html
│   ├── dashboard.html
│   ├── forensic.html
│   ├── industrial.html
│   └── ... (otros templates)
├── tools/
│   └── test_ppe_detection.py
├── docs/
│   ├── TECHNICAL_DOCS.md
│   ├── TESTING_GUIDE.md
│   └── USER_GUIDE.md
├── requirements.txt
└── README.md


5. Instrucciones para ejecutar y probar el sistema
Una vez corregidos los errores, puedes iniciar el sistema con estos pasos:
Asegúrate de tener todas las dependencias instaladas:
2. Verifica que existan los directorios necesarios:
Inicia la aplicación:
Accede al sistema a través del navegador:
El sistema ahora incluye todas las nuevas funcionalidades:
IA generativa para descripciones
Ensemble de modelos para mayor precisión
Configuración avanzada personalizable
Análisis forense completo

   # Ejecutar en la terminal
   pip install -r requirements.txt

      mkdir -p config/forensic data/videos data/forensic/evidence

         ls src/

            python app.py


-------------------------------------------

DATOS GENERALES:

Resumen Tecnológico del Sistema de Vigilancia IA
1. Tecnologías Principales
Backend
Python: Lenguaje principal del sistema
Flask: Framework web para la API REST y servidor web
Blueprints de Flask: Para organización modular de rutas (main_bp, api_bp)
Jinja2: Motor de plantillas para renderizar HTML
Base de Datos
SQLAlchemy: ORM (Object-Relational Mapping) para interactuar con la base de datos
SQLite: Base de datos por defecto para almacenamiento (configurable para otros sistemas)
Modelos de datos: Camera, Alert, DetectionEvent para gestionar entidades del sistema
Procesamiento de Imágenes
OpenCV (cv2): Biblioteca principal para captura de video, procesamiento de imágenes y detección
Múltiples backends de cámaras: MSMF (Media Foundation), DirectShow, Video for Windows
2. Módulos del Sistema
Módulo de Cámaras
Sistema de gestión de cámaras: Permite configurar, monitorear y administrar cámaras IP, RTSP y webcams
Detección dinámica de interfaces: Intenta automáticamente diferentes métodos de conexión a cámaras
Streaming en tiempo real: Captura y transmisión de video mediante HTTP streaming
Módulo de Detección y AI
Detectores avanzados: Integración con sistemas de IA para detección
Tipos de detección:
Detección de poses (personas)
Reconocimiento facial
Detección de incendios/humo
Detección de agua/inundaciones
Procesamiento asíncrono: Sistema de colas para análisis en segundo plano
Módulo de Alertas
Sistema de notificaciones: Generación y gestión de alertas en tiempo real
Clasificación por severidad: Alertas críticas, altas, medias, bajas
Gestión del ciclo de vida: Creación, notificación, resolución de alertas
Módulo de Diagnósticos
Monitoreo de recursos: CPU, memoria, disco usando psutil
Diagnóstico de cámaras: Pruebas de conectividad y rendimiento
Monitoreo de red: Análisis de tráfico y estado de la red
Herramientas forenses: Análisis post-evento y recuperación de datos
Módulo de Configuración
Gestión centralizada: Interfaz para todos los parámetros del sistema
Perfiles de operación: Modos normal, mejorado, crítico y bajo consumo
Integración con APIs externas: Configuración para WhatsApp, Telegram, Email, SMS
3. Arquitectura y Patrones
Arquitectura del Sistema
Arquitectura modular: Componentes independientes y reutilizables
Patrón MVC: Separación de modelo, vista y controlador
API RESTful: Interfaces programáticas para integración con otros sistemas
Blueprints de Flask: Organización de rutas por funcionalidad
Gestión de Datos
Modelos relacionales: Estructura de datos normalizada
Operaciones CRUD: Creación, lectura, actualización y eliminación de entidades
Migraciones: Esquema de base de datos actualizable
4. Interfaz de Usuario
Frontend
HTML5/CSS3: Estructura y estilos modernos
JavaScript: Interactividad del lado del cliente
Jinja2 Templates: Renderizado de vistas dinámicas
Diseño responsivo: Adaptación a diferentes tamaños de pantalla
Componentes reutilizables: Sistema modular de componentes de UI
Elementos UI
Dashboard: Visualización centralizada del estado del sistema
Monitoreo en tiempo real: Visualización de cámaras y alertas
Gestor de cámaras: Configuración y control
Centro de alertas: Gestión y visualización de alertas
Diagnósticos y estadísticas: Monitoreo de recursos y rendimiento
Panel de configuración: Ajustes del sistema
5. Integraciones y APIs
APIs Externas
Servicios de mensajería: WhatsApp, Telegram, Email, SMS
Servicios cloud: Google Cloud, Firebase
OpenAI: Integración para análisis inteligente
Home Assistant/Zoneminder: Integración con sistemas de domótica
Seguridad
Gestión de claves API: Almacenamiento seguro de credenciales
Verificación de endpoints: Validación de solicitudes
Registro de actividad: Logging detallado de acciones del sistema
6. Utilidades y Herramientas
Utilidades del Sistema
Logging avanzado: Registro multinivel de eventos y errores
Manejo de excepciones: Captura y gestión centralizada de errores
Creación de directorios: Gestión automática de estructura de archivos
Gestión de recursos: Control de memoria y CPU
Herramientas de Desarrollo
Infraestructura para pruebas: Endpoints de prueba para validación
Datos de demostración: Inicialización automática para desarrollo
Funciones de diagnóstico: Herramientas para depuración
7. Modo de Operación
El sistema implementa diferentes modos de operación que pueden ser configurados según las necesidades:
Modo normal: Equilibrio entre funcionalidad y uso de recursos
Modo mejorado: Mayor sensibilidad y procesamiento avanzado
Modo bajo consumo: Operación con recursos mínimos
Modo crítico: Máxima sensibilidad para situaciones de emergencia
Cada módulo del sistema puede adaptarse a estos modos, ajustando parámetros como frecuencia de muestreo, sensibilidad de detección y consumo de recursos.
---
Este sistema integra tecnologías modernas de procesamiento de imágenes, IA y desarrollo web para crear una plataforma completa de vigilancia inteligente, adaptable a diversos entornos y necesidades de seguridad.

--------------------------------------------------------------------------------

📄 app.log (ERROR AL LEER: 'utf-8' codec can't decode byte 0xf3 in position 57: invalid continuation byte)

📄 app.py
--------------------------------------------------------------------------------
from flask import Flask, send_from_directory, render_template, g
from src.database import db
from src.utils.logger import setup_logging
from src.utils.error_handler import register_error_handlers
import os
from datetime import datetime

def create_app():
app = Flask(__name__)

    # Configuración
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev_key_change_in_production')
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get(
        'DATABASE_URL', 'sqlite:///app.db'
    )
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Inicializar extensiones
    db.init_app(app)
    
    # Configurar logging
    logger = setup_logging(app)
    
    # Registrar manejadores de error
    register_error_handlers(app)
    
    # Registrar funciones para usar en todas las plantillas
    @app.context_processor
    def utility_processor():
        return {'now': datetime.now}
    
    # Registrar filtro de fecha personalizado
    @app.template_filter('date')
    def format_date(value):
        if isinstance(value, str):
            try:
                value = datetime.fromisoformat(value)
except:
                return value
        if isinstance(value, datetime):
            return value.strftime('%d/%m/%Y %H:%M')
        return str(value)
    
    # Registrar blueprints (rutas)
    from src.routes.main import main_bp
    from src.routes.api import api_bp
    
    app.register_blueprint(main_bp)
    app.register_blueprint(api_bp, url_prefix='/api')
    
    # Crear tablas en la primera ejecución
    with app.app_context():
        db.create_all()
        logger.info("Tablas de base de datos creadas/verificadas")
        
        # Inicializar datos de demostración si estamos en modo debug
        if app.debug:
            from src.utils.init_db import initialize_demo_data
            initialize_demo_data()
            logger.info("Datos de demostración inicializados")
    
    # Crear directorio para capturas de test si no existe
    test_captures_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'test_captures')
    if not os.path.exists(test_captures_dir):
        os.makedirs(test_captures_dir)
    
    # Permitir servir archivos de capturas de test
    @app.route('/test_captures/<path:filename>')
    def test_captures(filename):
        return send_from_directory('test_captures', filename)
    
    # Crear otros directorios necesarios
    directories = ['snapshots', 'recordings', 'alert_captures']
    for directory in directories:
        dir_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), directory)
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
            logger.info(f"Directorio creado: {directory}")
    
    # Crear directorios necesarios al iniciar la aplicación
    def create_directories_function(app):
        """Crea los directorios necesarios para la aplicación"""
        directories = [
            'snapshots', 
            'recordings', 
            'alert_captures', 
            'detection_snapshots',
            'test_captures'
        ]
        for directory in directories:
            if not os.path.exists(directory):
                os.makedirs(directory)
                app.logger.info(f"Directorio creado: {directory}")

    create_directories_function(app)
    
    # Servir archivos de capturas y grabaciones
    @app.route('/detection_snapshots/<path:filename>')
    def detection_snapshots(filename):
        return send_from_directory('detection_snapshots', filename)

    @app.route('/recordings/<path:filename>')
    def recordings(filename):
        return send_from_directory('recordings', filename)

    @app.route('/snapshots/<path:filename>')
    def snapshots(filename):
        return send_from_directory('snapshots', filename)

    @app.route('/alert_captures/<path:filename>')
    def alert_captures(filename):
        return send_from_directory('alert_captures', filename)
    
    # Asegurarse de que el directorio de diagnóstico existe
    @app.route('/diagnostics/<path:filename>')
    def diagnostics(filename):
        diagnostics_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'diagnostics')
        if not os.path.exists(diagnostics_dir):
            os.makedirs(diagnostics_dir)
        return send_from_directory('diagnostics', filename)
    
    @app.route('/camera/testing')
    def camera_testing():
        """Página de prueba de detectores en tiempo real"""
        return render_template('camera_testing.html')
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(host='0.0.0.0', port=5000, debug=True)


--------------------------------------------------------------------------------

📄 arquitectura.txt
--------------------------------------------------------------------------------
graph TD
    A[Frontend Web] --> B[API REST]
    B --> C[Gestor de Configuración]
    B --> D[Gestor de Cámaras]
    B --> E[Gestor de Alertas]
    B --> F[Gestor de Modos de Operación]
    
    C --> G[Base de Datos]
    D --> H[Procesador de Video]
    E --> I[Sistema de Notificaciones]
    F --> J[Perfiles Predefinidos]
    
    H --> K[Detección de Movimiento]
    H --> L[Reconocimiento Facial]
    H --> M[Análisis de Comportamiento]
    H --> N[Detección de Objetos]
    
    I --> O[Alertas WhatsApp]
    I --> P[Email]
    I --> Q[Activación de Dispositivos]
    
    J --> R[Modo Barrio Privado]
    J --> S[Modo Aeropuerto]
    J --> T[Modo Comercial]
    J --> U[Modo Personalizado]

--------------------------------------------------------------------------------

📄 create_project_structure.ps1
--------------------------------------------------------------------------------
# Crear directorios principales
$directories = @(
    "config",
    "data/face",
    "data/motion", 
    "data/objects",
    "data/loitering",
    "models",
    "logs",
    "src",
    "static",
    "templates"
)

foreach ($dir in $directories) {
    New-Item -ItemType Directory -Path $dir -Force
}

# Crear archivos Python y HTML
$files = @{
    "src/motion_detector.py" = @"
import cv2
import numpy as np

class MotionDetector:
    def __init__(self):
        self.background_subtractor = cv2.createBackgroundSubtractorMOG2()
        
    def detect_motion(self, frame):
        # Aplicar sustracción de fondo
        fg_mask = self.background_subtractor.apply(frame)
        return fg_mask
"@

    "src/agent_manager.py" = @"
class AgentManager:
    def __init__(self):
        self.agents = {}
        
    def register_agent(self, agent_id, agent_type):
        self.agents[agent_id] = {
            'type': agent_type,
            'status': 'inactive'
        }
        
    def activate_agent(self, agent_id):
        if agent_id in self.agents:
            self.agents[agent_id]['status'] = 'active'
"@

    "src/alert_manager.py" = @"
class AlertManager:
    def __init__(self):
        self.subscribers = []
        
    def add_subscriber(self, subscriber):
        self.subscribers.append(subscriber)
        
    def send_alert(self, message, level='info'):
        for subscriber in self.subscribers:
            subscriber.notify(message, level)
"@

    "src/camera_manager.py" = @"
class CameraManager:
    def __init__(self):
        self.cameras = {}
        
    def add_camera(self, camera_id, stream_url):
        self.cameras[camera_id] = {
            'url': stream_url,
            'status': 'offline'
        }
        
    def start_camera(self, camera_id):
        if camera_id in self.cameras:
            self.cameras[camera_id]['status'] = 'online'
"@

    "src/operation_mode.py" = @"
class OperationMode:
    def __init__(self):
        self.current_mode = 'normal'
        self.available_modes = ['normal', 'training', 'maintenance']
        
    def set_mode(self, mode):
        if mode in self.available_modes:
            self.current_mode = mode
            return True
        return False
"@

    "src/model_trainer.py" = @"
class ModelTrainer:
    def __init__(self):
        self.model = None
        self.training_data = []
        
    def add_training_data(self, data, label):
        self.training_data.append((data, label))
        
    def train_model(self):
        if len(self.training_data) > 0:
            # Implementar lógica de entrenamiento
            pass
"@

    "src/training_api.py" = @"
from flask import Blueprint, request, jsonify

training_bp = Blueprint('training', __name__)

@training_bp.route('/train', methods=['POST'])
def train_model():
    return jsonify({'status': 'success'})

@training_bp.route('/status', methods=['GET'])
def get_training_status():
    return jsonify({'status': 'ready'})
"@

    "app.py" = @"
from flask import Flask, render_template
from src.training_api import training_bp

app = Flask(__name__)
app.register_blueprint(training_bp, url_prefix='/api/training')

@app.route('/')
def index():
    return render_template('base.html')

if __name__ == '__main__':
    app.run(debug=True)
"@

    "templates/base.html" = @"
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Vigilancia</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="{{ url_for('index') }}">Inicio</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        {% block content %}
        {% endblock %}
    </main>
    
    <footer>
        <p>&copy; 2024 Sistema de Vigilancia</p>
    </footer>
</body>
</html>
"@
}

# Crear los archivos con el contenido
foreach ($file in $files.Keys) {
    $content = $files[$file]
    New-Item -ItemType File -Path $file -Force
    Set-Content -Path $file -Value $content
}

Write-Host "¡Estructura del proyecto creada exitosamente!"

--------------------------------------------------------------------------------

📄 docker-compose.yml
--------------------------------------------------------------------------------
version: '3.8'

services:
  app:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    depends_on:
      - db
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/surveillance
      - PYTHONUNBUFFERED=1
    
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=surveillance
    ports:
      - "5432:5432"

volumes:
  postgres_data: 

--------------------------------------------------------------------------------

📄 extract_system_info.py
--------------------------------------------------------------------------------
import os
import time
import datetime
import shutil
from pathlib import Path

def get_files_sorted_by_time(directory, exclude_dirs=None, exclude_patterns=None):
    """Obtiene los archivos ordenados por tiempo de modificación (más reciente primero)"""
    if exclude_dirs is None:
        exclude_dirs = ['.git', '__pycache__', '.venv', 'venv', 'vigilai_env', 'node_modules']
    
    if exclude_patterns is None:
        exclude_patterns = [
            'vigilai_env/Lib', 'vigilai_env\\Lib',
            '.venv/Lib', '.venv\\Lib',
            'venv/Lib', 'venv\\Lib',
            'site-packages', 'dist-packages',
            'pip/_vendor', 'pip\\_vendor'
        ]
    
    file_list = []
    for root, dirs, files in os.walk(directory):
        # Excluir directorios no deseados
        dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
        
        # Excluir si la ruta coincide con algún patrón a excluir
        if should_exclude_path(root, exclude_patterns):
            dirs[:] = []  # No explorar subdirectorios
            continue
            
        for file in files:
            file_path = os.path.join(root, file)
            try:
                mod_time = os.path.getmtime(file_path)
                file_list.append((file_path, mod_time))
            except Exception as e:
                print(f"Error al acceder a {file_path}: {e}")
    
    # Ordenar por tiempo de modificación (más reciente primero)
    file_list.sort(key=lambda x: x[1], reverse=True)
    return file_list

def format_datetime(timestamp):
    """Formatea una marca de tiempo en una fecha legible"""
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

def get_file_extension(file_path):
    """Retorna la extensión del archivo"""
    _, ext = os.path.splitext(file_path)
    return ext.lower()

def is_binary_file(file_path):
    """Verifica si un archivo es binario basado en su extensión"""
    binary_extensions = ['.pyc', '.png', '.jpg', '.jpeg', '.gif', '.pdf', '.zip', 
                         '.tar', '.gz', '.exe', '.dll', '.so', '.bin', '.dat', 
                         '.mp3', '.mp4', '.avi', '.mov', '.sqlite', '.db']
    return get_file_extension(file_path) in binary_extensions

def should_exclude_directory(root, exclude_dirs):
    """Determina si un directorio debe ser excluido basado en nombres de directorios"""
    for exclude_dir in exclude_dirs:
        if exclude_dir in root.split(os.sep):
            return True
    return False

def should_exclude_path(path, exclude_patterns):
    """Determina si una ruta debe ser excluida basado en patrones"""
    # Normalizar slashes para que funcione en cualquier SO
    normalized_path = path.replace('\\', '/').lower()
    
    for pattern in exclude_patterns:
        pattern = pattern.lower().replace('\\', '/')
        if pattern in normalized_path:
            return True
    return False

def generate_system_report(project_dir, output_file, recent_files_count=20):
    """Genera un informe completo del sistema"""
    # Directorios a excluir
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    # Patrones de ruta a excluir
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor',
        'python3', 'python2',
        'bin/python', 'Scripts'
    ]
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # Encabezado del informe
        f.write("=" * 80 + "\n")
        f.write(f"INFORME DEL SISTEMA DE VIGILANCIA IA\n")
        f.write(f"Generado el {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 80 + "\n\n")
        
        # Sección 1: Estructura del directorio
        f.write("1. ESTRUCTURA DEL PROYECTO\n")
        f.write("=" * 80 + "\n\n")
        
        # Recorrer y mostrar la estructura de directorios
        for root, dirs, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
            
            # Saltar este directorio si debe ser excluido
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                dirs[:] = []  # No explorar subdirectorios
                continue
            
            level = root.replace(project_dir, '').count(os.sep)
            indent = ' ' * 4 * level
            rel_path = os.path.relpath(root, project_dir)
            if rel_path == '.':
                f.write(f"{indent}📁 /\n")
            else:
                f.write(f"{indent}📁 {os.path.basename(root)}/\n")
            
            sub_indent = ' ' * 4 * (level + 1)
            for file in sorted(files):
                if not file.startswith('.'):
                    f.write(f"{sub_indent}📄 {file}\n")
        
        f.write("\n\n")
        
        # Sección 2: Archivos recientes
        f.write("2. ÚLTIMOS ARCHIVOS MODIFICADOS\n")
        f.write("=" * 80 + "\n\n")
        
        recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:recent_files_count]
        for file_path, mod_time in recent_files:
            rel_path = os.path.relpath(file_path, project_dir)
            f.write(f"📄 {rel_path}\n")
            f.write(f"   Última modificación: {format_datetime(mod_time)}\n\n")
        
        f.write("\n\n")
        
        # Sección 3: Contenido de los archivos
        f.write("3. CONTENIDO DE LOS ARCHIVOS\n")
        f.write("=" * 80 + "\n\n")
        
        for root, _, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
            
            for file in sorted(files):
                if file.startswith('.') or file == output_file:
                    continue
                
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, project_dir)
                
                if is_binary_file(file_path):
                    f.write(f"📄 {rel_path} (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)\n\n")
                    continue
                
                try:
                    # Intentar leer el archivo
                    with open(file_path, 'r', encoding='utf-8') as source_file:
                        content = source_file.read()
                        
                    f.write(f"📄 {rel_path}\n")
                    f.write("-" * 80 + "\n")
                    f.write(content)
                    f.write("\n\n")
                    f.write("-" * 80 + "\n\n")
                except Exception as e:
                    f.write(f"📄 {rel_path} (ERROR AL LEER: {str(e)})\n\n")
        
        # Sección 4: Resumen final
        f.write("4. RESUMEN DEL SISTEMA\n")
        f.write("=" * 80 + "\n\n")
        
        # Contar archivos por tipo
        file_types = {}
        total_files = 0
        total_lines = 0
        
        for root, _, files in os.walk(project_dir):
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
                
            for file in files:
                if file.startswith('.'):
                    continue
                    
                file_path = os.path.join(root, file)
                ext = get_file_extension(file_path)
                
                if ext not in file_types:
                    file_types[ext] = 0
                file_types[ext] += 1
                total_files += 1
                
                if not is_binary_file(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as source_file:
                            lines = len(source_file.readlines())
                            total_lines += lines
                    except:
                        pass
        
        f.write(f"Total de archivos: {total_files}\n")
        f.write(f"Total de líneas de código (aproximado): {total_lines}\n\n")
        
        f.write("Distribución por tipo de archivo:\n")
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
            if ext == '':
                ext = '(sin extensión)'
            f.write(f"  {ext}: {count} archivos\n")

if __name__ == "__main__":
    # Directorio del proyecto (directorio actual)
    project_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Nombre del archivo de salida
    output_file = os.path.join(project_dir, "resumen.txt")
    
    print(f"Generando informe del sistema en: {output_file}")
    print(f"Excluyendo entornos virtuales y sus librerías...")
    generate_system_report(project_dir, output_file)
    print(f"Informe completado. El archivo generado tiene un tamaño de: {os.path.getsize(output_file) / (1024*1024):.2f} MB")
    
    # Crear una copia adicional con los últimos 10 archivos modificados
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor'
    ]
    
    recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:10]
    recent_files_dir = os.path.join(project_dir, "ultimos_archivos_modificados")
    
    # Crear directorio si no existe
    if not os.path.exists(recent_files_dir):
        os.makedirs(recent_files_dir)
    
    # Copiar los archivos más recientes
    for file_path, _ in recent_files:
        if os.path.exists(file_path):
            # Crear estructura de directorios si es necesario
            rel_path = os.path.relpath(file_path, project_dir)
            dest_path = os.path.join(recent_files_dir, rel_path)
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
            
            # Copiar el archivo
            try:
                shutil.copy2(file_path, dest_path)
                print(f"Copiado: {rel_path}")
            except Exception as e:
                print(f"Error al copiar {rel_path}: {e}")
    
    print(f"Se han copiado los {len(recent_files)} archivos más recientes a: {recent_files_dir}") 

--------------------------------------------------------------------------------

📄 init_config.ps1
--------------------------------------------------------------------------------
# Crear directorio de configuración si no existe
New-Item -Path "config\active_models" -ItemType Directory -Force

# Configuración principal del sistema
$systemConfig = @{
  "app_name" = "Sistema de Vigilancia Inteligente"
  "cameras" = @()
  "current_mode" = "normal"
  "available_modes" = @("normal", "barrio_privado", "aeropuerto", "comercial")
  "auto_start" = $false
}
$systemConfig | ConvertTo-Json | Out-File -FilePath "config\system_config.json" -Encoding utf8

# Configuración de modos de operación
$modesConfig = @{
  "normal" = @{
    "description" = "Modo estándar con detección básica de movimiento"
    "agents" = @{
      "motion_detection" = @{
        "enabled" = $true
        "min_area" = 500
        "threshold" = 25
      }
      "facial_recognition" = @{
        "enabled" = $false
      }
      "object_detection" = @{
        "enabled" = $false
      }
      "loitering_detection" = @{
        "enabled" = $false
      }
    }
    "alerts" = @{
      "motion_detection" = @{
        "enabled" = $true
        "cooldown" = 30
      }
      "face_recognition" = @{
        "enabled" = $false
      }
      "object_detection" = @{
        "enabled" = $false
      }
      "loitering_detection" = @{
        "enabled" = $false
      }
    }
    "notifications" = @{
      "email" = $false
      "whatsapp" = $false
      "telegram" = $false
      "webhook" = $false
      "hardware" = $false
    }
  }
  "barrio_privado" = @{
    "description" = "Configuración para seguridad en barrios privados"
    "agents" = @{
      "motion_detection" = @{
        "enabled" = $true
        "min_area" = 1000
        "threshold" = 30
      }
      "facial_recognition" = @{
        "enabled" = $true
      }
      "object_detection" = @{
        "enabled" = $false
      }
      "loitering_detection" = @{
        "enabled" = $true
        "loitering_threshold" = 60
      }
    }
    "alerts" = @{
      "motion_detection" = @{
        "enabled" = $true
        "cooldown" = 60
      }
      "face_recognition" = @{
        "enabled" = $true
        "cooldown" = 120
      }
      "object_detection" = @{
        "enabled" = $false
      }
      "loitering_detection" = @{
        "enabled" = $true
        "cooldown" = 90
      }
    }
    "notifications" = @{
      "email" = $true
      "whatsapp" = $true
      "telegram" = $false
      "webhook" = $false
      "hardware" = $true
    }
  }
  "aeropuerto" = @{
    "description" = "Configuración para seguridad en aeropuertos"
    "agents" = @{
      "motion_detection" = @{
        "enabled" = $true
        "min_area" = 300
        "threshold" = 20
      }
      "facial_recognition" = @{
        "enabled" = $true
      }
      "object_detection" = @{
        "enabled" = $true
        "stationary_frames" = 30
      }
      "loitering_detection" = @{
        "enabled" = $true
        "loitering_threshold" = 120
      }
    }
    "alerts" = @{
      "motion_detection" = @{
        "enabled" = $false
        "cooldown" = 30
      }
      "face_recognition" = @{
        "enabled" = $true
        "cooldown" = 60
      }
      "object_detection" = @{
        "enabled" = $true
        "cooldown" = 30
      }
      "loitering_detection" = @{
        "enabled" = $true
        "cooldown" = 60
      }
    }
    "notifications" = @{
      "email" = $true
      "whatsapp" = $true
      "telegram" = $true
      "webhook" = $true
      "hardware" = $true
    }
  }
  "comercial" = @{
    "description" = "Configuración para comercios y tiendas"
    "agents" = @{
      "motion_detection" = @{
        "enabled" = $true
        "min_area" = 400
        "threshold" = 25
      }
      "facial_recognition" = @{
        "enabled" = $true
      }
      "object_detection" = @{
        "enabled" = $true
        "stationary_frames" = 100
      }
      "loitering_detection" = @{
        "enabled" = $true
        "loitering_threshold" = 300
      }
    }
    "alerts" = @{
      "motion_detection" = @{
        "enabled" = $true
        "cooldown" = 120
      }
      "face_recognition" = @{
        "enabled" = $true
        "cooldown" = 300
      }
      "object_detection" = @{
        "enabled" = $true
        "cooldown" = 180
      }
      "loitering_detection" = @{
        "enabled" = $true
        "cooldown" = 180
      }
    }
    "notifications" = @{
      "email" = $true
      "whatsapp" = $true
      "telegram" = $false
      "webhook" = $false
      "hardware" = $true
    }
  }
}
$modesConfig | ConvertTo-Json -Depth 10 | Out-File -FilePath "config\modes_config.json" -Encoding utf8

# Configuración de detección de movimiento
$detectionConfig = @{
  "min_area" = 500
  "threshold" = 25
  "blur_size" = 21
  "dilate_iterations" = 2
  "detection_cooldown" = 1
  "exclusion_zones" = @()
  "inclusion_zones" = @()
}
$detectionConfig | ConvertTo-Json | Out-File -FilePath "config\detection_config.json" -Encoding utf8

# Configuración de agentes de IA
$agentsConfig = @{
  "agents" = @{
    "motion_detection" = $true
    "facial_recognition" = $false
    "object_detection" = $false
    "loitering_detection" = $false
  }
  "agent_config" = @{
    "facial_recognition" = @{
      "known_faces_file" = "config/known_faces.json"
    }
    "object_detection" = @{
      "stationary_frames" = 50
    }
    "loitering_detection" = @{
      "loitering_threshold" = 60
    }
  }
}
$agentsConfig | ConvertTo-Json -Depth 5 | Out-File -FilePath "config\agents_config.json" -Encoding utf8

# Configuración de alertas
$alertsConfig = @{
  "enabled_notifiers" = @{
    "email" = $false
    "whatsapp" = $false
    "telegram" = $false
    "webhook" = $false
    "hardware" = $false
  }
  "notifier_config" = @{
    "email" = @{
      "smtp_server" = "smtp.gmail.com"
      "smtp_port" = 587
      "username" = ""
      "password" = ""
      "recipients" = @()
    }
    "whatsapp" = @{
      "api_key" = ""
      "phone_numbers" = @()
    }
    "telegram" = @{
      "bot_token" = ""
      "chat_ids" = @()
    }
    "webhook" = @{
      "url" = ""
      "auth_token" = ""
    }
    "hardware" = @{
      "gpio_enabled" = $false
      "gpio_pin" = 17
      "serial_enabled" = $false
      "serial_port" = "COM1"
      "serial_baud" = 9600
    }
  }
  "alert_types" = @{
    "motion_detection" = @{
      "enabled" = $true
      "cooldown" = 30
      "send_image" = $true
      "description" = "Movimiento detectado"
    }
    "face_recognition" = @{
      "enabled" = $true
      "cooldown" = 60
      "send_image" = $true
      "description" = "Rostro detectado"
    }
    "object_detection" = @{
      "enabled" = $true
      "cooldown" = 60
      "send_image" = $true
      "description" = "Objeto abandonado detectado"
    }
    "loitering_detection" = @{
      "enabled" = $true
      "cooldown" = 60
      "send_image" = $true
      "description" = "Actividad sospechosa detectada"
    }
  }
}
$alertsConfig | ConvertTo-Json -Depth 5 | Out-File -FilePath "config\alerts_config.json" -Encoding utf8

# Configuración de cámaras
@() | ConvertTo-Json | Out-File -FilePath "config\cameras_config.json" -Encoding utf8

# Rostros conocidos (para reconocimiento facial)
@{} | ConvertTo-Json | Out-File -FilePath "config\known_faces.json" -Encoding utf8

Write-Output "Archivos de configuración inicializados correctamente en la carpeta config\"

--------------------------------------------------------------------------------

📄 requirements-ai.txt
--------------------------------------------------------------------------------
# IA y ML
torch==2.0.0
torchvision==0.15.0
torchaudio==2.0.0
tensorflow==2.12.0
transformers==4.29.0
nltk==3.8.1
onnxruntime==1.14.1 

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

📄 setup_simple.py
--------------------------------------------------------------------------------
import os

# Crear directorios necesarios
dirs_to_create = [
    "data",
    "data/videos",
    "data/images",
    "data/known_faces",
    "data/temp",
    "models",
    "logs",
    "config"
]

print("Creando directorios necesarios...")
for dir_path in dirs_to_create:
    os.makedirs(dir_path, exist_ok=True)
    print(f"✅ Directorio creado: {dir_path}")

# Crear archivo placeholder para modelo de armas
weapon_model_path = "models/weapon_detection.pt"
if not os.path.exists(weapon_model_path):
    with open(weapon_model_path, "w") as f:
        f.write("# Placeholder para modelo de detección de armas\n")
    print(f"✅ Creado archivo placeholder en {weapon_model_path}")

print("\n✨ Configuración básica completada!")
print("⚠️ IMPORTANTE: Verifica que DATA_DIR = 'data' esté presente en app.py") 

--------------------------------------------------------------------------------

📄 setup_vigilancia.py
--------------------------------------------------------------------------------
import os
import sys
import shutil

def setup_environment():
    """Configura el entorno para la aplicación de vigilancia."""
    
    print("Configurando entorno para la aplicación de vigilancia...")
    
    # 1. Crear directorios necesarios
    dirs_to_create = [
        "data",
        "data/videos",
        "data/images",
        "data/known_faces",
        "data/temp",
        "models",
        "logs",
        "config"
    ]
    
    for dir_path in dirs_to_create:
        os.makedirs(dir_path, exist_ok=True)
        print(f"✅ Directorio creado: {dir_path}")
    
    # 2. Verificar si el archivo DATA_DIR ya existe en app.py
    app_file = "app.py"
    if os.path.exists(app_file):
        # Usar encoding UTF-8 y manejar errores con 'replace'
        try:
            with open(app_file, "r", encoding="utf-8", errors="replace") as f:
                app_content = f.read()
            
            if "DATA_DIR" not in app_content:
                # No intentemos modificar app.py automáticamente si hay problemas de codificación
                print("⚠️ Se necesita definir DATA_DIR en app.py manualmente:")
                print("Añadir esta línea cerca del inicio del archivo:")
                print("DATA_DIR = 'data'")
            else:
                print("✅ DATA_DIR ya existe en app.py")
                
        except Exception as e:
            print(f"❌ Error al leer app.py: {str(e)}")
            print("⚠️ Añade manualmente esta línea cerca del inicio de app.py:")
            print("DATA_DIR = 'data'")
    else:
        print(f"❌ No se encontró el archivo {app_file}")
    
    # 3. Crear archivo placeholder para modelo de armas
    weapon_model_path = "models/weapon_detection.pt"
    if not os.path.exists(weapon_model_path):
        with open(weapon_model_path, "w") as f:
            f.write("# Placeholder para modelo de detección de armas\n")
        print(f"✅ Creado archivo placeholder en {weapon_model_path}")
    
    print("\n✨ Configuración completada! Ejecuta la aplicación con: python app.py")

if __name__ == "__main__":
    try:
        setup_environment()
    except Exception as e:
        print(f"❌ Error durante la configuración: {str(e)}")
        print("Por favor crea manualmente los directorios necesarios y añade DATA_DIR = 'data' a app.py") 

--------------------------------------------------------------------------------

📄 test_face_recognition.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import sys
import os
from src.face_recognition import FaceRecognizer

def main():
    print("Probando módulo de reconocimiento facial...")
    
    # Crear una imagen de prueba
    test_img = np.zeros((300, 300, 3), dtype=np.uint8)
    cv2.circle(test_img, (150, 150), 100, (255, 255, 255), -1)
    cv2.circle(test_img, (120, 120), 10, (0, 0, 0), -1)  # ojo izquierdo
    cv2.circle(test_img, (180, 120), 10, (0, 0, 0), -1)  # ojo derecho
    cv2.ellipse(test_img, (150, 180), (60, 30), 0, 0, 180, (0, 0, 0), -1)  # boca
    
    # Guardar imagen de prueba
    test_dir = "test_data"
    os.makedirs(test_dir, exist_ok=True)
    cv2.imwrite(os.path.join(test_dir, "test_face.jpg"), test_img)
    
    # Inicializar reconocedor facial
    try:
        face_recognizer = FaceRecognizer(known_faces_dir=os.path.join(test_dir, 'known_faces'))
        print("✅ Reconocedor facial inicializado correctamente")
        
        # Detectar rostros en la imagen de prueba
        faces = face_recognizer.detect_faces(test_img)
        print(f"Rostros detectados: {len(faces)}")
        
        for (x, y, w, h) in faces:
            # Dibujar rostro detectado
            cv2.rectangle(test_img, (x, y), (x+w, y+h), (0, 255, 0), 2)
            
            # Intentar reconocer
            person_id, confidence = face_recognizer.recognize_face(test_img, (x, y, w, h))
            print(f"Reconocimiento: ID={person_id}, Confianza={confidence:.2f}%")
            
        # Guardar resultado
        cv2.imwrite(os.path.join(test_dir, "test_face_result.jpg"), test_img)
        print(f"Resultado guardado en {os.path.join(test_dir, 'test_face_result.jpg')}")
        
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 

--------------------------------------------------------------------------------

📄 test_opencv_face.py
--------------------------------------------------------------------------------
import cv2
import sys
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('opencv_test')

def test_opencv_installation():
    """Prueba la instalación de OpenCV y sus capacidades de reconocimiento facial"""
    print("\n=== DIAGNÓSTICO DE INSTALACIÓN DE OPENCV ===")
    print(f"Versión de OpenCV: {cv2.__version__}")
    print(f"Ruta de instalación: {cv2.__file__}")
    
    # Verificar módulo face
    if hasattr(cv2, 'face'):
        print("\n✅ Módulo cv2.face está disponible")
        
        # Verificar funciones específicas para reconocimiento facial
        if hasattr(cv2.face, 'LBPHFaceRecognizer_create'):
            print("✅ Función LBPHFaceRecognizer_create está disponible")
            try:
                recognizer = cv2.face.LBPHFaceRecognizer_create()
                print("✅ Reconocedor LBPH creado correctamente")
            except Exception as e:
                print(f"❌ Error al crear reconocedor LBPH: {str(e)}")
        else:
            print("❌ Función LBPHFaceRecognizer_create NO está disponible")
            
            # Verificar API antigua
            if hasattr(cv2.face, 'createLBPHFaceRecognizer'):
                print("✅ Función antigua createLBPHFaceRecognizer está disponible")
                try:
                    recognizer = cv2.face.createLBPHFaceRecognizer()
                    print("✅ Reconocedor LBPH (API antigua) creado correctamente")
                except Exception as e:
                    print(f"❌ Error al crear reconocedor LBPH (API antigua): {str(e)}")
            else:
                print("❌ Función antigua createLBPHFaceRecognizer NO está disponible")
    else:
        print("\n❌ Módulo cv2.face NO está disponible")
        print("👉 Necesitas instalar opencv-contrib-python==4.7.0.72")
    
    # Verificar otras capacidades importantes
    print("\n=== OTRAS CAPACIDADES DE OPENCV ===")
    
    # Verificar Cascade Classifier para detección facial
    try:
        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        if face_cascade.empty():
            print("❌ El clasificador Haar Cascade no se pudo cargar")
        else:
            print("✅ Clasificador Haar Cascade cargado correctamente")
    except Exception as e:
        print(f"❌ Error al cargar clasificador Haar Cascade: {str(e)}")
    
    # Verificar DNN para modelos profundos
    if hasattr(cv2, 'dnn'):
        print("✅ Módulo DNN disponible para redes neuronales")
    else:
        print("❌ Módulo DNN no disponible")
    
    print("\n=== RECOMENDACIONES ===")
    if not hasattr(cv2, 'face'):
        print("""
Para solucionar el problema del módulo de reconocimiento facial:
1. Desinstala las versiones existentes de OpenCV:
   pip uninstall -y opencv-python opencv-contrib-python
   
2. Instala la versión específica que incluye reconocimiento facial:
   pip install opencv-contrib-python==4.7.0.72
   
3. Ejecuta este script nuevamente para verificar la instalación.
""")
    else:
        if not hasattr(cv2.face, 'LBPHFaceRecognizer_create') and not hasattr(cv2.face, 'createLBPHFaceRecognizer'):
            print("""
Tu instalación tiene el módulo face pero no las funciones de reconocimiento LBPH.
Prueba a instalar una versión específica conocida por funcionar:
pip install opencv-contrib-python==4.7.0.72
""")

if __name__ == "__main__":
    try:
        test_opencv_installation()
    except Exception as e:
        print(f"Error durante la prueba de OpenCV: {str(e)}")
        import traceback
        traceback.print_exc() 

--------------------------------------------------------------------------------

📄 config\agents_config.json
--------------------------------------------------------------------------------
﻿{
    "agent_config":  {
                         "loitering_detection":  {
                                                     "loitering_threshold":  60
                                                 },
                         "object_detection":  {
                                                  "stationary_frames":  50
                                              },
                         "facial_recognition":  {
                                                    "known_faces_file":  "config/known_faces.json"
                                                }
                     },
    "agents":  {
                   "loitering_detection":  false,
                   "object_detection":  false,
                   "facial_recognition":  false,
                   "motion_detection":  true
               }
}


--------------------------------------------------------------------------------

📄 config\alerts_config.json
--------------------------------------------------------------------------------
﻿{
    "alert_types":  {
                        "loitering_detection":  {
                                                    "cooldown":  60,
                                                    "send_image":  true,
                                                    "description":  "Actividad sospechosa detectada",
                                                    "enabled":  true
                                                },
                        "object_detection":  {
                                                 "cooldown":  60,
                                                 "send_image":  true,
                                                 "description":  "Objeto abandonado detectado",
                                                 "enabled":  true
                                             },
                        "face_recognition":  {
                                                 "cooldown":  60,
                                                 "send_image":  true,
                                                 "description":  "Rostro detectado",
                                                 "enabled":  true
                                             },
                        "motion_detection":  {
                                                 "cooldown":  30,
                                                 "send_image":  true,
                                                 "description":  "Movimiento detectado",
                                                 "enabled":  true
                                             }
                    },
    "enabled_notifiers":  {
                              "email":  false,
                              "whatsapp":  false,
                              "telegram":  false,
                              "webhook":  false,
                              "hardware":  false
                          },
    "notifier_config":  {
                            "email":  {
                                          "username":  "",
                                          "smtp_port":  587,
                                          "smtp_server":  "smtp.gmail.com",
                                          "password":  "",
                                          "recipients":  [

                                                         ]
                                      },
                            "whatsapp":  {
                                             "api_key":  "",
                                             "phone_numbers":  [

                                                               ]
                                         },
                            "telegram":  {
                                             "bot_token":  "",
                                             "chat_ids":  [

                                                          ]
                                         },
                            "webhook":  {
                                            "url":  "",
                                            "auth_token":  ""
                                        },
                            "hardware":  {
                                             "serial_port":  "COM1",
                                             "gpio_enabled":  false,
                                             "serial_enabled":  false,
                                             "serial_baud":  9600,
                                             "gpio_pin":  17
                                         }
                        }
}


--------------------------------------------------------------------------------

📄 config\analytics.json
--------------------------------------------------------------------------------
{
    "enabled_charts": [
        "alert_by_type",
        "alert_by_camera",
        "alert_by_hour",
        "detections_by_type",
        "activity_heatmap"
    ],
    "retention_days": 30,
    "update_interval": 3600
}

--------------------------------------------------------------------------------

📄 config\api_keys.json
--------------------------------------------------------------------------------
﻿{
  "anthropic": "",
  "google": "",
  "whatsapp": {
    "api_key": "",
    "phone_id": "",
    "business_account_id": ""
  }
}


--------------------------------------------------------------------------------

📄 config\cameras_config.json
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

📄 config\detection_config.json
--------------------------------------------------------------------------------
﻿{
    "inclusion_zones":  [

                        ],
    "exclusion_zones":  [

                        ],
    "blur_size":  21,
    "detection_cooldown":  1,
    "threshold":  25,
    "min_area":  500,
    "dilate_iterations":  2
}


--------------------------------------------------------------------------------

📄 config\industrial_safety.json
--------------------------------------------------------------------------------
{
    "active": true,
    "danger_zones": {}
}

--------------------------------------------------------------------------------

📄 config\known_faces.json
--------------------------------------------------------------------------------
﻿{

}


--------------------------------------------------------------------------------

📄 config\modes_config.json
--------------------------------------------------------------------------------
﻿{
    "comercial":  {
                      "notifications":  {
                                            "email":  true,
                                            "whatsapp":  true,
                                            "telegram":  false,
                                            "webhook":  false,
                                            "hardware":  true
                                        },
                      "agents":  {
                                     "loitering_detection":  {
                                                                 "loitering_threshold":  300,
                                                                 "enabled":  true
                                                             },
                                     "object_detection":  {
                                                              "stationary_frames":  100,
                                                              "enabled":  true
                                                          },
                                     "facial_recognition":  {
                                                                "enabled":  true
                                                            },
                                     "motion_detection":  {
                                                              "threshold":  25,
                                                              "min_area":  400,
                                                              "enabled":  true
                                                          }
                                 },
                      "description":  "ConfiguraciÃ³n para comercios y tiendas",
                      "alerts":  {
                                     "loitering_detection":  {
                                                                 "cooldown":  180,
                                                                 "enabled":  true
                                                             },
                                     "object_detection":  {
                                                              "cooldown":  180,
                                                              "enabled":  true
                                                          },
                                     "face_recognition":  {
                                                              "cooldown":  300,
                                                              "enabled":  true
                                                          },
                                     "motion_detection":  {
                                                              "cooldown":  120,
                                                              "enabled":  true
                                                          }
                                 }
                  },
    "barrio_privado":  {
                           "notifications":  {
                                                 "email":  true,
                                                 "whatsapp":  true,
                                                 "telegram":  false,
                                                 "webhook":  false,
                                                 "hardware":  true
                                             },
                           "agents":  {
                                          "loitering_detection":  {
                                                                      "loitering_threshold":  60,
                                                                      "enabled":  true
                                                                  },
                                          "object_detection":  {
                                                                   "enabled":  false
                                                               },
                                          "facial_recognition":  {
                                                                     "enabled":  true
                                                                 },
                                          "motion_detection":  {
                                                                   "threshold":  30,
                                                                   "min_area":  1000,
                                                                   "enabled":  true
                                                               }
                                      },
                           "description":  "ConfiguraciÃ³n para seguridad en barrios privados",
                           "alerts":  {
                                          "loitering_detection":  {
                                                                      "cooldown":  90,
                                                                      "enabled":  true
                                                                  },
                                          "object_detection":  {
                                                                   "enabled":  false
                                                               },
                                          "face_recognition":  {
                                                                   "cooldown":  120,
                                                                   "enabled":  true
                                                               },
                                          "motion_detection":  {
                                                                   "cooldown":  60,
                                                                   "enabled":  true
                                                               }
                                      }
                       },
    "aeropuerto":  {
                       "notifications":  {
                                             "email":  true,
                                             "whatsapp":  true,
                                             "telegram":  true,
                                             "webhook":  true,
                                             "hardware":  true
                                         },
                       "agents":  {
                                      "loitering_detection":  {
                                                                  "loitering_threshold":  120,
                                                                  "enabled":  true
                                                              },
                                      "object_detection":  {
                                                               "stationary_frames":  30,
                                                               "enabled":  true
                                                           },
                                      "facial_recognition":  {
                                                                 "enabled":  true
                                                             },
                                      "motion_detection":  {
                                                               "threshold":  20,
                                                               "min_area":  300,
                                                               "enabled":  true
                                                           }
                                  },
                       "description":  "ConfiguraciÃ³n para seguridad en aeropuertos",
                       "alerts":  {
                                      "loitering_detection":  {
                                                                  "cooldown":  60,
                                                                  "enabled":  true
                                                              },
                                      "object_detection":  {
                                                               "cooldown":  30,
                                                               "enabled":  true
                                                           },
                                      "face_recognition":  {
                                                               "cooldown":  60,
                                                               "enabled":  true
                                                           },
                                      "motion_detection":  {
                                                               "cooldown":  30,
                                                               "enabled":  false
                                                           }
                                  }
                   },
    "normal":  {
                   "notifications":  {
                                         "email":  false,
                                         "whatsapp":  false,
                                         "telegram":  false,
                                         "webhook":  false,
                                         "hardware":  false
                                     },
                   "agents":  {
                                  "loitering_detection":  {
                                                              "enabled":  false
                                                          },
                                  "object_detection":  {
                                                           "enabled":  false
                                                       },
                                  "facial_recognition":  {
                                                             "enabled":  false
                                                         },
                                  "motion_detection":  {
                                                           "threshold":  25,
                                                           "min_area":  500,
                                                           "enabled":  true
                                                       }
                              },
                   "description":  "Modo estÃ¡ndar con detecciÃ³n bÃ¡sica de movimiento",
                   "alerts":  {
                                  "loitering_detection":  {
                                                              "enabled":  false
                                                          },
                                  "object_detection":  {
                                                           "enabled":  false
                                                       },
                                  "face_recognition":  {
                                                           "enabled":  false
                                                       },
                                  "motion_detection":  {
                                                           "cooldown":  30,
                                                           "enabled":  true
                                                       }
                              }
               }
}


--------------------------------------------------------------------------------

📄 config\settings.json
--------------------------------------------------------------------------------
{
    "company_name": "VIG-IA",
    "company_logo": null,
    "app_name": "Sistema de Vigilancia Inteligente",
    "timezone": "America/Argentina/Buenos_Aires",
    "date_format": "DD/MM/YYYY",
    "language": "es",
    "notifications": {
        "email": false,
        "whatsapp": false,
        "sms": false,
        "push": false,
        "levels": [
            "critical",
            "warning"
        ]
    },
    "email": {
        "smtp_server": "",
        "port": 587,
        "encryption": "tls",
        "username": "",
        "password": "",
        "sender": "",
        "sender_name": ""
    },
    "appearance": {
        "theme": "light",
        "primary_color": "#007bff",
        "secondary_color": "#6c757d",
        "accent_color": "#dc3545",
        "default_view": "dashboard"
    },
    "apis": {
        "whatsapp": {
            "api_key": "",
            "phone_id": "",
            "business_account_id": ""
        },
        "openai": {
            "enabled": false,
            "api_key": "",
            "model": "gpt-3.5-turbo"
        }
    },
    "advanced": {
        "max_threads": 8,
        "frame_buffer_size": 30,
        "storage_retention_days": 30,
        "storage_limit_gb": 500,
        "debug_mode": false,
        "verbose_logging": false
    }
}

--------------------------------------------------------------------------------

📄 config\system_config.json
--------------------------------------------------------------------------------
{
    "app_name": "Sistema de Vigilancia Inteligente",
    "cameras": [
        {
            "id": "9bd52751-75bd-4c4f-a283-eab7df9902b1",
            "name": "Web",
            "url": "0",
            "status": "offline"
        }
    ],
    "current_mode": "normal",
    "available_modes": [
        "normal",
        "barrio_privado",
        "aeropuerto",
        "comercial"
    ],
    "auto_start": false,
    "alerts": {
        "email": false,
        "sms": false,
        "push": false
    },
    "forensic": {
        "enabled": true,
        "auto_register_incidents": true,
        "auto_register_severity": "warning",
        "retention_period": "90d",
        "evidence_storage_path": "data/forensic/evidence",
        "context_buffer_size": 150
    }
}

--------------------------------------------------------------------------------

📄 config\whatsapp.json
--------------------------------------------------------------------------------
{
    "active": false,
    "api_key": "",
    "phone_id": "",
    "business_account_id": "",
    "recipients": [],
    "alert_levels": [
        "critical",
        "warning"
    ],
    "alert_types": [
        "intrusion",
        "fire",
        "safety_violation"
    ],
    "daily_limit": 100,
    "messages_sent_today": 0,
    "last_reset_date": "2025-03-26"
}

--------------------------------------------------------------------------------

📄 config\forensic\forensic.db (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 config\industrial\industrial_config.json
--------------------------------------------------------------------------------
{
    "active": true,
    "ppe_requirements": {
        "helmet": true,
        "vest": true,
        "glasses": false,
        "gloves": false,
        "boots": false,
        "mask": false
    },
    "danger_zones": {},
    "restricted_zones": {}
}

--------------------------------------------------------------------------------

📄 config\roi\f8b753ef-3fda-4b39-a8d2-ac08f389fc2c.json
--------------------------------------------------------------------------------
{
  "zones": [
    {
      "name": "Zona 1",
      "type": "motion",
      "points": [
        [
          336.5999755859375,
          126.10000228881836
        ],
        [
          846.5999755859375,
          107.10000228881836
        ],
        [
          856.5999755859375,
          741.1000022888184
        ],
        [
          313.5999755859375,
          751.1000022888184
        ]
      ],
      "detect_classes": [
        "persona"
      ]
    }
  ]
}

--------------------------------------------------------------------------------

📄 data\known_faces\persons.pkl (ERROR AL LEER: 'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte)

📄 data\known_faces\trained_model.yml
--------------------------------------------------------------------------------
%YAML:1.0
---
opencv_lbphfaces:
   threshold: 1.7976931348623157e+308
   radius: 1
   neighbors: 8
   grid_x: 8
   grid_y: 8
   histograms:
      - !!opencv-matrix
         rows: 1
         cols: 16384
         dt: f
         data: [ 2.08333340e-02, 0., 0., 6.94444450e-03, 2.77777780e-02,
             6.94444450e-03, 1.38888890e-02, 4.16666679e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 0.,
             0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03, 0., 0., 0.,
             9.72222239e-02, 0., 0., 0., 1.45833328e-01, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 3.47222239e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444478e-02, 0., 0., 0., 1.38888896e-01, 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.25000000e-02, 4.86111119e-02,
             5.55555560e-02, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 1.38888890e-02, 2.08333340e-02, 2.77777780e-02, 0.,
             0., 6.94444450e-03, 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 0., 0., 2.77777780e-02, 0., 5.55555560e-02,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 2.77777780e-02, 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 4.16666679e-02, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 2.77777780e-02, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 2.77777780e-02, 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 1.38888890e-02, 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 9.02777761e-02, 5.55555560e-02,
             5.55555560e-02, 0., 0., 0., 6.94444450e-03, 2.77777780e-02,
             3.47222239e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 2.77777780e-02, 2.77777780e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 5.55555560e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 2.08333340e-02, 0., 1.38888890e-02, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 3.47222239e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.08333340e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             1.38888890e-02, 3.47222239e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 1.18055560e-01, 6.25000000e-02,
             2.08333340e-02, 0., 2.08333340e-02, 1.38888890e-02, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 2.77777780e-02, 4.16666679e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 6.94444450e-03, 0., 0., 2.77777780e-02, 0.,
             3.47222239e-02, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 3.47222239e-02,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 2.77777780e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 2.77777780e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 1.38888890e-02,
             6.25000000e-02, 1.45833328e-01, 2.77777780e-02,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 5.55555560e-02,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 0., 0., 2.08333340e-02,
             0., 2.77777780e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 6.94444450e-03, 0., 4.16666679e-02, 2.08333340e-02,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             3.47222239e-02, 0., 4.16666679e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 2.77777780e-02,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.08333340e-02, 2.08333340e-02,
             1.38888890e-02, 3.47222239e-02, 1.11111112e-01,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             7.63888881e-02, 0., 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 0., 0., 4.16666679e-02,
             6.94444450e-03, 2.08333340e-02, 3.47222239e-02, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 3.47222239e-02, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             5.55555560e-02, 0., 3.47222239e-02, 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 4.16666679e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 4.16666679e-02, 0., 0., 2.77777780e-02,
             1.38888890e-02, 6.25000000e-02, 8.33333358e-02,
             4.86111119e-02, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0.,
             6.94444450e-03, 5.55555560e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444478e-02,
             6.94444450e-03, 0., 6.94444450e-03, 5.55555560e-02,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.25000000e-01, 0., 0., 0.,
             9.72222239e-02, 6.94444450e-03, 4.16666679e-02,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 3.47222239e-02,
             6.25000000e-02, 3.47222239e-02, 4.86111119e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 2.77777780e-02, 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 2.77777780e-02, 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 2.08333340e-02, 2.08333340e-02, 0., 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 2.77777780e-02,
             2.08333340e-02, 0., 1.38888890e-02, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 4.16666679e-02,
             8.33333358e-02, 2.77777780e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 3.47222239e-02, 0.,
             2.77777780e-02, 6.94444450e-03, 0., 2.08333340e-02,
             6.94444450e-03, 7.63888881e-02, 0., 0., 0., 1.04166664e-01,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 2.77777780e-02, 0., 2.08333340e-02, 0.,
             8.33333358e-02, 0., 0., 0., 7.63888881e-02, 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 4.86111119e-02,
             6.25000000e-02, 4.16666679e-02, 0., 6.94444450e-03, 0., 0.,
             3.47222239e-02, 2.77777780e-02, 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.77777780e-02, 1.04166664e-01,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 9.02777761e-02,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             3.47222239e-02, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             3.47222239e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 8.33333358e-02,
             3.47222239e-02, 6.94444450e-03, 0., 2.08333340e-02,
             6.94444450e-03, 0., 2.08333340e-02, 4.86111119e-02,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             1.04166664e-01, 1.59722224e-01, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 1.38888890e-02, 1.87500000e-01, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 4.16666679e-02,
             3.47222239e-02, 4.86111119e-02, 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0.,
             4.16666679e-02, 0., 1.38888890e-02, 1.45833328e-01,
             2.77777780e-02, 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0.,
             4.16666679e-02, 1.38888890e-02, 3.47222239e-02,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 2.08333340e-02,
             0., 2.08333340e-02, 2.77777780e-02, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 1.38888890e-02,
             3.47222239e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 3.47222239e-02, 6.25000000e-02,
             6.25000000e-02, 2.08333340e-02, 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             2.77777780e-02, 0., 3.47222239e-02, 1.38888890e-02,
             6.94444450e-03, 2.77777780e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             9.02777761e-02, 0., 9.72222239e-02, 6.25000000e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 5.55555560e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 1.38888890e-02, 0., 1.38888890e-02, 1.38888890e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0.,
             0., 6.94444450e-03, 2.77777780e-02, 6.94444478e-02,
             3.47222239e-02, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 0., 3.47222239e-02, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 7.63888881e-02, 0.,
             2.56944448e-01, 1.38888896e-01, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 2.77777780e-02, 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 4.16666679e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 3.47222239e-02, 2.08333340e-02,
             2.77777780e-02, 6.94444450e-03, 0., 0., 4.16666679e-02,
             6.94444450e-03, 6.94444450e-03, 2.77777780e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             2.77777780e-02, 4.86111119e-02, 1.38888890e-02, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 4.16666679e-02, 0., 0., 0.,
             3.47222239e-02, 6.94444450e-03, 3.47222239e-02,
             4.16666679e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 3.47222239e-02, 0., 0., 0.,
             4.86111119e-02, 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 4.16666679e-02, 0., 6.94444450e-03,
             0., 6.94444478e-02, 0., 1.38888890e-02, 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 4.86111119e-02,
             3.47222239e-02, 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 2.77777780e-02, 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 4.16666679e-02, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             5.55555560e-02, 0., 1.38888890e-02, 0., 4.86111119e-02,
             6.94444450e-03, 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 9.02777761e-02,
             0., 0., 0., 3.47222239e-02, 0., 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 2.77777780e-02, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             4.16666679e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 0., 1.38888890e-02, 6.94444450e-03,
             2.08333340e-02, 7.63888881e-02, 4.16666679e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 8.33333358e-02, 0., 0., 0.,
             5.55555560e-02, 6.94444450e-03, 1.38888890e-02, 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             1.31944448e-01, 6.94444450e-03, 0., 0., 8.33333358e-02, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 4.86111119e-02,
             0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 5.55555560e-02, 1.38888890e-02,
             2.08333340e-02, 4.86111119e-02, 4.86111119e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 2.77777780e-02,
             0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 0., 2.08333340e-02, 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0.,
             2.77777780e-02, 2.08333340e-02, 2.77777780e-02, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 2.08333340e-02, 4.16666679e-02, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.08333340e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02,
             2.77777780e-02, 2.08333340e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 2.08333340e-02,
             6.94444450e-03, 2.08333340e-02, 0., 1.38888890e-02,
             1.38888890e-02, 0., 2.08333340e-02, 8.33333358e-02,
             5.55555560e-02, 1.38888890e-02, 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 3.47222239e-02, 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 9.02777761e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 2.77777780e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 1.38888890e-02, 3.47222239e-02,
             0., 1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 3.47222239e-02, 2.77777780e-02,
             2.77777780e-02, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 2.77777780e-02, 7.63888881e-02,
             5.55555560e-02, 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 4.16666679e-02, 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 4.16666679e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 5.55555560e-02, 0., 0., 0.,
             1.04166664e-01, 0., 0., 0., 0., 0., 0., 0., 6.94444478e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 3.47222239e-02, 0., 7.63888881e-02, 0.,
             0., 0., 7.63888881e-02, 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02,
             2.08333340e-02, 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 5.55555560e-02,
             2.08333340e-02, 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 7.63888881e-02,
             6.94444450e-03, 4.16666679e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             7.63888881e-02, 0., 0., 0., 1.25000000e-01, 6.94444450e-03,
             6.94444478e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 3.47222239e-02, 0., 6.94444450e-03, 0., 9.02777761e-02,
             0., 3.47222239e-02, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444478e-02,
             4.86111119e-02, 4.16666679e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 2.08333340e-02,
             3.47222239e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 4.16666679e-02,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 6.94444450e-03, 1.38888890e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 6.94444450e-03, 2.77777780e-02, 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             3.47222239e-02, 2.77777780e-02, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.25000000e-02, 1.38888890e-02, 4.86111119e-02, 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 2.77777780e-02,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 4.16666679e-02,
             4.86111119e-02, 4.86111119e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 1.38888890e-02, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 2.77777780e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0.,
             6.94444450e-03, 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             2.77777780e-02, 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 3.47222239e-02,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             5.55555560e-02, 5.55555560e-02, 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 2.77777780e-02,
             4.86111119e-02, 6.94444450e-03, 1.38888890e-02, 0., 0.,
             6.94444450e-03, 4.86111119e-02, 8.33333358e-02, 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 6.94444478e-02, 6.94444450e-03,
             0., 0., 4.86111119e-02, 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 5.55555560e-02, 6.94444450e-03, 0., 0., 6.94444478e-02,
             0., 1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03, 0.,
             3.47222239e-02, 0., 6.94444450e-03, 0., 4.16666679e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             2.77777780e-02, 1.38888890e-02, 0., 0., 5.55555560e-02, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 2.77777780e-02, 0.,
             2.77777780e-02, 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 6.94444478e-02, 4.16666679e-02,
             6.94444450e-03, 0., 6.94444450e-03, 2.77777780e-02,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             0., 6.94444450e-03, 6.94444450e-03, 2.08333340e-02, 0., 0.,
             0., 2.77777780e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 3.47222239e-02, 0.,
             0., 0., 0., 0., 0., 0., 9.72222239e-02, 0., 0., 0.,
             4.16666679e-02, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.18055560e-01, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 1.38888890e-02, 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 2.08333340e-02, 6.94444450e-03, 0.,
             8.33333358e-02, 2.77777780e-02, 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444478e-02, 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             0., 2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 2.08333340e-02, 0., 6.94444450e-03,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 3.47222239e-02, 0., 2.08333340e-02, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 1.59722224e-01, 6.25000000e-02, 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 0., 7.63888881e-02,
             4.86111119e-02, 0., 0., 2.08333340e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 2.77777780e-02, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             0., 6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 4.16666679e-02,
             6.94444450e-03, 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 3.47222239e-02, 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.25000000e-02, 1.04166664e-01, 0., 3.47222239e-02, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 7.63888881e-02, 1.25000000e-01, 0., 1.38888890e-02, 0.,
             0., 0., 6.94444450e-03, 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 2.08333340e-02, 1.38888890e-02,
             2.08333340e-02, 4.86111119e-02, 3.47222239e-02,
             2.77777780e-02, 6.94444450e-03, 0., 2.08333340e-02, 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             1.38888890e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 4.16666679e-02, 6.94444450e-03, 0., 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.25000000e-02, 0., 6.94444478e-02, 0.,
             6.94444450e-03, 0., 4.16666679e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 2.08333340e-02, 0., 7.63888881e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 4.16666679e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 6.94444450e-03,
             0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 6.94444450e-03, 6.25000000e-02,
             2.08333340e-02, 1.38888890e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 3.47222239e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 5.55555560e-02, 0., 0., 0.,
             2.77777780e-02, 0., 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.45833328e-01,
             0., 0., 0., 1.18055560e-01, 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 2.08333340e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 1.38888890e-02, 2.77777780e-02, 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 4.16666679e-02,
             1.38888890e-02, 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 0., 0., 4.86111119e-02, 7.63888881e-02,
             2.08333340e-02, 0., 0., 1.38888890e-02, 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 1.38888890e-02, 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.25000000e-02, 5.55555560e-02, 0., 0.,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03,
             1.18055560e-01, 6.25000000e-02, 6.94444450e-03,
             4.86111119e-02, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 0., 6.94444450e-03, 0., 1.38888890e-02, 6.94444450e-03,
             5.55555560e-02, 6.25000000e-02, 2.77777780e-02, 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 2.08333340e-02, 0., 0., 1.38888890e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 3.47222239e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             0., 6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 2.77777780e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 3.47222239e-02, 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 3.47222239e-02, 2.08333340e-02,
             0., 2.77777780e-02, 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 6.94444450e-03, 6.94444450e-03, 2.08333340e-02,
             1.38888890e-02, 2.77777780e-02, 2.77777780e-02,
             9.72222239e-02, 4.86111119e-02, 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 1.80555552e-01, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 2.77777780e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 7.63888881e-02, 0., 0.,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             1.04166664e-01, 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 6.25000000e-02, 4.86111119e-02,
             6.94444450e-03, 6.94444450e-03, 0., 2.08333340e-02, 0.,
             1.38888890e-02, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 7.63888881e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.04166664e-01,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 3.47222239e-02, 1.38888890e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 6.94444478e-02, 1.38888890e-02,
             1.38888890e-02, 1.38888890e-02, 2.08333340e-02,
             1.38888890e-02, 6.94444450e-03, 2.77777780e-02,
             6.94444478e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 7.63888881e-02, 2.77777780e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 1.38888890e-02, 4.86111119e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             1.04166664e-01, 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 8.33333358e-02, 0., 0., 0., 0.,
             0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 6.94444450e-03, 4.86111119e-02, 4.16666679e-02,
             3.47222239e-02, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             2.77777780e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 3.47222239e-02, 0.,
             1.38888890e-02, 2.08333340e-02, 0., 2.08333340e-02, 0.,
             2.08333340e-02, 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 1.38888890e-02, 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             9.72222239e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             3.47222239e-02, 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 4.86111119e-02,
             5.55555560e-02, 2.77777780e-02, 0., 0., 2.77777780e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 0., 0., 3.47222239e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 2.08333340e-02, 0., 4.16666679e-02, 0.,
             0., 1.38888890e-02, 5.55555560e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 0., 4.16666679e-02, 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 1.11111112e-01,
             4.16666679e-02, 1.38888890e-02, 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 3.47222239e-02, 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 4.16666679e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 1.66666672e-01,
             0., 0., 0., 7.63888881e-02, 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 1.38888890e-02, 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             6.94444450e-03, 3.47222239e-02, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 4.86111119e-02, 2.77777780e-02, 0., 0.,
             6.94444450e-03, 2.08333340e-02, 6.94444450e-03,
             4.86111119e-02, 2.08333340e-02, 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 3.47222239e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 7.63888881e-02, 0.,
             0., 0., 0., 0., 0., 0., 7.63888881e-02, 0., 0., 0.,
             4.86111119e-02, 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             0., 4.16666679e-02, 0., 6.94444450e-03, 0., 9.02777761e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 0., 0.,
             8.33333358e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 3.47222239e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 4.16666679e-02,
             1.38888890e-02, 0., 2.08333340e-02, 2.77777780e-02,
             6.94444450e-03, 6.94444450e-03, 4.86111119e-02,
             4.16666679e-02, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 4.16666679e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 5.55555560e-02, 0., 0., 0.,
             1.25000000e-01, 0., 4.16666679e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.25000000e-02, 0., 6.94444450e-03, 0.,
             1.31944448e-01, 0., 2.08333340e-02, 2.77777780e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 2.08333340e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 1.38888890e-02,
             5.55555560e-02, 6.94444478e-02, 2.08333340e-02, 0., 0.,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 9.72222239e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444478e-02, 0., 2.77777780e-02, 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 1.38888890e-02, 2.08333340e-02, 0.,
             6.94444478e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 2.77777780e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 4.16666679e-02, 4.16666679e-02,
             2.77777780e-02, 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 5.55555560e-02, 6.94444450e-03,
             8.33333358e-02, 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 3.47222239e-02, 6.94444450e-03, 0., 0.,
             5.55555560e-02, 0., 1.04166664e-01, 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.25000000e-02, 0., 8.33333358e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 4.86111119e-02, 4.86111119e-02, 2.08333340e-02,
             2.77777780e-02, 0., 2.77777780e-02, 1.38888890e-02, 0., 0.,
             6.94444478e-02, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 4.16666679e-02, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 2.08333340e-02, 0.,
             5.55555560e-02, 0., 0., 0., 1.38888896e-01, 0., 0., 0., 0.,
             0., 0., 0., 6.25000000e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 3.47222239e-02,
             6.94444450e-03, 3.47222239e-02, 6.94444450e-03,
             4.86111119e-02, 0., 0., 0., 7.63888881e-02, 0., 0., 0., 0.,
             0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             5.55555560e-02, 4.16666679e-02, 1.38888890e-02, 0.,
             1.38888890e-02, 2.08333340e-02, 0., 1.38888890e-02,
             1.11111112e-01, 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 4.86111119e-02, 1.38888890e-02, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 2.08333340e-02, 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             0., 0., 6.94444478e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 3.47222239e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 3.47222239e-02, 6.94444450e-03,
             0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 4.86111119e-02, 3.47222239e-02,
             1.38888890e-02, 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 3.47222239e-02, 0., 0., 0.,
             0., 1.38888890e-02, 0., 2.08333340e-02, 1.25000000e-01, 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 4.86111119e-02, 0.,
             2.77777780e-02, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             4.86111119e-02, 6.94444450e-03, 2.08333340e-02,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 1.38888890e-02, 1.38888890e-02, 0., 1.38888890e-02,
             4.86111119e-02, 1.38888890e-02, 0., 0., 1.38888890e-02, 0.,
             0., 0., 3.47222239e-02, 0., 0., 0., 0., 2.77777780e-02, 0.,
             3.47222239e-02, 4.16666679e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 3.47222239e-02, 0., 0., 0., 5.55555560e-02,
             0., 1.25000000e-01, 6.94444478e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             6.94444450e-03, 0., 0., 6.25000000e-02, 6.94444450e-03,
             4.86111119e-02, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             0., 0., 0., 4.16666679e-02, 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 2.08333340e-02,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02,
             6.25000000e-02, 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 5.55555560e-02, 0., 0.,
             0., 0., 1.38888890e-02, 6.94444450e-03, 3.47222239e-02,
             4.86111119e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 2.77777780e-02,
             6.94444450e-03, 2.08333340e-02, 4.16666679e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 4.86111119e-02, 0., 3.47222239e-02, 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 6.94444450e-03, 2.77777780e-02, 0., 6.94444450e-03,
             2.08333340e-02, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 6.94444478e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 2.77777780e-02, 6.94444478e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             0., 0., 0., 4.86111119e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 7.63888881e-02, 6.94444450e-03,
             0., 0., 2.15277776e-01, 6.94444450e-03, 4.16666679e-02,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 1.04166664e-01, 0., 0., 0., 1.45833328e-01,
             0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 3.47222239e-02, 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 2.08333340e-02, 0.,
             2.77777780e-02, 2.77777780e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 2.77777780e-02,
             7.63888881e-02, 2.08333340e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             4.86111119e-02, 0., 1.38888890e-02, 2.77777780e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 3.47222239e-02, 0., 0., 0., 5.55555560e-02, 0.,
             1.38888890e-02, 2.08333340e-02, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 4.86111119e-02, 0.,
             1.38888890e-02, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 1.38888890e-02,
             1.45833328e-01, 2.08333340e-02, 1.38888890e-02,
             6.94444450e-03, 2.77777780e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444478e-02, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             9.72222239e-02, 6.94444450e-03, 4.16666679e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 2.08333340e-02, 0.,
             2.08333340e-02, 1.38888890e-02, 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 7.63888881e-02, 0., 6.94444450e-03, 0., 9.02777761e-02,
             0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.18055560e-01, 5.55555560e-02,
             6.94444450e-03, 1.38888890e-02, 2.08333340e-02,
             3.47222239e-02, 6.94444450e-03, 1.38888890e-02,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 9.72222239e-02, 6.94444450e-03, 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             4.16666679e-02, 0., 2.77777780e-02, 0., 0., 6.94444450e-03,
             0., 2.08333340e-02, 0., 0., 0., 7.63888881e-02, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0.,
             1.38888890e-02, 2.08333340e-02, 0., 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 9.72222239e-02, 4.16666679e-02, 0., 2.08333340e-02,
             2.08333340e-02, 3.47222239e-02, 0., 4.86111119e-02,
             5.55555560e-02, 2.08333340e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 7.63888881e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 2.77777780e-02, 3.47222239e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 1.38888890e-02, 0., 2.08333340e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03,
             3.47222239e-02, 6.94444478e-02, 6.25000000e-02,
             1.38888890e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 2.08333340e-02, 6.25000000e-02,
             2.08333340e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.25000000e-02,
             3.47222239e-02, 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.04166664e-01, 6.25000000e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02,
             2.08333340e-02, 0., 6.94444450e-03, 1.38888890e-02, 0.,
             1.38888890e-02, 5.55555560e-02, 5.55555560e-02,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 4.16666679e-02,
             2.77777780e-02, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 3.47222239e-02, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 4.86111119e-02, 6.25000000e-02, 0., 3.47222239e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 3.47222239e-02, 2.08333340e-02,
             7.63888881e-02, 0., 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 3.47222239e-02, 0., 6.94444450e-03,
             1.38888890e-02, 0., 1.38888890e-02, 9.02777761e-02,
             3.47222239e-02, 2.08333340e-02, 0., 0., 4.16666679e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 0., 3.47222239e-02, 2.77777780e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 2.08333340e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             1.38888890e-02, 3.47222239e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 3.47222239e-02, 0., 1.38888890e-02, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 2.77777780e-02, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.77777780e-02, 6.94444478e-02, 2.08333340e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 3.47222239e-02, 0., 0., 0.,
             9.02777761e-02, 6.94444450e-03, 2.77777780e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 4.16666679e-02, 0., 0., 6.94444450e-03, 1.31944448e-01,
             0., 9.02777761e-02, 6.25000000e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444478e-02, 0.,
             2.77777780e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 4.86111119e-02, 2.77777780e-02,
             1.38888890e-02, 0., 0., 4.16666679e-02, 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 2.08333340e-02, 2.08333340e-02, 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 2.08333340e-02, 2.08333340e-02, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 4.16666679e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 2.08333340e-02,
             0., 0., 0., 2.77777780e-02, 0., 2.77777780e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 2.77777780e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 1.38888890e-02, 2.08333340e-02,
             2.08333340e-02, 0., 1.38888896e-01, 2.08333340e-02,
             2.77777780e-02, 0., 2.08333340e-02, 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             4.16666679e-02, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 5.55555560e-02,
             0., 0., 0., 8.33333358e-02, 0., 1.38888890e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 4.86111119e-02, 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 4.16666679e-02, 0., 6.94444450e-03, 0.,
             9.72222239e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             0., 1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0.,
             3.47222239e-02, 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 9.02777761e-02, 4.86111119e-02,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0.,
             6.94444450e-03, 0., 5.55555560e-02, 0., 1.38888890e-02,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             7.63888881e-02, 0., 6.94444450e-03, 0., 5.55555560e-02, 0.,
             2.08333340e-02, 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 0., 2.77777780e-02,
             6.94444450e-03, 0., 6.94444450e-03, 2.77777780e-02, 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             1.38888890e-02, 1.38888890e-02, 0., 1.25000000e-01,
             8.33333358e-02, 3.47222239e-02, 1.38888890e-02,
             2.77777780e-02, 6.94444450e-03, 0., 6.94444450e-03,
             9.02777761e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 1.38888890e-02, 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 3.47222239e-02, 6.94444450e-03, 0., 0., 7.63888881e-02,
             0., 0., 0., 0., 0., 0., 0., 8.33333358e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444478e-02,
             5.55555560e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 3.47222239e-02,
             3.47222239e-02, 1.38888890e-02, 1.38888890e-02, 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             2.08333340e-02, 0., 3.47222239e-02, 4.16666679e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             2.77777780e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 2.77777780e-02,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             1.38888890e-02, 2.08333340e-02, 0., 2.08333340e-02, 0., 0.,
             0., 0., 1.38888890e-02, 2.77777780e-02, 0., 6.94444450e-03,
             0., 1.38888890e-02, 3.47222239e-02, 9.02777761e-02,
             4.86111119e-02, 2.08333340e-02, 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 3.47222239e-02, 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 1.38888890e-02,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 2.77777780e-02, 0., 3.47222239e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02,
             6.25000000e-02, 0., 2.77777780e-02, 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.11111112e-01,
             9.02777761e-02, 3.47222239e-02, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 2.08333340e-02, 5.55555560e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 2.77777780e-02,
             6.94444450e-03, 6.94444450e-03, 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 6.25000000e-02, 0., 2.08333340e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 6.94444450e-03, 0., 1.38888890e-02,
             0., 4.16666679e-02, 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 2.08333340e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 2.77777780e-02,
             1.38888890e-02, 0., 6.94444450e-03, 2.08333340e-02, 0.,
             4.86111119e-02, 7.63888881e-02, 6.25000000e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             2.08333340e-02, 2.08333340e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             3.47222239e-02, 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0.,
             2.77777780e-02, 3.47222239e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 2.08333340e-02, 1.38888890e-02,
             3.47222239e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 3.47222239e-02, 6.94444450e-03,
             2.08333340e-02, 0., 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 1.66666672e-01, 4.16666679e-02,
             6.94444450e-03, 0., 0., 2.08333340e-02, 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 3.47222239e-02, 6.94444450e-03, 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 6.94444450e-03, 6.94444450e-03,
             2.77777780e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 4.86111119e-02, 0., 0., 0.,
             6.94444478e-02, 0., 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 1.38888890e-02, 1.38888890e-02,
             0., 2.77777780e-02, 0., 0., 0., 2.08333340e-02, 0.,
             2.77777780e-02, 0., 6.94444450e-03, 2.08333340e-02, 0.,
             6.94444450e-03, 1.80555552e-01 ]
      - !!opencv-matrix
         rows: 1
         cols: 16384
         dt: f
         data: [ 1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 1.38888890e-02, 0.,
             3.47222239e-02, 1.38888890e-02, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 5.55555560e-02, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 9.72222239e-02, 0., 4.16666679e-02,
             2.77777780e-02, 2.77777780e-02, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 1.38888890e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 2.77777780e-02, 0., 2.77777780e-02, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 1.38888890e-02,
             1.38888890e-02, 9.02777761e-02, 3.47222239e-02,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 7.63888881e-02, 0.,
             5.55555560e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 5.55555560e-02, 1.38888896e-01, 0.,
             5.55555560e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 1.31944448e-01, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             2.08333340e-02, 8.33333358e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.25000000e-02, 0.,
             4.16666679e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 4.86111119e-02, 2.15277776e-01, 0.,
             9.72222239e-02, 6.94444450e-03, 0., 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444478e-02,
             1.11111112e-01, 0., 2.77777780e-02, 6.94444450e-03, 0., 0.,
             0., 2.08333340e-02, 2.77777780e-02, 0., 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 3.47222239e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 8.33333358e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.04166664e-01,
             1.25000000e-01, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.94444448e-01, 1.31944448e-01, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 8.33333358e-02,
             4.86111119e-02, 0., 0., 2.77777780e-02, 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 2.77777780e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 7.63888881e-02,
             2.08333340e-02, 0., 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 3.47222239e-02,
             0., 2.08333340e-02, 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 1.31944448e-01,
             4.16666679e-02, 0., 0., 0., 0., 0., 1.38888890e-02,
             1.18055560e-01, 2.77777780e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 5.55555560e-02,
             8.33333358e-02, 1.38888890e-02, 2.08333340e-02, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 4.86111119e-02, 0., 0.,
             0., 0., 0., 0., 0., 4.86111119e-02, 6.94444450e-03,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444478e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 3.47222239e-02, 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 1.38888890e-02,
             0., 1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 2.08333340e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 3.47222239e-02, 4.16666679e-02,
             0., 0., 0., 0., 0., 2.77777780e-02, 6.94444450e-03,
             2.08333340e-02, 0., 0., 2.08333340e-02, 2.08333340e-02,
             6.94444450e-03, 1.11111112e-01, 2.08333340e-02,
             2.77777780e-02, 0., 4.16666679e-02, 2.08333340e-02,
             6.94444450e-03, 2.08333340e-02, 1.04166664e-01, 0., 0., 0.,
             0., 2.08333340e-02, 6.94444450e-03, 0., 3.47222239e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 7.63888881e-02, 0., 0.,
             0., 0., 0., 0., 0., 1.11111112e-01, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02, 0.,
             2.77777780e-02, 0., 0., 6.94444450e-03, 4.86111119e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             9.02777761e-02, 4.86111119e-02, 1.38888890e-02,
             1.38888890e-02, 1.38888890e-02, 1.38888890e-02, 0.,
             3.47222239e-02, 5.55555560e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             6.94444450e-03, 4.86111119e-02, 0., 0., 0., 2.29166672e-01,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 7.63888881e-02, 5.55555560e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 5.55555560e-02, 0.,
             0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.11111112e-01,
             0., 1.52777776e-01, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444478e-02, 0.,
             8.33333358e-02, 0., 0., 6.94444450e-03, 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 0., 6.25000000e-02, 6.25000000e-02,
             3.47222239e-02, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.77777780e-02, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.25000000e-01, 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 5.55555560e-02, 0., 4.86111119e-02, 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 3.47222239e-02,
             6.94444478e-02, 0., 4.86111119e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 3.47222239e-02, 0., 6.94444450e-03, 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 3.47222239e-02,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             8.33333358e-02, 9.02777761e-02, 2.77777780e-02, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 5.55555560e-02, 1.31944448e-01, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 1.38888890e-02, 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 8.33333358e-02,
             8.33333358e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             5.55555560e-02, 4.16666679e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 4.16666679e-02, 1.18055560e-01,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 0., 3.47222239e-02, 1.18055560e-01, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 2.77777780e-02, 5.55555560e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 5.55555560e-02,
             9.02777761e-02, 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 3.47222239e-02, 2.77777780e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 1.38888890e-02, 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 6.94444450e-03, 6.94444450e-03,
             2.77777780e-02, 4.16666679e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.18055560e-01, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 2.77777780e-02,
             0., 2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.36111119e-01,
             4.86111119e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.25000000e-02, 3.47222239e-02, 0., 0., 2.08333340e-02,
             1.38888890e-02, 0., 3.47222239e-02, 2.77777780e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.25000000e-01, 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             3.26388896e-01, 6.25000000e-02, 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 8.33333358e-02, 2.08333340e-02, 0., 0.,
             4.16666679e-02, 1.38888890e-02, 6.94444450e-03,
             2.08333340e-02, 4.16666679e-02, 6.94444450e-03, 0.,
             2.08333340e-02, 6.94444450e-03, 1.38888890e-02, 0.,
             6.25000000e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 4.16666679e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 1.38888890e-02, 0., 1.38888890e-02, 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 5.55555560e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 4.16666679e-02, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 7.63888881e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 4.86111119e-02, 2.08333340e-02, 0.,
             6.94444450e-03, 2.77777780e-02, 2.08333340e-02,
             6.94444450e-03, 1.25000000e-01, 2.08333340e-02,
             2.08333340e-02, 0., 0., 1.38888890e-02, 0., 2.77777780e-02,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 5.55555560e-02, 0., 0., 0.,
             2.50000000e-01, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             8.33333358e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 2.08333340e-02, 0.,
             2.77777780e-02, 6.94444450e-03, 0., 6.94444450e-03,
             8.33333358e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 3.47222239e-02,
             1.38888890e-02, 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 3.47222239e-02, 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 7.63888881e-02, 0.,
             3.47222239e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444478e-02, 0., 0., 0., 7.63888881e-02,
             0., 2.77777780e-02, 6.94444450e-03, 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 5.55555560e-02, 0., 1.66666672e-01,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.77777780e-02, 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 3.47222239e-02, 3.47222239e-02, 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             9.72222239e-02, 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             2.77777780e-02, 6.94444450e-03, 2.77777780e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0.,
             2.08333340e-02, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             4.86111119e-02, 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02,
             6.25000000e-02, 0., 2.77777780e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 2.77777780e-02, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 2.77777780e-02,
             2.08333340e-02, 3.47222239e-02, 3.47222239e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 5.55555560e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 5.55555560e-02, 0., 0., 0., 2.77777780e-02,
             0., 4.86111119e-02, 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 7.63888881e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 4.86111119e-02, 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.01388896e-01, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444478e-02, 1.38888890e-02, 0., 0.,
             2.08333340e-02, 0., 2.77777780e-02, 2.77777780e-02,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 4.86111119e-02, 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 5.55555560e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 1.38888890e-02, 0., 6.25000000e-02,
             0., 0., 0., 9.02777761e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.25000000e-02, 0.,
             1.04166664e-01, 0., 0., 0., 8.33333358e-02, 0., 0., 0., 0.,
             0., 0., 0., 4.86111119e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 4.16666679e-02, 2.08333340e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 3.47222239e-02, 0.,
             5.55555560e-02, 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             1.25000000e-01, 0., 5.55555560e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 5.55555560e-02, 0., 0., 0., 9.02777761e-02,
             0., 2.77777780e-02, 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 4.86111119e-02,
             1.18055560e-01, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 4.16666679e-02, 0.,
             9.02777761e-02, 1.04166664e-01, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 4.16666679e-02, 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0.,
             0., 2.77777780e-02, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             4.86111119e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 2.08333340e-02, 0., 1.38888890e-02, 0., 0.,
             0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 4.86111119e-02, 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.25000000e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.11111112e-01, 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 2.77777780e-02,
             6.25000000e-02, 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             6.25000000e-02, 8.33333358e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 6.94444478e-02, 2.77777780e-02, 0., 0.,
             2.08333340e-02, 2.08333340e-02, 6.94444450e-03,
             3.47222239e-02, 1.38888890e-02, 0., 0., 1.38888890e-02, 0.,
             0., 0., 6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             8.33333358e-02, 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 4.16666679e-02, 0., 1.59722224e-01, 0.,
             6.94444450e-03, 6.94444450e-03, 1.18055560e-01, 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 1.38888890e-02,
             0., 4.86111119e-02, 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 2.08333340e-02, 0., 0., 0., 0.,
             1.38888890e-02, 5.55555560e-02, 1.38888890e-02,
             2.08333340e-02, 0., 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 5.55555560e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 2.08333340e-02,
             0., 1.38888890e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 5.55555560e-02, 0., 9.02777761e-02,
             6.94444450e-03, 0., 0., 6.94444478e-02, 0., 0., 0., 0., 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 2.77777780e-02, 6.25000000e-02,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 1.11111112e-01, 3.47222239e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             2.08333340e-02, 2.08333340e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 6.94444450e-03,
             2.77777780e-02, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 4.86111119e-02, 6.94444450e-03, 2.08333340e-02,
             0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 7.63888881e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444478e-02, 0., 0.,
             0., 2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.73611119e-01, 2.08333340e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 1.04166664e-01,
             2.08333340e-02, 0., 1.38888890e-02, 6.25000000e-02,
             3.47222239e-02, 2.77777780e-02, 2.77777780e-02,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 5.55555560e-02,
             1.25000000e-01, 0., 3.47222239e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 1.18055560e-01,
             9.02777761e-02, 0., 1.38888890e-02, 0., 0., 0.,
             2.08333340e-02, 1.38888890e-02, 2.77777780e-02,
             6.94444450e-03, 0., 1.38888890e-02, 1.38888890e-02,
             2.08333340e-02, 7.63888881e-02, 2.08333340e-02,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 8.33333358e-02, 0.,
             1.18055560e-01, 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             2.77777780e-02, 9.02777761e-02, 0., 1.04166664e-01,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 1.38888890e-02, 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03,
             7.63888881e-02, 2.08333340e-02, 0., 0., 1.38888890e-02,
             1.38888890e-02, 6.94444450e-03, 0., 1.38888890e-02, 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             0., 0., 0., 0., 8.33333358e-02, 0., 0., 0., 8.33333358e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 2.36111119e-01,
             6.94444450e-03, 0., 0., 1.80555552e-01, 0., 1.38888890e-02,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 3.47222239e-02, 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.77777780e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444478e-02, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0.,
             5.55555560e-02, 0., 2.08333340e-02, 0., 6.94444450e-03,
             2.08333340e-02, 0., 2.08333340e-02, 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 2.77777780e-02, 0., 2.77777780e-02, 0., 6.94444450e-03,
             0., 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 2.77777780e-02, 2.08333340e-02,
             0., 1.38888890e-02, 6.94444450e-03, 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 2.08333340e-02, 2.77777780e-02,
             1.38888890e-02, 0., 9.02777761e-02, 5.55555560e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             3.47222239e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             5.55555560e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 4.16666679e-02, 0.,
             1.38888890e-02, 0., 1.04166664e-01, 0., 0., 0., 0., 0., 0.,
             0., 4.86111119e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.08333340e-02, 0., 6.25000000e-02, 0., 0., 0.,
             9.02777761e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 2.08333340e-02, 6.94444450e-03, 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 5.55555560e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 1.11111112e-01, 6.94444450e-03, 0., 0.,
             9.72222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             2.77777780e-02, 0., 2.29166672e-01, 6.94444450e-03,
             6.94444450e-03, 0., 1.45833328e-01, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 1.38888890e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             1.04166664e-01, 0., 0., 0., 0., 0., 0., 0., 7.63888881e-02,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 1.45833328e-01, 0., 0., 0., 0.,
             0., 0., 0., 1.59722224e-01, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 1.31944448e-01, 0., 0., 0., 0., 0., 0.,
             0., 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 4.16666679e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 2.77777780e-02, 2.08333340e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 1.38888890e-02, 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 3.47222239e-02, 0.,
             2.08333340e-02, 6.25000000e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 3.47222239e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 4.16666679e-02, 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 2.08333340e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02,
             7.63888881e-02, 2.77777780e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             2.77777780e-02, 0., 4.86111119e-02, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 1.38888890e-02, 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 5.55555560e-02, 6.94444450e-03,
             2.77777780e-02, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 2.08333340e-02,
             0., 1.38888890e-02, 0., 6.94444450e-03, 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 2.08333340e-02, 5.55555560e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 4.16666679e-02,
             9.02777761e-02, 0., 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 1.38888890e-02, 0., 4.86111119e-02,
             1.38888890e-02, 6.94444450e-03, 0., 1.38888890e-02,
             3.47222239e-02, 0., 6.94444450e-03, 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 4.16666679e-02, 0., 1.11111112e-01,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0.,
             1.11111112e-01, 0., 3.47222239e-02, 3.47222239e-02,
             2.08333340e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 4.16666679e-02, 0., 0., 0.,
             7.63888881e-02, 0., 1.38888890e-02, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 4.16666679e-02, 6.94444450e-03, 0.,
             0., 6.94444450e-03, 0., 1.38888890e-02, 3.47222239e-02,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 4.16666679e-02, 0., 0., 0., 0.,
             2.08333340e-02, 0., 3.47222239e-02, 8.33333358e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444478e-02, 0., 1.31944448e-01, 7.63888881e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 4.16666679e-02, 0., 1.38888890e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             0., 0., 0., 3.47222239e-02, 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 2.08333340e-02,
             1.38888890e-02, 1.38888890e-02, 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 2.08333340e-02,
             1.38888890e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             1.38888890e-02, 0., 5.55555560e-02, 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 2.08333340e-02, 2.77777780e-02,
             0., 6.94444450e-03, 0., 1.38888890e-02, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 1.73611119e-01,
             6.25000000e-02, 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 4.86111119e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 4.86111119e-02,
             6.94444450e-03, 1.38888890e-02, 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 4.86111119e-02, 0.,
             2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 9.02777761e-02, 0.,
             6.25000000e-02, 0., 6.94444450e-03, 0., 6.25000000e-02, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 1.04166664e-01, 0., 8.33333358e-02,
             0., 0., 6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 9.02777761e-02, 5.55555560e-02, 0.,
             3.47222239e-02, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             2.08333340e-02, 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 4.16666679e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444478e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 1.38888890e-02, 0., 6.25000000e-02, 0.,
             0., 0., 1.59722224e-01, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.77777780e-02, 6.94444450e-03, 1.18055560e-01, 0., 0., 0.,
             1.31944448e-01, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 4.86111119e-02, 0., 0.,
             0., 2.08333340e-02, 1.38888890e-02, 2.08333340e-02, 0.,
             1.38888890e-02, 2.08333340e-02, 0., 0., 1.04166664e-01, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.25000000e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             0., 0., 6.94444450e-03, 6.25000000e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 0., 1.04166664e-01, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.77777780e-02, 0., 6.94444450e-03, 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444478e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 2.77777780e-02, 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             8.33333358e-02, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 2.08333340e-02, 2.08333340e-02,
             9.02777761e-02, 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444478e-02, 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 2.77777780e-02,
             1.25000000e-01, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.25000000e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444478e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 6.25000000e-02,
             2.08333340e-02, 1.38888890e-02, 0., 0., 1.38888890e-02, 0.,
             0., 3.47222239e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 4.86111119e-02, 6.94444450e-03,
             1.38888890e-02, 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 4.86111119e-02, 0.,
             4.86111119e-02, 1.11111112e-01, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 3.47222239e-02, 0., 0.,
             2.08333340e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 4.86111119e-02, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 1.38888890e-02, 2.77777780e-02,
             6.94444450e-03, 0., 6.94444478e-02, 3.47222239e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 2.08333340e-02,
             2.08333340e-02, 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 1.45833328e-01,
             6.94444478e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 4.86111119e-02, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444478e-02, 5.55555560e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03,
             4.16666679e-02, 4.16666679e-02, 0., 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 1.38888890e-02,
             3.47222239e-02, 1.38888890e-02, 1.38888890e-02, 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 7.63888881e-02,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 3.47222239e-02, 0., 2.77777780e-02,
             6.94444478e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 2.08333340e-02, 2.77777780e-02,
             0., 2.77777780e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 3.47222239e-02, 0., 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 6.25000000e-02, 1.38888890e-02, 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 4.16666679e-02,
             5.55555560e-02, 2.08333340e-02, 0., 4.16666679e-02,
             2.08333340e-02, 0., 1.38888890e-02, 7.63888881e-02, 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 2.08333340e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 8.33333358e-02, 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 0., 4.86111119e-02, 0., 6.94444450e-03,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 3.47222239e-02, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 8.33333358e-02,
             2.77777780e-02, 0., 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             5.55555560e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444478e-02,
             0., 6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.25000000e-02,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             1.04166664e-01, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             4.16666679e-02, 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 8.33333358e-02, 6.25000000e-02,
             2.77777780e-02, 0., 1.38888890e-02, 3.47222239e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 2.08333340e-02, 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             3.47222239e-02, 2.08333340e-02, 3.47222239e-02, 0.,
             1.45833328e-01, 0., 6.94444450e-03, 0., 1.04166664e-01, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 1.38888890e-02, 0.,
             0., 2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444478e-02, 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444478e-02, 0., 0.,
             0., 0., 0., 0., 6.25000000e-02, 6.94444478e-02,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 1.18055560e-01, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 6.25000000e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             7.63888881e-02, 6.94444450e-03, 2.77777780e-02, 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 1.25000000e-01, 0., 0.,
             0., 0., 0., 6.94444450e-03, 3.47222239e-02, 6.94444478e-02,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 4.16666679e-02, 1.18055560e-01, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 4.86111119e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.77777780e-02, 0., 0., 0., 6.94444478e-02, 0., 0., 0., 0.,
             0., 0., 0., 4.86111119e-02, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 5.55555560e-02, 1.38888890e-02, 2.08333340e-02,
             0., 0., 0., 0., 1.38888890e-02, 4.86111119e-02,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 4.16666679e-02, 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 9.02777761e-02, 0., 1.52777776e-01,
             1.11111112e-01, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             5.55555560e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0.,
             2.77777780e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 2.08333340e-02, 0., 2.08333340e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 2.08333340e-02, 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             4.16666679e-02, 2.77777780e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             5.55555560e-02, 0., 1.45833328e-01, 8.33333358e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             4.86111119e-02, 0., 4.16666679e-02, 4.16666679e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 5.55555560e-02, 0.,
             0., 6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 2.08333340e-02, 4.16666679e-02, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             9.72222239e-02, 2.08333340e-02, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0.,
             1.38888890e-02, 0., 4.86111119e-02, 1.66666672e-01,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 0., 6.25000000e-02,
             1.38888896e-01, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             3.47222239e-02, 2.77777780e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 9.72222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 2.77777780e-02,
             4.16666679e-02, 2.77777780e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 2.08333340e-02,
             1.11111112e-01, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 8.33333358e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 2.77777780e-02, 0., 0., 6.94444450e-03,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 1.11111112e-01,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             5.55555560e-02, 0., 6.94444450e-03, 0., 3.47222239e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03,
             5.55555560e-02, 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 5.55555560e-02,
             1.38888890e-02, 2.08333340e-02, 6.94444450e-03,
             2.08333340e-02, 6.94444450e-03, 0., 1.38888890e-02,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             4.16666679e-02, 6.94444450e-03, 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 4.86111119e-02, 0., 0., 0., 5.55555560e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 4.16666679e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             4.86111119e-02, 0., 6.94444450e-03, 0., 6.94444478e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 6.25000000e-02, 4.16666679e-02,
             3.47222239e-02, 0., 0., 2.08333340e-02, 0., 6.94444450e-03,
             6.25000000e-02, 6.94444450e-03, 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 2.77777780e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 4.16666679e-02, 0., 2.77777780e-02, 0.,
             0., 0., 6.94444478e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 2.08333340e-02, 1.38888890e-02, 1.38888890e-02,
             0., 6.25000000e-02, 0., 0., 0., 8.33333358e-02, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0., 0.,
             6.94444450e-03, 9.72222239e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 8.33333358e-02, 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.25000000e-02, 3.47222239e-01, 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 0., 1.38888890e-02, 1.38888896e-01, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             4.16666679e-02, 0., 2.77777780e-02, 5.55555560e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 2.77777780e-02, 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 4.86111119e-02, 3.61111104e-01,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 1.66666672e-01,
             2.22222224e-01, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 9.02777761e-02, 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 1.94444448e-01, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 1.38888896e-01,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             1.11111112e-01, 0., 0., 0., 0., 0., 0., 0., 6.94444478e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             3.47222239e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             1.38888890e-02, 2.08333340e-02, 0., 0., 6.94444450e-03, 0.,
             0., 3.47222239e-02, 0., 0., 0., 0., 2.77777780e-02, 0.,
             6.94444450e-03, 4.86111119e-02, 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 2.77777780e-02,
             0., 5.55555560e-02, 6.94444478e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 2.77777780e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 3.47222239e-02,
             6.94444478e-02, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.25000000e-02,
             5.55555560e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 4.16666679e-02,
             4.16666679e-02, 0., 0., 0., 2.08333340e-02, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 1.38888890e-02, 4.16666679e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 3.47222239e-02, 0., 1.38888890e-02,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 6.25000000e-02, 0.,
             1.38888890e-02, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 7.63888881e-02, 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             3.47222239e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 2.77777780e-02,
             0., 2.08333340e-02, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 8.33333358e-02,
             3.47222239e-02, 0., 2.08333340e-02, 0., 0., 0., 0.,
             4.16666679e-02, 2.77777780e-02, 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 6.94444478e-02, 1.38888890e-02,
             4.16666679e-02, 0., 1.38888890e-02, 1.38888890e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 5.55555560e-02, 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.25000000e-02, 6.94444450e-03, 1.38888890e-02,
             7.63888881e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             0., 4.16666679e-02, 1.38888890e-02, 1.38888890e-02, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 2.08333340e-02,
             0., 1.38888890e-02, 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 1.38888890e-02, 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 2.08333340e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 0., 6.94444478e-02, 5.55555560e-02,
             3.47222239e-02, 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 6.94444478e-02, 0., 0., 0.,
             0., 6.94444450e-03, 0., 3.47222239e-02, 5.55555560e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 7.63888881e-02,
             7.63888881e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 2.77777780e-02,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 3.47222239e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 4.16666679e-02, 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 2.77777780e-02, 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             6.94444478e-02, 6.25000000e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 3.47222239e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 8.33333358e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 3.47222239e-02, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 0., 6.94444450e-03, 0., 2.77777780e-02, 0., 0.,
             0., 6.94444478e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 4.86111119e-02, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 2.08333340e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 1.04166664e-01 ]
      - !!opencv-matrix
         rows: 1
         cols: 16384
         dt: f
         data: [ 4.86111119e-02, 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 2.77777780e-02, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 3.47222239e-02, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.25000000e-02, 6.94444450e-03,
             0., 0., 1.66666672e-01, 0., 5.55555560e-02, 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             9.02777761e-02, 6.94444450e-03, 4.16666679e-02, 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0.,
             2.08333340e-02, 4.86111119e-02, 2.08333340e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             5.55555560e-02, 0., 2.08333340e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.52777776e-01, 0., 1.45833328e-01, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 6.25000000e-02, 0.,
             1.04166664e-01, 1.38888890e-02, 0., 0., 4.16666679e-02, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 1.38888890e-02,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 7.63888881e-02, 2.77777780e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444478e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 2.77777780e-02, 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 4.86111119e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 4.16666679e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.25000000e-02, 0., 2.77777780e-02,
             6.94444450e-03, 0., 0., 6.25000000e-02, 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 2.08333340e-02,
             1.38888890e-02, 5.55555560e-02, 0., 3.47222239e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 3.47222239e-02, 0., 6.94444450e-03, 0., 7.63888881e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             6.94444450e-03, 1.38888890e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 4.16666679e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 8.33333358e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 4.86111119e-02, 6.94444450e-03,
             0., 0., 9.02777761e-02, 0., 1.38888890e-02, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 7.63888881e-02, 6.25000000e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 6.25000000e-02,
             1.38888890e-02, 0., 2.08333340e-02, 1.38888890e-02,
             1.38888890e-02, 0., 7.63888881e-02, 4.16666679e-02,
             1.38888890e-02, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 6.94444450e-03, 2.08333340e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             8.33333358e-02, 4.86111119e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.25000000e-02, 1.52777776e-01, 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 2.08333340e-02,
             3.47222239e-02, 0., 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 1.04166664e-01,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 2.77777780e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.45833328e-01, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 9.72222239e-02, 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 1.59722224e-01,
             2.77777780e-02, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.80555552e-01, 2.08333340e-02, 0., 0.,
             2.08333340e-02, 6.94444450e-03, 1.38888890e-02,
             2.08333340e-02, 4.16666679e-02, 1.38888890e-02,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 4.16666679e-02,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0.,
             0., 1.94444448e-01, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.16666679e-02, 0., 0., 0.,
             7.63888881e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             2.08333340e-02, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 3.47222239e-02, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             6.94444478e-02, 5.55555560e-02, 1.38888890e-02, 0.,
             2.77777780e-02, 2.08333340e-02, 0., 1.38888890e-02,
             5.55555560e-02, 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 4.16666679e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             0., 0., 6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 1.38888890e-02, 3.47222239e-02,
             1.38888890e-02, 0., 0., 1.38888890e-02, 2.08333340e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 8.33333358e-02, 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 4.86111119e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 4.86111119e-02, 0.,
             0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             5.55555560e-02, 2.08333340e-02, 2.77777780e-02, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 2.08333340e-02, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             3.47222239e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 5.55555560e-02, 0., 0.,
             6.94444450e-03, 1.25000000e-01, 6.94444450e-03,
             2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444478e-02, 6.94444450e-03, 0., 0., 7.63888881e-02,
             0., 2.77777780e-02, 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.25000000e-02, 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 2.08333340e-02,
             7.63888881e-02, 4.86111119e-02, 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 1.38888890e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 0., 4.86111119e-02, 0., 0., 0.,
             9.72222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 6.94444450e-03,
             9.02777761e-02, 0., 6.94444450e-03, 0., 1.80555552e-01, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 3.47222239e-02, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 8.33333358e-02, 3.47222239e-02,
             3.47222239e-02, 0., 6.94444450e-03, 2.08333340e-02, 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 1.38888890e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             5.55555560e-02, 0., 4.86111119e-02, 0., 0., 0.,
             1.11111112e-01, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 2.77777780e-02, 0.,
             2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 1.38888890e-02,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 1.38888896e-01, 4.16666679e-02,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 2.08333340e-02, 0., 0., 0., 1.38888890e-02,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             4.16666679e-02, 1.38888890e-02, 4.16666679e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 4.16666679e-02, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 2.08333340e-02, 6.94444450e-03, 2.08333340e-02,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 5.55555560e-02, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.77777780e-02, 6.94444450e-03,
             2.77777780e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 2.08333340e-02,
             3.47222239e-02, 1.38888896e-01, 5.55555560e-02,
             2.08333340e-02, 0., 0., 2.08333340e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             4.86111119e-02, 2.77777780e-02, 0., 0., 6.94444450e-03, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 3.47222239e-02,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 4.16666679e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 2.08333340e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 0., 3.47222239e-02, 1.38888890e-02,
             6.25000000e-02, 1.52777776e-01, 4.16666679e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 4.86111119e-02,
             2.77777780e-02, 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 3.47222239e-02, 0.,
             4.86111119e-02, 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             3.47222239e-02, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 6.94444450e-03, 5.55555560e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 3.47222239e-02,
             2.77777780e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444478e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 4.86111119e-02,
             2.08333340e-02, 0., 1.38888890e-02, 4.16666679e-02,
             1.38888890e-02, 4.16666679e-02, 9.02777761e-02,
             4.86111119e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 4.16666679e-02, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 1.73611119e-01, 6.94444450e-03, 0., 0.,
             4.16666679e-02, 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             2.77777780e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 0., 1.38888890e-02,
             4.86111119e-02, 2.08333340e-02, 6.94444450e-03,
             6.25000000e-02, 5.55555560e-02, 4.86111119e-02,
             6.94444450e-03, 2.08333340e-02, 2.08333340e-02, 0.,
             1.38888890e-02, 6.25000000e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.08333340e-02, 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 2.08333340e-02, 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 2.08333340e-02, 0.,
             2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02,
             2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 3.47222239e-02, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             5.55555560e-02, 2.77777780e-02, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 4.16666679e-02, 0., 0., 0., 4.16666679e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             2.77777780e-02, 0., 0., 0., 8.33333358e-02, 6.94444450e-03,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 4.16666679e-02, 6.94444450e-03,
             0., 0., 5.55555560e-02, 0., 2.08333340e-02, 1.38888890e-02,
             0., 6.94444450e-03, 0., 4.86111119e-02, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             8.33333358e-02, 0., 6.94444450e-03, 0., 5.55555560e-02, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 7.63888881e-02, 3.47222239e-02,
             1.38888890e-02, 0., 6.94444450e-03, 5.55555560e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0.,
             6.25000000e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             3.47222239e-02, 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 3.47222239e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 3.47222239e-02,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 3.47222239e-02, 0., 3.47222239e-02, 0., 6.94444450e-03,
             0., 7.63888881e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 2.08333340e-02, 0., 0., 6.94444450e-03, 0.,
             0., 2.08333340e-02, 6.25000000e-02, 5.55555560e-02,
             1.38888890e-02, 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0.,
             5.55555560e-02, 5.55555560e-02, 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 3.47222239e-02, 0., 1.25000000e-01,
             1.38888896e-01, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 0., 0., 0., 4.86111119e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 4.16666679e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 1.38888890e-02, 0.,
             1.38888890e-02, 4.86111119e-02, 2.77777780e-02,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             2.77777780e-02, 4.16666679e-02, 0., 0., 0., 0.,
             1.38888890e-02, 0., 3.47222239e-02, 1.45833328e-01,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             6.25000000e-02, 6.94444478e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 4.86111119e-02, 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 0., 5.55555560e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 3.47222239e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 7.63888881e-02,
             6.94444450e-03, 2.01388896e-01, 9.72222239e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 7.63888881e-02, 0.,
             9.02777761e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 4.16666679e-02, 0., 0., 0., 6.94444478e-02,
             0., 2.08333340e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 2.08333340e-02, 0., 0., 2.77777780e-02,
             4.86111119e-02, 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 7.63888881e-02, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 1.66666672e-01,
             1.38888896e-01, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 2.08333340e-02, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             5.55555560e-02, 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 8.33333358e-02, 4.86111119e-02,
             3.47222239e-02, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 1.38888890e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.11111112e-01, 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 5.55555560e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 2.77777780e-02, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 2.77777780e-02, 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 2.08333340e-02,
             1.38888890e-02, 0., 0., 2.77777780e-02, 0., 1.38888890e-02,
             4.16666679e-02, 4.86111119e-02, 2.77777780e-02,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0.,
             2.08333340e-02, 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 6.25000000e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 4.86111119e-02, 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 1.38888890e-02,
             4.86111119e-02, 0., 1.38888890e-02, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02,
             3.47222239e-02, 0., 2.77777780e-02, 0., 6.94444450e-03, 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 4.16666679e-02, 0., 2.08333340e-02, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 2.77777780e-02,
             7.63888881e-02, 5.55555560e-02, 0., 0., 0., 2.08333340e-02,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             0., 0., 0., 0., 3.47222239e-02, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 5.55555560e-02, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 2.08333340e-02,
             0., 7.63888881e-02, 0., 6.94444450e-03, 0., 4.16666679e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 2.08333340e-02, 0., 1.38888890e-02, 0., 0.,
             0., 2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 4.86111119e-02, 1.38888890e-02, 0., 2.08333340e-02, 0.,
             0., 0., 2.77777780e-02, 2.77777780e-02, 3.47222239e-02, 0.,
             3.47222239e-02, 2.08333340e-02, 6.94444450e-03, 0.,
             5.55555560e-02, 5.55555560e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 6.94444450e-03, 2.77777780e-02, 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 2.77777780e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 5.55555560e-02, 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.25000000e-02, 3.47222239e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03,
             8.33333358e-02, 2.08333340e-02, 0., 0., 5.55555560e-02,
             1.38888890e-02, 2.08333340e-02, 4.86111119e-02,
             2.77777780e-02, 1.38888890e-02, 0., 0., 6.94444450e-03, 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 2.77777780e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 6.94444450e-03, 0., 3.47222239e-02, 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 1.38888890e-02, 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 2.77777780e-02, 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02,
             2.08333340e-02, 5.55555560e-02, 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 6.94444478e-02, 4.16666679e-02,
             0., 2.77777780e-02, 0., 0., 6.94444450e-03, 0.,
             5.55555560e-02, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 6.25000000e-02, 2.08333340e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 2.08333340e-02, 0.,
             4.16666679e-02, 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 1.04166664e-01, 0.,
             1.38888896e-01, 0., 0., 6.94444450e-03, 9.72222239e-02, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 7.63888881e-02, 0., 8.33333358e-02, 0.,
             6.94444450e-03, 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 2.08333340e-02, 0.,
             1.38888890e-02, 0., 0., 1.38888890e-02, 1.38888890e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 3.47222239e-02,
             2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0., 0.,
             0., 0., 4.86111119e-02, 0., 0., 0., 4.86111119e-02, 0.,
             2.08333340e-02, 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             0., 0., 0., 0., 1.31944448e-01, 6.94444450e-03, 0., 0.,
             1.04166664e-01, 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 2.77777780e-02, 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 8.33333358e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             3.47222239e-02, 0., 6.94444450e-03, 5.55555560e-02,
             6.94444450e-03, 1.38888890e-02, 2.08333340e-02,
             1.38888890e-02, 1.38888890e-02, 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 2.08333340e-02, 0., 2.08333340e-02, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.25000000e-02, 7.63888881e-02, 0.,
             4.86111119e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 1.31944448e-01, 1.45833328e-01,
             0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             2.77777780e-02, 2.77777780e-02, 0., 0., 2.08333340e-02,
             1.38888890e-02, 1.38888890e-02, 4.86111119e-02,
             5.55555560e-02, 6.94444450e-03, 0., 0., 3.47222239e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 3.47222239e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0.,
             2.77777780e-02, 0., 3.47222239e-02, 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 4.16666679e-02,
             6.94444450e-03, 2.77777780e-02, 6.94444450e-03,
             6.94444450e-03, 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 7.63888881e-02, 0., 2.77777780e-02, 0., 0.,
             0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 3.47222239e-02, 6.94444450e-03, 0.,
             2.77777780e-02, 0., 0., 0., 1.38888890e-02, 1.38888890e-02,
             2.08333340e-02, 0., 3.47222239e-02, 0., 0., 0.,
             6.94444478e-02, 4.86111119e-02, 2.77777780e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             3.47222239e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 2.08333340e-02, 1.38888890e-02,
             1.38888890e-02, 0., 4.16666679e-02, 0., 1.38888890e-02, 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 2.77777780e-02, 0.,
             3.47222239e-02, 0., 0., 0., 6.25000000e-02, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             1.38888890e-02, 0., 3.47222239e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             2.08333340e-02, 6.25000000e-02, 2.77777780e-02, 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 3.47222239e-02,
             6.25000000e-02, 7.63888881e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 2.77777780e-02,
             2.08333340e-02, 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 2.08333340e-02, 0.,
             3.47222239e-02, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.25000000e-02, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 1.31944448e-01, 0.,
             0., 0., 2.08333340e-02, 0., 2.08333340e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 1.38888890e-02,
             9.72222239e-02, 5.55555560e-02, 3.47222239e-02,
             6.94444450e-03, 2.08333340e-02, 0., 0., 1.38888890e-02,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             1.04166664e-01, 1.38888890e-02, 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 4.16666679e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 9.02777761e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444478e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 3.47222239e-02, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 2.08333340e-02,
             8.33333358e-02, 2.77777780e-02, 6.94444450e-03,
             6.94444450e-03, 0., 2.08333340e-02, 0., 1.38888890e-02,
             4.16666679e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 2.08333340e-02, 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 4.16666679e-02, 6.94444450e-03, 2.77777780e-02,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 2.77777780e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.77777780e-02, 5.55555560e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.25000000e-02, 5.55555560e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0.,
             5.55555560e-02, 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 2.77777780e-02, 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 5.55555560e-02, 0., 0., 0.,
             0., 1.38888890e-02, 0., 1.38888890e-02, 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             0., 2.77777780e-02, 3.47222239e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 7.63888881e-02,
             6.94444450e-03, 2.08333340e-02, 3.47222239e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 1.38888890e-02, 0., 2.08333340e-02, 0.,
             0., 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 5.55555560e-02,
             2.77777780e-02, 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 6.94444478e-02, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             9.72222239e-02, 0., 4.86111119e-02, 6.94444478e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 5.55555560e-02, 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 7.63888881e-02, 6.94444450e-03, 0., 0.,
             7.63888881e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 0., 6.94444450e-03, 2.08333340e-02,
             1.38888890e-02, 0., 4.16666679e-02, 3.47222239e-02,
             2.08333340e-02, 0., 2.08333340e-02, 2.08333340e-02,
             6.94444450e-03, 0., 6.25000000e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 3.47222239e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 4.86111119e-02, 0., 3.47222239e-02, 5.55555560e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             1.38888890e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 2.77777780e-02, 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 8.33333358e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 4.16666679e-02,
             1.38888890e-02, 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 3.47222239e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 1.11111112e-01, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 4.16666679e-02, 0., 4.16666679e-02,
             4.86111119e-02, 2.08333340e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 3.47222239e-02,
             0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 1.11111112e-01,
             3.47222239e-02, 2.08333340e-02, 1.38888890e-02,
             1.38888890e-02, 2.08333340e-02, 0., 6.94444450e-03,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444478e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             2.08333340e-02, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0., 0.,
             1.18055560e-01, 0., 0., 0., 0., 0., 0., 0., 6.25000000e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 5.55555560e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 2.08333340e-02, 0., 1.38888890e-02, 0.,
             3.47222239e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 7.63888881e-02, 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 3.47222239e-02, 6.94444450e-03, 0., 0.,
             7.63888881e-02, 6.94444450e-03, 4.16666679e-02,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444478e-02, 0., 0., 0., 0., 0., 0., 0.,
             7.63888881e-02, 6.94444450e-03, 0., 0., 1.38888896e-01, 0.,
             2.08333340e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 0., 0., 2.77777780e-02,
             6.94444450e-03, 6.94444450e-03, 9.02777761e-02,
             4.86111119e-02, 1.38888890e-02, 0., 1.38888890e-02,
             1.38888890e-02, 0., 6.94444450e-03, 2.77777780e-02, 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 3.47222239e-02, 0., 0., 2.08333340e-02,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             4.16666679e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             9.72222239e-02, 6.94444450e-03, 0., 0., 3.47222239e-02, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 2.08333340e-02, 0., 1.38888890e-02,
             1.38888890e-02, 6.94444450e-03, 0., 1.59722224e-01,
             1.38888890e-02, 1.38888890e-02, 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 6.94444478e-02, 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02,
             9.02777761e-02, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 6.25000000e-02, 1.38888890e-02, 6.94444478e-02,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 3.47222239e-02, 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 2.08333340e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0.,
             0., 0., 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 4.16666679e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 3.47222239e-02, 4.16666679e-02,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 1.38888890e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             5.55555560e-02, 1.38888890e-02, 0., 0., 6.94444450e-03, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 4.86111119e-02, 4.86111119e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 4.16666679e-02,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 2.08333340e-02, 0., 1.38888890e-02, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 2.08333340e-02, 0., 2.08333340e-02, 0., 0.,
             0., 0., 2.08333340e-02, 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 3.47222239e-02, 2.08333340e-02,
             1.38888890e-02, 5.55555560e-02, 2.77777780e-02,
             3.47222239e-02, 0., 0., 6.94444450e-03, 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             6.25000000e-02, 1.38888890e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 6.94444450e-03,
             1.04166664e-01, 6.25000000e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 2.77777780e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 3.47222239e-02, 6.94444450e-03, 0., 1.38888890e-02,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444478e-02,
             3.47222239e-02, 0., 0., 1.38888890e-02, 6.94444450e-03,
             1.38888890e-02, 2.08333340e-02, 4.86111119e-02, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 4.16666679e-02,
             8.33333358e-02, 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 4.86111119e-02,
             6.94444450e-03, 2.77777780e-02, 7.63888881e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 2.77777780e-02, 1.38888890e-02,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 6.94444450e-03, 2.08333340e-02, 0.,
             0., 9.72222239e-02, 4.16666679e-02, 2.08333340e-02, 0.,
             1.38888890e-02, 0., 0., 1.38888890e-02, 2.08333340e-02, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             3.47222239e-02, 0., 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             2.77777780e-02, 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 9.02777761e-02, 0., 7.63888881e-02, 0., 0.,
             0., 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444478e-02,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             1.38888890e-02, 0., 1.38888890e-02, 1.38888890e-02,
             1.38888890e-02, 6.94444450e-03, 8.33333358e-02,
             2.08333340e-02, 3.47222239e-02, 0., 2.08333340e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 2.77777780e-02, 0.,
             4.16666679e-02, 0., 6.94444450e-03, 0., 6.25000000e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444478e-02, 0., 1.11111112e-01,
             6.94444450e-03, 0., 0., 1.11111112e-01, 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.25000000e-02,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             6.94444478e-02, 9.02777761e-02, 1.38888890e-02, 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 2.77777780e-02,
             1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             0., 2.77777780e-02, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             3.47222239e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 5.55555560e-02, 0., 0., 0., 8.33333358e-02,
             6.94444450e-03, 2.08333340e-02, 2.77777780e-02, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 5.55555560e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03,
             8.33333358e-02, 4.16666679e-02, 0., 0., 0., 1.38888890e-02,
             0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 1.38888890e-02,
             3.47222239e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 7.63888881e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.87500000e-01, 0., 0., 0.,
             4.16666679e-02, 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 4.86111119e-02,
             1.38888890e-02, 0., 0., 2.08333340e-02, 4.16666679e-02,
             2.08333340e-02, 6.25000000e-02, 4.86111119e-02, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 6.94444450e-03, 2.77777780e-02,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 2.77777780e-02, 0.,
             2.08333340e-02, 2.77777780e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 4.16666679e-02, 0., 0., 0.,
             2.08333340e-02, 0., 4.86111119e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             4.16666679e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 3.47222239e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 2.77777780e-02,
             2.08333340e-02, 4.86111119e-02, 4.16666679e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 3.47222239e-02, 5.55555560e-02, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.18055560e-01, 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 2.08333340e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 5.55555560e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 2.08333340e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.04166664e-01, 2.77777780e-02, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0.,
             4.16666679e-02, 6.25000000e-02, 5.55555560e-02,
             6.94444450e-03, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             3.47222239e-02, 2.08333340e-02, 2.77777780e-02,
             1.38888890e-02, 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             2.08333340e-02, 0., 4.16666679e-02, 2.77777780e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             5.55555560e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 2.08333340e-02,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444478e-02, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 3.47222239e-02, 4.16666679e-02,
             4.86111119e-02, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 6.94444450e-03,
             2.77777780e-02, 0., 3.47222239e-02, 9.02777761e-02,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 6.94444450e-03, 0., 2.08333340e-02,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 4.86111119e-02, 0., 1.25000000e-01,
             0., 6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 3.47222239e-02, 0., 4.86111119e-02, 0., 0.,
             0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 1.38888890e-02, 0.,
             4.16666679e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 2.08333340e-02,
             6.94444450e-03, 6.94444450e-03, 5.55555560e-02,
             2.77777780e-02, 1.38888890e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             2.08333340e-02, 0., 4.16666679e-02, 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.25000000e-02, 0.,
             1.73611119e-01, 0., 0., 0., 1.73611119e-01, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 6.25000000e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             5.55555560e-02, 3.47222239e-02, 3.47222239e-02,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 4.16666679e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.08333340e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 5.55555560e-02, 0.,
             0., 0., 3.47222239e-02, 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 2.77777780e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 4.16666679e-02, 0., 4.86111119e-02, 0.,
             6.94444450e-03, 0., 6.94444478e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.77777780e-02, 0., 1.38888890e-02, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 2.77777780e-02, 0., 2.08333340e-02, 0.,
             2.08333340e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 9.72222239e-02,
             6.94444478e-02, 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 2.08333340e-02, 0., 2.08333340e-02,
             6.94444478e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 1.38888890e-02, 6.94444450e-03, 2.77777780e-02, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 2.77777780e-02, 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             5.55555560e-02, 0., 6.94444450e-03, 2.08333340e-02,
             2.77777780e-02, 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             2.77777780e-02, 2.77777780e-02, 1.18055560e-01,
             4.86111119e-02, 6.94444450e-03, 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 2.77777780e-02, 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 9.72222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.80555552e-01, 0., 0., 6.94444450e-03, 5.55555560e-02,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 4.16666679e-02, 6.94444450e-03, 0.,
             2.08333340e-02, 4.86111119e-02, 1.38888890e-02,
             6.94444450e-03, 4.16666679e-02, 4.86111119e-02,
             6.94444450e-03, 0., 2.08333340e-02, 2.08333340e-02,
             6.94444450e-03, 0., 4.86111119e-02, 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 6.94444478e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             0., 1.38888890e-02, 6.94444450e-03, 1.38888890e-02, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444478e-02, 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 7.63888881e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.77777780e-02, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             1.38888890e-02, 2.08333340e-02, 0., 6.94444450e-03,
             1.11111112e-01, 5.55555560e-02, 2.08333340e-02, 0., 0., 0.,
             0., 6.94444450e-03, 5.55555560e-02, 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 3.47222239e-02,
             4.86111119e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             3.47222239e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 4.86111119e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             5.55555560e-02, 0., 0., 2.08333340e-02, 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 5.55555560e-02, 4.86111119e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 6.25000000e-02, 6.94444450e-03,
             0., 0., 2.08333340e-02, 0., 1.38888890e-02, 3.47222239e-02,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.77777780e-02, 6.94444450e-03, 4.16666679e-02, 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 2.08333340e-02,
             0., 0., 6.94444450e-03, 2.77777780e-02, 6.94444450e-03,
             1.18055560e-01, 7.63888881e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             3.47222239e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02,
             6.94444478e-02, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.25000000e-02, 5.55555560e-02, 0., 0., 6.94444450e-03, 0.,
             0., 0., 2.08333340e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 6.25000000e-02,
             4.16666679e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 2.77777780e-02,
             2.08333340e-02, 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 5.55555560e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 7.63888881e-02, 0.,
             4.86111119e-02, 1.38888890e-02, 2.08333340e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 2.08333340e-02, 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 1.38888890e-02, 0., 1.38888890e-02, 0.,
             1.11111112e-01, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 6.94444478e-02,
             3.47222239e-02, 0., 0., 0., 2.08333340e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 4.16666679e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 6.94444450e-03,
             0., 0., 8.33333358e-02, 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 9.72222239e-02, 0., 0., 0.,
             1.04166664e-01, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             0., 0., 6.94444478e-02, 2.08333340e-02, 2.77777780e-02, 0.,
             1.38888890e-02, 2.77777780e-02, 0., 0., 2.08333340e-02, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 2.77777780e-02, 0., 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.25000000e-02, 0., 1.38888890e-02, 6.94444450e-03,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 1.38888890e-02, 6.94444450e-03,
             1.38888890e-02, 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 2.77777780e-02,
             1.38888890e-02, 2.77777780e-02, 6.94444450e-03,
             9.72222239e-02, 0., 6.94444450e-03, 0., 9.72222239e-02, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 1.38888890e-02, 0., 1.38888890e-02, 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 7.63888881e-02 ]
      - !!opencv-matrix
         rows: 1
         cols: 16384
         dt: f
         data: [ 4.16666679e-02, 6.94444450e-03, 0., 2.08333340e-02,
             1.38888890e-02, 0., 6.94444450e-03, 5.55555560e-02, 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 2.08333340e-02,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 2.77777780e-02,
             0., 4.86111119e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 2.08333340e-02, 0., 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 2.08333340e-02,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             6.94444450e-03, 2.08333340e-02, 0., 5.55555560e-02, 0., 0.,
             0., 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             1.38888890e-02, 0., 2.77777780e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 2.08333340e-02, 0., 6.94444450e-03,
             6.94444450e-03, 7.63888881e-02, 2.77777780e-02,
             2.77777780e-02, 0., 2.08333340e-02, 0., 0., 2.77777780e-02,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             1.38888890e-02, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 1.38888890e-02, 0., 3.47222239e-02,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 4.86111119e-02, 0., 6.94444450e-03, 0.,
             1.25000000e-01, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             4.16666679e-02, 0., 4.86111119e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             9.02777761e-02, 1.38888890e-02, 0., 0., 0., 2.77777780e-02,
             0., 6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 6.94444478e-02, 4.86111119e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 3.47222239e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 6.94444478e-02, 0., 9.02777761e-02, 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             4.16666679e-02, 0., 6.25000000e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 2.77777780e-02, 0., 2.08333340e-02, 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 4.86111119e-02, 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 1.38888896e-01, 0., 6.94444478e-02, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 2.08333340e-02, 1.94444448e-01,
             6.94444450e-03, 9.72222239e-02, 0., 0., 0., 4.16666679e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 2.77777780e-02,
             8.33333358e-02, 0., 2.77777780e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 2.08333340e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02,
             4.16666679e-02, 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             4.16666679e-02, 0., 1.38888890e-02, 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             1.38888890e-02, 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 4.86111119e-02, 0., 0., 0., 9.02777761e-02,
             0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 2.08333340e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 2.77777780e-02, 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 5.55555560e-02, 0.,
             6.94444450e-03, 0., 0., 0., 3.47222239e-02, 1.38888890e-02,
             2.08333340e-02, 0., 0., 4.16666679e-02, 1.38888890e-02,
             6.94444450e-03, 6.94444478e-02, 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 2.08333340e-02, 0., 6.94444450e-03, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.11111112e-01, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 1.52777776e-01, 0., 0., 6.94444450e-03,
             9.02777761e-02, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 8.33333358e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 1.31944448e-01, 3.47222239e-02, 0., 0.,
             2.77777780e-02, 1.38888890e-02, 6.94444450e-03,
             2.77777780e-02, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 3.47222239e-02,
             0., 3.47222239e-02, 1.38888890e-02, 6.94444450e-03,
             1.38888890e-02, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.25000000e-02, 0., 0., 0., 0., 0., 0.,
             0., 9.02777761e-02, 0., 0., 0., 7.63888881e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.11111112e-01, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 0., 1.38888890e-02, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 3.47222239e-02, 3.47222239e-02,
             0., 2.08333340e-02, 3.47222239e-02, 0., 6.94444450e-03,
             9.02777761e-02, 4.16666679e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 2.08333340e-02, 0., 2.08333340e-02,
             1.04166664e-01, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 1.38888890e-02, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 1.38888890e-02,
             0., 0., 0., 0., 3.47222239e-02, 6.94444450e-03,
             6.94444450e-03, 0., 2.43055552e-01, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0.,
             4.16666679e-02, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 3.47222239e-02, 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 3.47222239e-02, 9.02777761e-02, 0.,
             8.33333358e-02, 0., 1.38888890e-02, 0., 4.86111119e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             1.38888890e-02, 5.55555560e-02, 0., 6.94444478e-02, 0.,
             6.94444450e-03, 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 4.86111119e-02, 0., 3.47222239e-02,
             6.94444450e-03, 0., 0., 2.77777780e-02, 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 1.04166664e-01, 3.47222239e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 1.31944448e-01, 0.,
             9.02777761e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02,
             1.18055560e-01, 0., 6.94444478e-02, 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 2.77777780e-02, 0., 3.47222239e-02, 0., 0.,
             0., 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 5.55555560e-02,
             6.94444450e-03, 3.47222239e-02, 0., 6.94444450e-03, 0., 0.,
             0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 1.11111112e-01, 0.,
             1.04166664e-01, 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 5.55555560e-02, 0.,
             2.77777780e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 3.47222239e-02, 8.33333358e-02,
             0., 4.86111119e-02, 0., 0., 6.94444450e-03, 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 3.47222239e-02, 2.77777780e-02,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 1.38888890e-02,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 5.55555560e-02,
             6.94444450e-03, 1.38888890e-02, 5.55555560e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 2.08333340e-02, 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 3.47222239e-02, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 3.47222239e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 3.47222239e-02, 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 2.08333340e-02, 0., 0.,
             2.77777780e-02, 2.77777780e-02, 0., 1.38888896e-01,
             2.77777780e-02, 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 2.08333340e-02,
             0., 0., 1.25000000e-01, 6.94444450e-03, 6.25000000e-02,
             3.47222239e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.25000000e-02, 0.,
             5.55555560e-02, 2.77777780e-02, 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 4.16666679e-02, 0., 0., 0.,
             8.33333358e-02, 0., 1.38888890e-02, 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 1.38888890e-02, 2.08333340e-02, 1.38888890e-02,
             6.94444450e-03, 4.86111119e-02, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 8.33333358e-02, 0.,
             2.15277776e-01, 4.86111119e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             6.94444478e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 2.08333340e-02, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 9.72222239e-02, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 2.08333340e-02,
             2.08333340e-02, 0., 0., 2.08333340e-02, 0., 6.94444450e-03,
             4.16666679e-02, 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             2.08333340e-02, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             6.25000000e-02, 0., 7.63888881e-02, 2.77777780e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 4.86111119e-02, 0., 0.,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 8.33333358e-02, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 2.08333340e-02, 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             1.38888890e-02, 7.63888881e-02, 2.08333340e-02,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03,
             2.77777780e-02, 0., 6.94444450e-03, 3.47222239e-02, 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             5.55555560e-02, 0., 1.38888890e-02, 0., 0., 2.08333340e-02,
             0., 2.08333340e-02, 0., 0., 0., 1.52777776e-01, 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 3.47222239e-02, 0., 6.94444450e-03, 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 8.33333358e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03,
             2.08333340e-02, 0., 1.38888890e-02, 3.47222239e-02,
             1.38888890e-02, 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             2.77777780e-02, 0., 2.08333340e-02, 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 8.33333358e-02, 0.,
             4.16666679e-02, 0., 0., 0., 6.25000000e-02, 0., 0., 0., 0.,
             0., 0., 0., 4.16666679e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 6.94444450e-03, 1.04166664e-01,
             0., 7.63888881e-02, 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             0., 0., 0., 0., 3.47222239e-02, 1.38888890e-02,
             2.77777780e-02, 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 4.16666679e-02, 0.,
             2.77777780e-02, 6.94444450e-03, 0., 6.94444450e-03,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             2.08333340e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 1.38888890e-02, 0.,
             1.38888896e-01, 6.94444478e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 6.94444450e-03, 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.25000000e-02, 0.,
             5.55555560e-02, 6.94444450e-03, 0., 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             9.72222239e-02, 0., 4.16666679e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 2.08333340e-02, 0., 4.86111119e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 2.77777780e-02,
             1.38888890e-02, 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             3.47222239e-02, 6.25000000e-02, 4.16666679e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 3.47222239e-02, 0.,
             2.22222224e-01, 8.33333358e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 3.47222239e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444478e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 5.55555560e-02, 1.38888890e-02,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 2.08333340e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             1.38888896e-01, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 0., 6.25000000e-02,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 2.77777780e-02, 0., 0., 6.94444450e-03, 9.72222239e-02,
             0., 0., 0., 0., 0., 0., 0., 7.63888881e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 1.38888890e-02, 0., 5.55555560e-02,
             0., 0., 0., 1.18055560e-01, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444478e-02,
             0., 5.55555560e-02, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 6.94444450e-03, 0.,
             0., 2.08333328e-01, 0., 9.72222239e-02, 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888896e-01,
             0., 0., 0., 1.31944448e-01, 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 3.47222239e-02, 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 2.08333340e-02,
             2.08333340e-02, 6.94444450e-03, 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 4.16666679e-02, 3.47222239e-02, 2.77777780e-02, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 1.25000000e-01, 6.94444478e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 3.47222239e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 2.08333340e-02, 0., 1.38888890e-02, 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 3.47222239e-02, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 3.47222239e-02, 2.77777780e-02, 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 6.25000000e-02, 1.38888890e-02,
             1.38888890e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             3.47222239e-02, 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 2.08333340e-02, 0.,
             7.63888881e-02, 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 2.08333340e-02, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             3.47222239e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 2.08333340e-02, 6.94444450e-03,
             9.02777761e-02, 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 4.16666679e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 2.77777780e-02, 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03,
             2.77777780e-02, 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 3.47222239e-02, 3.47222239e-02,
             3.47222239e-02, 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.77777780e-02, 6.25000000e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 4.86111119e-02,
             6.94444450e-03, 1.38888890e-02, 3.47222239e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 1.38888890e-02, 0., 2.77777780e-02,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 6.94444450e-03, 3.47222239e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 3.47222239e-02, 2.08333340e-02, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             2.08333340e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             3.47222239e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.25000000e-02,
             0., 2.01388896e-01, 0., 0., 0., 9.72222239e-02, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             4.16666679e-02, 0., 6.25000000e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 3.47222239e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             0., 0., 1.38888890e-02, 0., 2.77777780e-02, 2.77777780e-02,
             3.47222239e-02, 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             5.55555560e-02, 0., 1.45833328e-01, 4.86111119e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0.,
             4.86111119e-02, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 6.94444450e-03, 0., 6.94444450e-03, 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 6.25000000e-02,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 3.47222239e-02, 2.08333340e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 2.77777780e-02, 0.,
             6.94444450e-03, 4.16666679e-02, 1.38888890e-02,
             1.38888890e-02, 3.47222239e-02, 4.16666679e-02,
             2.08333340e-02, 0., 2.08333340e-02, 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 1.38888890e-02,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 6.25000000e-02, 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 6.94444450e-03, 3.47222239e-02, 0.,
             0., 0., 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 4.16666679e-02, 0., 3.47222239e-02, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.08333340e-02, 2.77777780e-02, 0., 2.77777780e-02, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 3.47222239e-02, 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 6.94444450e-03, 0., 2.08333340e-02,
             6.94444450e-03, 1.04166664e-01, 2.77777780e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0.,
             4.16666679e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             8.33333358e-02, 0., 9.02777761e-02, 0., 0., 0.,
             9.72222239e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 3.47222239e-02,
             7.63888881e-02, 0., 8.33333358e-02, 0., 6.94444450e-03, 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             3.47222239e-02, 6.25000000e-02, 0., 2.08333340e-02, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             0., 0., 0., 0., 4.23611104e-01, 0., 0., 0., 5.55555560e-02,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 6.94444450e-03, 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 4.16666679e-02, 4.16666679e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 5.55555560e-02,
             1.38888890e-02, 0., 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 2.08333340e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 2.08333340e-02, 0., 0.,
             0., 2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03, 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             4.86111119e-02, 0., 2.77777780e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 5.55555560e-02, 1.11111112e-01, 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 1.11111112e-01,
             1.38888896e-01, 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 3.47222239e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             4.16666679e-02, 6.94444450e-03, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 3.47222239e-02, 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             9.02777761e-02, 0., 0., 0., 0., 0., 0., 0., 1.31944448e-01,
             0., 0., 0., 4.86111119e-02, 0., 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 2.77777780e-02,
             1.31944448e-01, 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             7.63888881e-02, 1.04166664e-01, 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 2.77777780e-02,
             2.77777780e-02, 6.94444450e-03, 0., 1.38888890e-02,
             1.38888890e-02, 6.94444450e-03, 4.16666679e-02,
             3.47222239e-02, 2.08333340e-02, 0., 0., 6.94444450e-03, 0.,
             0., 4.16666679e-02, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 4.16666679e-02, 2.08333340e-02, 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 1.38888890e-02, 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 2.77777780e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444478e-02, 0., 0., 6.94444450e-03, 6.94444478e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 1.38888890e-02, 1.38888890e-02,
             3.47222239e-02, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444478e-02, 2.77777780e-02, 3.47222239e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 1.38888890e-02,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 2.77777780e-02, 0., 0., 0., 4.86111119e-02, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 1.38888890e-02,
             6.94444478e-02, 0., 9.72222239e-02, 0., 6.94444450e-03, 0.,
             6.25000000e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 4.16666679e-02, 6.94444478e-02, 0.,
             1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 4.86111119e-02, 1.11111112e-01,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 4.16666679e-02, 1.38888890e-02, 0., 0., 1.38888890e-02,
             0., 6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444478e-02, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 4.16666679e-02, 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 3.47222239e-02,
             9.72222239e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.15277776e-01, 2.08333328e-01, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 2.77777780e-02, 6.94444450e-03, 0.,
             0., 0., 0., 6.94444450e-03, 2.77777780e-02, 6.94444450e-03,
             0., 0., 0., 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 8.33333358e-02, 0.,
             6.25000000e-02, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 5.55555560e-02, 2.50000000e-01,
             6.94444450e-03, 6.94444478e-02, 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 9.02777761e-02,
             1.18055560e-01, 0., 2.08333340e-02, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02,
             2.77777780e-02, 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 4.86111119e-02,
             0., 4.16666679e-02, 4.16666679e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 9.02777761e-02, 0., 4.16666679e-02,
             2.08333340e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             6.94444450e-03, 0., 0., 8.33333358e-02, 0., 2.77777780e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 3.47222239e-02, 0., 1.38888890e-02, 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 3.47222239e-02, 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 1.38888890e-02, 0., 2.08333340e-02, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 4.86111119e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.77777780e-02, 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0.,
             0., 6.94444478e-02, 0., 6.25000000e-02, 4.16666679e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02, 0., 0., 0.,
             9.02777761e-02, 0., 1.38888890e-02, 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.38888896e-01, 0., 0., 0., 7.63888881e-02, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 5.55555560e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             0., 9.72222239e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             0., 3.47222239e-02, 6.94444450e-03, 0., 1.38888890e-02, 0.,
             0., 0., 5.55555560e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 2.08333340e-02,
             0., 2.77777780e-02, 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 4.16666679e-02, 0.,
             2.08333340e-02, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 1.38888890e-02, 0., 0., 0.,
             1.80555552e-01, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 2.77777780e-02, 0., 2.77777780e-02, 0., 0.,
             0., 6.94444478e-02, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 4.86111119e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 7.63888881e-02, 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.25000000e-02, 0., 0., 0., 2.43055552e-01, 0.,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             1.18055560e-01, 0., 0., 0., 2.70833343e-01, 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             0., 6.94444450e-03, 2.08333340e-02, 0., 1.38888890e-02,
             2.77777780e-02, 0., 0., 0., 2.08333340e-02, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 2.77777780e-02, 0., 2.08333340e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 6.94444478e-02, 0., 2.08333340e-02,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444478e-02, 0., 0., 0., 1.25000000e-01,
             0., 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 2.08333340e-02, 0.,
             0., 0., 6.25000000e-02, 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 2.08333340e-02, 0.,
             1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03,
             9.72222239e-02, 1.38888890e-02, 1.38888890e-02, 0.,
             5.55555560e-02, 6.94444450e-03, 0., 6.94444450e-03,
             1.25000000e-01, 0., 0., 0., 0., 0., 0., 0., 6.25000000e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444478e-02, 0., 0., 0.,
             1.80555552e-01, 0., 0., 0., 0., 0., 0., 0., 1.38888896e-01,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 1.11111112e-01, 0., 0., 0., 0.,
             0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             0., 6.94444450e-03, 1.38888896e-01, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444478e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.31944448e-01, 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 9.02777761e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 4.86111119e-02, 0.,
             6.25000000e-02, 6.94444450e-03, 0., 0., 1.18055560e-01, 0.,
             0., 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             2.08333340e-02, 0., 1.38888890e-02, 0., 6.94444450e-03, 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             6.94444450e-03, 1.38888890e-02, 0., 0., 2.08333340e-02,
             6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 2.77777780e-02,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 9.02777761e-02, 0.,
             1.04166664e-01, 1.31944448e-01, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 4.86111119e-02,
             4.16666679e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.77777780e-02, 0., 0., 0., 4.16666679e-02, 0.,
             2.08333340e-02, 1.38888890e-02, 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 1.38888890e-02,
             3.47222239e-02, 2.77777780e-02, 1.38888890e-02,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 4.86111119e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 5.55555560e-02, 6.94444450e-03, 4.86111119e-02,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 4.16666679e-02, 0.,
             7.63888881e-02, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 4.16666679e-02, 0.,
             0., 0., 3.47222239e-02, 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 3.47222239e-02, 0., 1.38888890e-02, 0., 0.,
             0., 6.94444450e-03, 1.38888890e-02, 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 1.38888890e-02,
             4.86111119e-02, 4.86111119e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             3.47222239e-02, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             1.31944448e-01, 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             5.55555560e-02, 0., 2.08333340e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             1.31944448e-01, 6.25000000e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 2.08333340e-02,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             5.55555560e-02, 2.08333340e-02, 0., 0., 1.38888890e-02, 0.,
             0., 6.94444450e-03, 4.16666679e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 4.16666679e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 5.55555560e-02, 0.,
             1.38888896e-01, 4.16666679e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 2.08333340e-02,
             6.94444450e-03, 0., 0., 1.38888890e-02, 0., 4.16666679e-02,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 5.55555560e-02, 0., 0., 0., 0.,
             0., 0., 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             6.94444450e-03, 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02,
             4.86111119e-02, 2.08333340e-02, 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 3.47222239e-02, 0.,
             2.08333340e-02, 5.55555560e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             7.63888881e-02, 0., 5.55555560e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 4.86111119e-02, 0., 0., 0.,
             2.70833343e-01, 6.94444450e-03, 1.38888890e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             9.72222239e-02, 0., 2.77777780e-02, 1.38888890e-02, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 0., 0., 3.47222239e-02, 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             3.47222239e-02, 0., 6.94444450e-03, 2.77777780e-02, 0.,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 2.08333340e-02, 2.08333340e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 2.77777780e-02, 1.38888890e-02, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.08333340e-02, 0.,
             6.94444450e-03, 2.08333340e-02, 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 1.38888890e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 2.08333340e-02,
             6.94444450e-03, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 3.47222239e-02, 6.94444450e-03,
             6.94444450e-03, 0., 1.38888890e-02, 0., 1.38888890e-02,
             6.94444450e-03, 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.08333340e-02, 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             0., 1.38888890e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 2.08333340e-02, 1.38888890e-02, 0.,
             1.04166664e-01, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.31944448e-01, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 4.16666657e-01, 0., 0., 0., 0.,
             0., 0., 0., 1.11111112e-01, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 1.25000000e-01, 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             2.77777780e-02, 1.38888890e-02, 6.94444450e-03, 0., 0.,
             1.38888890e-02, 0., 2.08333340e-02, 1.38888896e-01, 0., 0.,
             0., 0., 0., 0., 2.77777780e-02, 1.59722224e-01, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             5.55555560e-02, 1.80555552e-01, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0.,
             1.04166664e-01, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 4.86111119e-02, 0., 0., 0., 0.,
             0., 0., 0., 3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 2.77777780e-02, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 0., 0., 1.38888890e-02,
             2.08333340e-02, 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 4.86111119e-02, 6.25000000e-02, 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             7.63888881e-02, 0., 9.72222239e-02, 1.31944448e-01, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888896e-01,
             0., 7.63888881e-02, 3.47222239e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 2.77777780e-02, 1.38888890e-02, 0.,
             4.86111119e-02, 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 1.38888890e-02, 0.,
             3.47222239e-02, 4.86111119e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 1.25000000e-01, 6.25000000e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 2.08333340e-02, 0., 2.08333340e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 2.77777780e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 2.08333340e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1.38888890e-02, 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.08333340e-02, 1.80555552e-01, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             2.08333340e-02, 4.16666679e-02, 5.55555560e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.08333340e-02, 6.94444450e-03,
             3.47222239e-02, 2.08333340e-02, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 2.77777780e-02, 0., 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 2.08333340e-02, 0., 2.15277776e-01,
             4.16666679e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             0., 0., 3.47222239e-02, 0., 5.55555560e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             4.16666679e-02, 5.55555560e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 1.38888890e-02, 4.86111119e-02,
             7.63888881e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 1.38888890e-02, 4.16666679e-02,
             5.55555560e-02, 2.08333340e-02, 0., 0., 1.38888890e-02, 0.,
             0., 0., 6.25000000e-02, 0., 0., 0., 0., 1.38888890e-02, 0.,
             6.94444450e-03, 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0.,
             2.77777780e-02, 4.86111119e-02, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 6.94444450e-03, 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 2.77777780e-02, 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 1.38888890e-02, 3.47222239e-02,
             1.73611119e-01, 0., 2.77777780e-02, 0., 6.94444450e-03,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.25000000e-02, 5.55555560e-02, 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             6.94444478e-02, 6.94444450e-03, 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 1.38888890e-02,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 9.02777761e-02, 0.,
             5.55555560e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888896e-01, 6.94444450e-03, 9.72222239e-02,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 2.08333340e-02, 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 4.86111119e-02, 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 6.94444450e-03, 3.47222239e-02, 0.,
             3.47222239e-02, 0., 0., 0., 1.38888890e-02, 1.38888890e-02,
             6.94444450e-03, 0., 0., 0., 0., 0., 6.25000000e-02,
             2.08333340e-02, 0., 0., 6.94444450e-03, 1.38888890e-02, 0.,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 6.94444450e-03, 0.,
             6.94444450e-03, 4.16666679e-02, 0., 1.38888890e-02, 0., 0.,
             1.38888890e-02, 0., 2.77777780e-02, 0., 1.38888890e-02, 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 5.55555560e-02, 0., 6.94444478e-02, 0., 0.,
             0., 1.31944448e-01, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 2.77777780e-02, 0., 1.38888890e-02, 0., 0.,
             0., 2.08333340e-02, 0., 6.94444450e-03, 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 1.04166664e-01,
             6.94444450e-03, 1.38888890e-02, 0., 6.94444450e-03, 0., 0.,
             0., 7.63888881e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.04166664e-01, 0., 0., 0., 0., 0., 0., 0., 4.16666679e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 3.47222239e-02, 0., 2.08333340e-02, 0., 0.,
             0., 5.55555560e-02, 0., 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1.38888890e-02, 0., 1.38888890e-02, 6.94444450e-03,
             1.38888890e-02, 0., 4.16666679e-02, 0., 0., 0.,
             2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             2.08333340e-02, 2.77777780e-02, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 2.77777780e-02, 4.86111119e-02,
             2.08333340e-02, 0., 1.38888890e-02, 4.16666679e-02, 0., 0.,
             4.16666679e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 4.16666679e-02, 1.80555552e-01, 0., 0., 0., 0., 0., 0.,
             4.16666679e-02, 1.66666672e-01, 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 5.55555560e-02,
             9.72222239e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 6.94444450e-03, 6.94444450e-03, 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 1.04166664e-01, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.04166664e-01, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 2.77777780e-02, 0., 0., 0., 0.,
             0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             2.08333340e-02, 6.94444450e-03, 6.94444450e-03, 0.,
             2.08333340e-02, 0., 0., 0., 9.72222239e-02, 0., 0., 0., 0.,
             0., 0., 2.77777780e-02, 1.25000000e-01, 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 2.77777780e-02, 0.,
             1.80555552e-01, 1.11111112e-01, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 6.25000000e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             3.47222239e-02, 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 6.94444450e-03,
             2.08333340e-02, 1.38888890e-02, 1.38888890e-02, 0.,
             1.38888890e-02, 2.77777780e-02, 6.94444450e-03,
             1.38888890e-02, 9.72222239e-02, 0., 0., 0., 0.,
             6.94444450e-03, 0., 2.08333340e-02, 1.25000000e-01,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 1.38888890e-02,
             6.94444450e-03, 2.08333340e-02, 7.63888881e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             1.38888890e-02, 0., 6.94444450e-03, 1.38888890e-02, 0.,
             2.08333340e-02, 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             4.16666679e-02, 0., 0., 0., 0., 0., 0., 0., 2.77777780e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 6.94444450e-03, 0., 0., 0., 1.38888890e-02, 0.,
             1.38888890e-02, 0., 6.94444450e-03, 0., 0., 0.,
             4.86111119e-02, 0., 0., 0., 0., 0., 0., 0., 3.47222239e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 6.94444450e-03, 2.08333340e-02, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             1.38888890e-02, 0., 0., 2.08333340e-02, 6.94444450e-03, 0.,
             4.86111119e-02, 2.08333340e-02, 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 0.,
             3.47222239e-02, 6.94444450e-03, 6.94444450e-03, 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             6.94444450e-03, 2.08333340e-02, 0., 2.08333328e-01,
             6.94444478e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 2.08333340e-02, 0.,
             2.77777780e-02, 2.08333340e-02, 1.38888890e-02, 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 2.77777780e-02, 1.11111112e-01,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.25000000e-02, 1.38888896e-01, 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 1.38888890e-02, 0., 0.,
             1.38888890e-02, 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             2.77777780e-02, 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 9.02777761e-02, 0.,
             1.31944448e-01, 6.94444478e-02, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             3.47222239e-02, 0., 0., 0., 6.94444478e-02, 0.,
             6.25000000e-02, 6.94444450e-03, 6.94444450e-03, 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 8.33333358e-02,
             0., 0., 6.94444450e-03, 9.02777761e-02, 0., 6.94444450e-03,
             0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 4.86111119e-02,
             0., 0., 0., 0., 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 6.94444450e-03, 2.08333340e-02, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 4.16666679e-02, 1.38888890e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 2.77777780e-02, 2.08333340e-02, 0., 0., 0.,
             0., 0., 2.77777780e-02, 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 0., 0., 2.77777780e-02, 0.,
             6.94444450e-03, 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 6.25000000e-02, 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 4.86111119e-02, 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 6.94444450e-03,
             6.94444450e-03, 0., 2.77777780e-02, 0., 6.94444450e-03, 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 6.94444450e-03, 3.47222239e-02, 0.,
             2.08333340e-02, 6.94444450e-03, 0., 0., 1.38888890e-02, 0.,
             0., 0., 0., 0., 6.94444450e-03, 0., 1.38888890e-02, 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             1.38888890e-02, 6.94444450e-03, 6.25000000e-02, 0.,
             4.16666679e-02, 0., 0., 0., 2.08333340e-02, 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 5.55555560e-02, 4.16666679e-02,
             0., 2.08333340e-02, 0., 0., 0., 2.08333340e-02,
             4.16666679e-02, 6.94444450e-03, 0., 0., 6.94444450e-03,
             6.94444450e-03, 6.94444450e-03, 5.55555560e-02,
             1.38888890e-02, 1.38888890e-02, 0., 6.94444450e-03,
             1.38888890e-02, 6.94444450e-03, 6.94444450e-03,
             3.47222239e-02, 0., 0., 0., 0., 6.94444450e-03, 0., 0.,
             6.94444450e-03, 1.38888890e-02, 0., 0., 0., 2.08333340e-02,
             0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 1.38888890e-02, 0., 0., 6.94444450e-03,
             3.47222239e-02, 6.94444450e-03, 0., 0., 6.94444450e-03, 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 4.16666679e-02, 0., 0., 0., 0., 0., 0.,
             6.94444450e-03, 0., 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             2.77777780e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0.,
             7.63888881e-02, 0., 0., 0., 6.94444450e-03, 0., 0., 0., 0.,
             6.94444450e-03, 0., 1.38888890e-02, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 1.38888890e-02,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03, 0.,
             6.94444450e-03, 0., 0., 0., 0., 0., 1.38888890e-02, 0.,
             3.47222239e-02, 0., 4.16666679e-02, 0., 0., 0.,
             5.55555560e-02, 0., 0., 0., 0., 0., 0., 0., 6.94444450e-03,
             0., 1.38888890e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 6.94444450e-03, 1.38888890e-02, 2.08333340e-02,
             0., 2.08333340e-02, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 1.38888890e-02, 0., 2.08333340e-02, 0., 1.38888890e-02,
             0., 0., 0., 1.38888890e-02, 2.08333340e-02, 6.94444450e-03,
             6.94444450e-03, 3.47222239e-02, 2.08333340e-02,
             1.38888890e-02, 0., 8.33333358e-02 ]
   labels: !!opencv-matrix
      rows: 4
      cols: 1
      dt: i
      data: [ 1, 2, 3, 4 ]
   labelsInfo:
      []


--------------------------------------------------------------------------------

📄 data\known_faces\person_1\face_1.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 data\known_faces\person_2\face_1.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 data\known_faces\person_3\face_1.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 data\known_faces\person_4\face_1.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 docs\TECHNICAL_DOCS.md
--------------------------------------------------------------------------------
# Documentación Técnica del Sistema de Vigilancia Inteligente

## 1. Arquitectura del Sistema

El Sistema de Vigilancia Inteligente está construido con una arquitectura modular basada en microservicios que permite la extensibilidad y el mantenimiento eficiente. La arquitectura sigue un patrón de diseño orientado a eventos donde los diferentes componentes se comunican a través de un bus de mensajes centralizado.

### 1.1 Diagrama de Componentes 

--------------------------------------------------------------------------------

📄 docs\TESTING_GUIDE.md
--------------------------------------------------------------------------------
# Guía de Pruebas de Integración - Sistema de Vigilancia Inteligente

Esta guía describe los procedimientos para verificar el correcto funcionamiento del sistema después de la implementación. Siga estos pasos para asegurar que todos los componentes están operando correctamente.

## 1. Pruebas de Inicialización del Sistema

| ID | Prueba | Pasos | Resultado Esperado |
|----|--------|-------|-------------------|
| INI-01 | Arranque del sistema | 1. Iniciar app.py<br>2. Verificar logs | El sistema arranca sin errores y muestra "Iniciando aplicación" |
| INI-02 | Carga de configuración | 1. Verificar archivo system_config.json<br>2. Observar logs de inicio | Configuración cargada correctamente |
| INI-03 | Conexión a cámaras | 1. Verificar panel de cámaras<br>2. Comprobar estado "Online" | Las cámaras configuradas aparecen conectadas |

## 2. Pruebas de Modos de Operación

| ID | Prueba | Pasos | Resultado Esperado |
|----|--------|-------|-------------------|
| MOD-01 | Cambio de modo | 1. Ir a página de modos<br>2. Seleccionar modo "Industrial"<br>3. Confirmar cambio | Notificación de éxito, modo cambiado en configuración |
| MOD-02 | Activación de agentes | 1. Cambiar a modo "Commercial"<br>2. Verificar logs | Log muestra activación de agentes retail y desactivación de otros |
| MOD-03 | Persistencia de modo | 1. Cambiar modo<br>2. Reiniciar servidor<br>3. Verificar modo actual | El sistema mantiene el último modo seleccionado |

## 3. Pruebas de Detección

| ID | Prueba | Pasos | Resultado Esperado |
|----|--------|-------|-------------------|
| DET-01 | Detección de personas | 1. Configurar cámara con vista de personas<br>2. Observar panel de detección | Las personas aparecen con bounding boxes |
| DET-02 | Historial de detecciones | 1. Esperar varios minutos de detecciones<br>2. Verificar gráfica de actividad | La gráfica muestra datos de detección por tiempo |
| DET-03 | Ajuste de umbral | 1. Cambiar umbral de detección en configuración<br>2. Verificar detecciones | Las detecciones se ajustan al nuevo umbral |

## 4. Pruebas del Modo Industrial

| ID | Prueba | Pasos | Resultado Esperado |
|----|--------|-------|-------------------|
| IND-01 | Activación del modo | 1. Seleccionar modo "Industrial"<br>2. Verificar vista industrial | La página muestra las opciones específicas industriales |
| IND-02 | Detección de EPP | 1. Simular/mostrar persona sin casco<br>2. Observar alertas | Se genera alerta de falta de EPP |
| IND-03 | Zonas de peligro | 1. Configurar zona de peligro<br>2. Simular persona en zona<br>3. Verificar alertas | Se genera alerta de persona en zona restringida |

## 5. Pruebas del Modo Comercial

| ID | Prueba | Pasos | Resultado Esperado |
|----|--------|-------|-------------------|
| COM-01 | Activación del modo | 1. Seleccionar modo "Commercial"<br>2. Verificar vista comercial | La página muestra las opciones específicas comerciales |
| COM-02 | Detección de comportamientos | 1. Simular comportamiento sospechoso<br>2. Verificar alertas | Se detecta y reporta comportamiento anómalo |
| COM-03 | Mapa de calor | 1. Navegar a vista de mapas de calor<br>2. Observar actividad acumulada | Se muestra mapa de calor de actividad en tienda |

## 6. Pruebas del Sistema de Alertas

| ID | Prueba | Pasos | Resultado Esperado |
|----|--------|-------|-------------------|
| ALE-01 | Generación de alertas | 1. Provocar condición de alerta<br>2. Verificar panel de alertas | La alerta aparece en el panel con detalles |
| ALE-02 | Priorización | 1. Generar alertas de diferentes severidades<br>2. Verificar orden en panel | Las alertas críticas aparecen primero |
| ALE-03 | Notificaciones | 1. Configurar notificaciones<br>2. Generar alerta crítica<br>3. Verificar canales | La notificación se envía por los canales configurados |

## 7. Pruebas de Rendimiento

| ID | Prueba | Pasos | Resultado Esperado |
|----|--------|-------|-------------------|
| REN-01 | Múltiples cámaras | 1. Conectar al menos 4 cámaras<br>2. Monitorear uso de CPU/RAM | El sistema procesa todas las cámaras fluidamente |
| REN-02 | Carga de agentes | 1. Activar todos los agentes disponibles<br>2. Monitorear rendimiento | El sistema mantiene respuesta fluida |
| REN-03 | Prueba de estrés | 1. Simular alta actividad en todas las cámaras<br>2. Monitorear sistema | No hay pérdida significativa de frames ni alertas |

## 8. Resolución de Problemas Comunes

| Problema | Posible Causa | Solución |
|----------|---------------|----------|
| Cámara offline | Problemas de conectividad | 1. Verificar URL de cámara<br>2. Comprobar conexión de red<br>3. Reiniciar la cámara |
| Alertas no generadas | Umbral muy alto | 1. Revisar configuración de umbrales<br>2. Verificar activación de agentes<br>3. Comprobar logs |
| Alto uso de CPU | Demasiadas cámaras o resolución alta | 1. Reducir FPS<br>2. Reducir resolución<br>3. Distribuir carga |
| Falsos positivos | Configuración de sensibilidad | 1. Ajustar umbrales de detección<br>2. Definir zonas de interés (ROI)<br>3. Reentrenar modelos |

## 9. Procedimiento de Actualización

1. **Respaldo**: Crear copia de seguridad de la configuración
   ```bash
   cp -r config/ config_backup/
   ```

2. **Actualización de código**:
   ```bash
   git pull origin main
   ```

3. **Actualización de dependencias**:
   ```bash
   pip install -r requirements.txt
   ```

4. **Verificación**:
   ```bash
   python -m pytest tests/
   ```

5. **Reinicio del sistema**:
   ```bash
   systemctl restart vigilai.service
   ``` 

--------------------------------------------------------------------------------

📄 docs\USER_GUIDE.md
--------------------------------------------------------------------------------
# Guía de Usuario - Sistema de Vigilancia Inteligente

Esta guía proporciona la información necesaria para utilizar el Sistema de Vigilancia Inteligente de manera efectiva.

## 1. Inicio de Sesión

1. Acceda a la dirección del sistema en su navegador (normalmente http://[dirección-servidor]:5000)
2. Introduzca su nombre de usuario y contraseña
3. Pulse el botón "Iniciar Sesión"

## 2. Panel de Control (Dashboard)

El Dashboard es la pantalla principal del sistema y proporciona una visión general de:

- **Estado de las cámaras**: Muestra qué cámaras están activas y su estado
- **Alertas recientes**: Visualización de las últimas alertas generadas
- **Estadísticas**: Resumen de actividad detectada
- **Modo actual**: Indica el modo de operación activo

### 2.1 Navegación

Utilice el menú lateral para navegar entre las diferentes secciones:

- **Dashboard**: Vista general del sistema
- **Cámaras**: Gestión y visualización de cámaras
- **Alertas**: Histórico y gestión de alertas
- **Modo Industrial**: Vista especializada para entornos industriales
- **Modo Comercial**: Vista especializada para entornos comerciales
- **Modos**: Cambio entre modos de operación
- **Configuración**: Ajustes generales del sistema

## 3. Gestión de Cámaras

### 3.1 Visualización

1. Acceda a la sección "Cámaras" desde el menú lateral
2. Verá una cuadrícula con la transmisión en vivo de todas las cámaras
3. Haga clic en una cámara para ver los detalles y opciones específicas

### 3.2 Agregar una Cámara

1. En la vista de Cámaras, pulse el botón "Agregar Cámara"
2. Complete el formulario con:
   - Nombre descriptivo
   - URL del stream (RTSP, HTTP, etc.)
   - Tipo de cámara
   - Ubicación (opcional)
   - Tags para categorizar
3. Pulse "Guardar" para añadir la cámara al sistema

### 3.3 Configurar una Cámara

1. Seleccione la cámara que desea configurar
2. Pulse el botón "Configuración"
3. Ajuste los parámetros según necesite:
   - Resolución
   - FPS (cuadros por segundo)
   - Zonas de interés (ROI)
   - Sensibilidad de detección

## 4. Modos de Operación

El sistema puede funcionar en diferentes modos según sus necesidades:

### 4.1 Cambiar Modo

1. Acceda a la sección "Modos" desde el menú lateral
2. Seleccione el modo deseado:
   - **Normal**: Vigilancia general estándar
   - **Industrial**: Optimizado para seguridad en entornos industriales
   - **Comercial**: Enfocado en prevención de hurtos en comercios
   - **Residencial**: Para vigilancia de hogares y comunidades
   - **Aeropuerto**: Alta seguridad para infraestructuras críticas
3. Pulse "Activar Modo" para confirmar el cambio

### 4.2 Modo Industrial

El modo industrial está especializado en:

- Detección de Equipos de Protección Personal (EPP)
- Monitoreo de zonas de peligro
- Alertas de seguridad industrial

#### Configuración de EPP
1. En la vista de Modo Industrial, pulse "Configurar EPP"
2. Seleccione qué elementos de protección desea detectar (cascos, chalecos, etc.)
3. Ajuste el umbral de detección según necesite

#### Zonas de Peligro
1. En la vista de Modo Industrial, pulse "Zonas de Peligro"
2. Seleccione la cámara donde desea configurar zonas
3. Dibuje las zonas de peligro en la imagen
4. Configure el nivel de alerta para cada zona

### 4.3 Modo Comercial

El modo comercial está especializado en:

- Detección de comportamientos sospechosos
- Prevención de hurtos
- Mapas de calor de actividad

#### Análisis de Comportamiento
1. En la vista de Modo Comercial, revise el panel "Comportamientos Detectados"
2. Las personas detectadas se mostrarán con código de colores según su comportamiento
3. Las estadísticas mostrarán la distribución de comportamientos normales vs. sospechosos

#### Mapas de Calor
1. En la sección de análisis, seleccione "Mapas de Calor"
2. Elija el período de tiempo para analizar
3. Visualice las zonas de mayor actividad en cada cámara

## 5. Gestión de Alertas

### 5.1 Visualización de Alertas

1. Acceda a la sección "Alertas" desde el menú lateral
2. Las alertas aparecen ordenadas por fecha y severidad
3. Utilice los filtros para buscar alertas específicas:
   - Por tipo
   - Por cámara
   - Por fecha
   - Por severidad

### 5.2 Gestión de Alertas

Para cada alerta puede:

1. **Ver detalles**: Haga clic en la alerta para ver más información
2. **Marcar como revisada**: Pulse el botón "Marcar como revisada"
3. **Asignar**: Asigne la alerta a un operador específico
4. **Generar informe**: Exporte la alerta y sus detalles en formato PDF

### 5.3 Configuración de Notificaciones

1. En Configuración, seleccione "Notificaciones"
2. Configure los canales por los que desea recibir alertas:
   - Email
   - SMS
   - WhatsApp
   - Notificaciones push
3. Establezca qué tipos de alertas generan notificaciones según su severidad

## 6. Configuración del Sistema

### 6.1 Ajustes Generales

En la sección de Configuración puede modificar:

- Nombre del sistema
- Zona horaria
- Idioma
- Retención de datos (cuánto tiempo guardar alertas, vídeos, etc.)

### 6.2 Gestión de Usuarios

1. En Configuración, seleccione "Usuarios"
2. Puede:
   - Agregar nuevos usuarios
   - Modificar usuarios existentes
   - Asignar roles (Administrador, Operador, Visualizador)
   - Restablecer contraseñas

### 6.3 Copias de Seguridad

1. En Configuración, seleccione "Copias de Seguridad"
2. Puede:
   - Crear una nueva copia de seguridad
   - Restaurar desde una copia anterior
   - Programar copias automáticas

## 7. Resolución de Problemas

### 7.1 Cámara Offline

Si una cámara aparece como "Offline":

1. Verifique la conexión física de la cámara
2. Compruebe que la URL configurada es correcta
3. Intente acceder directamente a la URL del stream
4. Pulse "Reconectar" en el panel de la cámara

### 7.2 Falsos Positivos/Negativos

Si observa demasiados falsos positivos o falsos negativos:

1. Ajuste los umbrales de detección para esa cámara
2. Configure zonas de interés (ROI) para limitar el área de análisis
3. Verifique las condiciones de iluminación

### 7.3 Alto Uso de Recursos

Si el sistema muestra alto consumo de recursos:

1. Reduzca la resolución de las cámaras
2. Disminuya los FPS
3. Considere agregar hardware adicional para procesar la carga

## 8. Contacto y Soporte

Para asistencia técnica:

- Email: soporte@vigilai.com
- Teléfono: +1 (555) 123-4567
- Portal de Soporte: https://soporte.vigilai.com 

--------------------------------------------------------------------------------

📄 instance\app.db (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 logs\surveillance.log (ERROR AL LEER: 'utf-8' codec can't decode byte 0xf3 in position 783: invalid continuation byte)

📄 models\weapon_detection.pt (ERROR AL LEER: 'utf-8' codec can't decode byte 0xf3 in position 36: invalid continuation byte)

📄 src\agent_factory.py
--------------------------------------------------------------------------------
import uuid
import logging
import importlib
import json
import os
from src.mcp_framework import MCPAgent

logger = logging.getLogger("agent_factory")

class AgentFactory:
    """Fábrica para crear nuevos agentes."""
    
    def __init__(self, templates_dir='agent_templates', agents_dir='agents'):
        """
        Inicializa la fábrica de agentes.
        
        Args:
            templates_dir: Directorio con plantillas de agentes
            agents_dir: Directorio para guardar configuraciones de agentes
        """
        self.templates_dir = templates_dir
        self.agents_dir = agents_dir
        self.templates = {}
        self.agent_configs = {}
        
        # Crear directorios si no existen
        for directory in [templates_dir, agents_dir]:
            if not os.path.exists(directory):
                os.makedirs(directory)
        
        # Cargar plantillas y configuraciones
        self._load_templates()
        self._load_agent_configs()
    
    def _load_templates(self):
        """Carga las plantillas de agentes disponibles."""
        template_files = [f for f in os.listdir(self.templates_dir) 
                         if f.endswith('.json')]
        
        for filename in template_files:
            try:
                with open(os.path.join(self.templates_dir, filename), 'r') as f:
                    template = json.load(f)
                    template_id = template.get('id', os.path.splitext(filename)[0])
                    self.templates[template_id] = template
                    logger.info(f"Plantilla de agente cargada: {template_id}")
            except Exception as e:
                logger.error(f"Error al cargar plantilla {filename}: {str(e)}")
    
    def _load_agent_configs(self):
        """Carga las configuraciones de agentes guardadas."""
        config_files = [f for f in os.listdir(self.agents_dir) 
                       if f.endswith('.json')]
        
        for filename in config_files:
            try:
                with open(os.path.join(self.agents_dir, filename), 'r') as f:
                    config = json.load(f)
                    agent_id = config.get('id', os.path.splitext(filename)[0])
                    self.agent_configs[agent_id] = config
                    logger.info(f"Configuración de agente cargada: {agent_id}")
            except Exception as e:
                logger.error(f"Error al cargar configuración {filename}: {str(e)}")
    
    def get_templates(self):
        """
        Obtiene todas las plantillas disponibles.
        
        Returns:
            dict: Plantillas de agentes
        """
        return self.templates
    
    def get_agent_configs(self):
        """
        Obtiene todas las configuraciones de agentes.
        
        Returns:
            dict: Configuraciones de agentes
        """
        return self.agent_configs
    
    def create_agent_config(self, name, template_id, parameters=None):
        """
        Crea una nueva configuración de agente basada en una plantilla.
        
        Args:
            name: Nombre del agente
            template_id: ID de la plantilla a utilizar
            parameters: Parámetros específicos para este agente
            
        Returns:
            str: ID del agente creado
        """
        if template_id not in self.templates:
            raise ValueError(f"Plantilla {template_id} no encontrada")
        
        template = self.templates[template_id]
        
        # Generar ID único para el agente
        agent_id = str(uuid.uuid4())
        
        # Crear configuración base
        config = {
            "id": agent_id,
            "name": name,
            "template_id": template_id,
            "type": template.get("type"),
            "parameters": parameters or {},
            "enabled": True
        }
        
        # Aplicar valores predeterminados de la plantilla
        if "default_parameters" in template:
            for key, value in template["default_parameters"].items():
                if key not in config["parameters"]:
                    config["parameters"][key] = value
        
        # Guardar configuración
        config_path = os.path.join(self.agents_dir, f"{agent_id}.json")
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=2)
        
        # Registrar configuración
        self.agent_configs[agent_id] = config
        
        return agent_id
    
    def instantiate_agent(self, agent_id):
        """
        Crea una instancia de un agente a partir de su configuración.
        
        Args:
            agent_id: ID del agente a instanciar
            
        Returns:
            MCPAgent: Instancia del agente
        """
        if agent_id not in self.agent_configs:
            raise ValueError(f"Configuración de agente {agent_id} no encontrada")
        
        config = self.agent_configs[agent_id]
        template_id = config["template_id"]
        
        if template_id not in self.templates:
            raise ValueError(f"Plantilla {template_id} no encontrada")
        
        template = self.templates[template_id]
        
        # Obtener clase del agente
        agent_class_path = template.get("agent_class")
        if not agent_class_path:
            raise ValueError(f"Plantilla {template_id} no tiene clase de agente definida")
        
        try:
            # Importar dinámicamente la clase del agente
            module_path, class_name = agent_class_path.rsplit('.', 1)
            module = importlib.import_module(module_path)
            agent_class = getattr(module, class_name)
            
            # Crear instancia del agente con los parámetros configurados
            agent = agent_class(
                agent_id=config["id"],
                name=config["name"],
                **config["parameters"]
            )
            
            return agent
            
        except Exception as e:
            logger.error(f"Error al instanciar agente {agent_id}: {str(e)}")
            raise e 

--------------------------------------------------------------------------------

📄 src\agent_manager.py
--------------------------------------------------------------------------------
import uuid
from datetime import datetime

class AgentManager:
    def __init__(self, orchestrator=None):
        self.agents = {}
        self.factory = AgentFactory()
        self.orchestrator = orchestrator
        
    def create_agent(self, agent_type, config=None):
        """Crea un nuevo agente utilizando la fábrica."""
        agent_id = str(uuid.uuid4())
        agent = self.factory.create_agent(agent_type, agent_id, config)
        
        if agent:
            if self.orchestrator:
                self.orchestrator.register_agent(agent)
            
            self.agents[agent_id] = {
                'id': agent_id,
                'type': agent_type,
                'status': 'inactive',
                'instance': agent,
                'created_at': datetime.now().isoformat(),
                'config': config
            }
            return agent_id
        return None
        
    def get_agents_by_type(self, agent_type):
        """Obtiene todos los agentes de un tipo específico."""
        return [agent for agent_id, agent in self.agents.items() 
                if agent['type'] == agent_type]
                
    def activate_agents_for_mode(self, mode):
        """Activa los agentes necesarios para un modo específico."""
        from src.modes_config import OPERATION_MODES
        
        # Desactivar todos los agentes primero
        for agent_id, agent in self.agents.items():
            self.deactivate_agent(agent_id)
        
        # Activar solo los agentes requeridos por el modo
        if mode in OPERATION_MODES:
            required_agents = OPERATION_MODES[mode]['agents']
            
            for agent_type in required_agents:
                matching_agents = self.get_agents_by_type(agent_type)
                
                if not matching_agents:
                    # Crear el agente si no existe ninguno de ese tipo
                    agent_id = self.create_agent(agent_type)
                    if agent_id:
                        self.activate_agent(agent_id)
                else:
                    # Activar el primer agente encontrado de ese tipo
                    self.activate_agent(matching_agents[0]['id'])

    def register_agent(self, agent_id, agent_type):
        self.agents[agent_id] = {
            'type': agent_type,
            'status': 'inactive'
        }
        
    def activate_agent(self, agent_id):
        if agent_id in self.agents:
            self.agents[agent_id]['status'] = 'active'

    def get_agents(self):
        """
        Obtiene la lista de todos los agentes disponibles.
        
        Returns:
            list: Lista de diccionarios con información de los agentes
        """
        agents = []
        for agent_id, agent in self.agents.items():
            agents.append({
                'id': agent_id,
                'name': agent.get('name', f'Agente {agent_id[:8]}'),
                'type': agent.get('type', 'general'),
                'status': agent.get('status', 'inactive'),
                'created_at': agent.get('created_at', None),
                'last_active': agent.get('last_active', None),
                'enabled': agent.get('enabled', True),
                'description': agent.get('description', 'Sin descripción')
            })
        return agents


--------------------------------------------------------------------------------

📄 src\agent_templates.py
--------------------------------------------------------------------------------
import json
import os
import logging
import uuid
import importlib
import inspect
from src.mcp_framework import MCPAgent

logger = logging.getLogger("agent_templates")

class AgentParameter:
    """Define un parámetro configurable para un agente."""
    
    def __init__(self, name, type, description, default=None, options=None, required=False):
        self.name = name
        self.type = type  # 'string', 'number', 'boolean', 'select', etc.
        self.description = description
        self.default = default
        self.options = options  # Para parámetros tipo 'select'
        self.required = required
    
    def to_dict(self):
        return {
            'name': self.name,
            'type': self.type,
            'description': self.description,
            'default': self.default,
            'options': self.options,
            'required': self.required
        }
    
    def validate(self, value):
        """Valida que el valor sea del tipo correcto."""
        if self.required and value is None:
            return False
            
        if value is None:
            return True
            
        if self.type == 'string':
            return isinstance(value, str)
        elif self.type == 'number':
            return isinstance(value, (int, float))
        elif self.type == 'boolean':
            return isinstance(value, bool)
        elif self.type == 'select':
            return value in self.options
        
        return True

class AgentTemplate:
    """Plantilla para crear agentes personalizados."""
    
    def __init__(self, template_id, name, description, parameters, agent_class):
        self.template_id = template_id
        self.name = name
        self.description = description
        self.parameters = parameters  # Lista de AgentParameter
        self.agent_class = agent_class  # Clase MCPAgent o subclase
        
    def to_dict(self):
        return {
            'id': self.template_id,
            'name': self.name,
            'description': self.description,
            'parameters': [p.to_dict() for p in self.parameters]
        }
        
    def create_agent(self, agent_id, parameter_values=None):
        """
        Crea una instancia de agente basada en esta plantilla.
        
        Args:
            agent_id: ID único para el nuevo agente
            parameter_values: Diccionario con valores para los parámetros
            
        Returns:
            MCPAgent: Instancia del agente creado
        """
        parameter_values = parameter_values or {}
        
        # Validar parámetros
        for param in self.parameters:
            if param.required and param.name not in parameter_values:
                raise ValueError(f"Parámetro requerido '{param.name}' no especificado")
            
            if param.name in parameter_values:
                if not param.validate(parameter_values[param.name]):
                    raise ValueError(f"Valor inválido para parámetro '{param.name}'")
        
        # Usar valores predeterminados para parámetros no especificados
        for param in self.parameters:
            if param.name not in parameter_values and param.default is not None:
                parameter_values[param.name] = param.default
        
        # Crear instancia
        try:
            agent_instance = self.agent_class(agent_id=agent_id, **parameter_values)
            return agent_instance
        except Exception as e:
            logger.error(f"Error al crear agente: {str(e)}")
            raise

class AgentTemplateManager:
    """Gestor de plantillas de agentes."""
    
    def __init__(self, templates_dir="agent_templates"):
        self.templates_dir = templates_dir
        self.templates = {}
        
        # Crear directorio si no existe
        os.makedirs(templates_dir, exist_ok=True)
        
        # Cargar plantillas
        self._load_templates()
    
    def _load_templates(self):
        """Carga las plantillas predefinidas."""
        # Cargar plantillas básicas
        from src.ai_agents import DetectionAgent, AlertAgent
        
        # Plantilla para agente de detección
        detection_params = [
            AgentParameter('name', 'string', 'Nombre del agente', 'Detector', required=True),
            AgentParameter('confidence_threshold', 'number', 'Umbral de confianza (0-1)', 0.5),
            AgentParameter('classes_of_interest', 'string', 'Clases a detectar (separadas por coma)', 'person,car')
        ]
        
        self.templates['detection'] = AgentTemplate(
            template_id='detection',
            name='Agente de Detección',
            description='Detecta objetos en imágenes usando modelos de IA',
            parameters=detection_params,
            agent_class=DetectionAgent
        )
        
        # Plantilla para agente de alertas
        alert_params = [
            AgentParameter('name', 'string', 'Nombre del agente', 'Alertas', required=True),
            AgentParameter('severity_threshold', 'select', 'Nivel mínimo de severidad', 
                          'warning', options=['info', 'warning', 'error', 'critical']),
            AgentParameter('cooldown', 'number', 'Tiempo entre alertas (segundos)', 60)
        ]
        
        self.templates['alert'] = AgentTemplate(
            template_id='alert',
            name='Agente de Alertas',
            description='Genera alertas basadas en detecciones y reglas',
            parameters=alert_params,
            agent_class=AlertAgent
        )
    
    def get_templates(self):
        """Obtiene todas las plantillas disponibles."""
        return {tid: template.to_dict() for tid, template in self.templates.items()}
    
    def get_template(self, template_id):
        """Obtiene una plantilla específica."""
        if template_id not in self.templates:
            raise ValueError(f"Plantilla '{template_id}' no encontrada")
        return self.templates[template_id]
    
    def create_agent(self, template_id, agent_id, parameter_values=None):
        """Crea un agente basado en una plantilla."""
        template = self.get_template(template_id)
        return template.create_agent(agent_id, parameter_values) 

--------------------------------------------------------------------------------

📄 src\ai_agents.py
--------------------------------------------------------------------------------
import time
import threading
import logging
import uuid
from src.mcp_framework import MCPAgent, MCPMessage

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ai_agents")

class DetectionAgent(MCPAgent):
    """Agente para procesar detecciones de objetos."""
    
    def __init__(self, object_detector, roi_manager=None):
        """
        Inicializa el agente de detección.
        
        Args:
            object_detector: Instancia del detector de objetos
            roi_manager: Gestor de zonas de interés (opcional)
        """
        agent_id = f"detection_agent_{str(uuid.uuid4())[:8]}"
        super().__init__(agent_id, "Agente de Detección", 
                         interested_types=["frame", "command"])
        
        self.object_detector = object_detector
        self.roi_manager = roi_manager
        self.enabled = True
        self.confidence_threshold = 0.6
        self.classes_of_interest = ["persona", "coche", "moto"]
    
    def on_message(self, message):
        """Procesa mensajes recibidos."""
        if not self.enabled:
            return
            
        if message.type == "frame":
            self._process_frame(message.data)
        elif message.type == "command":
            self._process_command(message.data)
    
    def _process_frame(self, data):
        """
        Procesa un frame de video.
        
        Args:
            data: Diccionario con frame y metadatos
        """
        frame = data.get("frame")
        camera_id = data.get("camera_id")
        
        if frame is None:
            return
            
        # Detectar objetos
        try:
            results = self.object_detector.detect(frame, camera_id)
            
            # Filtrar por confianza y clases de interés
            filtered_detections = []
            for detection in results.get("detections", []):
                if (detection.get("confidence", 0) >= self.confidence_threshold and
                    detection.get("class", "") in self.classes_of_interest):
                    filtered_detections.append(detection)
            
            # Enviar resultados filtrados
            if filtered_detections:
                self.broadcast_message("detection", {
                    "camera_id": camera_id,
                    "timestamp": time.time(),
                    "detections": filtered_detections
                })
        except Exception as e:
            logger.error(f"Error en detección: {str(e)}")
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente de detección {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente de detección {self.agent_id} deshabilitado")
        elif command == "set_threshold":
            self.confidence_threshold = data.get("value", self.confidence_threshold)
            logger.info(f"Umbral de confianza actualizado a {self.confidence_threshold}")
        elif command == "set_classes":
            self.classes_of_interest = data.get("classes", self.classes_of_interest)
            logger.info(f"Clases de interés actualizadas: {self.classes_of_interest}")

class AlertAgent(MCPAgent):
    """Agente para generar alertas basadas en detecciones."""
    
    def __init__(self, alert_manager):
        """
        Inicializa el agente de alertas.
        
        Args:
            alert_manager: Gestor de alertas
        """
        agent_id = f"alert_agent_{str(uuid.uuid4())[:8]}"
        super().__init__(agent_id, "Agente de Alertas", 
                         interested_types=["detection", "command"])
        
        self.alert_manager = alert_manager
        self.enabled = True
        self.cooldown_period = 60  # segundos entre alertas del mismo tipo
        self.last_alerts = {}  # registro de últimas alertas por tipo
        self.rules = []  # reglas para generar alertas
        
        # Cargar reglas predeterminadas
        self._load_default_rules()
    
    def _load_default_rules(self):
        """Carga reglas predeterminadas para alertas."""
        self.rules = [
            {
                "name": "Detección de personas",
                "type": "person_detection",
                "conditions": {
                    "class": "persona",
                    "min_confidence": 0.7
                },
                "actions": ["notify", "log"],
                "severity": "info"
            },
            {
                "name": "Vehículo en zona restringida",
                "type": "vehicle_restricted",
                "conditions": {
                    "class": ["coche", "moto"],
                    "roi_type": "perimeter"
                },
                "actions": ["notify", "log", "email"],
                "severity": "warning"
            },
            {
                "name": "Múltiples personas",
                "type": "multiple_persons",
                "conditions": {
                    "class": "persona",
                    "min_count": 3
                },
                "actions": ["notify", "log", "email"],
                "severity": "alert"
            }
        ]
    
    def on_message(self, message):
        """Procesa mensajes recibidos."""
        if not self.enabled:
            return
            
        if message.type == "detection":
            self._process_detection(message.data)
        elif message.type == "command":
            self._process_command(message.data)
    
    def _process_detection(self, data):
        """
        Procesa una detección y genera alertas si es necesario.
        
        Args:
            data: Datos de la detección
        """
        detections = data.get("detections", [])
        camera_id = data.get("camera_id")
        timestamp = data.get("timestamp", time.time())
        
        # Contador de tipos de objetos
        object_counts = {}
        for detection in detections:
            obj_class = detection.get("class", "unknown")
            if obj_class in object_counts:
                object_counts[obj_class] += 1
            else:
                object_counts[obj_class] = 1
        
        # Evaluar cada regla
        for rule in self.rules:
            try:
                if self._evaluate_rule(rule, detections, object_counts, camera_id, timestamp):
                    self._trigger_alert(rule, data)
            except Exception as e:
                logger.error(f"Error al evaluar regla {rule.get('name')}: {str(e)}")
    
    def _evaluate_rule(self, rule, detections, object_counts, camera_id, timestamp):
        """
        Evalúa si una regla debe disparar una alerta.
        
        Args:
            rule: Regla a evaluar
            detections: Lista de detecciones
            object_counts: Conteo de objetos por clase
            camera_id: ID de la cámara
            timestamp: Timestamp de la detección
            
        Returns:
            bool: True si la regla debe disparar una alerta
        """
        conditions = rule.get("conditions", {})
        
        # Verificar cooldown
        rule_type = rule.get("type")
        if rule_type in self.last_alerts:
            if timestamp - self.last_alerts[rule_type] < self.cooldown_period:
                return False
        
        # Condición de clase específica
        if "class" in conditions:
            classes = conditions["class"]
            if isinstance(classes, str):
                classes = [classes]
                
            # Verificar si hay detecciones de las clases especificadas
            has_required_class = False
            for detection in detections:
                if detection.get("class") in classes:
                    # Verificar confianza mínima si está especificada
                    if "min_confidence" in conditions:
                        if detection.get("confidence", 0) < conditions["min_confidence"]:
                            continue
                    has_required_class = True
                    break
                    
            if not has_required_class:
                return False
        
        # Condición de conteo mínimo
        if "min_count" in conditions:
            min_count = conditions["min_count"]
            class_to_count = conditions.get("class", None)
            
            if class_to_count:
                # Contar objetos de una clase específica
                if isinstance(class_to_count, str):
                    count = object_counts.get(class_to_count, 0)
                    if count < min_count:
                        return False
                else:
                    # Contar objetos de varias clases
                    total_count = sum(object_counts.get(cls, 0) for cls in class_to_count)
                    if total_count < min_count:
                        return False
            else:
                # Contar todos los objetos
                total_count = sum(object_counts.values())
                if total_count < min_count:
                    return False
        
        # Condición de tipo de ROI
        if "roi_type" in conditions:
            roi_types = conditions["roi_type"]
            if isinstance(roi_types, str):
                roi_types = [roi_types]
                
            # Verificar si hay detecciones en los tipos de ROI especificados
            has_required_roi = False
            for detection in detections:
                if detection.get("roi_type") in roi_types:
                    has_required_roi = True
                    break
                    
            if not has_required_roi:
                return False
        
        # Si pasó todas las condiciones, disparar alerta
        return True
    
    def _trigger_alert(self, rule, detection_data):
        """
        Dispara una alerta según la regla.
        
        Args:
            rule: Regla que disparó la alerta
            detection_data: Datos de la detección
        """
        rule_type = rule.get("type")
        severity = rule.get("severity", "info")
        actions = rule.get("actions", ["log"])
        
        # Registrar tiempo de esta alerta
        self.last_alerts[rule_type] = time.time()
        
        # Crear datos de la alerta
        alert_data = {
            "type": rule_type,
            "name": rule.get("name", "Alerta"),
            "message": f"Alerta: {rule.get('name')}",
            "severity": severity,
            "timestamp": time.time(),
            "camera_id": detection_data.get("camera_id"),
            "detection_data": detection_data
        }
        
        # Ejecutar acciones
        if "log" in actions:
            logger.info(f"ALERTA: {alert_data['name']} - {alert_data['message']}")
        
        # Enviar alerta a través del gestor de alertas
        if self.alert_manager:
            self.alert_manager.add_alert(alert_data)
        
        # Notificar a otros agentes
        self.broadcast_message("alert", alert_data)
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente de alertas {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente de alertas {self.agent_id} deshabilitado")
        elif command == "set_cooldown":
            self.cooldown_period = data.get("value", self.cooldown_period)
            logger.info(f"Período de espera actualizado a {self.cooldown_period}")
        elif command == "add_rule":
            new_rule = data.get("rule")
            if new_rule:
                self.rules.append(new_rule)
                logger.info(f"Regla añadida: {new_rule.get('name')}")
        elif command == "remove_rule":
            rule_type = data.get("type")
            if rule_type:
                self.rules = [r for r in self.rules if r.get("type") != rule_type]
                logger.info(f"Regla eliminada: {rule_type}")

class CameraAgent(MCPAgent):
    """Agente para gestionar la captura de video y enviar frames a otros agentes."""
    
    def __init__(self, video_capture_manager):
        """
        Inicializa el agente de cámara.
        
        Args:
            video_capture_manager: Gestor de captura de video
        """
        agent_id = f"camera_agent_{str(uuid.uuid4())[:8]}"
        super().__init__(agent_id, "Agente de Cámara", 
                         interested_types=["command"])
        
        self.video_capture_manager = video_capture_manager
        self.enabled = True
        self.frame_interval = 0.1  # tiempo entre frames en segundos
        self.active_cameras = set()
        self.running = False
        self.thread = None
    
    def start(self):
        """Inicia el agente de cámara."""
        if self.running:
            return
            
        self.running = True
        self.thread = threading.Thread(target=self._frame_loop, daemon=True)
        self.thread.start()
        logger.info(f"Agente de cámara {self.agent_id} iniciado")
    
    def stop(self):
        """Detiene el agente de cámara."""
        self.running = False
        if self.thread:
            self.thread.join(timeout=5.0)
        logger.info(f"Agente de cámara {self.agent_id} detenido")
    
    def on_message(self, message):
        """Procesa mensajes recibidos."""
        if message.type == "command":
            self._process_command(message.data)
    
    def _frame_loop(self):
        """Bucle principal para capturar y enviar frames."""
        while self.running:
            if not self.enabled or not self.active_cameras:
                time.sleep(0.5)
                continue
                
            start_time = time.time()
            
            # Obtener frames de todas las cámaras activas
            for camera_id in list(self.active_cameras):
                try:
                    frame = self.video_capture_manager.get_frame(camera_id)
                    if frame is not None:
                        # Enviar frame a todos los agentes interesados
                        self.broadcast_message("frame", {
                            "camera_id": camera_id,
                            "frame": frame,
                            "timestamp": time.time()
                        })
                except Exception as e:
                    logger.error(f"Error al obtener frame de cámara {camera_id}: {str(e)}")
            
            # Calcular tiempo a esperar para mantener el intervalo deseado
            process_time = time.time() - start_time
            sleep_time = max(0, self.frame_interval - process_time)
            if sleep_time > 0:
                time.sleep(sleep_time)
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente de cámara {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente de cámara {self.agent_id} deshabilitado")
        elif command == "add_camera":
            camera_id = data.get("camera_id")
            if camera_id:
                self.active_cameras.add(camera_id)
                # Asegurarse de que la cámara esté activa
                self.video_capture_manager.start_camera(camera_id)
                logger.info(f"Cámara {camera_id} añadida al agente")
        elif command == "remove_camera":
            camera_id = data.get("camera_id")
            if camera_id and camera_id in self.active_cameras:
                self.active_cameras.remove(camera_id)
                logger.info(f"Cámara {camera_id} eliminada del agente")
        elif command == "set_interval":
            self.frame_interval = max(0.01, data.get("value", self.frame_interval))
            logger.info(f"Intervalo de frames actualizado a {self.frame_interval}") 

--------------------------------------------------------------------------------

📄 src\alert_manager.py
--------------------------------------------------------------------------------
import logging
import time
import json
import queue
import threading
from datetime import datetime
import uuid
from .database import db, Alert

class AlertManager:
    """Sistema centralizado de gestión de alertas"""
    
    SEVERITY_LEVELS = {
        "info": 0,
        "warning": 1,
        "critical": 2
    }
    
    def __init__(self, config=None):
        """
        Inicializa el gestor de alertas.
        
        Args:
            config: Configuración opcional
        """
        self.config = config or {}
        self.alerts = []
        self.alert_handlers = []
        self.lock = threading.Lock()
        self.logger = logging.getLogger("alert_manager")
        self.alert_queue = queue.PriorityQueue()
        self.alert_history = []
        self.max_history = self.config.get("max_history", 1000)
        
        # Iniciar el procesador de alertas
        self.stop_event = threading.Event()
        self.processor_thread = threading.Thread(target=self._process_alerts)
        self.processor_thread.daemon = True
        self.processor_thread.start()
        
        self.cooldown_alerts = {}  # Para evitar duplicados
        
    def register_handler(self, handler_name, handler_func):
        """Registra un nuevo handler de alertas"""
        self.alert_handlers[handler_name] = handler_func
        self.logger.info(f"Registrado handler de alertas: {handler_name}")
        
    def add_alert(self, alert_type, source, message, severity="info", data=None, image=None):
        """Añade una nueva alerta al sistema"""
        if severity not in self.SEVERITY_LEVELS:
            severity = "info"
            
        timestamp = time.time()
        alert_id = f"{int(timestamp)}_{source}_{alert_type}"
        
        alert = {
            "id": alert_id,
            "type": alert_type,
            "source": source,
            "message": message,
            "severity": severity,
            "timestamp": timestamp,
            "datetime": datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d %H:%M:%S"),
            "data": data or {},
            "status": "new",
            "image_url": None
        }
        
        # Si hay imagen, guardarla
        if image is not None:
            image_url = self._save_alert_image(alert_id, image)
            alert["image_url"] = image_url
            
        # Añadir a la cola de prioridad (menor número = mayor prioridad)
        priority = self.SEVERITY_LEVELS[severity]
        self.alert_queue.put((priority, alert))
        
        # También añadir al historial
        self._add_to_history(alert)
        
        self.logger.info(f"Nueva alerta: {alert_id} - {message} [{severity}]")
        return alert_id
        
    def get_alerts(self, limit=50, offset=0, camera_id=None, severity=None, resolved=None):
        """Obtiene alertas con filtros opcionales"""
        try:
            query = Alert.query
            
            if camera_id is not None:
                query = query.filter_by(camera_id=camera_id)
                
            if severity is not None:
                query = query.filter_by(severity=severity)
                
            if resolved is not None:
                query = query.filter_by(resolved=resolved)
                
            return query.order_by(Alert.timestamp.desc()).offset(offset).limit(limit).all()
            
        except Exception as e:
            self.logger.error(f"Error al obtener alertas: {str(e)}")
            return []
        
    def _process_alerts(self):
        """Procesa las alertas en la cola y las envía a los handlers"""
        while not self.stop_event.is_set():
            try:
                # Esperar hasta 1 segundo por una nueva alerta
                try:
                    priority, alert = self.alert_queue.get(timeout=1)
                except queue.Empty:
                    continue
                
                # Procesar la alerta con cada handler
                for handler_name, handler_func in self.alert_handlers.items():
                    try:
                        handler_func(alert)
                    except Exception as e:
                        self.logger.error(f"Error en handler {handler_name}: {str(e)}")
                
                # Marcar como procesada
                alert["status"] = "processed"
                self.alert_queue.task_done()
                
            except Exception as e:
                self.logger.error(f"Error en procesador de alertas: {str(e)}")
                
    def _add_to_history(self, alert):
        """Añade una alerta al histórico"""
        self.alert_history.append(alert)
        
        # Mantener el límite de histórico
        if len(self.alert_history) > self.max_history:
            self.alert_history = self.alert_history[-self.max_history:]
            
    def _save_alert_image(self, alert_id, image):
        """Guarda la imagen de una alerta"""
        # Implementación de guardado de imagen
        # ... código para guardar la imagen ...
        return f"/static/alert_images/{alert_id}.jpg"  # URL ejemplo
        
    def shutdown(self):
        """Cierra ordenadamente el gestor de alertas"""
        self.stop_event.set()
        self.processor_thread.join(timeout=5)
        self.logger.info("AlertManager detenido")

    def add_subscriber(self, subscriber):
        self.subscribers.append(subscriber)
        
    def send_alert(self, message, level='info'):
        for subscriber in self.subscribers:
            subscriber.notify(message, level)

    def update_alert(self, alert_id, update_data):
        """
        Actualiza una alerta existente.
        
        Args:
            alert_id: ID de la alerta a actualizar
            update_data: Datos a actualizar
            
        Returns:
            bool: True si se actualizó correctamente
        """
        with self.lock:
            for alert in self.alerts:
                if alert.get('id') == alert_id:
                    alert.update(update_data)
                    return True
        return False

    def get_alert_count(self):
        """
        Obtiene el número total de alertas.
        
        Returns:
            int: Número de alertas
        """
        with self.lock:
            return len(self.alerts)

    def get_recent_alerts(self, limit=10, max_age_minutes=None):
        """
        Obtiene las alertas más recientes.
        
        Args:
            limit: Número máximo de alertas a retornar
            max_age_minutes: Edad máxima en minutos
            
        Returns:
            list: Lista de alertas recientes
        """
        result = []
        current_time = datetime.now()
        
        with self.lock:
            # Ordenar alertas por timestamp (más recientes primero)
            sorted_alerts = sorted(
                self.alerts, 
                key=lambda x: x.get('timestamp', ''), 
                reverse=True
            )
            
            for alert in sorted_alerts:
                if len(result) >= limit:
                    break
                    
                # Verificar edad si se especificó
                if max_age_minutes is not None:
                    try:
                        alert_time = alert.get('timestamp')
                        if isinstance(alert_time, str):
                            alert_time = datetime.fromisoformat(alert_time.replace('Z', '+00:00'))
                            
                        age_minutes = (current_time - alert_time).total_seconds() / 60
                        if age_minutes > max_age_minutes:
                            continue
                    except:
                        # Si hay error al procesar la fecha, incluirla de todos modos
                        pass
                
                result.append(alert.copy())
                
        return result

    def get_alerts_between(self, start_date, end_date, filter_data=None):
        """
        Obtiene alertas entre dos fechas específicas.
        
        Args:
            start_date: Fecha de inicio (datetime o string ISO)
            end_date: Fecha de fin (datetime o string ISO)
            filter_data: Diccionario con filtros adicionales
            
        Returns:
            Lista de alertas que cumplen los criterios
        """
        if isinstance(start_date, str):
            start_date = datetime.fromisoformat(start_date)
        if isinstance(end_date, str):
            end_date = datetime.fromisoformat(end_date)
        
        result = []
        
        with self.lock:
            for alert in self.alerts:
                # Convertir timestamp a datetime si es string
                alert_time = alert['timestamp']
                if isinstance(alert_time, str):
                    alert_time = datetime.fromisoformat(alert_time.replace('Z', '+00:00'))
                
                # Verificar si está en el rango de fechas
                if start_date <= alert_time <= end_date:
                    # Aplicar filtros adicionales si existen
                    if filter_data:
                        matches = True
                        for key, value in filter_data.items():
                            if key in alert and alert[key] != value:
                                matches = False
                                break
                        
                        if not matches:
                            continue
                    
                    result.append(alert.copy())
        
        return result

    def get_alert_count_since(self, timestamp, alert_type=None):
        """
        Obtiene el número de alertas desde una fecha determinada, opcionalmente filtradas por tipo.
        
        Args:
            timestamp (str o datetime): Fecha desde la cual contar alertas
            alert_type (str, opcional): Tipo de alerta para filtrar (None para todas)
            
        Returns:
            int: Número de alertas desde la fecha indicada
        """
        if isinstance(timestamp, str):
            try:
                from datetime import datetime
                timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            except ValueError:
                # Si hay error al convertir, usamos un valor que incluya todas las alertas
                timestamp = datetime.min
        
        count = 0
        for alert in self.alerts:
            alert_time = alert.get('timestamp', None)
            if alert_time is None:
                continue
            
            # Convertir timestamp de alerta si es string
            if isinstance(alert_time, str):
                try:
                    alert_time = datetime.fromisoformat(alert_time.replace('Z', '+00:00'))
                except ValueError:
                    continue
            
            # Verificar si la alerta es posterior al timestamp
            if alert_time >= timestamp:
                # Filtrar por tipo si se especifica
                if alert_type is None or alert.get('type') == alert_type:
                    count += 1
                
        return count

    def get_alert_count_by_type(self, start_date=None, end_date=None):
        """
        Obtiene el conteo de alertas agrupadas por tipo en un rango de fechas.
        
        Args:
            start_date (datetime o str, opcional): Fecha de inicio para el rango
            end_date (datetime o str, opcional): Fecha de fin para el rango
            
        Returns:
            dict: Diccionario con los conteos por tipo de alerta
        """
        from datetime import datetime
        
        # Convertir fechas si son string
        if isinstance(start_date, str) and start_date:
            try:
                start_date = datetime.fromisoformat(start_date.replace('Z', '+00:00'))
            except ValueError:
                start_date = None
            
        if isinstance(end_date, str) and end_date:
            try:
                end_date = datetime.fromisoformat(end_date.replace('Z', '+00:00'))
            except ValueError:
                end_date = None
        
        # Inicializar contador de tipos
        counts = {}
        
        with self.lock:
            for alert in self.alerts:
                # Obtener timestamp de la alerta
                alert_time = None
                if 'timestamp' in alert:
                    if isinstance(alert['timestamp'], str):
                        try:
                            alert_time = datetime.fromisoformat(alert['timestamp'].replace('Z', '+00:00'))
                        except ValueError:
                            continue
                    else:
                        alert_time = alert['timestamp']
                
                # Filtrar por fechas si se especificaron
                if start_date and alert_time and alert_time < start_date:
                    continue
                
                if end_date and alert_time and alert_time > end_date:
                    continue
                
                # Contar por tipo
                alert_type = alert.get('type', 'unknown')
                if alert_type in counts:
                    counts[alert_type] += 1
                else:
                    counts[alert_type] = 1
        
        return counts

    def get_alerts(self):
        """Obtiene todas las alertas almacenadas.
        
        Returns:
            list: Lista de todas las alertas
        """
        # Retornar una copia de la lista de alertas para evitar modificaciones directas
        return self.alerts.copy()

    def get_alert_count_by_severity(self):
        """
        Devuelve un conteo de alertas por nivel de severidad.
        
        Returns:
            dict: {severity_level: count}
        """
        with self.lock:
            counts = {"info": 0, "warning": 0, "critical": 0}
            for alert in self.alert_history:
                severity = alert.get("severity", "info")
                if severity in counts:
                    counts[severity] += 1
            return counts

    def create_alert(self, camera_id, alert_type, severity, description=None, image_path=None):
        """Crea una nueva alerta en el sistema"""
        try:
            # Verificar cooldown para evitar alertas duplicadas
            cooldown_key = f"{camera_id}_{alert_type}"
            current_time = datetime.utcnow()
            
            if cooldown_key in self.cooldown_alerts:
                last_time = self.cooldown_alerts[cooldown_key]
                # Si han pasado menos de 30 segundos, no crear alerta duplicada
                if (current_time - last_time).total_seconds() < 30:
                    return None
            
            # Crear nueva alerta
            alert = Alert(
                camera_id=camera_id,
                timestamp=current_time,
                alert_type=alert_type,
                severity=severity,
                description=description,
                image_path=image_path,
                resolved=False
            )
            
            db.session.add(alert)
            db.session.commit()
            
            # Actualizar cooldown
            self.cooldown_alerts[cooldown_key] = current_time
            
            self.logger.info(f"Alerta creada: {alert_type} (Severidad: {severity}) para cámara ID {camera_id}")
            return alert
            
        except Exception as e:
            db.session.rollback()
            self.logger.error(f"Error al crear alerta: {str(e)}")
            raise
    
    def resolve_alert(self, alert_id):
        """Marca una alerta como resuelta"""
        try:
            alert = Alert.query.get(alert_id)
            if not alert:
                return False
                
            alert.resolved = True
            db.session.commit()
            self.logger.info(f"Alerta marcada como resuelta: ID {alert_id}")
            return True
            
        except Exception as e:
            db.session.rollback()
            self.logger.error(f"Error al resolver alerta: {str(e)}")
            return False
            
    def get_alert_stats(self):
        """Obtiene estadísticas de alertas"""
        try:
            stats = {
                'total': Alert.query.count(),
                'unresolved': Alert.query.filter_by(resolved=False).count(),
                'critical': Alert.query.filter_by(severity='critical').count(),
                'warning': Alert.query.filter_by(severity='warning').count(),
                'info': Alert.query.filter_by(severity='info').count()
            }
            return stats
            
        except Exception as e:
            self.logger.error(f"Error al obtener estadísticas de alertas: {str(e)}")
            return {}


--------------------------------------------------------------------------------

📄 src\analytics_manager.py
--------------------------------------------------------------------------------
import logging
import json
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import threading
import time

logger = logging.getLogger("analytics_manager")

class AnalyticsManager:
    """Gestor de análisis de datos y estadísticas del sistema."""
    
    def __init__(self, alert_manager, camera_manager, detection_manager=None, config_path="config/analytics.json"):
        """
        Inicializa el gestor de análisis.
        
        Args:
            alert_manager: Gestor de alertas
            camera_manager: Gestor de cámaras
            detection_manager: Gestor de detecciones (opcional)
            config_path: Ruta al archivo de configuración
        """
        self.alert_manager = alert_manager
        self.camera_manager = camera_manager
        self.detection_manager = detection_manager
        self.config_path = config_path
        
        # Datos en caché para evitar recálculos frecuentes
        self.cache = {}
        self.cache_expiry = {}
        self.cache_lock = threading.Lock()
        
        # Tiempo de expiración predeterminado de caché (en segundos)
        self.default_cache_ttl = 300  # 5 minutos
        
        # Estadísticas almacenadas
        self.daily_stats = {}
        self.hourly_stats = {}
        
        # Iniciar hilo de actualización periódica
        self.running = True
        self.stats_thread = threading.Thread(target=self._background_stats_updater)
        self.stats_thread.daemon = True
        self.stats_thread.start()
        
        # Cargar configuración
        self.load_config()
        
    def load_config(self):
        """Carga la configuración desde el archivo JSON."""
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, 'r') as f:
                    config = json.load(f)
                    
                logger.info("Configuración de análisis cargada correctamente")
            except Exception as e:
                logger.error(f"Error al cargar configuración de análisis: {str(e)}")
                self._create_default_config()
        else:
            logger.info("Creando configuración predeterminada para análisis")
            self._create_default_config()
    
    def _create_default_config(self):
        """Crea una configuración predeterminada."""
        config = {
            "enabled_charts": [
                "alert_by_type", 
                "alert_by_camera", 
                "alert_by_hour",
                "detections_by_type",
                "activity_heatmap"
            ],
            "retention_days": 30,
            "update_interval": 3600  # 1 hora
        }
        
        try:
            os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
            with open(self.config_path, 'w') as f:
                json.dump(config, f, indent=4)
        except Exception as e:
            logger.error(f"Error al crear configuración predeterminada: {str(e)}")
    
    def get_dashboard_stats(self):
        """
        Obtiene estadísticas para el dashboard.
        
        Returns:
            dict: Estadísticas completas para el dashboard
        """
        # Intentar obtener de caché
        with self.cache_lock:
            if "dashboard_stats" in self.cache:
                if self.cache_expiry.get("dashboard_stats", 0) > time.time():
                    return self.cache["dashboard_stats"]
        
        # Recopilar estadísticas
        stats = {
            "total_alerts": self._get_total_alerts(),
            "total_cameras": len(self.camera_manager.get_cameras()),
            "active_cameras": self._get_active_cameras_count(),
            "alerts_today": self._get_alerts_count(days=1),
            "alerts_week": self._get_alerts_count(days=7),
            "alerts_by_type": self._get_alerts_by_type(),
            "alerts_by_severity": self._get_alerts_by_severity(),
            "alerts_by_camera": self._get_alerts_by_camera(),
            "alerts_by_hour": self._get_alerts_by_hour(),
            "detection_stats": self._get_detection_stats(),
            "system_uptime": self._get_system_uptime(),
            "trend_data": self._get_trend_data()
        }
        
        # Guardar en caché
        with self.cache_lock:
            self.cache["dashboard_stats"] = stats
            self.cache_expiry["dashboard_stats"] = time.time() + self.default_cache_ttl
        
        return stats
    
    def get_alert_stats(self, days=30):
        """
        Obtiene estadísticas detalladas de alertas.
        
        Args:
            days: Número de días para incluir en el análisis
            
        Returns:
            dict: Estadísticas de alertas
        """
        cache_key = f"alert_stats_{days}"
        
        # Intentar obtener de caché
        with self.cache_lock:
            if cache_key in self.cache:
                if self.cache_expiry.get(cache_key, 0) > time.time():
                    return self.cache[cache_key]
        
        # Obtener alertas para el período
        start_date = datetime.now() - timedelta(days=days)
        alerts = self.alert_manager.get_alerts_since(start_date)
        
        # Preparar datos
        alerts_df = pd.DataFrame(alerts)
        
        if len(alerts_df) == 0:
            # No hay datos suficientes
            result = {
                "count": 0,
                "by_type": {},
                "by_camera": {},
                "by_hour": {},
                "by_day": {},
                "by_severity": {}
            }
        else:
            # Convertir timestamps a datetime
            alerts_df['timestamp'] = pd.to_datetime(alerts_df['timestamp'])
            
            # Extraer componentes temporales
            alerts_df['hour'] = alerts_df['timestamp'].dt.hour
            alerts_df['day'] = alerts_df['timestamp'].dt.day_name()
            alerts_df['date'] = alerts_df['timestamp'].dt.date
            
            # Calcular estadísticas
            result = {
                "count": len(alerts_df),
                "by_type": alerts_df.groupby(['type', 'subtype']).size().unstack(fill_value=0).to_dict(),
                "by_camera": alerts_df.groupby('camera_id').size().to_dict(),
                "by_hour": alerts_df.groupby('hour').size().to_dict(),
                "by_day": alerts_df.groupby('day').size().to_dict(),
                "by_severity": alerts_df.groupby('severity').size().to_dict(),
                "daily_counts": alerts_df.groupby('date').size().to_dict()
            }
            
            # Convertir fechas a strings para JSON
            if "daily_counts" in result:
                result["daily_counts"] = {str(k): v for k, v in result["daily_counts"].items()}
        
        # Guardar en caché
        with self.cache_lock:
            self.cache[cache_key] = result
            self.cache_expiry[cache_key] = time.time() + self.default_cache_ttl
        
        return result
    
    def get_camera_activity(self, camera_id=None, days=7):
        """
        Obtiene estadísticas de actividad por cámara.
        
        Args:
            camera_id: ID de cámara específica, o None para todas
            days: Días de historia a incluir
            
        Returns:
            dict: Estadísticas de actividad
        """
        cache_key = f"camera_activity_{camera_id}_{days}"
        
        # Intentar obtener de caché
        with self.cache_lock:
            if cache_key in self.cache:
                if self.cache_expiry.get(cache_key, 0) > time.time():
                    return self.cache[cache_key]
        
        # Obtener alertas para el período
        start_date = datetime.now() - timedelta(days=days)
        
        if camera_id:
            alerts = self.alert_manager.get_alerts_by_camera(camera_id, since=start_date)
        else:
            alerts = self.alert_manager.get_alerts_since(start_date)
        
        # Preparar resultado
        if not alerts:
            result = {
                "alert_count": 0,
                "hourly_activity": {},
                "daily_activity": {}
            }
        else:
            # Convertir a DataFrame para análisis
            alerts_df = pd.DataFrame(alerts)
            alerts_df['timestamp'] = pd.to_datetime(alerts_df['timestamp'])
            alerts_df['hour'] = alerts_df['timestamp'].dt.hour
            alerts_df['date'] = alerts_df['timestamp'].dt.date
            
            # Actividad por hora del día (promedio)
            hourly = alerts_df.groupby('hour').size().to_dict()
            
            # Actividad por día
            daily = alerts_df.groupby('date').size().to_dict()
            
            result = {
                "alert_count": len(alerts),
                "hourly_activity": hourly,
                "daily_activity": {str(k): v for k, v in daily.items()}
            }
            
            # Añadir actividad por tipo si hay datos
            if 'type' in alerts_df.columns:
                type_counts = alerts_df.groupby('type').size().to_dict()
                result["activity_by_type"] = type_counts
        
        # Guardar en caché
        with self.cache_lock:
            self.cache[cache_key] = result
            self.cache_expiry[cache_key] = time.time() + self.default_cache_ttl
        
        return result
    
    def get_system_performance(self, days=7):
        """
        Obtiene métricas de rendimiento del sistema.
        
        Args:
            days: Días de historia a incluir
            
        Returns:
            dict: Métricas de rendimiento
        """
        # Esta función simularía datos de rendimiento como:
        # - Tiempo de respuesta promedio
        # - Uso de recursos
        # - Tasa de falsos positivos/negativos
        # etc.
        
        # Para esta demo, generamos datos simulados
        response_times = np.random.normal(0.8, 0.2, 24).tolist()
        cpu_usage = np.random.normal(45, 15, 24).tolist()
        memory_usage = np.random.normal(60, 10, 24).tolist()
        
        return {
            "response_times": response_times,
            "cpu_usage": cpu_usage,
            "memory_usage": memory_usage,
            "avg_response_time": round(sum(response_times) / len(response_times), 2),
            "peak_cpu": round(max(cpu_usage), 1),
            "peak_memory": round(max(memory_usage), 1)
        }
    
    def get_detection_heatmap(self, camera_id, days=7):
        """
        Genera datos para un mapa de calor de detecciones.
        
        Args:
            camera_id: ID de la cámara
            days: Días a incluir
            
        Returns:
            dict: Datos para generar mapa de calor
        """
        if not self.detection_manager:
            return {"status": "error", "message": "Gestor de detecciones no disponible"}
        
        # En una implementación real, obtendríamos datos de posiciones de detecciones
        # Para demo, generaremos datos aleatorios
        
        # Obtener dimensiones de la imagen
        camera = self.camera_manager.get_camera(camera_id)
        if not camera:
            return {"status": "error", "message": "Cámara no encontrada"}
        
        width = 640  # Ancho predeterminado
        height = 480  # Alto predeterminado
        
        # Generar detecciones simuladas
        num_detections = 100
        x_coords = np.random.normal(width/2, width/4, num_detections).astype(int)
        y_coords = np.random.normal(height/2, height/4, num_detections).astype(int)
        
        # Limitar a dimensiones válidas
        x_coords = np.clip(x_coords, 0, width-1)
        y_coords = np.clip(y_coords, 0, height-1)
        
        # Crear matriz de mapa de calor
        heatmap = np.zeros((height, width))
        for x, y in zip(x_coords, y_coords):
            heatmap[y, x] += 1
        
        # Suavizar mapa de calor
        from scipy.ndimage import gaussian_filter
        heatmap = gaussian_filter(heatmap, sigma=10)
        
        # Normalizar a rango 0-1
        heatmap = heatmap / np.max(heatmap)
        
        # Convertir a formato para visualización
        # Usaremos un formato compacto para reducir tamaño
        # Solo incluimos celdas con valores > 0.1
        heat_data = []
        for y in range(0, height, 4):
            for x in range(0, width, 4):
                val = heatmap[y, x]
                if val > 0.1:
                    heat_data.append([x, y, round(val, 2)])
        
        return {
            "width": width,
            "height": height,
            "data": heat_data
        }
    
    def _background_stats_updater(self):
        """Hilo en segundo plano para actualizar estadísticas periódicamente."""
        while self.running:
            try:
                # Actualizar estadísticas diarias
                self._update_daily_stats()
                
                # Actualizar estadísticas por hora
                self._update_hourly_stats()
                
                # Actualizar caché de dashboard
                self.get_dashboard_stats()
                
                # Dormir durante un período
                time.sleep(3600)  # 1 hora
            except Exception as e:
                logger.error(f"Error en actualización de estadísticas: {str(e)}")
                time.sleep(300)  # Esperar 5 minutos en caso de error
    
    def _update_daily_stats(self):
        """Actualiza estadísticas diarias."""
        today = datetime.now().date()
        yesterday = today - timedelta(days=1)
        
        # Obtener alertas de ayer
        start = datetime.combine(yesterday, datetime.min.time())
        end = datetime.combine(today, datetime.min.time())
        
        alerts = self.alert_manager.get_alerts_between(start, end)
        
        if not alerts:
            return
            
        # Análisis de alertas
        alert_types = {}
        alert_cameras = {}
        
        for alert in alerts:
            a_type = alert.get('type', 'unknown')
            a_subtype = alert.get('subtype')
            a_camera = alert.get('camera_id', 'unknown')
            
            type_key = f"{a_type}_{a_subtype}" if a_subtype else a_type
            
            alert_types[type_key] = alert_types.get(type_key, 0) + 1
            alert_cameras[a_camera] = alert_cameras.get(a_camera, 0) + 1
        
        # Guardar estadísticas
        day_key = yesterday.isoformat()
        self.daily_stats[day_key] = {
            'total': len(alerts),
            'by_type': alert_types,
            'by_camera': alert_cameras
        }
        
        # Limitar tamaño del historial (máximo 90 días)
        keys = sorted(list(self.daily_stats.keys()))
        if len(keys) > 90:
            for old_key in keys[:-90]:
                del self.daily_stats[old_key]
    
    def _update_hourly_stats(self):
        """Actualiza estadísticas por hora."""
        now = datetime.now()
        hour_ago = now - timedelta(hours=1)
        
        # Obtener alertas de la última hora
        alerts = self.alert_manager.get_alerts_between(hour_ago, now)
        
        if not alerts:
            return
            
        # Análisis de alertas
        alert_count = len(alerts)
        
        # Guardar estadísticas
        hour_key = hour_ago.strftime("%Y-%m-%d %H:00")
        self.hourly_stats[hour_key] = {
            'total': alert_count
        }
        
        # Limitar tamaño del historial (máximo 168 horas = 7 días)
        keys = sorted(list(self.hourly_stats.keys()))
        if len(keys) > 168:
            for old_key in keys[:-168]:
                del self.hourly_stats[old_key]
    
    def _get_total_alerts(self):
        """Obtiene el número total de alertas en el sistema."""
        return self.alert_manager.get_alert_count()
    
    def _get_active_cameras_count(self):
        """Obtiene el número de cámaras activas."""
        cameras = self.camera_manager.get_cameras()
        return sum(1 for cam in cameras if cam.get('active', False))
    
    def _get_alerts_count(self, days=1):
        """Obtiene el número de alertas en los últimos X días."""
        start_date = datetime.now() - timedelta(days=days)
        return self.alert_manager.get_alert_count_since(start_date)
    
    def _get_alerts_by_type(self):
        """Obtiene la distribución de alertas por tipo."""
        return self.alert_manager.get_alert_count_by_type()
    
    def _get_alerts_by_severity(self):
        """Obtiene la distribución de alertas por severidad."""
        return self.alert_manager.get_alert_count_by_severity()
    
    def _get_alerts_by_camera(self):
        """Obtiene la distribución de alertas por cámara."""
        return self.alert_manager.get_alert_count_by_camera()
    
    def _get_alerts_by_hour(self):
        """Obtiene la distribución de alertas por hora del día."""
        # Esta función simula datos hasta que se implemente en alert_manager
        hours = list(range(24))
        counts = [0] * 24
        
        # Tomar datos de las estadísticas por hora si existen
        for hour_key, stats in self.hourly_stats.items():
            try:
                hour = int(hour_key.split()[1].split(':')[0])
                counts[hour] += stats['total']
            except (IndexError, ValueError):
                pass
        
        return dict(zip(hours, counts))
    
    def _get_detection_stats(self):
        """Obtiene estadísticas de detecciones."""
        # Si hay un detection_manager, usar sus métodos
        # Simulamos datos para la demostración
        
        # Tipos de objetos detectados
        object_types = {
            "person": 1245,
            "car": 876,
            "bicycle": 234,
            "dog": 123,
            "cat": 87
        }
        
        # Tasas de detección por hora del día
        hourly_rates = [
            12, 8, 5, 3, 2, 4,     # 0-5 AM
            10, 25, 45, 40, 38, 42, # 6-11 AM
            45, 48, 50, 47, 52, 60, # 12-5 PM
            55, 48, 40, 35, 28, 20  # 6-11 PM
        ]
        
        return {
            "object_types": object_types,
            "hourly_rates": hourly_rates,
            "total_detections": sum(object_types.values()),
            "avg_confidence": 0.82  # Valor simulado
        }
    
    def _get_system_uptime(self):
        """Obtiene el tiempo de actividad del sistema."""
        # Simular tiempo de actividad
        days = 15
        hours = 7
        minutes = 23
        
        return {
            "days": days,
            "hours": hours,
            "minutes": minutes,
            "total_hours": days * 24 + hours + minutes / 60
        }
    
    def _get_trend_data(self):
        """Obtiene datos de tendencias para mostrar en gráficos."""
        # Usar estadísticas diarias
        dates = []
        alert_counts = []
        
        # Ordenar por fecha
        for day_key in sorted(self.daily_stats.keys())[-30:]:
            stats = self.daily_stats[day_key]
            dates.append(day_key)
            alert_counts.append(stats['total'])
        
        # Si no hay suficientes datos, añadir algunos simulados
        if len(dates) < 7:
            # Generar datos para los últimos 7 días
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=6)
            
            dates = []
            alert_counts = []
            
            current_date = start_date
            while current_date <= end_date:
                dates.append(current_date.isoformat())
                # Valor aleatorio entre 10 y 50
                alert_counts.append(np.random.randint(10, 50))
                current_date += timedelta(days=1)
        
        return {
            "dates": dates,
            "alert_counts": alert_counts
        }
    
    def shutdown(self):
        """Detiene correctamente el gestor de análisis."""
        self.running = False
        if self.stats_thread.is_alive():
            self.stats_thread.join(timeout=2)
            
    def __del__(self):
        """Destructor para asegurar limpieza adecuada."""
        self.shutdown() 

--------------------------------------------------------------------------------

📄 src\assault_detection_agent.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import logging
import uuid
from datetime import datetime
from .mcp_framework import MCPAgent
import time
from collections import defaultdict

logger = logging.getLogger("assault_detection")

class AssaultDetectionAgent(MCPAgent):
    """
    Agente especializado en la detección de posibles situaciones de asalto, robo o secuestro
    basado en patrones de comportamiento y posturas corporales.
    """
    
    def __init__(self, alert_manager, object_detector, config=None):
        """
        Inicializa el agente de detección de asaltos.
        
        Args:
            alert_manager: Gestor de alertas para reportar situaciones
            object_detector: Detector de objetos base
            config: Configuración específica del agente
        """
        agent_id = "assault_detection_agent"
        super().__init__(agent_id, name="Agente de Detección de Asaltos")
        self.alert_manager = alert_manager
        self.object_detector = object_detector
        self.config = config or {}
        self.logger = logging.getLogger("AssaultDetectionAgent")
        
        # Cargar modelo de poses si está disponible
        self.pose_detector = self._load_pose_detector()
        
        # Cargar detector de armas si está disponible
        self.weapon_detector = self._load_weapon_detector()
        
        # Patrones de comportamiento a detectar
        self.behavior_patterns = {
            "hands_up": {
                "confidence_threshold": 0.75,
                "description": "Persona con manos levantadas",
                "alert_level": "warning"
            },
            "running_person": {
                "confidence_threshold": 0.80,
                "description": "Persona corriendo",
                "alert_level": "info"
            },
            "fallen_person": {
                "confidence_threshold": 0.75,
                "description": "Persona caída en el suelo",
                "alert_level": "warning"
            },
            "close_confrontation": {
                "confidence_threshold": 0.70,
                "description": "Confrontación entre personas",
                "alert_level": "warning"
            },
            "weapon": {
                "confidence_threshold": 0.65,
                "description": "Posible arma detectada",
                "alert_level": "critical"
            }
        }
        
        # Historial de detecciones por cámara para análisis temporal
        self.detection_history = {}
        
        # Contador para controlar frecuencia de alertas
        self.alert_cooldowns = {}
        
        # Inicializar configuración específica
        self.confidence_threshold = self.config.get('confidence_threshold', 0.7)
        self.history_window = self.config.get('history_window', 30)  # frames
        self.motion_threshold = self.config.get('motion_threshold', 30)
        self.proximity_threshold = self.config.get('proximity_threshold', 0.15)
        
        # Seguimiento de personas
        self.person_tracking = defaultdict(dict)  # {camera_id: {track_id: {data}}}
        
        # Estado del agente
        self._active = True
        
        self.logger.info("Agente de detección de asaltos inicializado")
    
    def _load_pose_detector(self):
        """Carga el detector de poses corporales"""
        try:
            import mediapipe as mp
            pose_detector = mp.solutions.pose.Pose(
                static_image_mode=False,
                model_complexity=1,
                smooth_landmarks=True,
                min_detection_confidence=0.5,
                min_tracking_confidence=0.5
            )
            self.logger.info("Detector de poses cargado correctamente")
            return pose_detector
        except Exception as e:
            self.logger.error(f"Error al cargar detector de poses: {str(e)}")
            return None
    
    def _load_weapon_detector(self):
        """Carga el detector específico de armas"""
        try:
            # Usar YOLOv5/v8 con modelo específico para armas
            model_path = self.config.get("weapon_model_path", "models/weapon_detection.pt")
            import torch
            model = torch.hub.load('ultralytics/yolov5', 'custom', path=model_path)
            model.conf = 0.5  # umbral de confianza
            self.logger.info("Detector de armas cargado correctamente")
            return model
        except Exception as e:
            self.logger.error(f"Error al cargar detector de armas: {str(e)}")
            return None
    
    def process_frame(self, frame_data):
        """
        Procesa un frame para detectar posibles situaciones de asalto.
        
        Args:
            frame_data: Diccionario con el frame y metadatos
        
        Returns:
            dict: Resultados del procesamiento
        """
        camera_id = frame_data.get('camera_id', 'unknown')
        frame = frame_data.get('frame')
        
        if frame is None:
            return {"status": "error", "message": "Frame vacío"}
        
        # Inicializar resultado
        result = {
            "camera_id": camera_id,
            "timestamp": time.time(),
            "detections": [],
            "assault_probability": 0.0,
            "alerts_triggered": []
        }
        
        try:
            # 1. Detectar personas y objetos en el frame
            detections = self._detect_objects_in_frame(frame)
            
            # 2. Analizar poses de las personas detectadas
            pose_analysis = self._analyze_poses(frame, detections)
            
            # 3. Detectar posibles armas
            weapons = self._detect_weapons(frame)
            
            # 4. Analizar comportamientos sospechosos
            behaviors = self._detect_suspicious_behaviors(detections, pose_analysis)
            
            # 5. Analizar patrones temporales (movimientos bruscos, etc.)
            temporal_patterns = self._analyze_temporal_patterns(camera_id, detections, pose_analysis)
            
            # 6. Calcular probabilidad global de asalto
            assault_probability = self._calculate_assault_probability(
                pose_analysis, weapons, behaviors, temporal_patterns
            )
            
            # Actualizar resultado
            result["detections"] = detections
            result["pose_analysis"] = pose_analysis
            result["weapons"] = weapons
            result["behaviors"] = behaviors
            result["temporal_patterns"] = temporal_patterns
            result["assault_probability"] = assault_probability
            
            # 7. Generar alertas si es necesario
            if assault_probability > 0.5:
                alert_level = "info"
                if assault_probability > 0.7:
                    alert_level = "warning"
                if assault_probability > 0.85:
                    alert_level = "critical"
                
                alert = self._generate_assault_alert(camera_id, frame, assault_probability, 
                                                    pose_analysis, weapons, behaviors, level=alert_level)
                
                if alert:
                    result["alerts_triggered"].append(alert)
            
            # Actualizar historial de detecciones para este camera_id
            self._update_detection_history(camera_id, detections, pose_analysis, assault_probability)
            
            return result
            
        except Exception as e:
            self.logger.error(f"Error procesando frame para detección de asaltos: {str(e)}")
            return {"status": "error", "message": str(e)}
    
    def _detect_objects_in_frame(self, frame):
        """Detecta personas y objetos relevantes en el frame"""
        if self.object_detector:
            return self.object_detector.detect(frame)
        return []
    
    def _analyze_poses(self, frame, detections):
        """Analiza las poses de personas detectadas para identificar posturas sospechosas"""
        pose_results = []
        
        if not self.pose_detector:
            return pose_results
            
        # Filtrar solo personas
        persons = [d for d in detections if d.get('class', '') == 'person' and d.get('confidence', 0) > 0.7]
        
        for person in persons:
            try:
                # Extraer ROI de la persona
                bbox = person.get('bbox', [0, 0, 0, 0])
                if len(bbox) != 4:
                    continue
                    
                x, y, w, h = bbox
                # Asegurar que las coordenadas son válidas
                if w <= 0 or h <= 0:
                    continue
                    
                person_roi = frame[y:y+h, x:x+w]
                if person_roi.size == 0:
                    continue
                
                # Convertir a RGB para MediaPipe
                rgb_roi = cv2.cvtColor(person_roi, cv2.COLOR_BGR2RGB)
                
                # Obtener landmarks de pose
                results = self.pose_detector.process(rgb_roi)
                
                # Si hay landmarks, analizar postura
                pose_data = {}
                if results.pose_landmarks:
                    landmarks = results.pose_landmarks.landmark
                    
                    # Normalizar coordenadas al tamaño del ROI
                    normalized_landmarks = []
                    for lm in landmarks:
                        normalized_landmarks.append({
                            'x': lm.x * w + x,
                            'y': lm.y * h + y,
                            'z': lm.z,
                            'visibility': lm.visibility
                        })
                    
                    # Determinar si las manos están levantadas
                    hands_up = self._check_hands_up(normalized_landmarks)
                    
                    # Determinar si la persona está caída
                    is_fallen = self._check_person_fallen(normalized_landmarks)
                    
                    # Determinar si parece estar corriendo
                    is_running = self._check_person_running(normalized_landmarks)
                    
                    pose_data = {
                        'person_id': person.get('id', f"person_{len(pose_results)}"),
                        'bbox': bbox,
                        'hands_up': hands_up,
                        'is_fallen': is_fallen,
                        'is_running': is_running,
                        'landmarks': normalized_landmarks
                    }
                    
                    pose_results.append(pose_data)
                    
            except Exception as e:
                self.logger.error(f"Error analizando pose: {str(e)}")
        
        return pose_results
    
    def _check_hands_up(self, landmarks):
        """Verifica si la persona tiene las manos levantadas"""
        try:
            # Índices de los puntos clave relevantes en MediaPipe Pose
            # Hombros
            LEFT_SHOULDER = 11
            RIGHT_SHOULDER = 12
            # Muñecas
            LEFT_WRIST = 15
            RIGHT_WRIST = 16
            
            # Verificar si tenemos suficientes landmarks
            if len(landmarks) <= max(LEFT_SHOULDER, RIGHT_SHOULDER, LEFT_WRIST, RIGHT_WRIST):
                return False
            
            # Comprobar si ambas muñecas están por encima de los hombros
            left_wrist_y = landmarks[LEFT_WRIST]['y']
            right_wrist_y = landmarks[RIGHT_WRIST]['y']
            left_shoulder_y = landmarks[LEFT_SHOULDER]['y']
            right_shoulder_y = landmarks[RIGHT_SHOULDER]['y']
            
            # En coordenadas de imagen, y menor significa más arriba
            left_hand_up = left_wrist_y < left_shoulder_y
            right_hand_up = right_wrist_y < right_shoulder_y
            
            # Calcular confianza basada en la visibilidad y la posición relativa
            left_conf = landmarks[LEFT_WRIST]['visibility'] if left_hand_up else 0
            right_conf = landmarks[RIGHT_WRIST]['visibility'] if right_hand_up else 0
            
            # Si al menos una mano está claramente levantada con buena visibilidad
            if (left_hand_up and left_conf > 0.7) or (right_hand_up and right_conf > 0.7):
                return {
                    'detected': True,
                    'confidence': max(left_conf, right_conf),
                    'hands': {
                        'left': left_hand_up,
                        'right': right_hand_up
                    }
                }
            
            return {'detected': False, 'confidence': 0}
            
        except Exception as e:
            self.logger.error(f"Error en check_hands_up: {str(e)}")
            return {'detected': False, 'confidence': 0}
    
    def _check_person_fallen(self, landmarks):
        """Verifica si la persona parece estar caída en el suelo"""
        # Implementación similar a _check_hands_up pero para detectar postura horizontal
        # ... código para detectar persona caída ...
        return {'detected': False, 'confidence': 0}  # Placeholder
    
    def _check_person_running(self, landmarks):
        """Verifica si la persona parece estar corriendo"""
        # Implementación para detectar patrones de carrera
        # ... código para detectar persona corriendo ...
        return {'detected': False, 'confidence': 0}  # Placeholder
    
    def _detect_weapons(self, frame):
        """Detecta posibles armas en el frame"""
        weapons = []
        
        if not self.weapon_detector:
            return weapons
            
        try:
            # Usar detector específico de armas
            results = self.weapon_detector(frame)
            
            # Procesar resultados
            for detection in results.xyxy[0]:  # xyxy contiene [x1, y1, x2, y2, confianza, clase]
                x1, y1, x2, y2, conf, cls = detection
                
                weapon_class = results.names[int(cls)]
                
                if conf > self.behavior_patterns['weapon']['confidence_threshold']:
                    weapons.append({
                        'type': weapon_class,
                        'confidence': float(conf),
                        'bbox': [int(x1), int(y1), int(x2-x1), int(y2-y1)]
                    })
            
        except Exception as e:
            self.logger.error(f"Error detectando armas: {str(e)}")
            
        return weapons
    
    def _detect_suspicious_behaviors(self, detections, pose_analysis):
        """Detecta comportamientos sospechosos basados en las poses y detecciones"""
        behaviors = []
        
        # Comprobar manos levantadas
        for pose in pose_analysis:
            if pose.get('hands_up', {}).get('detected', False):
                confidence = pose.get('hands_up', {}).get('confidence', 0)
                if confidence > self.behavior_patterns['hands_up']['confidence_threshold']:
                    behaviors.append({
                        'type': 'hands_up',
                        'person_id': pose.get('person_id'),
                        'confidence': confidence,
                        'bbox': pose.get('bbox')
                    })
        
        # Comprobar personas caídas
        for pose in pose_analysis:
            if pose.get('is_fallen', {}).get('detected', False):
                confidence = pose.get('is_fallen', {}).get('confidence', 0)
                if confidence > self.behavior_patterns['fallen_person']['confidence_threshold']:
                    behaviors.append({
                        'type': 'fallen_person',
                        'person_id': pose.get('person_id'),
                        'confidence': confidence,
                        'bbox': pose.get('bbox')
                    })
        
        # Comprobar personas corriendo
        for pose in pose_analysis:
            if pose.get('is_running', {}).get('detected', False):
                confidence = pose.get('is_running', {}).get('confidence', 0)
                if confidence > self.behavior_patterns['running_person']['confidence_threshold']:
                    behaviors.append({
                        'type': 'running_person',
                        'person_id': pose.get('person_id'),
                        'confidence': confidence,
                        'bbox': pose.get('bbox')
                    })
        
        # Comprobar confrontaciones (personas muy cercanas)
        persons = [d for d in detections if d.get('class', '') == 'person']
        if len(persons) >= 2:
            for i in range(len(persons)):
                for j in range(i+1, len(persons)):
                    person1 = persons[i]
                    person2 = persons[j]
                    
                    # Calcular distancia entre personas
                    distance = self._calculate_distance_between_boxes(
                        person1.get('bbox'), person2.get('bbox')
                    )
                    
                    # Si la distancia es muy pequeña, podría ser una confrontación
                    if distance < 50:  # Umbral arbitrario, ajustar según necesidad
                        confidence = max(0.7, 1.0 - (distance / 100))  # Mayor confianza a menor distancia
                        if confidence > self.behavior_patterns['close_confrontation']['confidence_threshold']:
                            behaviors.append({
                                'type': 'close_confrontation',
                                'person_ids': [person1.get('id', f"person_{i}"), 
                                             person2.get('id', f"person_{j}")],
                                'confidence': confidence,
                                'bbox': self._merge_boxes(person1.get('bbox'), person2.get('bbox'))
                            })
        
        return behaviors
    
    def _calculate_distance_between_boxes(self, box1, box2):
        """Calcula la distancia entre dos cajas delimitadoras"""
        if not box1 or not box2 or len(box1) != 4 or len(box2) != 4:
            return float('inf')
            
        # Extraer coordenadas
        x1, y1, w1, h1 = box1
        x2, y2, w2, h2 = box2
        
        # Calcular centros
        cx1 = x1 + w1/2
        cy1 = y1 + h1/2
        cx2 = x2 + w2/2
        cy2 = y2 + h2/2
        
        # Distancia euclidiana entre centros
        return ((cx1 - cx2)**2 + (cy1 - cy2)**2)**0.5
    
    def _merge_boxes(self, box1, box2):
        """Combina dos cajas delimitadoras en una sola que las contenga a ambas"""
        if not box1 or not box2 or len(box1) != 4 or len(box2) != 4:
            return box1 or box2 or [0, 0, 0, 0]
            
        # Extraer coordenadas
        x1, y1, w1, h1 = box1
        x2, y2, w2, h2 = box2
        
        # Calcular esquinas
        left = min(x1, x2)
        top = min(y1, y2)
        right = max(x1 + w1, x2 + w2)
        bottom = max(y1 + h1, y2 + h2)
        
        # Convertir de nuevo a formato [x, y, w, h]
        return [left, top, right - left, bottom - top]
    
    def _analyze_temporal_patterns(self, camera_id, detections, pose_analysis):
        """
        Analiza patrones temporales comparando con detecciones previas
        para identificar movimientos bruscos o comportamientos que evolucionan.
        """
        temporal_results = {
            'sudden_movements': [],
            'persistent_behaviors': [],
            'scene_change': False
        }
        
        # Si no hay historial previo para esta cámara, inicializarlo
        if camera_id not in self.detection_history:
            self.detection_history[camera_id] = {
                'frames': [],
                'max_frames': 10  # Almacenar solo los últimos N frames
            }
            return temporal_results
        
        history = self.detection_history[camera_id]
        
        # Si hay suficientes frames en el historial, analizar cambios
        if len(history['frames']) > 0:
            prev_frame = history['frames'][-1]
            
            # Comprobar cambios bruscos en número de personas
            prev_persons = len(prev_frame.get('pose_analysis', []))
            current_persons = len(pose_analysis)
            
            if abs(current_persons - prev_persons) > 2:
                temporal_results['scene_change'] = True
            
            # Comprobar comportamientos persistentes (manos arriba mantenidas)
            current_hands_up = set()
            for pose in pose_analysis:
                if pose.get('hands_up', {}).get('detected', False):
                    current_hands_up.add(pose.get('person_id'))
            
            prev_hands_up = set()
            for pose in prev_frame.get('pose_analysis', []):
                if pose.get('hands_up', {}).get('detected', False):
                    prev_hands_up.add(pose.get('person_id'))
            
            # Si las mismas personas tienen manos arriba en frames consecutivos
            persistent_hands_up = current_hands_up.intersection(prev_hands_up)
            if persistent_hands_up:
                temporal_results['persistent_behaviors'].append({
                    'type': 'persistent_hands_up',
                    'person_ids': list(persistent_hands_up),
                    'confidence': 0.85  # Alta confianza para comportamiento sostenido
                })
        
        return temporal_results
    
    def _update_detection_history(self, camera_id, detections, pose_analysis, assault_probability):
        """Actualiza el historial de detecciones para esta cámara"""
        if camera_id not in self.detection_history:
            self.detection_history[camera_id] = {
                'frames': [],
                'max_frames': 10
            }
        
        history = self.detection_history[camera_id]
        
        # Guardar información relevante del frame actual
        current_frame = {
            'timestamp': time.time(),
            'detections': detections,
            'pose_analysis': pose_analysis,
            'assault_probability': assault_probability
        }
        
        # Añadir frame actual al historial
        history['frames'].append(current_frame)
        
        # Mantener solo los últimos max_frames
        if len(history['frames']) > history['max_frames']:
            history['frames'] = history['frames'][-history['max_frames']:]
    
    def _calculate_assault_probability(self, pose_analysis, weapons, behaviors, temporal_patterns):
        """
        Calcula la probabilidad global de que esté ocurriendo un asalto
        basándose en todos los factores analizados.
        """
        # Factores base y sus pesos
        factors = {
            'weapons': {'weight': 0.5, 'value': 0},
            'hands_up': {'weight': 0.3, 'value': 0},
            'fallen_person': {'weight': 0.2, 'value': 0},
            'running_person': {'weight': 0.15, 'value': 0},
            'confrontation': {'weight': 0.25, 'value': 0},
            'persistent_behaviors': {'weight': 0.2, 'value': 0},
            'scene_change': {'weight': 0.1, 'value': 0}
        }
        
        # Calcular valor para cada factor
        
        # 1. Armas
        if weapons:
            # Mayor confianza = mayor valor
            factors['weapons']['value'] = max([w.get('confidence', 0) for w in weapons])
        
        # 2. Manos levantadas
        hands_up_behaviors = [b for b in behaviors if b.get('type') == 'hands_up']
        if hands_up_behaviors:
            factors['hands_up']['value'] = max([b.get('confidence', 0) for b in hands_up_behaviors])
        
        # 3. Personas caídas
        fallen_behaviors = [b for b in behaviors if b.get('type') == 'fallen_person']
        if fallen_behaviors:
            factors['fallen_person']['value'] = max([b.get('confidence', 0) for b in fallen_behaviors])
        
        # 4. Personas corriendo
        running_behaviors = [b for b in behaviors if b.get('type') == 'running_person']
        if running_behaviors:
            factors['running_person']['value'] = max([b.get('confidence', 0) for b in running_behaviors])
        
        # 5. Confrontaciones
        confrontation_behaviors = [b for b in behaviors if b.get('type') == 'close_confrontation']
        if confrontation_behaviors:
            factors['confrontation']['value'] = max([b.get('confidence', 0) for b in confrontation_behaviors])
        
        # 6. Comportamientos persistentes
        persistent_behaviors = temporal_patterns.get('persistent_behaviors', [])
        if persistent_behaviors:
            factors['persistent_behaviors']['value'] = max([b.get('confidence', 0) for b in persistent_behaviors])
        
        # 7. Cambios bruscos en la escena
        if temporal_patterns.get('scene_change', False):
            factors['scene_change']['value'] = 0.7  # Valor arbitrario
        
        # Calcular probabilidad ponderada
        weighted_sum = sum(f['weight'] * f['value'] for f in factors.values())
        max_possible_weight = sum(f['weight'] for f in factors.values())
        
        # Normalizar a [0, 1]
        probability = min(1.0, weighted_sum / max_possible_weight)
        
        return probability
    
    def _generate_assault_alert(self, camera_id, frame, probability, pose_analysis, weapons, behaviors, level="info"):
        """
        Genera una alerta de asalto basada en las detecciones.
        
        Args:
            camera_id: ID de la cámara
            frame: Frame donde se detectó la situación
            probability: Probabilidad calculada de asalto
            pose_analysis: Análisis de poses
            weapons: Armas detectadas
            behaviors: Comportamientos detectados
            level: Nivel de alerta (info, warning, critical)
            
        Returns:
            dict: Información de la alerta o None si no se generó
        """
        # Controlar frecuencia de alertas (no enviar demasiadas)
        current_time = time.time()
        cooldown_key = f"{camera_id}_assault"
        
        if cooldown_key in self.alert_cooldowns:
            last_alert = self.alert_cooldowns[cooldown_key]
            # No enviar otra alerta para la misma cámara en menos de X segundos
            cooldown_time = 60  # 1 minuto para critical, ajustar según nivel
            if level == "warning":
                cooldown_time = 120  # 2 minutos
            elif level == "info":
                cooldown_time = 300  # 5 minutos
                
            if current_time - last_alert < cooldown_time:
                return None
        
        # Construir mensaje descriptivo
        message_parts = []
        
        if weapons:
            weapon_types = set(w.get('type', 'arma') for w in weapons)
            message_parts.append(f"Se ha detectado posible {', '.join(weapon_types)}")
        
        hands_up_count = len([b for b in behaviors if b.get('type') == 'hands_up'])
        if hands_up_count > 0:
            message_parts.append(f"{hands_up_count} persona(s) con manos levantadas")
        
        fallen_count = len([b for b in behaviors if b.get('type') == 'fallen_person'])
        if fallen_count > 0:
            message_parts.append(f"{fallen_count} persona(s) caída(s)")
        
        if message_parts:
            # Si hay elementos específicos, usar esos en el mensaje
            description = ". ".join(message_parts)
        else:
            # Mensaje genérico basado en probabilidad
            if probability > 0.85:
                description = "Posible asalto en progreso detectado"
            elif probability > 0.7:
                description = "Comportamiento sospechoso detectado"
            else:
                description = "Situación inusual detectada"
        
        # Generar la alerta
        alert_id = self.alert_manager.add_alert(
            alert_type="assault_detection",
            source=camera_id,
            message=description,
            severity=level,
            data={
                "probability": probability,
                "behaviors": behaviors,
                "weapons": weapons
            },
            image=frame
        )
        
        # Actualizar tiempo de última alerta
        self.alert_cooldowns[cooldown_key] = current_time
        
        return {
            "alert_id": alert_id,
            "message": description,
            "level": level,
            "camera_id": camera_id,
            "timestamp": current_time
        } 

--------------------------------------------------------------------------------

📄 src\camera_manager.py
--------------------------------------------------------------------------------
# src/camera_manager.py

import cv2
import requests
import json
import threading
import time
import socket
import subprocess
import logging
import os
from queue import Queue
from concurrent.futures import ThreadPoolExecutor
import platform

logger = logging.getLogger(__name__)

class CameraManager:
    """
    Gestor centralizado de cámaras que permite:
    - Descubrir cámaras automáticamente
    - Conectar con diferentes protocolos
    - Monitorear estado de la conexión
    - Distribuir frames a diferentes procesadores
    """
    
    def __init__(self, max_cameras=10):
        self.cameras = {}
        self.active_streams = {}
        self.frame_queues = {}
        self.max_cameras = max_cameras
        self.discovery_thread = None
        self.is_discovering = False
        
    def add_camera(self, camera_id, url, name=None, camera_type=None, credentials=None, parameters=None):
        """
        Agrega una cámara al gestor.
        
        Args:
            camera_id: Identificador único de la cámara
            url: URL de conexión (RTSP, HTTP, local device)
            name: Nombre descriptivo
            camera_type: Tipo de cámara (IP, USB, etc.)
            credentials: Diccionario con credenciales (usuario, contraseña)
            parameters: Parámetros adicionales
        """
        if len(self.cameras) >= self.max_cameras:
            logger.warning(f"Límite de cámaras alcanzado ({self.max_cameras})")
            return False
            
        # Preparar URL con credenciales si aplica
        connection_url = url
        if credentials and "://" in url:
            protocol, address = url.split("://", 1)
            if credentials.get('username') and credentials.get('password'):
                connection_url = f"{protocol}://{credentials['username']}:{credentials['password']}@{address}"
        
        self.cameras[camera_id] = {
            'id': camera_id,
            'name': name or f"Cámara {camera_id}",
            'url': url,
            'connection_url': connection_url,
            'type': camera_type or self._detect_camera_type(url),
            'credentials': credentials or {},
            'parameters': parameters or {},
            'status': 'inactive',
            'last_frame_time': None,
            'frame_count': 0,
            'fps': 0
        }
        
        return True
        
    def start_camera(self, camera_id):
        """Inicia el streaming de una cámara con manejo de errores mejorado."""
        if camera_id not in self.cameras:
            logger.error(f"Cámara {camera_id} no encontrada")
            return False
        
        if camera_id in self.active_streams:
            logger.info(f"Cámara {camera_id} ya está activa")
            return True
        
        camera = self.cameras[camera_id]
        camera['status'] = 'starting'
        
        # Implementar manejo de errores específicos de plataforma
        if platform.system() == 'Windows':
            # En Windows, intentar diferentes backends
            url = camera['connection_url']
            if isinstance(url, str) and url.isdigit():
                url = int(url)
            
            # Crear una cola para frames
            self.frame_queues[camera_id] = Queue(maxsize=30)
            
            # Iniciar thread de captura con mayor resiliencia
            thread = threading.Thread(
                target=self._windows_camera_worker,
                args=(camera_id, url),
                daemon=True
            )
            
            # Almacenar referencias
            self.active_streams[camera_id] = {
                'thread': thread,
                'active': True,
                'capture': None,  # Se manejará en el worker
                'fps': 0,
                'last_frame_time': 0
            }
            
            thread.start()
            camera['status'] = 'active'
            logger.info(f"Cámara {camera_id} iniciada (Windows)")
            return True
        else:
            # Crear cola para frames
            self.frame_queues[camera_id] = Queue(maxsize=30)
            
            # Iniciar thread de captura
            thread = threading.Thread(
                target=self._camera_stream_worker,
                args=(camera_id,),
                daemon=True
            )
            
            # Almacenar referencias
            self.active_streams[camera_id] = {
                'thread': thread,
                'active': True,
                'capture': None
            }
            
            thread.start()
            camera['status'] = 'connecting'
            
            return True
    
    def _windows_camera_worker(self, camera_id, url):
        """Worker especializado para cámaras en Windows con manejo de errores mejorado."""
        frame_queue = self.frame_queues[camera_id]
        stream_info = self.active_streams[camera_id]
        camera = self.cameras[camera_id]
        
        # Intentar abrir la cámara con diferentes backends
        capture = None
        backends = [
            {"source": url},
            {"source": url, "api": cv2.CAP_DSHOW},
            {"source": url, "api": cv2.CAP_MSMF},
            {"source": f"video={url}", "api": cv2.CAP_DSHOW}
        ]
        
        for backend in backends:
            try:
                if "api" in backend:
                    capture = cv2.VideoCapture(backend["source"], backend["api"])
                else:
                    capture = cv2.VideoCapture(backend["source"])
                    
                if capture.isOpened():
                    logger.info(f"Cámara {camera_id} abierta con éxito usando: {backend}")
                    break
                else:
                    logger.warning(f"No se pudo abrir cámara {camera_id} con: {backend}")
                    capture.release()
                    capture = None
            except Exception as e:
                logger.warning(f"Error al intentar abrir cámara {camera_id} con {backend}: {str(e)}")
                if capture:
                    capture.release()
                    capture = None
        
        if not capture or not capture.isOpened():
            logger.error(f"No se pudo conectar a cámara {camera_id} con ningún backend")
            self.cameras[camera_id]['status'] = 'error'
            stream_info['active'] = False
            return
        
        # Configurar captura para mejor rendimiento
        if isinstance(url, int):  # Solo para cámaras locales
            capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            capture.set(cv2.CAP_PROP_FPS, 30)
        
        stream_info['capture'] = capture
        self.cameras[camera_id]['status'] = 'active'
        
        # Para medir FPS
        frame_count = 0
        start_time = time.time()
        fps_update_interval = 1.0  # Actualizar FPS cada segundo
        
        # Control de reconexión
        max_failures = 5
        consecutive_failures = 0
        
        while stream_info['active']:
            try:
                ret, frame = capture.read()
                
                if not ret or frame is None:
                    consecutive_failures += 1
                    logger.warning(f"Fallo al leer frame ({consecutive_failures}/{max_failures})")
                    
                    if consecutive_failures >= max_failures:
                        logger.error(f"Demasiados fallos consecutivos, reiniciando cámara {camera_id}")
                        self.cameras[camera_id]['status'] = 'reconnecting'
                        
                        # Reiniciar captura
                        capture.release()
                        time.sleep(1)
                        
                        # Reabrir con el mismo método que funcionó antes
                        for backend in backends:
                            try:
                                if "api" in backend:
                                    capture = cv2.VideoCapture(backend["source"], backend["api"])
                                else:
                                    capture = cv2.VideoCapture(backend["source"])
                                    
                                if capture.isOpened():
                                    break
                                else:
                                    capture.release()
                            except:
                                pass
                        
                        if not capture or not capture.isOpened():
                            logger.error(f"Fallo al reconectar cámara {camera_id}")
                            self.cameras[camera_id]['status'] = 'error'
                            break
                            
                        stream_info['capture'] = capture
                        self.cameras[camera_id]['status'] = 'active'
                        consecutive_failures = 0
                        continue
                        
                    time.sleep(0.1)
                    continue
                    
                # Resetear contador de fallos cuando tenemos un frame exitoso
                consecutive_failures = 0
                
                # Actualizar contadores y estadísticas
                frame_count += 1
                current_time = time.time()
                elapsed = current_time - start_time
                
                # Actualizar FPS periódicamente
                if elapsed >= fps_update_interval:
                    fps = frame_count / elapsed
                    self.cameras[camera_id]['fps'] = fps
                    stream_info['fps'] = fps
                    self.cameras[camera_id]['frame_count'] += frame_count
                    
                    # Resetear contadores
                    frame_count = 0
                    start_time = current_time
                    
                self.cameras[camera_id]['last_frame_time'] = current_time
                
                # Añadir el frame a la grabación si está activa
                if hasattr(self, 'recorders') and camera_id in self.recorders:
                    self.add_frame_to_recording(camera_id, frame)
                
                # Poner frame en cola, descartar el más antiguo si está llena
                if frame_queue.full():
                    try:
                        frame_queue.get_nowait()
                    except:
                        pass
                    
                # Añadir nuevo frame a la cola
                try:
                    frame_queue.put_nowait({
                        'camera_id': camera_id,
                        'timestamp': current_time,
                        'frame': frame
                    })
                except:
                    pass
                
            except Exception as e:
                logger.error(f"Error en procesamiento de frame para cámara {camera_id}: {str(e)}")
                time.sleep(0.5)
            
        # Liberar recursos al terminar
        logger.info(f"Finalizando worker de cámara {camera_id}")
        if 'capture' in stream_info and stream_info['capture']:
            try:
                stream_info['capture'].release()
            except:
                pass
    
    def _camera_stream_worker(self, camera_id):
        """Worker para mantener el stream de una cámara."""
        camera = self.cameras[camera_id]
        stream_info = self.active_streams[camera_id]
        frame_queue = self.frame_queues[camera_id]
        
        # Intentar abrir la cámara
        capture = cv2.VideoCapture(camera['connection_url'])
        if not capture.isOpened():
            logger.error(f"No se pudo conectar a cámara {camera_id}: {camera['connection_url']}")
            self.cameras[camera_id]['status'] = 'error'
            stream_info['active'] = False
            return
            
        stream_info['capture'] = capture
        self.cameras[camera_id]['status'] = 'active'
        
        # Para medir FPS
        frame_count = 0
        start_time = time.time()
        
        while stream_info['active']:
            ret, frame = capture.read()
            
            if not ret:
                # Intentar reconectar
                logger.warning(f"Pérdida de conexión con cámara {camera_id}, intentando reconectar...")
                self.cameras[camera_id]['status'] = 'reconnecting'
                capture.release()
                time.sleep(2)  # Esperar antes de reconectar
                
                # Reintentar conexión
                capture = cv2.VideoCapture(camera['connection_url'])
                if not capture.isOpened():
                    logger.error(f"Fallo al reconectar cámara {camera_id}")
                    self.cameras[camera_id]['status'] = 'error'
                    break
                    
                stream_info['capture'] = capture
                self.cameras[camera_id]['status'] = 'active'
                continue
                
            # Actualizar contadores
            frame_count += 1
            current_time = time.time()
            elapsed = current_time - start_time
            
            # Actualizar FPS cada segundo
            if elapsed >= 1.0:
                self.cameras[camera_id]['fps'] = frame_count / elapsed
                self.cameras[camera_id]['frame_count'] += frame_count
                frame_count = 0
                start_time = current_time
                
            self.cameras[camera_id]['last_frame_time'] = current_time
            
            # Añadir el frame a la grabación si está activa
            if hasattr(self, 'recorders') and camera_id in self.recorders:
                self.add_frame_to_recording(camera_id, frame)
            
            # Poner frame en la cola, descartando el más antiguo si está llena
            if frame_queue.full():
                try:
                    frame_queue.get_nowait()
                except:
                    pass
                    
            try:
                frame_queue.put_nowait({
                    'camera_id': camera_id,
                    'timestamp': current_time,
                    'frame': frame
                })
            except:
                pass
        
        # Limpieza al finalizar
        if capture and capture.isOpened():
            capture.release()
            
        self.cameras[camera_id]['status'] = 'inactive'
    
    def get_frame(self, camera_id, wait=False):
        """
        Obtiene el último frame disponible de una cámara.
        
        Args:
            camera_id: ID de la cámara
            wait: Si es True, espera hasta que haya un frame disponible
            
        Returns:
            dict con el frame y metadatos, o None si no hay frames
        """
        if camera_id not in self.frame_queues:
            return None
            
        frame_queue = self.frame_queues[camera_id]
        
        if frame_queue.empty():
            if not wait:
                return None
                
        try:
            if wait:
                return frame_queue.get(timeout=2.0)
            else:
                return frame_queue.get_nowait()
        except:
            return None
    
    def stop_camera(self, camera_id):
        """Detiene el streaming de una cámara."""
        if camera_id not in self.active_streams:
            logger.warning(f"Cámara {camera_id} no está activa")
            return True
        
        # Marcar para detención
        self.active_streams[camera_id]['active'] = False
        
        # Esperar a que el thread termine
        max_wait = 5.0  # Segundos máximos a esperar
        start_time = time.time()
        
        while self.active_streams[camera_id]['thread'].is_alive():
            if time.time() - start_time > max_wait:
                logger.warning(f"Tiempo de espera agotado para detener cámara {camera_id}")
                break
            time.sleep(0.1)
        
        # Liberar recursos
        if 'capture' in self.active_streams[camera_id] and self.active_streams[camera_id]['capture']:
            self.active_streams[camera_id]['capture'].release()
        
        # Actualizar estado
        if camera_id in self.cameras:
            self.cameras[camera_id]['status'] = 'inactive'
        
        # Limpiar referencias
        if camera_id in self.frame_queues:
            # Vaciar la cola
            while not self.frame_queues[camera_id].empty():
                try:
                    self.frame_queues[camera_id].get_nowait()
                except:
                    pass
            del self.frame_queues[camera_id]
        
        del self.active_streams[camera_id]
        
        logger.info(f"Cámara {camera_id} detenida correctamente")
        return True
    
    def is_camera_active(self, camera_id):
        """Verifica si una cámara está activa."""
        return camera_id in self.active_streams and self.active_streams[camera_id]['active']
    
    def discover_cameras(self, methods=None, network_range=None):
        """
        Busca cámaras disponibles en la red o conectadas localmente.
        
        Args:
            methods: Lista de métodos de descubrimiento a usar
                     ('onvif', 'rtsp_scan', 'usb', 'ip_scan')
            network_range: Rango de red a escanear (ej: "192.168.1.0/24")
        
        Returns:
            list: Lista de cámaras descubiertas
        """
        if self.is_discovering:
            logger.warning("Ya hay un proceso de descubrimiento en curso")
            return []
            
        if not methods:
            methods = ['usb', 'onvif', 'rtsp_scan']
            
        if not network_range:
            # Intentar detectar la red local
            network_range = self._detect_local_network()
            
        self.is_discovering = True
        discovered = []
        
        # Iniciar en un thread para no bloquear
        self.discovery_thread = threading.Thread(
            target=self._discovery_worker,
            args=(methods, network_range, discovered),
            daemon=True
        )
        self.discovery_thread.start()
        
        return discovered
    
    def _discovery_worker(self, methods, network_range, results):
        """Worker para descubrimiento de cámaras."""
        logger.info(f"Iniciando descubrimiento de cámaras con métodos: {methods}")
        
        # Detectar cámaras USB
        if 'usb' in methods:
            usb_cameras = self.discover_usb_cameras()
            results.extend(usb_cameras)
            logger.info(f"Detectadas {len(usb_cameras)} cámaras USB")
            
        # Detectar cámaras ONVIF
        if 'onvif' in methods:
            try:
                onvif_cameras = self._discover_onvif_cameras(network_range)
                results.extend(onvif_cameras)
                logger.info(f"Detectadas {len(onvif_cameras)} cámaras ONVIF")
            except Exception as e:
                logger.error(f"Error en descubrimiento ONVIF: {str(e)}")
        
        # Escaneo básico de puertos RTSP
        if 'rtsp_scan' in methods and network_range:
            rtsp_cameras = self._scan_rtsp_cameras(network_range)
            results.extend(rtsp_cameras)
            logger.info(f"Detectadas {len(rtsp_cameras)} cámaras RTSP")
            
        logger.info(f"Descubrimiento finalizado. Total: {len(results)} cámaras")
        self.is_discovering = False
    
    def discover_usb_cameras(self):
        """Descubre cámaras USB conectadas al sistema (incluidas webcams integradas)."""
        discovered = []
        
        # Determinar sistema operativo para método de escaneo
        if platform.system() == 'Windows':
            # Método para Windows - probar hasta 10 índices
            for i in range(10):
                cap = cv2.VideoCapture(i, cv2.CAP_DSHOW)  # DirectShow en Windows para mejor detección
                if cap.isOpened():
                    # Obtener información de la cámara
                    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                    
                    # Intentar obtener nombre de dispositivo
                    try:
                        import win32com.client
                        wmi = win32com.client.GetObject("winmgmts:")
                        for device in wmi.InstancesOf("Win32_PnPEntity"):
                            if "camera" in device.Caption.lower() or "webcam" in device.Caption.lower():
                                name = device.Caption
                                break
                        else:
                            name = f"Cámara USB {i}"
                    except:
                        name = f"Cámara USB {i}"
                    
                    camera_info = {
                        'id': str(i),
                        'name': name,
                        'url': str(i),
                        'type': 'USB',
                        'resolution': f"{int(width)}x{int(height)}",
                        'is_integrated': i == 0  # Asumimos que índice 0 suele ser la webcam integrada
                    }
                    discovered.append(camera_info)
                    cap.release()
        
        elif platform.system() == 'Linux':
            # Método para Linux - escanear dispositivos en /dev/video*
            import glob
            devices = glob.glob('/dev/video*')
            
            for idx, device in enumerate(devices):
                try:
                    device_num = int(device.split('video')[1])
                    cap = cv2.VideoCapture(device_num)
                    if cap.isOpened():
                        # Obtener información de la cámara
                        width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                        height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                        
                        # Intentar obtener nombre de dispositivo desde udev
                        try:
                            import subprocess
                            cmd = f"udevadm info --name={device} | grep ID_MODEL="
                            result = subprocess.check_output(cmd, shell=True, text=True)
                            name = result.strip().split('=')[1].replace('_', ' ')
                        except:
                            name = f"Cámara Linux {device_num}"
                        
                        camera_info = {
                            'id': str(device_num),
                            'name': name,
                            'url': str(device_num),
                            'type': 'USB',
                            'resolution': f"{int(width)}x{int(height)}",
                            'is_integrated': 'integrated' in name.lower() or device_num == 0
                        }
                        discovered.append(camera_info)
                        cap.release()
                except Exception as e:
                    logger.warning(f"Error al comprobar dispositivo {device}: {str(e)}")
        
        else:  # macOS u otros
            # Método genérico - probar índices 0-5
            for i in range(5):
                cap = cv2.VideoCapture(i)
                if cap.isOpened():
                    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                    
                    camera_info = {
                        'id': str(i),
                        'name': f"Cámara {i}",
                        'url': str(i),
                        'type': 'USB',
                        'resolution': f"{int(width)}x{int(height)}",
                        'is_integrated': i == 0
                    }
                    discovered.append(camera_info)
                    cap.release()
        
        return discovered
    
    def _discover_onvif_cameras(self, network_range):
        """Detecta cámaras usando protocolo ONVIF."""
        # Esta implementación requiere instalar onvif-zeep-async o similar
        # Para simplificar, devolvemos una lista vacía
        return []
    
    def _scan_rtsp_cameras(self, network_range):
        """Escanea la red buscando servidores RTSP."""
        # Esta implementación requiere escaneo de puertos
        # Para simplificar, devolvemos una lista vacía
        return []
    
    def _detect_local_network(self):
        """Detecta la red local del servidor."""
        try:
            # Esta es una forma simple de obtener la IP local
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            
            # Construir rango /24 basado en la IP
            ip_parts = local_ip.split('.')
            network = f"{ip_parts[0]}.{ip_parts[1]}.{ip_parts[2]}.0/24"
            return network
        except:
            return "192.168.1.0/24"  # Red por defecto
    
    def _detect_camera_type(self, url):
        """Detecta el tipo de cámara basado en la URL."""
        if isinstance(url, int) or (isinstance(url, str) and url.isdigit()):
            return "USB"
        elif url.startswith("rtsp://"):
            return "RTSP"
        elif url.startswith("http://") or url.startswith("https://"):
            return "HTTP"
        else:
            return "Unknown"
    
    def get_status(self):
        """Devuelve el estado actual de todas las cámaras."""
        status = {
            'total_cameras': len(self.cameras),
            'active_cameras': len(self.active_streams),
            'discovering': self.is_discovering,
            'cameras': []
        }
        
        for camera_id, camera in self.cameras.items():
            camera_status = {
                'id': camera_id,
                'name': camera['name'],
                'type': camera['type'],
                'status': camera['status'],
                'fps': camera.get('fps', 0)
            }
            status['cameras'].append(camera_status)
            
        return status
    
    def start_recording(self, camera_id, output_path, fps=15, resolution=(640, 480)):
        """Inicia la grabación de video para una cámara específica"""
        try:
            if camera_id not in self.cameras:
                logger.error(f"Cámara {camera_id} no encontrada")
                return False
            
            if camera_id not in self.active_streams:
                logger.error(f"Cámara {camera_id} no está activa")
                return False
            
            # Verificar si ya hay una grabación en curso
            if hasattr(self, 'recorders') and camera_id in self.recorders:
                logger.warning(f"Ya existe una grabación para la cámara {camera_id}")
                return False
            
            # Inicializar diccionario de grabadoras si no existe
            if not hasattr(self, 'recorders'):
                self.recorders = {}
            
            # Configurar el escritor de video
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Códec MP4
            out = cv2.VideoWriter(output_path, fourcc, fps, resolution)
            
            # Guardar referencia
            self.recorders[camera_id] = {
                'writer': out,
                'start_time': time.time(),
                'frame_count': 0,
                'filepath': output_path
            }
            
            logger.info(f"Grabación iniciada para cámara {camera_id}: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"Error al iniciar grabación para cámara {camera_id}: {str(e)}")
            return False
        
    def stop_recording(self, camera_id):
        """Detiene la grabación de video para una cámara específica"""
        try:
            if not hasattr(self, 'recorders') or camera_id not in self.recorders:
                logger.warning(f"No hay grabación activa para la cámara {camera_id}")
                return False
            
            recorder = self.recorders[camera_id]
            
            # Detener el escritor de video
            recorder['writer'].release()
            
            # Calcular duración
            duration = time.time() - recorder['start_time']
            
            result = {
                'filepath': recorder['filepath'],
                'duration': duration,
                'frame_count': recorder['frame_count']
            }
            
            # Eliminar la referencia
            del self.recorders[camera_id]
            
            logger.info(f"Grabación detenida para cámara {camera_id}: {result['filepath']}")
            return result
            
        except Exception as e:
            logger.error(f"Error al detener grabación para cámara {camera_id}: {str(e)}")
            return False
        
    def add_frame_to_recording(self, camera_id, frame):
        """Añade un frame a la grabación en curso"""
        if hasattr(self, 'recorders') and camera_id in self.recorders:
            try:
                recorder = self.recorders[camera_id]
                
                # Redimensionar el frame si es necesario
                height, width = frame.shape[:2]
                writer = recorder['writer']
                writer_width = int(writer.get(cv2.CAP_PROP_FRAME_WIDTH))
                writer_height = int(writer.get(cv2.CAP_PROP_FRAME_HEIGHT))
                
                if width != writer_width or height != writer_height:
                    frame = cv2.resize(frame, (writer_width, writer_height))
                    
                # Escribir el frame
                recorder['writer'].write(frame)
                recorder['frame_count'] += 1
                return True
                
            except Exception as e:
                logger.error(f"Error al añadir frame a grabación para cámara {camera_id}: {str(e)}")
                
        return False

--------------------------------------------------------------------------------

📄 src\database.py
--------------------------------------------------------------------------------
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class Camera(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    url = db.Column(db.String(255), nullable=False)
    location = db.Column(db.String(100))
    active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Alert(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    camera_id = db.Column(db.Integer, db.ForeignKey('camera.id'), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    alert_type = db.Column(db.String(50), nullable=False)
    severity = db.Column(db.String(20), nullable=False)
    description = db.Column(db.Text)
    image_path = db.Column(db.String(255))
    resolved = db.Column(db.Boolean, default=False)
    
    camera = db.relationship('Camera', backref=db.backref('alerts', lazy=True))

class DetectionEvent(db.Model):
    __tablename__ = 'detection_events'
    
    id = db.Column(db.Integer, primary_key=True)
    camera_id = db.Column(db.Integer, db.ForeignKey('camera.id'))
    timestamp = db.Column(db.DateTime, default=datetime.now)
    event_type = db.Column(db.String(50))
    detections = db.Column(db.Text)  # JSON como texto
    image_path = db.Column(db.String(255), nullable=True)
    
    camera = db.relationship('Camera', backref=db.backref('detections', lazy=True))
    
    def __repr__(self):
        return f'<DetectionEvent {self.id}: {self.event_type} at {self.timestamp}>'

class SystemLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    level = db.Column(db.String(20), nullable=False)
    component = db.Column(db.String(50))
    message = db.Column(db.Text, nullable=False)
    stack_trace = db.Column(db.Text) 

--------------------------------------------------------------------------------

📄 src\dataset_manager.py
--------------------------------------------------------------------------------
import os
import json
import shutil
import uuid
import cv2
import numpy as np
import logging
from datetime import datetime

logger = logging.getLogger("dataset_manager")

class DatasetManager:
    """Gestor de conjuntos de datos para entrenamiento de IA."""
    
    def __init__(self, storage_path="datasets"):
        """
        Inicializa el gestor de datasets.
        
        Args:
            storage_path: Directorio base para almacenar datasets
        """
        self.storage_path = storage_path
        os.makedirs(storage_path, exist_ok=True)
        
        # Cargar datasets existentes
        self._load_datasets()
    
    def _load_datasets(self):
        """Carga información de datasets existentes."""
        for dataset_dir in os.listdir(self.storage_path):
            dataset_path = os.path.join(self.storage_path, dataset_dir)
            
            if os.path.isdir(dataset_path):
                metadata_file = os.path.join(dataset_path, 'metadata.json')
                
                if os.path.exists(metadata_file):
                    try:
                        with open(metadata_file, 'r') as f:
                            metadata = json.load(f)
                            self.datasets[dataset_dir] = metadata
                    except Exception as e:
                        logger.error(f"Error al cargar metadata del dataset {dataset_dir}: {str(e)}")
    
    def create_dataset(self, name, categories, description=""):
        """Crea un nuevo dataset con las categorías especificadas"""
        dataset_id = str(uuid.uuid4())
        dataset_path = os.path.join(self.storage_path, dataset_id)
        
        # Crear estructura de directorios
        os.makedirs(dataset_path, exist_ok=True)
        for category in categories:
            os.makedirs(os.path.join(dataset_path, category), exist_ok=True)
            
        # Crear metadatos
        metadata = {
            "id": dataset_id,
            "name": name,
            "description": description,
            "categories": categories,
            "created_at": datetime.now().isoformat(),
            "images_count": 0
        }
        
        with open(os.path.join(dataset_path, "metadata.json"), "w") as f:
            json.dump(metadata, f, indent=4)
            
        return dataset_id
    
    def add_sample(self, dataset_id, image_data, category, filename=None, metadata=None):
        """
        Añade una imagen al dataset con su categoría.
        
        Args:
            dataset_id: ID del dataset
            image_data: Datos de imagen en bytes o numpy array
            category: Categoría/clase de la imagen
            filename: Nombre de archivo (opcional)
            metadata: Metadatos adicionales (opcional)
        
        Returns:
            str: ID de la muestra añadida
        """
        # Verificar que el dataset existe
        dataset_path = os.path.join(self.storage_path, dataset_id)
        if not os.path.exists(dataset_path):
            raise ValueError(f"Dataset {dataset_id} no encontrado")
        
        # Verificar que la categoría existe
        category_path = os.path.join(dataset_path, category)
        if not os.path.exists(category_path):
            os.makedirs(category_path, exist_ok=True)
        
        # Generar ID de muestra y nombre de archivo
        sample_id = str(uuid.uuid4())
        if not filename:
            filename = f"{sample_id}.jpg"
        
        # Guardar imagen
        image_path = os.path.join(category_path, filename)
        
        if isinstance(image_data, np.ndarray):
            cv2.imwrite(image_path, image_data)
        else:
            with open(image_path, 'wb') as f:
                f.write(image_data)
        
        # Actualizar contador en metadata
        metadata_path = os.path.join(dataset_path, "metadata.json")
        try:
            with open(metadata_path, 'r') as f:
                dataset_metadata = json.load(f)
            
            dataset_metadata['images_count'] = dataset_metadata.get('images_count', 0) + 1
            dataset_metadata['updated_at'] = datetime.now().isoformat()
            
            with open(metadata_path, 'w') as f:
                json.dump(dataset_metadata, f, indent=4)
        except Exception as e:
            logger.error(f"Error al actualizar metadata: {str(e)}")
        
        return sample_id
    
    def get_datasets(self):
        """
        Obtiene la lista de todos los datasets disponibles.
        
        Returns:
            list: Lista de diccionarios con información de datasets
        """
        datasets = []
        
        for dataset_dir in os.listdir(self.storage_path):
            dataset_path = os.path.join(self.storage_path, dataset_dir)
            metadata_path = os.path.join(dataset_path, "metadata.json")
            
            if os.path.isdir(dataset_path) and os.path.exists(metadata_path):
                try:
                    with open(metadata_path, 'r') as f:
                        metadata = json.load(f)
                    datasets.append(metadata)
                except Exception as e:
                    logger.error(f"Error al leer metadata de {dataset_dir}: {str(e)}")
        
        return datasets
    
    def get_dataset(self, dataset_id):
        """
        Obtiene información detallada de un dataset específico.
        
        Args:
            dataset_id: ID del dataset
            
        Returns:
            dict: Información detallada del dataset incluyendo imágenes por categoría
        """
        dataset_path = os.path.join(self.storage_path, dataset_id)
        if not os.path.exists(dataset_path):
            raise ValueError(f"Dataset {dataset_id} no encontrado")
        
        # Cargar metadata básica
        metadata_path = os.path.join(dataset_path, "metadata.json")
        with open(metadata_path, 'r') as f:
            dataset = json.load(f)
        
        # Añadir información de imágenes por categoría
        dataset['categories_info'] = {}
        
        for category in dataset.get('categories', []):
            category_path = os.path.join(dataset_path, category)
            if os.path.exists(category_path):
                images = [f for f in os.listdir(category_path) 
                          if os.path.isfile(os.path.join(category_path, f)) and 
                          f.lower().endswith(('.png', '.jpg', '.jpeg'))]
                
                dataset['categories_info'][category] = {
                    'count': len(images),
                    'images': images
                }
        
        return dataset
        
    def delete_dataset(self, dataset_id):
        """Elimina un dataset."""
        pass
        
    def delete_sample(self, dataset_id, category, filename):
        """
        Elimina una imagen del dataset.
        
        Args:
            dataset_id: ID del dataset
            category: Categoría de la imagen
            filename: Nombre del archivo
        """
        file_path = os.path.join(self.storage_path, dataset_id, category, filename)
        
        if not os.path.exists(file_path):
            raise ValueError(f"Imagen {filename} no encontrada")
        
        # Eliminar archivo
        os.remove(file_path)
        
        # Actualizar contador en metadata
        metadata_path = os.path.join(self.storage_path, dataset_id, "metadata.json")
        try:
            with open(metadata_path, 'r') as f:
                metadata = json.load(f)
            
            metadata['images_count'] = max(0, metadata.get('images_count', 0) - 1)
            metadata['updated_at'] = datetime.now().isoformat()
            
            with open(metadata_path, 'w') as f:
                json.dump(metadata, f, indent=4)
        except Exception as e:
            logger.error(f"Error al actualizar metadata: {str(e)}")

    def export_dataset(self, dataset_id, format='yolo'):
        """
        Exporta un dataset en el formato especificado.
        
        Args:
            dataset_id: ID del dataset
            format: Formato de exportación ('yolo', 'coco', 'voc', etc.)
            
        Returns:
            str: Ruta al archivo zip generado
        """
        dataset_path = os.path.join(self.storage_path, dataset_id)
        if not os.path.exists(dataset_path):
            raise ValueError(f"Dataset {dataset_id} no encontrado")
        
        # Crear directorio temporal para la exportación
        export_dir = f"temp_export_{dataset_id}"
        os.makedirs(export_dir, exist_ok=True)
        
        # Cargar metadata
        with open(os.path.join(dataset_path, "metadata.json"), 'r') as f:
            metadata = json.load(f)
        
        # Implementar lógica según el formato
        if format == 'yolo':
            self._export_yolo_format(dataset_path, export_dir, metadata)
        elif format == 'coco':
            self._export_coco_format(dataset_path, export_dir, metadata)
        else:
            raise ValueError(f"Formato de exportación '{format}' no soportado")
        
        # Crear archivo zip
        zip_filename = f"{export_dir}.zip"
        shutil.make_archive(export_dir, 'zip', export_dir)
        
        # Limpiar directorio temporal
        shutil.rmtree(export_dir)
        
        return f"{export_dir}.zip"

    def _export_yolo_format(self, dataset_path, export_dir, metadata):
        """Exporta el dataset en formato YOLO."""
        # Crear directorios
        images_dir = os.path.join(export_dir, 'images')
        labels_dir = os.path.join(export_dir, 'labels')
        os.makedirs(images_dir, exist_ok=True)
        os.makedirs(labels_dir, exist_ok=True)
        
        # Crear archivo de clases
        classes = metadata.get('categories', [])
        with open(os.path.join(export_dir, 'classes.txt'), 'w') as f:
            f.write('\n'.join(classes))
        
        # Procesar imágenes por categoría
        for i, class_name in enumerate(classes):
            class_dir = os.path.join(dataset_path, class_name)
            if not os.path.exists(class_dir):
                continue
            
            for filename in os.listdir(class_dir):
                if not filename.lower().endswith(('.jpg', '.jpeg', '.png')):
                    continue
                    
                # Copiar imagen
                img_src = os.path.join(class_dir, filename)
                img_dest = os.path.join(images_dir, filename)
                shutil.copy2(img_src, img_dest)
                
                # Crear archivo de etiqueta
                label_name = os.path.splitext(filename)[0] + '.txt'
                with open(os.path.join(labels_dir, label_name), 'w') as f:
                    # Formato YOLO: class_id x_center y_center width height
                    # Todos los valores normalizados entre 0 y 1
                    # Asumimos que el objeto ocupa toda la imagen para simplificar
                    f.write(f"{i} 0.5 0.5 1.0 1.0\n")
        
        # Crear archivos de train/val/test
        all_images = os.listdir(images_dir)
        import random
        random.shuffle(all_images)
        
        total = len(all_images)
        train_split = int(0.8 * total)
        val_split = int(0.9 * total)
        
        train_images = all_images[:train_split]
        val_images = all_images[train_split:val_split]
        test_images = all_images[val_split:]
        
        # Escribir listas de archivos
        with open(os.path.join(export_dir, 'train.txt'), 'w') as f:
            f.write('\n'.join([os.path.join('images', img) for img in train_images]))
        
        with open(os.path.join(export_dir, 'val.txt'), 'w') as f:
            f.write('\n'.join([os.path.join('images', img) for img in val_images]))
        
        with open(os.path.join(export_dir, 'test.txt'), 'w') as f:
            f.write('\n'.join([os.path.join('images', img) for img in test_images])) 

--------------------------------------------------------------------------------

📄 src\email_connector.py
--------------------------------------------------------------------------------
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage

class EmailConnector:
    def __init__(self, smtp_server, port, username, password, sender_email):
        self.smtp_server = smtp_server
        self.port = port
        self.username = username
        self.password = password
        self.sender_email = sender_email
        
    def send_alert_email(self, recipient, subject, message, image_data=None):
        """Envía un correo de alerta, opcionalmente con imagen adjunta"""
        msg = MIMEMultipart()
        msg['From'] = self.sender_email
        msg['To'] = recipient
        msg['Subject'] = subject
        
        msg.attach(MIMEText(message, 'html'))
        
        if image_data:
            image = MIMEImage(image_data)
            image.add_header('Content-ID', '<alert_image>')
            msg.attach(image)
            
        try:
            server = smtplib.SMTP(self.smtp_server, self.port)
            server.starttls()
            server.login(self.username, self.password)
            server.send_message(msg)
            server.quit()
            return True
        except Exception as e:
            logger.error(f"Error al enviar correo: {str(e)}")
            return False 

--------------------------------------------------------------------------------

📄 src\ensemble_detection_agent.py
--------------------------------------------------------------------------------
import logging
import numpy as np
import cv2
import time
from .mcp_framework import MCPAgent
from collections import defaultdict

class EnsembleDetectionAgent(MCPAgent):
    """
    Agente que utiliza un conjunto (ensemble) de modelos de IA para mejorar 
    la precisión de detección combinando los resultados de múltiples modelos.
    """
    
    def __init__(self, object_detector, config=None):
        """
        Inicializa el agente de detección por ensemble.
        
        Args:
            object_detector: Detector de objetos principal
            config: Configuración opcional
        """
        super().__init__("ensemble_detection_agent")
        self.primary_detector = object_detector
        self.config = config or {}
        self.logger = logging.getLogger("ensemble_detection")
        
        # Cargar modelos adicionales
        self.models = []
        self._load_models()
        
        # Configurar estrategia de ensemble
        self.ensemble_strategy = self.config.get('ensemble_strategy', 'weighted_average')
        self.confidence_threshold = self.config.get('confidence_threshold', 0.5)
        self.iou_threshold = self.config.get('iou_threshold', 0.5)
        
        # Pesos para cada modelo (por defecto, todos iguales)
        model_weights = self.config.get('model_weights', {})
        self.model_weights = [model_weights.get(model.get('name'), 1.0) for model in self.models]
        
        # Normalizar pesos
        if sum(self.model_weights) > 0:
            self.model_weights = [w / sum(self.model_weights) for w in self.model_weights]
        else:
            # Si todos los pesos son 0, usar pesos iguales
            n_models = len(self.models)
            self.model_weights = [1.0 / n_models] * n_models
    
    def _load_models(self):
        """
        Carga los modelos adicionales definidos en la configuración.
        """
        models_config = self.config.get('models', [])
        
        for model_config in models_config:
            model_type = model_config.get('type')
            model_path = model_config.get('path')
            model_name = model_config.get('name', model_type)
            
            try:
                if model_type == 'yolov8':
                    from ultralytics import YOLO
                    model = YOLO(model_path)
                    self.models.append({
                        'name': model_name,
                        'model': model,
                        'type': model_type
                    })
                elif model_type == 'tensorflow':
                    import tensorflow as tf
                    model = tf.saved_model.load(model_path)
                    self.models.append({
                        'name': model_name,
                        'model': model,
                        'type': model_type
                    })
                elif model_type == 'onnx':
                    import onnxruntime as ort
                    model = ort.InferenceSession(model_path)
                    self.models.append({
                        'name': model_name,
                        'model': model,
                        'type': model_type
                    })
                else:
                    self.logger.warning(f"Tipo de modelo no soportado: {model_type}")
            except Exception as e:
                self.logger.error(f"Error al cargar modelo {model_name}: {str(e)}")
        
        self.logger.info(f"Cargados {len(self.models)} modelos adicionales para ensemble detection")
    
    def process(self, message):
        """
        Procesa un frame para realizar detección mediante ensemble.
        
        Args:
            message: Mensaje con el frame a procesar
        """
        # Solo procesar mensajes de tipo 'frame'
        if message.get('type') != 'frame':
            return
            
        camera_id = message.get('camera_id')
        frame = message.get('frame')
        timestamp = message.get('timestamp')
        
        if frame is None:
            return
            
        # Obtener detecciones de todos los modelos
        all_detections = self._get_all_detections(frame)
        
        # Aplicar estrategia de ensemble
        ensemble_detections = self._apply_ensemble_strategy(all_detections)
        
        # Crear mensaje con las detecciones combinadas
        detection_message = {
            'type': 'detection',
            'camera_id': camera_id,
            'timestamp': timestamp,
            'detections': ensemble_detections,
            'source': 'ensemble_detection'
        }
        
        # Publicar detecciones para otros agentes
        self.publish_message(detection_message)
    
    def _get_all_detections(self, frame):
        """
        Obtiene detecciones de todos los modelos disponibles.
        
        Args:
            frame: Frame a procesar
            
        Returns:
            list: Lista de detecciones por modelo
        """
        all_detections = []
        
        # Obtener detecciones del detector primario
        primary_detections = self.primary_detector.detect(frame)
        all_detections.append({
            'model': 'primary',
            'detections': primary_detections
        })
        
        # Obtener detecciones de modelos adicionales
        for i, model_info in enumerate(self.models):
            try:
                model_type = model_info.get('type')
                model = model_info.get('model')
                
                if model_type == 'yolov8':
                    # Procesar con YOLOv8
                    results = model(frame)
                    detections = self._parse_yolov8_results(results)
                elif model_type == 'tensorflow':
                    # Procesar con TensorFlow
                    detections = self._process_tensorflow_model(model, frame)
                elif model_type == 'onnx':
                    # Procesar con ONNX
                    detections = self._process_onnx_model(model, frame)
                else:
                    detections = []
                    
                all_detections.append({
                    'model': model_info.get('name'),
                    'detections': detections,
                    'weight': self.model_weights[i]
                })
                
            except Exception as e:
                self.logger.error(f"Error al procesar frame con modelo {model_info.get('name')}: {str(e)}")
                all_detections.append({
                    'model': model_info.get('name'),
                    'detections': [],
                    'weight': 0.0  # No considerar este modelo en caso de error
                })
        
        return all_detections
    
    def _apply_ensemble_strategy(self, all_detections):
        """
        Aplica la estrategia de ensemble seleccionada.
        
        Args:
            all_detections: Lista de detecciones por modelo
            
        Returns:
            list: Detecciones combinadas
        """
        if self.ensemble_strategy == 'weighted_average':
            return self._weighted_average_ensemble(all_detections)
        elif self.ensemble_strategy == 'nms':
            return self._non_maximum_suppression_ensemble(all_detections)
        elif self.ensemble_strategy == 'majority_voting':
            return self._majority_voting_ensemble(all_detections)
        else:
            # Por defecto, usar weighted_average
            return self._weighted_average_ensemble(all_detections)
    
    def _weighted_average_ensemble(self, all_detections):
        """
        Combina detecciones usando promedio ponderado de confianzas.
        
        Args:
            all_detections: Lista de detecciones por modelo
            
        Returns:
            list: Detecciones combinadas
        """
        # Agrupar detecciones por clase y ubicación similar
        grouped_detections = defaultdict(list)
        
        for model_detections in all_detections:
            model_name = model_detections.get('model')
            detections = model_detections.get('detections', [])
            weight = model_detections.get('weight', 1.0)
            
            for detection in detections:
                class_name = detection.get('class', '')
                bbox = tuple(detection.get('bbox', [0, 0, 0, 0]))
                confidence = detection.get('confidence', 0.0) * weight
                
                # Crear clave para agrupar detecciones similares
                # Usamos una versión discretizada del bbox para permitir pequeñas variaciones
                discretized_bbox = tuple(int(coord / 10) * 10 for coord in bbox)
                key = (class_name, discretized_bbox)
                
                grouped_detections[key].append({
                    'model': model_name,
                    'bbox': bbox,
                    'confidence': confidence,
                    'class': class_name
                })
        
        # Combinar detecciones agrupadas
        combined_detections = []
        
        for group_key, group_detections in grouped_detections.items():
            class_name = group_key[0]
            
            # Calcular bbox promedio
            all_bboxes = np.array([d['bbox'] for d in group_detections])
            avg_bbox = all_bboxes.mean(axis=0).tolist()
            
            # Calcular confianza combinada
            combined_confidence = sum(d['confidence'] for d in group_detections)
            
            # Solo incluir si supera el umbral
            if combined_confidence > self.confidence_threshold:
                combined_detections.append({
                    'class': class_name,
                    'bbox': avg_bbox,
                    'confidence': combined_confidence,
                    'models': [d['model'] for d in group_detections]
                })
        
        return combined_detections
    
    def _non_maximum_suppression_ensemble(self, all_detections):
        """
        Combina detecciones usando NMS en todas las detecciones.
        
        Args:
            all_detections: Lista de detecciones por modelo
            
        Returns:
            list: Detecciones combinadas
        """
        # Combinar todas las detecciones en una sola lista
        flat_detections = []
        
        for model_detections in all_detections:
            model_name = model_detections.get('model')
            detections = model_detections.get('detections', [])
            weight = model_detections.get('weight', 1.0)
            
            for detection in detections:
                flat_detections.append({
                    'model': model_name,
                    'bbox': detection.get('bbox', [0, 0, 0, 0]),
                    'confidence': detection.get('confidence', 0.0) * weight,
                    'class': detection.get('class', '')
                })
        
        # Agrupar por clase
        detections_by_class = defaultdict(list)
        for detection in flat_detections:
            detections_by_class[detection['class']].append(detection)
        
        # Aplicar NMS por clase
        nms_detections = []
        
        for class_name, class_detections in detections_by_class.items():
            # Convertir a formato para NMS
            boxes = np.array([d['bbox'] for d in class_detections])
            scores = np.array([d['confidence'] for d in class_detections])
            
            # Aplicar NMS
            indices = self._apply_nms(boxes, scores, self.iou_threshold)
            
            # Recopilar detecciones después de NMS
            for i in indices:
                if class_detections[i]['confidence'] > self.confidence_threshold:
                    nms_detections.append({
                        'class': class_name,
                        'bbox': class_detections[i]['bbox'],
                        'confidence': class_detections[i]['confidence'],
                        'model': class_detections[i]['model']
                    })
        
        return nms_detections
    
    def _majority_voting_ensemble(self, all_detections):
        """
        Combina detecciones usando votación mayoritaria.
        
        Args:
            all_detections: Lista de detecciones por modelo
            
        Returns:
            list: Detecciones combinadas
        """
        # Agrupar detecciones por región similar
        regions = defaultdict(lambda: defaultdict(int))
        region_detections = defaultdict(list)
        
        # Discretizar espacio en celdas
        cell_size = 20  # Tamaño de celda para discretización
        
        for model_detections in all_detections:
            model_name = model_detections.get('model')
            detections = model_detections.get('detections', [])
            
            for detection in detections:
                class_name = detection.get('class', '')
                bbox = detection.get('bbox', [0, 0, 0, 0])
                confidence = detection.get('confidence', 0.0)
                
                # Discretizar bbox a celdas
                cell_x = int(bbox[0] / cell_size)
                cell_y = int(bbox[1] / cell_size)
                cell_key = (cell_x, cell_y)
                
                # Incrementar voto para esta clase en esta celda
                regions[cell_key][class_name] += 1
                
                # Guardar la detección para esta celda y clase
                region_detections[(cell_key, class_name)].append({
                    'model': model_name,
                    'bbox': bbox,
                    'confidence': confidence
                })
        
        # Seleccionar clase con más votos por celda
        majority_detections = []
        
        for cell_key, class_votes in regions.items():
            # Encontrar clase con más votos
            max_votes = 0
            majority_class = None
            
            for class_name, votes in class_votes.items():
                if votes > max_votes:
                    max_votes = votes
                    majority_class = class_name
            
            # Si hay suficientes votos (al menos 2), considerar esta detección
            if max_votes >= 2 and majority_class:
                # Obtener todas las detecciones para esta celda y clase
                cell_class_detections = region_detections[(cell_key, majority_class)]
                
                # Calcular bbox y confianza promedio
                avg_bbox = np.mean([d['bbox'] for d in cell_class_detections], axis=0).tolist()
                avg_confidence = np.mean([d['confidence'] for d in cell_class_detections])
                
                if avg_confidence > self.confidence_threshold:
                    majority_detections.append({
                        'class': majority_class,
                        'bbox': avg_bbox,
                        'confidence': avg_confidence,
                        'votes': max_votes
                    })
        
        return majority_detections
    
    def _apply_nms(self, boxes, scores, iou_threshold):
        """
        Aplica Non-Maximum Suppression a las cajas.
        
        Args:
            boxes: Array de bounding boxes [x, y, w, h]
            scores: Array de confianzas
            iou_threshold: Umbral de IoU para considerar cajas duplicadas
            
        Returns:
            list: Índices de las cajas a mantener
        """
        # Convertir formato [x, y, w, h] a [x1, y1, x2, y2]
        x1 = boxes[:, 0]
        y1 = boxes[:, 1]
        x2 = boxes[:, 0] + boxes[:, 2]
        y2 = boxes[:, 1] + boxes[:, 3]
        
        # Calcular áreas
        areas = (x2 - x1) * (y2 - y1)
        
        # Ordenar por score
        order = scores.argsort()[::-1]
        
        keep = []
        while order.size > 0:
            i = order[0]
            keep.append(i)
            
            # Calcular IoU con resto de cajas
            xx1 = np.maximum(x1[i], x1[order[1:]])
            yy1 = np.maximum(y1[i], y1[order[1:]])
            xx2 = np.minimum(x2[i], x2[order[1:]])
            yy2 = np.minimum(y2[i], y2[order[1:]])
            
            w = np.maximum(0.0, xx2 - xx1)
            h = np.maximum(0.0, yy2 - yy1)
            inter = w * h
            
            iou = inter / (areas[i] + areas[order[1:]] - inter)
            
            # Mantener solo cajas con IoU menor al umbral
            inds = np.where(iou <= iou_threshold)[0]
            order = order[inds + 1]
        
        return keep
    
    def _parse_yolov8_results(self, results):
        """
        Parsea resultados de YOLOv8 al formato estándar.
        
        Args:
            results: Resultados de la inferencia de YOLOv8
            
        Returns:
            list: Detecciones en formato estándar
        """
        detections = []
        
        for r in results:
            boxes = r.boxes
            for box in boxes:
                # Extraer clase
                cls = int(box.cls[0].item())
                class_name = r.names[cls]
                
                # Extraer coordenadas
                x1, y1, x2, y2 = box.xyxy[0].tolist()
                
                # Convertir a [x, y, w, h]
                x, y = x1, y1
                w, h = x2 - x1, y2 - y1
                
                # Extraer confianza
                conf = box.conf[0].item()
                
                detections.append({
                    'class': class_name,
                    'bbox': [x, y, w, h],
                    'confidence': conf
                })
        
        return detections
    
    def _process_tensorflow_model(self, model, frame):
        """
        Procesa el frame con un modelo TensorFlow.
        
        Args:
            model: Modelo TensorFlow cargado
            frame: Frame a procesar
            
        Returns:
            list: Detecciones en formato estándar
        """
        # La implementación dependerá del modelo específico
        # Aquí solo un esqueleto básico
        try:
            # Preprocesar imagen
            input_tensor = self._preprocess_for_tensorflow(frame)
            
            # Inferencia
            detections = model(input_tensor)
            
            # Convertir al formato estándar
            # (Esto dependerá del formato de salida del modelo específico)
            # ...
            
            return []  # Placeholder
            
        except Exception as e:
            self.logger.error(f"Error en inferencia TensorFlow: {str(e)}")
            return []
    
    def _process_onnx_model(self, session, frame):
        """
        Procesa el frame con un modelo ONNX.
        
        Args:
            session: Sesión ONNX cargada
            frame: Frame a procesar
            
        Returns:
            list: Detecciones en formato estándar
        """
        # La implementación dependerá del modelo específico
        # Aquí solo un esqueleto básico
        try:
            # Preprocesar imagen
            input_name = session.get_inputs()[0].name
            input_shape = session.get_inputs()[0].shape
            
            # Adaptar frame al tamaño esperado
            resized_frame = cv2.resize(frame, (input_shape[2], input_shape[3]))
            input_data = resized_frame.transpose(2, 0, 1)  # HWC -> CHW
            input_data = input_data.reshape(input_shape)
            
            # Inferencia
            outputs = session.run(None, {input_name: input_data})
            
            # Convertir al formato estándar
            # (Esto dependerá del formato de salida del modelo específico)
            # ...
            
            return []  # Placeholder
            
        except Exception as e:
            self.logger.error(f"Error en inferencia ONNX: {str(e)}")
            return []
    
    def _preprocess_for_tensorflow(self, frame):
        """
        Preprocesa el frame para un modelo TensorFlow.
        
        Args:
            frame: Frame a procesar
            
        Returns:
            tensor: Tensor de entrada para el modelo
        """
        import tensorflow as tf
        
        # Convertir a RGB si es necesario
        if frame.shape[2] == 3:
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        else:
            rgb_frame = frame
        
        # Redimensionar a 640x640 (tamaño común para modelos de detección)
        resized_frame = cv2.resize(rgb_frame, (640, 640))
        
        # Normalizar
        normalized_frame = resized_frame / 255.0
        
        # Expandir dimensiones para el batch
        input_tensor = tf.expand_dims(normalized_frame, 0)
        
        return input_tensor 

--------------------------------------------------------------------------------

📄 src\external_ai.py
--------------------------------------------------------------------------------
import os
import time
import json
import requests
import logging
import base64
from io import BytesIO
from src.mcp_framework import MCPAgent

# Importaciones opcionales
try:
    from anthropic import Anthropic
    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False
    
try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False

logger = logging.getLogger("external_ai")

class ExternalAIConnector:
    """Conector para servicios de IA externos."""
    
    def __init__(self, api_keys=None):
        """
        Inicializa el conector de IA externa.
        
        Args:
            api_keys: Diccionario con claves API para diferentes servicios
        """
        self.api_keys = api_keys or {}
        self.clients = {}
        
        # Inicializar cliente de Claude si está disponible
        if ANTHROPIC_AVAILABLE and 'anthropic' in self.api_keys:
            try:
                self.clients["claude"] = Anthropic(api_key=self.api_keys['anthropic'])
                logger.info("Cliente Claude inicializado")
            except Exception as e:
                logger.error(f"Error al inicializar cliente Claude: {str(e)}")
        
        # Inicializar cliente de Gemini si está disponible
        if GEMINI_AVAILABLE and 'google' in self.api_keys:
            try:
                genai.configure(api_key=self.api_keys['google'])
                self.clients["gemini"] = genai
                logger.info("Cliente Gemini inicializado")
            except Exception as e:
                logger.error(f"Error al inicializar cliente Gemini: {str(e)}")
    
    def analyze_with_claude(self, prompt, image_data=None):
        """
        Analiza texto o imagen con Claude.
        
        Args:
            prompt: Texto para enviar a Claude
            image_data: Datos de imagen en bytes (opcional)
            
        Returns:
            dict: Respuesta de Claude
        """
        if "claude" not in self.clients:
            logger.error("Cliente Claude no inicializado. Verificar API key.")
            return {"error": "Cliente no inicializado"}
        
        try:
            if image_data:
                # Convertir imagen a base64
                base64_image = base64.b64encode(image_data).decode("utf-8")
                
                # Crear mensaje con imagen
                response = self.clients["claude"].messages.create(
                    model="claude-3-sonnet-20240229",
                    max_tokens=1000,
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "image",
                                    "source": {
                                        "type": "base64",
                                        "media_type": "image/jpeg",
                                        "data": base64_image
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": prompt
                                }
                            ]
                        }
                    ]
                )
            else:
                # Mensaje solo de texto
                response = self.clients["claude"].messages.create(
                    model="claude-3-sonnet-20240229",
                    max_tokens=1000,
                    messages=[
                        {"role": "user", "content": prompt}
                    ]
                )
            
            return {
                "text": response.content[0].text,
                "model": response.model,
                "id": response.id
            }
            
        except Exception as e:
            logger.error(f"Error en solicitud a Claude: {str(e)}")
            return {"error": str(e)}
    
    def analyze_with_gemini(self, prompt, image_data=None):
        """
        Analiza texto o imagen con Gemini.
        
        Args:
            prompt: Texto para enviar a Gemini
            image_data: Datos de imagen en bytes (opcional)
            
        Returns:
            dict: Respuesta de Gemini
        """
        if "gemini" not in self.clients:
            logger.error("Cliente Gemini no inicializado. Verificar API key.")
            return {"error": "Cliente no inicializado"}
        
        try:
            if image_data:
                # Crear modelo para analizar imágenes
                model = self.clients["gemini"].GenerativeModel('gemini-pro-vision')
                
                # Preparar imagen
                img = {"mime_type": "image/jpeg", "data": image_data}
                
                # Generar respuesta
                response = model.generate_content([prompt, img])
                
            else:
                # Modelo solo para texto
                model = self.clients["gemini"].GenerativeModel('gemini-pro')
                response = model.generate_content(prompt)
            
            return {
                "text": response.text,
                "model": "gemini-pro" if not image_data else "gemini-pro-vision"
            }
            
        except Exception as e:
            logger.error(f"Error en solicitud a Gemini: {str(e)}")
            return {"error": str(e)}

--------------------------------------------------------------------------------

📄 src\external_ai_agent.py
--------------------------------------------------------------------------------
import time
import logging
import uuid
import cv2
import threading
from src.mcp_framework import MCPAgent
from src.external_ai import ExternalAIConnector

logger = logging.getLogger("external_ai_agent")

class SituationAnalysisAgent(MCPAgent):
    """Agente para analizar situaciones complejas usando IA externa."""
    
    def __init__(self, agent_id, name, api_keys=None, service="claude", 
                 analysis_interval=30, confidence_threshold=0.7):
        """
        Inicializa el agente de análisis de situaciones.
        
        Args:
            agent_id: ID único del agente
            name: Nombre descriptivo del agente
            api_keys: Claves API para servicios externos
            service: Servicio a utilizar (claude, gemini)
            analysis_interval: Intervalo mínimo entre análisis (segundos)
            confidence_threshold: Umbral de confianza para alertas
        """
        super().__init__(agent_id, name, interested_types=["detection", "command"])
        
        self.service = service
        self.ai_connector = ExternalAIConnector(api_keys)
        self.analysis_interval = analysis_interval
        self.confidence_threshold = confidence_threshold
        self.enabled = True
        
        # Control de frecuencia de análisis
        self.last_analysis_time = {}  # Por cámara
        
        # Configuraciones específicas por tipo de análisis
        self.analysis_configs = {
            "robbery": {
                "prompt": (
                    "Analiza esta imagen y determina si muestra un posible robo o asalto. "
                    "Busca personas con armas, personas con las manos arriba, personas en el suelo, "
                    "o cualquier otra señal de una situación de asalto. "
                    "Responde con formato JSON que incluya: "
                    "{ 'is_robbery': true/false, 'confidence': 0-1, 'description': 'descripción detallada', "
                    "'evidence': ['pistola visible', 'personas con manos arriba', etc.] }"
                ),
                "classes_of_interest": ["persona", "coche", "camión"]
            },
            "accident": {
                "prompt": (
                    "Analiza esta imagen y determina si muestra un posible accidente. "
                    "Busca personas caídas, vehículos colisionados, fuego, humo, u otras señales de emergencia. "
                    "Responde con formato JSON que incluya: "
                    "{ 'is_accident': true/false, 'confidence': 0-1, 'description': 'descripción detallada', "
                    "'evidence': ['vehículo volcado', 'persona en el suelo', etc.] }"
                ),
                "classes_of_interest": ["persona", "coche", "camión", "motocicleta"]
            }
        }
        
        # Registro de análisis realizados
        self.analysis_history = []
        
        logger.info(f"Agente de análisis de situaciones {agent_id} inicializado con servicio {service}")
    
    def on_message(self, message):
        """Procesa mensajes recibidos."""
        if not self.enabled:
            return
            
        if message.type == "detection":
            self._process_detection(message.data)
        elif message.type == "command":
            self._process_command(message.data)
    
    def _process_detection(self, data):
        """
        Procesa detecciones para análisis de situaciones.
        
        Args:
            data: Diccionario con detecciones y metadatos
        """
        camera_id = data.get("camera_id")
        detections = data.get("detections", [])
        frame = data.get("frame")
        
        if not camera_id or not detections or frame is None:
            return
        
        # Verificar si debemos analizar esta cámara (control de frecuencia)
        current_time = time.time()
        last_time = self.last_analysis_time.get(camera_id, 0)
        
        if current_time - last_time < self.analysis_interval:
            return  # Muy pronto para otro análisis
        
        # Verificar si hay detecciones de interés para análisis
        should_analyze = False
        
        # Comprobar si hay suficientes personas u objetos de interés
        person_count = sum(1 for d in detections if d.get("class") == "persona")
        
        # Trigger análisis si hay varias personas (posible situación de interés)
        if person_count >= 2:
            should_analyze = True
        
        if should_analyze:
            # Actualizar tiempo de último análisis
            self.last_analysis_time[camera_id] = current_time
            
            # Iniciar análisis en hilo separado para no bloquear
            analysis_thread = threading.Thread(
                target=self._analyze_situation,
                args=(frame, camera_id, detections)
            )
            analysis_thread.daemon = True
            analysis_thread.start()
    
    def _analyze_situation(self, frame, camera_id, detections):
        """
        Analiza una situación en la imagen usando IA externa.
        
        Args:
            frame: Frame a analizar
            camera_id: ID de la cámara
            detections: Detecciones en el frame
        """
        try:
            # Convertir frame a bytes JPEG
            _, buffer = cv2.imencode('.jpg', frame)
            image_data = buffer.tobytes()
            
            # Preparar información para cada tipo de análisis
            for analysis_type, config in self.analysis_configs.items():
                # Enviar a la IA externa
                result = self._send_to_external_ai(
                    config["prompt"], 
                    image_data
                )
                
                if result and "error" not in result:
                    try:
                        # Extraer resultado (asumiendo formato JSON en la respuesta)
                        import json
                        response_text = result.get("text", "")
                        
                        # Extraer el JSON de la respuesta (puede estar dentro de texto markdown)
                        json_start = response_text.find('{')
                        json_end = response_text.rfind('}') + 1
                        
                        if json_start >= 0 and json_end > json_start:
                            json_str = response_text[json_start:json_end]
                            analysis_result = json.loads(json_str)
                            
                            # Determinar si hay una situación de interés
                            is_situation = False
                            confidence = 0.0
                            
                            if analysis_type == "robbery":
                                is_situation = analysis_result.get("is_robbery", False)
                                confidence = analysis_result.get("confidence", 0.0)
                            elif analysis_type == "accident":
                                is_situation = analysis_result.get("is_accident", False)
                                confidence = analysis_result.get("confidence", 0.0)
                            
                            # Registrar análisis
                            analysis_record = {
                                "timestamp": time.time(),
                                "camera_id": camera_id,
                                "analysis_type": analysis_type,
                                "result": analysis_result,
                                "service": self.service,
                                "response": response_text
                            }
                            
                            self.analysis_history.append(analysis_record)
                            
                            # Generar alerta si se detecta situación con confianza suficiente
                            if is_situation and confidence >= self.confidence_threshold:
                                description = analysis_result.get("description", "Situación detectada")
                                evidence = analysis_result.get("evidence", [])
                                
                                self.broadcast_message("alert", {
                                    "type": f"ai_{analysis_type}",
                                    "camera_id": camera_id,
                                    "timestamp": time.time(),
                                    "message": f"Posible {analysis_type} detectado: {description}",
                                    "confidence": confidence,
                                    "evidence": evidence,
                                    "severity": "critical" if confidence > 0.8 else "warning",
                                    "analysis": analysis_result
                                })
                                
                                logger.info(f"Alerta generada para {analysis_type} en cámara {camera_id} "
                                            f"con confianza {confidence}")
                        
                    except Exception as e:
                        logger.error(f"Error al procesar respuesta de IA: {str(e)}")
                
        except Exception as e:
            logger.error(f"Error al analizar situación: {str(e)}")
    
    def _send_to_external_ai(self, prompt, image_data):
        """
        Envía datos a la IA externa seleccionada.
        
        Args:
            prompt: Texto del prompt
            image_data: Datos de la imagen
            
        Returns:
            dict: Respuesta de la IA
        """
        if self.service == "claude":
            return self.ai_connector.analyze_with_claude(prompt, image_data)
        elif self.service == "gemini":
            return self.ai_connector.analyze_with_gemini(prompt, image_data)
        else:
            logger.error(f"Servicio de IA no soportado: {self.service}")
            return {"error": f"Servicio no soportado: {self.service}"}
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente de análisis {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente de análisis {self.agent_id} deshabilitado")
        elif command == "set_service":
            self.service = data.get("value", self.service)
            logger.info(f"Servicio actualizado a {self.service}")
        elif command == "set_threshold":
            self.confidence_threshold = data.get("value", self.confidence_threshold)
            logger.info(f"Umbral actualizado a {self.confidence_threshold}")
        elif command == "set_interval":
            self.analysis_interval = data.get("value", self.analysis_interval)
            logger.info(f"Intervalo actualizado a {self.analysis_interval}") 

--------------------------------------------------------------------------------

📄 src\face_recognition.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import os
import time
import logging
import pickle
from threading import Lock

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("face_recognition")

class FaceRecognizer:
    """Clase para reconocimiento facial."""
    
    def __init__(self, model_path=None, known_faces_dir='data/known_faces'):
        """
        Inicializa el reconocedor facial.
        
        Args:
            model_path: Ruta al modelo de detección facial (opcional)
            known_faces_dir: Directorio con rostros conocidos
        """
        self.known_faces_dir = known_faces_dir
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        self.known_faces = {}
        self.face_encodings = {}
        self.lock = Lock()
        self.recognition_count = 0
        self.last_recognition_time = 0
        self.use_simulation = False
        
        # Crear directorio si no existe
        os.makedirs(known_faces_dir, exist_ok=True)
        
        # Intentar inicializar el reconocedor facial
        try:
            # Intentar diferentes métodos para diferentes versiones de OpenCV
            if hasattr(cv2, 'face') and hasattr(cv2.face, 'LBPHFaceRecognizer_create'):
                self.recognizer = cv2.face.LBPHFaceRecognizer_create()
                logger.info("Reconocedor LBPH inicializado correctamente")
            elif hasattr(cv2, 'face') and hasattr(cv2.face, 'createLBPHFaceRecognizer'):
                # API antigua
                self.recognizer = cv2.face.createLBPHFaceRecognizer()
                logger.info("Reconocedor LBPH (API antigua) inicializado correctamente")
            else:
                raise AttributeError("No se encontró reconocedor facial en OpenCV")
        except (AttributeError, ImportError) as e:
            logger.warning(f"No se pudo inicializar el reconocedor facial: {str(e)}")
            logger.warning("Usando modo de simulación para reconocimiento facial")
            self.recognizer = self._create_mock_recognizer()
            self.use_simulation = True
        
        # Cargar rostros conocidos
        self._load_known_faces()
    
    def _create_mock_recognizer(self):
        """Crea un reconocedor simulado cuando OpenCV no tiene el módulo face."""
        # Crear un objeto simulado con las mismas funciones pero simuladas
        class MockRecognizer:
            def read(self, filepath):
                logger.info(f"Simulando lectura de modelo desde {filepath}")
                return True
                
            def write(self, filepath):
                logger.info(f"Simulando escritura de modelo en {filepath}")
                return True
                
            def train(self, faces, labels):
                logger.info(f"Simulando entrenamiento con {len(faces)} rostros")
                return True
                
            def predict(self, face):
                # Devolver un ID aleatorio entre 1 y 5 con confianza aleatoria
                import random
                person_id = random.randint(1, 5)
                confidence = random.uniform(50, 95)
                return person_id, 100 - confidence  # Invertir para mantener consistencia
        
        return MockRecognizer()
    
    def _load_known_faces(self):
        """Carga los rostros conocidos desde el directorio."""
        try:
            # Buscar archivo de modelo entrenado
            model_file = os.path.join(self.known_faces_dir, 'trained_model.yml')
            encodings_file = os.path.join(self.known_faces_dir, 'encodings.pkl')
            
            if os.path.exists(model_file) and not self.use_simulation:
                self.recognizer.read(model_file)
                logger.info(f"Modelo de reconocimiento facial cargado desde {model_file}")
            else:
                logger.warning("No se encontró un modelo entrenado. Utilice add_face para entrenar.")
            
            # Cargar codificaciones
            if os.path.exists(encodings_file):
                with open(encodings_file, 'rb') as f:
                    self.face_encodings = pickle.load(f)
                logger.info(f"Encodings faciales cargados: {len(self.face_encodings)} personas")
            
            # Cargar nombres de personas
            persons_file = os.path.join(self.known_faces_dir, 'persons.pkl')
            if os.path.exists(persons_file):
                with open(persons_file, 'rb') as f:
                    self.known_faces = pickle.load(f)
                logger.info(f"Personas cargadas: {len(self.known_faces)}")
            
            # Si estamos en modo simulación, crear algunas personas de ejemplo
            if self.use_simulation and not self.known_faces:
                self.known_faces = {
                    1: "Juan Pérez",
                    2: "María García",
                    3: "Carlos López",
                    4: "Ana Martínez",
                    5: "Desconocido"
                }
                logger.info("Creadas personas de ejemplo para modo simulación")
        
        except Exception as e:
            logger.error(f"Error al cargar rostros conocidos: {str(e)}")
    
    def detect_faces(self, frame):
        """
        Detecta rostros en un frame.
        
        Args:
            frame: Imagen (numpy array)
            
        Returns:
            list: Lista de rostros detectados (x, y, w, h)
        """
        with self.lock:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(
                gray, 
                scaleFactor=1.1, 
                minNeighbors=5,
                minSize=(30, 30)
            )
            return faces
    
    def recognize_face(self, frame, face_location):
        """
        Reconoce un rostro detectado.
        
        Args:
            frame: Imagen (numpy array)
            face_location: Ubicación del rostro (x, y, w, h)
            
        Returns:
            tuple: (person_id, confidence)
        """
        with self.lock:
            if len(self.known_faces) == 0:
                return None, 0.0
            
            x, y, w, h = face_location
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            face_roi = gray[y:y+h, x:x+w]
            
            # Normalizar tamaño para el reconocedor
            face_roi = cv2.resize(face_roi, (100, 100))
            
            try:
                person_id, confidence = self.recognizer.predict(face_roi)
                self.recognition_count += 1
                self.last_recognition_time = time.time()
                
                # Convertir confianza (menor es mejor) a un porcentaje más intuitivo
                confidence = 100 - min(confidence, 100)
                
                return person_id, confidence
            except Exception as e:
                logger.error(f"Error en reconocimiento facial: {str(e)}")
                return None, 0.0
    
    def add_face(self, frame, face_location, person_name):
        """
        Agrega un rostro a la base de datos de rostros conocidos.
        
        Args:
            frame: Imagen (numpy array)
            face_location: Ubicación del rostro (x, y, w, h)
            person_name: Nombre de la persona
            
        Returns:
            bool: True si se agregó correctamente
        """
        with self.lock:
            try:
                # Extraer ROI del rostro
                x, y, w, h = face_location
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                face_roi = gray[y:y+h, x:x+w]
                face_roi = cv2.resize(face_roi, (100, 100))
                
                # Verificar si la persona ya existe
                person_id = None
                for pid, name in self.known_faces.items():
                    if name == person_name:
                        person_id = pid
                        break
                
                # Si no existe, crear nuevo ID
                if person_id is None:
                    person_id = len(self.known_faces) + 1
                    self.known_faces[person_id] = person_name
                
                # Guardar imagen de rostro
                person_dir = os.path.join(self.known_faces_dir, f"person_{person_id}")
                os.makedirs(person_dir, exist_ok=True)
                
                # Encontrar el siguiente número de archivo
                face_count = len(os.listdir(person_dir))
                face_file = os.path.join(person_dir, f"face_{face_count+1}.jpg")
                
                # Guardar imagen
                cv2.imwrite(face_file, face_roi)
                
                # Reentrenar modelo
                self._train_model()
                
                return True
            
            except Exception as e:
                logger.error(f"Error al agregar rostro: {str(e)}")
                return False
    
    def _train_model(self):
        """Entrena el modelo con los rostros conocidos."""
        try:
            faces = []
            labels = []
            
            # Recorrer todas las carpetas de personas
            for person_id, name in self.known_faces.items():
                person_dir = os.path.join(self.known_faces_dir, f"person_{person_id}")
                
                if not os.path.exists(person_dir):
                    continue
                
                # Cargar todas las imágenes de rostros
                for face_file in os.listdir(person_dir):
                    if face_file.endswith(".jpg"):
                        face_path = os.path.join(person_dir, face_file)
                        face_img = cv2.imread(face_path, cv2.IMREAD_GRAYSCALE)
                        
                        if face_img is not None:
                            faces.append(face_img)
                            labels.append(person_id)
            
            if len(faces) == 0:
                logger.warning("No hay rostros para entrenar el modelo")
                return False
            
            # Entrenar reconocedor
            self.recognizer.train(faces, np.array(labels))
            
            # Guardar modelo
            model_file = os.path.join(self.known_faces_dir, 'trained_model.yml')
            self.recognizer.write(model_file)
            
            # Guardar información de personas
            persons_file = os.path.join(self.known_faces_dir, 'persons.pkl')
            with open(persons_file, 'wb') as f:
                pickle.dump(self.known_faces, f)
                
            logger.info(f"Modelo entrenado con {len(faces)} rostros de {len(self.known_faces)} personas")
            return True
            
        except Exception as e:
            logger.error(f"Error al entrenar modelo: {str(e)}")
            return False
    
    def get_person_name(self, person_id):
        """Obtiene el nombre de una persona por su ID."""
        return self.known_faces.get(person_id, "Desconocido")
    
    def draw_face_recognition(self, frame, face_location, person_id, confidence):
        """
        Dibuja rectángulo de reconocimiento facial y nombre en el frame.
        
        Args:
            frame: Imagen (numpy array)
            face_location: Ubicación del rostro (x, y, w, h)
            person_id: ID de la persona
            confidence: Confianza del reconocimiento
            
        Returns:
            numpy.ndarray: Frame con el reconocimiento dibujado
        """
        x, y, w, h = face_location
        person_name = self.get_person_name(person_id)
        
        # Dibujar rectángulo
        color = (0, 255, 0) if confidence > 70 else (0, 165, 255)
        cv2.rectangle(frame, (x, y), (x+w, y+h), color, 2)
        
        # Dibujar nombre y confianza
        label = f"{person_name}: {confidence:.1f}%"
        y_pos = y - 15 if y - 15 > 15 else y + h + 15
        cv2.putText(frame, label, (x, y_pos), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        
        return frame
    
    def process_frame(self, frame):
        """
        Procesa un frame completo para detección y reconocimiento facial.
        
        Args:
            frame: Imagen (numpy array)
            
        Returns:
            tuple: (frame_procesado, lista_de_resultados)
        """
        results = []
        processed_frame = frame.copy()
        
        # Detectar rostros
        faces = self.detect_faces(frame)
        
        # Reconocer cada rostro
        for face_location in faces:
            person_id, confidence = self.recognize_face(frame, face_location)
            
            # Dibujar resultado
            if person_id is not None:
                processed_frame = self.draw_face_recognition(
                    processed_frame, face_location, person_id, confidence)
                
                # Agregar resultado
                results.append({
                    'person_id': person_id,
                    'person_name': self.get_person_name(person_id),
                    'confidence': confidence,
                    'location': face_location
                })
        
        return processed_frame, results
    
    def get_stats(self):
        """Obtiene estadísticas del reconocedor facial."""
        return {
            'known_faces_count': len(self.known_faces),
            'recognition_count': self.recognition_count,
            'last_recognition_time': self.last_recognition_time
        } 

--------------------------------------------------------------------------------

📄 src\forensic_analysis.py
--------------------------------------------------------------------------------
import logging
import cv2
import numpy as np
import os
import json
import time
from datetime import datetime, timedelta
import pandas as pd
from collections import defaultdict
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from PIL import Image, ImageDraw, ImageFont
import io
import hashlib
import sqlite3
import threading
import queue
import shutil
from .mcp_framework import MCPAgent
from src.database import db, DetectionEvent, Camera, Alert

class ForensicAnalysisManager:
    """
    Gestiona el análisis forense avanzado de incidentes capturados por el sistema.
    Permite realizar búsquedas, filtrados y análisis temporal de eventos.
    """
    
    def __init__(self, database_path=None, video_storage_path=None, config=None):
        """
        Inicializa el gestor de análisis forense.
        
        Args:
            database_path: Ruta al directorio de la base de datos de eventos
            video_storage_path: Ruta al directorio de almacenamiento de videos
            config: Configuración adicional
        """
        self.logger = logging.getLogger("forensic_analysis")
        self.config = config or {}
        
        # Configurar rutas
        self.database_path = database_path or os.path.join('data', 'forensic')
        self.video_storage_path = video_storage_path or os.path.join('data', 'videos')
        self.evidence_path = os.path.join(self.database_path, 'evidence')
        
        # Crear directorios si no existen
        for path in [self.database_path, self.video_storage_path, self.evidence_path]:
            if not os.path.exists(path):
                os.makedirs(path)
        
        # Inicializar base de datos
        self.db_file = os.path.join(self.database_path, 'forensic.db')
        self._init_database()
        
        # Cola de procesamiento de videos
        self.processing_queue = queue.Queue()
        self.processing_thread = threading.Thread(target=self._process_queue, daemon=True)
        self.processing_thread.start()
        
        self.logger.info("Gestor de análisis forense inicializado")
    
    def _init_database(self):
        """Inicializa la base de datos SQLite para almacenar datos forenses."""
        try:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()
            
            # Tabla de incidentes
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS incidents (
                id TEXT PRIMARY KEY,
                timestamp TEXT,
                incident_type TEXT,
                severity TEXT,
                camera_id TEXT,
                description TEXT,
                location TEXT,
                tags TEXT,
                status TEXT DEFAULT 'open',
                analyst TEXT,
                notes TEXT,
                created_at TEXT,
                updated_at TEXT
            )
            ''')
            
            # Tabla de evidencias
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS evidence (
                id TEXT PRIMARY KEY,
                incident_id TEXT,
                evidence_type TEXT,
                file_path TEXT,
                timestamp TEXT,
                description TEXT,
                hash TEXT,
                metadata TEXT,
                created_at TEXT,
                FOREIGN KEY (incident_id) REFERENCES incidents(id)
            )
            ''')
            
            # Tabla de timeline
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS timeline (
                id TEXT PRIMARY KEY,
                incident_id TEXT,
                timestamp TEXT,
                event_type TEXT,
                description TEXT,
                details TEXT,
                created_at TEXT,
                FOREIGN KEY (incident_id) REFERENCES incidents(id)
            )
            ''')
            
            # Índices para mejorar rendimiento
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_incidents_timestamp ON incidents(timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_incidents_camera ON incidents(camera_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_incidents_type ON incidents(incident_type)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_evidence_incident ON evidence(incident_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_timeline_incident ON timeline(incident_id)')
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            self.logger.error(f"Error al inicializar la base de datos forense: {str(e)}")
            raise
    
    def register_incident(self, incident_data):
        """
        Registra un nuevo incidente para análisis forense.
        
        Args:
            incident_data: Diccionario con los datos del incidente
            
        Returns:
            str: ID del incidente registrado
        """
        try:
            incident_id = incident_data.get('id', f"inc_{int(time.time())}_{hashlib.md5(str(time.time()).encode()).hexdigest()[:8]}")
            timestamp = incident_data.get('timestamp', datetime.now().isoformat())
            
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()
            
            cursor.execute('''
            INSERT INTO incidents (
                id, timestamp, incident_type, severity, camera_id, 
                description, location, tags, status, analyst,
                notes, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                incident_id,
                timestamp,
                incident_data.get('incident_type', 'unknown'),
                incident_data.get('severity', 'medium'),
                incident_data.get('camera_id', ''),
                incident_data.get('description', ''),
                incident_data.get('location', ''),
                json.dumps(incident_data.get('tags', [])),
                incident_data.get('status', 'open'),
                incident_data.get('analyst', ''),
                incident_data.get('notes', ''),
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
            
            self.logger.info(f"Incidente registrado: {incident_id}")
            return incident_id
            
        except Exception as e:
            self.logger.error(f"Error al registrar incidente: {str(e)}")
            return None
    
    def add_evidence(self, incident_id, evidence_data, file_data=None):
        """
        Agrega evidencia a un incidente.
        
        Args:
            incident_id: ID del incidente
            evidence_data: Datos de la evidencia
            file_data: Datos del archivo (bytes) si es aplicable
            
        Returns:
            str: ID de la evidencia
        """
        try:
            evidence_id = evidence_data.get('id', f"evd_{int(time.time())}_{hashlib.md5(str(time.time()).encode()).hexdigest()[:8]}")
            timestamp = evidence_data.get('timestamp', datetime.now().isoformat())
            
            # Si hay archivo de evidencia, guardarlo
            file_path = None
            file_hash = None
            
            if file_data:
                evidence_type = evidence_data.get('evidence_type', 'unknown')
                extension = '.jpg' if evidence_type == 'image' else '.mp4' if evidence_type == 'video' else '.dat'
                
                file_path = os.path.join(self.evidence_path, f"{evidence_id}{extension}")
                
                # Guardar archivo
                with open(file_path, 'wb') as f:
                    f.write(file_data)
                
                # Calcular hash para verificación de integridad
                file_hash = hashlib.sha256(file_data).hexdigest()
            
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()
            
            cursor.execute('''
            INSERT INTO evidence (
                id, incident_id, evidence_type, file_path, timestamp,
                description, hash, metadata, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                evidence_id,
                incident_id,
                evidence_data.get('evidence_type', 'unknown'),
                file_path,
                timestamp,
                evidence_data.get('description', ''),
                file_hash,
                json.dumps(evidence_data.get('metadata', {})),
                datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
            
            self.logger.info(f"Evidencia {evidence_id} agregada al incidente {incident_id}")
            return evidence_id
            
        except Exception as e:
            self.logger.error(f"Error al agregar evidencia: {str(e)}")
            return None
    
    def add_timeline_event(self, incident_id, event_data):
        """
        Agrega un evento a la línea de tiempo de un incidente.
        
        Args:
            incident_id: ID del incidente
            event_data: Datos del evento
            
        Returns:
            str: ID del evento
        """
        try:
            event_id = event_data.get('id', f"evt_{int(time.time())}_{hashlib.md5(str(time.time()).encode()).hexdigest()[:8]}")
            timestamp = event_data.get('timestamp', datetime.now().isoformat())
            
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()
            
            cursor.execute('''
            INSERT INTO timeline (
                id, incident_id, timestamp, event_type, 
                description, details, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                event_id,
                incident_id,
                timestamp,
                event_data.get('event_type', 'unknown'),
                event_data.get('description', ''),
                json.dumps(event_data.get('details', {})),
                datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
            
            self.logger.info(f"Evento {event_id} agregado a la línea de tiempo del incidente {incident_id}")
            return event_id
            
        except Exception as e:
            self.logger.error(f"Error al agregar evento a la línea de tiempo: {str(e)}")
            return None
    
    def search_incidents(self, filters=None, sort_by='timestamp', sort_order='desc', page=1, page_size=20):
        """
        Busca incidentes según los filtros especificados.
        
        Args:
            filters: Diccionario con filtros de búsqueda
            sort_by: Campo para ordenar resultados
            sort_order: Orden de resultados ('asc' o 'desc')
            page: Número de página para paginación
            page_size: Tamaño de página
            
        Returns:
            dict: Resultados de la búsqueda y metadata
        """
        try:
            filters = filters or {}
            
            # Construir consulta SQL
            query = "SELECT * FROM incidents WHERE 1=1"
            params = []
            
            # Aplicar filtros
            if 'incident_type' in filters:
                query += " AND incident_type = ?"
                params.append(filters['incident_type'])
            
            if 'severity' in filters:
                query += " AND severity = ?"
                params.append(filters['severity'])
            
            if 'camera_id' in filters:
                query += " AND camera_id = ?"
                params.append(filters['camera_id'])
            
            if 'status' in filters:
                query += " AND status = ?"
                params.append(filters['status'])
            
            if 'start_date' in filters:
                query += " AND timestamp >= ?"
                params.append(filters['start_date'])
            
            if 'end_date' in filters:
                query += " AND timestamp <= ?"
                params.append(filters['end_date'])
            
            if 'search_text' in filters:
                search_text = f"%{filters['search_text']}%"
                query += " AND (description LIKE ? OR notes LIKE ?)"
                params.extend([search_text, search_text])
            
            # Consulta para contar total de resultados
            count_query = query.replace("SELECT *", "SELECT COUNT(*)")
            
            # Aplicar ordenamiento y paginación
            query += f" ORDER BY {sort_by} {sort_order}"
            query += f" LIMIT {page_size} OFFSET {(page - 1) * page_size}"
            
            conn = sqlite3.connect(self.db_file)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # Obtener conteo total
            cursor.execute(count_query, params)
            total_count = cursor.fetchone()[0]
            
            # Obtener resultados paginados
            cursor.execute(query, params)
            rows = cursor.fetchall()
            
            # Convertir a lista de diccionarios
            results = []
            for row in rows:
                incident = dict(row)
                
                # Convertir campos JSON
                if 'tags' in incident and incident['tags']:
                    incident['tags'] = json.loads(incident['tags'])
                else:
                    incident['tags'] = []
                
                results.append(incident)
            
            conn.close()
            
            # Metadata para paginación
            metadata = {
                'total': total_count,
                'page': page,
                'page_size': page_size,
                'pages': (total_count + page_size - 1) // page_size
            }
            
            return {
                'results': results,
                'metadata': metadata
            }
            
        except Exception as e:
            self.logger.error(f"Error en búsqueda de incidentes: {str(e)}")
            return {'results': [], 'metadata': {'total': 0, 'page': 1, 'page_size': page_size, 'pages': 0}}
    
    def get_incident_details(self, incident_id):
        """
        Obtiene detalles completos de un incidente, incluyendo evidencias y línea de tiempo.
        
        Args:
            incident_id: ID del incidente
            
        Returns:
            dict: Detalles completos del incidente
        """
        try:
            conn = sqlite3.connect(self.db_file)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # Obtener datos del incidente
            cursor.execute("SELECT * FROM incidents WHERE id = ?", (incident_id,))
            incident_row = cursor.fetchone()
            
            if not incident_row:
                conn.close()
                return None
                
            incident = dict(incident_row)
            
            # Convertir campos JSON
            if 'tags' in incident and incident['tags']:
                incident['tags'] = json.loads(incident['tags'])
            else:
                incident['tags'] = []
            
            # Obtener evidencias
            cursor.execute("SELECT * FROM evidence WHERE incident_id = ? ORDER BY timestamp", (incident_id,))
            evidence_rows = cursor.fetchall()
            
            evidences = []
            for row in evidence_rows:
                evidence = dict(row)
                
                # Convertir campos JSON
                if 'metadata' in evidence and evidence['metadata']:
                    evidence['metadata'] = json.loads(evidence['metadata'])
                else:
                    evidence['metadata'] = {}
                
                evidences.append(evidence)
            
            # Obtener línea de tiempo
            cursor.execute("SELECT * FROM timeline WHERE incident_id = ? ORDER BY timestamp", (incident_id,))
            timeline_rows = cursor.fetchall()
            
            timeline = []
            for row in timeline_rows:
                event = dict(row)
                
                # Convertir campos JSON
                if 'details' in event and event['details']:
                    event['details'] = json.loads(event['details'])
                else:
                    event['details'] = {}
                
                timeline.append(event)
            
            conn.close()
            
            # Construir resultado completo
            result = {
                'incident': incident,
                'evidence': evidences,
                'timeline': timeline
            }
            
            return result
            
        except Exception as e:
            self.logger.error(f"Error al obtener detalles del incidente {incident_id}: {str(e)}")
            return None
    
    def update_incident(self, incident_id, update_data):
        """
        Actualiza datos de un incidente.
        
        Args:
            incident_id: ID del incidente
            update_data: Datos a actualizar
            
        Returns:
            bool: True si la actualización fue exitosa
        """
        try:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()
            
            # Verificar si existe el incidente
            cursor.execute("SELECT id FROM incidents WHERE id = ?", (incident_id,))
            if not cursor.fetchone():
                conn.close()
                return False
            
            # Datos a actualizar
            update_fields = []
            update_values = []
            
            # Campos actualizables
            updatable_fields = [
                'incident_type', 'severity', 'description', 'location', 
                'tags', 'status', 'analyst', 'notes'
            ]
            
            for field in updatable_fields:
                if field in update_data:
                    update_fields.append(f"{field} = ?")
                    
                    # Convertir listas a JSON
                    if field == 'tags' and isinstance(update_data[field], list):
                        update_values.append(json.dumps(update_data[field]))
                    else:
                        update_values.append(update_data[field])
            
            # Siempre actualizar updated_at
            update_fields.append("updated_at = ?")
            update_values.append(datetime.now().isoformat())
            
            # Ejecutar actualización
            if update_fields:
                query = f"UPDATE incidents SET {', '.join(update_fields)} WHERE id = ?"
                update_values.append(incident_id)
                
                cursor.execute(query, update_values)
                conn.commit()
            
            conn.close()
            
            self.logger.info(f"Incidente {incident_id} actualizado")
            return True
            
        except Exception as e:
            self.logger.error(f"Error al actualizar incidente {incident_id}: {str(e)}")
            return False
    
    def generate_incident_report(self, incident_id, format='pdf'):
        """
        Genera un reporte del incidente en el formato especificado.
        
        Args:
            incident_id: ID del incidente
            format: Formato del reporte ('pdf', 'html', 'json')
            
        Returns:
            bytes: Contenido del reporte
        """
        # Obtener detalles del incidente
        incident_data = self.get_incident_details(incident_id)
        
        if not incident_data:
            self.logger.error(f"No se encontró el incidente {incident_id}")
            return None
            
        # La implementación depende del formato solicitado
        # Esta es una versión simplificada que retorna JSON
        return json.dumps(incident_data, indent=2).encode('utf-8')
    
    def extract_video_segment(self, video_path, start_time, end_time, output_path=None):
        """
        Extrae un segmento de video.
        
        Args:
            video_path: Ruta al video original
            start_time: Tiempo de inicio (segundos)
            end_time: Tiempo de fin (segundos)
            output_path: Ruta para guardar el segmento
            
        Returns:
            str: Ruta al segmento extraído
        """
        try:
            if not os.path.exists(video_path):
                self.logger.error(f"Video no encontrado: {video_path}")
                return None
                
            # Generar nombre de archivo de salida
            if not output_path:
                filename = os.path.basename(video_path)
                name, ext = os.path.splitext(filename)
                output_path = os.path.join(self.evidence_path, f"{name}_segment_{int(start_time)}-{int(end_time)}{ext}")
            
            # Abrir video
            cap = cv2.VideoCapture(video_path)
            
            # Obtener propiedades del video
            fps = cap.get(cv2.CAP_PROP_FPS)
            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            
            # Calcular frames de inicio y fin
            start_frame = int(start_time * fps)
            end_frame = int(end_time * fps)
            
            # Definir codec
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
            
            # Posicionar en el frame de inicio
            cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)
            
            # Leer y escribir los frames del segmento
            for _ in range(start_frame, end_frame):
                ret, frame = cap.read()
                if not ret:
                    break
                out.write(frame)
            
            # Cerrar
            cap.release()
            out.release()
            
            self.logger.info(f"Segmento de video extraído: {output_path}")
            return output_path
            
        except Exception as e:
            self.logger.error(f"Error al extraer segmento de video: {str(e)}")
            return None
    
    def analyze_behavior_pattern(self, camera_id, time_range, behavior_type=None):
        """
        Analiza patrones de comportamiento para una cámara en un rango de tiempo.
        
        Args:
            camera_id: ID de la cámara
            time_range: Rango de tiempo (dict con start y end)
            behavior_type: Tipo de comportamiento a analizar
            
        Returns:
            dict: Resultados del análisis
        """
        try:
            conn = sqlite3.connect(self.db_file)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            query = """
            SELECT i.*, t.timestamp as event_timestamp, t.event_type, t.description as event_description
            FROM incidents i
            JOIN timeline t ON i.id = t.incident_id
            WHERE i.camera_id = ? AND t.timestamp BETWEEN ? AND ?
            """
            
            params = [camera_id, time_range['start'], time_range['end']]
            
            if behavior_type:
                query += " AND (i.incident_type = ? OR t.event_type = ?)"
                params.extend([behavior_type, behavior_type])
                
            cursor.execute(query, params)
            rows = cursor.fetchall()
            
            events = [dict(row) for row in rows]
            conn.close()
            
            # Análisis de patrones (simplificado)
            time_distribution = self._analyze_time_distribution(events)
            location_hotspots = self._analyze_location_distribution(events)
            
            return {
                'events_count': len(events),
                'time_distribution': time_distribution,
                'location_hotspots': location_hotspots,
                'patterns': self._detect_patterns(events)
            }
            
        except Exception as e:
            self.logger.error(f"Error en análisis de patrones de comportamiento: {str(e)}")
            return None
    
    def _analyze_time_distribution(self, events):
        """
        Analiza la distribución temporal de eventos.
        
        Args:
            events: Lista de eventos
            
        Returns:
            dict: Distribución temporal
        """
        # Simplificado: conteo por hora del día
        hour_distribution = defaultdict(int)
        
        for event in events:
            if 'event_timestamp' in event and event['event_timestamp']:
                try:
                    dt = datetime.fromisoformat(event['event_timestamp'].replace('Z', '+00:00'))
                    hour_distribution[dt.hour] += 1
                except (ValueError, TypeError):
                    continue
        
        return dict(hour_distribution)
    
    def _analyze_location_distribution(self, events):
        """
        Analiza la distribución espacial de eventos.
        
        Args:
            events: Lista de eventos
            
        Returns:
            dict: Distribución espacial
        """
        # Simplificado: conteo por ubicación
        location_distribution = defaultdict(int)
        
        for event in events:
            if 'location' in event and event['location']:
                location_distribution[event['location']] += 1
        
        return dict(location_distribution)
    
    def _detect_patterns(self, events):
        """
        Detecta patrones en los eventos.
        
        Args:
            events: Lista de eventos
            
        Returns:
            list: Patrones detectados
        """
        # Simplificado: implementación básica
        patterns = []
        
        # Ejemplo: detectar eventos recurrentes
        event_types = defaultdict(int)
        for event in events:
            if 'event_type' in event and event['event_type']:
                event_types[event['event_type']] += 1
        
        # Identificar los más frecuentes
        for event_type, count in event_types.items():
            if count >= 3:  # Umbral arbitrario
                patterns.append({
                    'type': 'recurring_event',
                    'event_type': event_type,
                    'occurrences': count,
                    'confidence': min(count / 10, 0.95)  # Confianza basada en ocurrencias
                })
        
        return patterns
    
    def _process_queue(self):
        """Procesa la cola de tareas en segundo plano."""
        while True:
            try:
                # Obtener tarea de la cola
                task = self.processing_queue.get()
                
                # Procesar según tipo
                if task['type'] == 'extract_video':
                    self.extract_video_segment(
                        task['video_path'], 
                        task['start_time'], 
                        task['end_time'],
                        task.get('output_path')
                    )
                # Se pueden agregar más tipos de tareas
                
                # Marcar tarea como completada
                self.processing_queue.task_done()
                
            except Exception as e:
                self.logger.error(f"Error en procesamiento de tarea en cola: {str(e)}")
            
            # Pequeña pausa para no consumir demasiados recursos
            time.sleep(0.1)
    
    def queue_task(self, task):
        """
        Encola una tarea para procesamiento asíncrono.
        
        Args:
            task: Diccionario con datos de la tarea
            
        Returns:
            bool: True si se encoló correctamente
        """
        try:
            self.processing_queue.put(task)
            return True
        except Exception as e:
            self.logger.error(f"Error al encolar tarea: {str(e)}")
            return False
    
    def get_recent_incidents(self):
        """Obtiene incidentes recientes para análisis forense"""
        # Implementación básica
        return []  # Lista vacía por defecto
    
    def get_available_tools(self):
        """Obtiene herramientas disponibles para análisis forense"""
        # Implementación básica
        return ["Análisis de Video", "Reconocimiento Facial", "Detección de Manipulación"]

    def search_events(self, filters=None, limit=50, offset=0):
        """
        Realiza una búsqueda de eventos según filtros especificados.
        
        Args:
            filters: Diccionario con criterios de búsqueda
            limit: Número máximo de resultados
            offset: Desplazamiento para paginación
            
        Returns:
            list: Lista de eventos que coinciden con los filtros
        """
        try:
            # Crear consulta base
            query = DetectionEvent.query
            
            # Filtros predeterminados si no se especifican
            filters = filters or {}
            
            # Aplicar filtros
            if 'start_date' in filters and filters['start_date']:
                try:
                    start_date = datetime.fromisoformat(filters['start_date'])
                    query = query.filter(DetectionEvent.timestamp >= start_date)
                except Exception as e:
                    self.logger.warning(f"Fecha de inicio inválida: {filters['start_date']} - {str(e)}")
                    
            if 'end_date' in filters and filters['end_date']:
                try:
                    end_date = datetime.fromisoformat(filters['end_date'])
                    query = query.filter(DetectionEvent.timestamp <= end_date)
                except Exception as e:
                    self.logger.warning(f"Fecha de fin inválida: {filters['end_date']} - {str(e)}")
                    
            if 'camera_id' in filters and filters['camera_id']:
                query = query.filter(DetectionEvent.camera_id == filters['camera_id'])
                
            if 'event_type' in filters and filters['event_type']:
                query = query.filter(DetectionEvent.event_type == filters['event_type'])
                
            if 'object_type' in filters and filters['object_type']:
                # Para este filtro necesitamos usar una condición especial para JSON
                # Esta implementación puede variar según la base de datos
                query = query.filter(DetectionEvent.detections.like(f'%"{filters["object_type"]}"%'))
                
            if 'min_confidence' in filters and filters['min_confidence']:
                try:
                    min_conf = float(filters['min_confidence']) / 100.0  # Convertir de porcentaje a decimal
                    # Este filtro también puede requerir una implementación específica
                    # Simplificamos usando LIKE, pero no es ideal para la producción
                    query = query.filter(DetectionEvent.detections.like(f'%"confidence":{min_conf}%'))
                except Exception as e:
                    self.logger.warning(f"Confianza mínima inválida: {filters['min_confidence']} - {str(e)}")
                    
            # Ordenar por fecha/hora (más recientes primero)
            query = query.order_by(DetectionEvent.timestamp.desc())
            
            # Aplicar límite y offset
            query = query.limit(limit).offset(offset)
            
            # Ejecutar consulta
            events = query.all()
            
            # Formatear resultados
            results = []
            for event in events:
                # Obtener datos de cámara
                camera = Camera.query.get(event.camera_id) if event.camera_id else None
                camera_name = camera.name if camera else "Cámara desconocida"
                
                # Preparar detecciones
                detections = event.detections
                if isinstance(detections, str):
                    try:
                        detections = json.loads(detections)
                    except:
                        detections = []
                
                # Obtener alertas relacionadas (simplificado)
                related_alerts = []
                
                # Formatear evento
                event_data = {
                    'id': event.id,
                    'timestamp': event.timestamp.isoformat() if hasattr(event.timestamp, 'isoformat') else str(event.timestamp),
                    'camera_id': event.camera_id,
                    'camera_name': camera_name,
                    'event_type': event.event_type,
                    'detections': detections,
                    'image_path': event.image_path if hasattr(event, 'image_path') else None,
                    'related_alerts': related_alerts
                }
                
                results.append(event_data)
                
            return results
            
        except Exception as e:
            self.logger.error(f"Error en búsqueda de eventos: {str(e)}")
            return []


class ForensicAnalysisAgent(MCPAgent):
    """
    Agente especializado en análisis forense de eventos de seguridad.
    Se encarga de recopilar, analizar y preservar evidencias digitales.
    """
    
    def __init__(self, forensic_manager, alert_manager, config=None):
        """
        Inicializa el agente de análisis forense.
        
        Args:
            forensic_manager: Gestor de análisis forense
            alert_manager: Gestor de alertas
            config: Configuración opcional
        """
        # Corregir la inicialización del agente
        agent_id = "forensic_analysis_agent"
        super().__init__(agent_id=agent_id, name="Agente de Análisis Forense")
        
        self.forensic_manager = forensic_manager
        self.alert_manager = alert_manager
        self.config = config or {}
        self.logger = logging.getLogger("forensic_analysis")
        
        # Configuración de sensibilidad para la clasificación de incidentes
        self.severity_thresholds = self.config.get('severity_thresholds', {
            'critical': 80,  # Puntuación >= 80 es crítico
            'warning': 50,   # Puntuación >= 50 es advertencia
            'info': 0        # Puntuación < 50 es información
        })
        
        # Histórico de evidencias analizadas
        self.analysis_history = []
        
        # Estado del agente
        self._active = True
        
        self.logger.info("Agente de análisis forense inicializado")
    
    def process(self, message):
        """
        Procesa mensajes para análisis forense.
        
        Args:
            message: Mensaje a procesar
        """
        message_type = message.get('type')
        
        # Actualizar buffer de contexto
        camera_id = message.get('camera_id')
        if camera_id and message_type == 'detection':
            self._update_context_buffer(camera_id, message)
        
        # Registro automático de incidentes
        if message_type == 'alert':
            severity = message.get('severity', 'info')
            severity_levels = {'info': 0, 'warning': 1, 'critical': 2}
            
            if severity_levels.get(severity, 0) >= severity_levels.get(self.auto_register_severity, 0):
                self._register_incident_from_alert(message)
    
    def _update_context_buffer(self, camera_id, message):
        """
        Actualiza el buffer de contexto para una cámara.
        
        Args:
            camera_id: ID de la cámara
            message: Mensaje con detecciones
        """
        if camera_id not in self.context_buffer:
            self.context_buffer[camera_id] = []
        
        # Añadir al buffer
        self.context_buffer[camera_id].append({
            'timestamp': message.get('timestamp', time.time()),
            'detections': message.get('detections', []),
            'frame_id': message.get('frame_id')
        })
        
        # Limitar tamaño del buffer
        if len(self.context_buffer[camera_id]) > self.buffer_size:
            self.context_buffer[camera_id].pop(0)
    
    def _register_incident_from_alert(self, alert):
        """
        Registra un incidente a partir de una alerta.
        
        Args:
            alert: Datos de la alerta
            
        Returns:
            str: ID del incidente o None
        """
        try:
            alert_id = alert.get('alert_id')
            camera_id = alert.get('camera_id')
            
            # Obtener detalles completos de la alerta
            alert_details = self.alert_manager.get_alert(alert_id)
            
            if not alert_details:
                self.logger.warning(f"No se encontró la alerta {alert_id} para registro forense")
                return None
            
            # Preparar datos del incidente
            incident_data = {
                'incident_type': alert.get('type', 'alert'),
                'severity': alert.get('severity', 'medium'),
                'camera_id': camera_id,
                'description': alert.get('message', ''),
                'location': alert_details.get('location', ''),
                'tags': ['auto-registered'],
                'notes': f"Incidente registrado automáticamente desde alerta {alert_id}"
            }
            
            # Registrar incidente
            incident_id = self.forensic_manager.register_incident(incident_data)
            
            if incident_id:
                # Agregar imagen de evidencia si está disponible
                if 'image' in alert_details:
                    image_data = alert_details['image']
                    
                    # Añadir evidencia
                    evidence_data = {
                        'evidence_type': 'image',
                        'description': f"Captura de pantalla del momento de la alerta {alert_id}",
                        'timestamp': alert.get('timestamp', datetime.now().isoformat()),
                        'metadata': {
                            'alert_id': alert_id,
                            'camera_id': camera_id
                        }
                    }
                    
                    self.forensic_manager.add_evidence(incident_id, evidence_data, image_data)
                
                # Añadir entrada en línea de tiempo
                timeline_data = {
                    'event_type': 'alert_triggered',
                    'description': f"Alerta generada: {alert.get('message', '')}",
                    'timestamp': alert.get('timestamp', datetime.now().isoformat()),
                    'details': {
                        'alert_id': alert_id,
                        'alert_data': alert_details
                    }
                }
                
                self.forensic_manager.add_timeline_event(incident_id, timeline_data)
                
                # Añadir contexto previo si está disponible
                if camera_id in self.context_buffer:
                    context_data = {
                        'event_type': 'context',
                        'description': f"Contexto previo al incidente ({len(self.context_buffer[camera_id])} frames)",
                        'timestamp': datetime.now().isoformat(),
                        'details': {
                            'context_frames': len(self.context_buffer[camera_id]),
                            'timespan': f"{self.context_buffer[camera_id][0]['timestamp']} - {self.context_buffer[camera_id][-1]['timestamp']}"
                        }
                    }
                    
                    self.forensic_manager.add_timeline_event(incident_id, context_data)
            
            return incident_id
            
        except Exception as e:
            self.logger.error(f"Error al registrar incidente desde alerta: {str(e)}")
            return None 

--------------------------------------------------------------------------------

📄 src\generative_description_agent.py
--------------------------------------------------------------------------------
import logging
import time
import json
import requests
import os
from datetime import datetime
from .mcp_framework import MCPAgent

class GenerativeDescriptionAgent(MCPAgent):
    """
    Agente que utiliza IA generativa para crear descripciones en lenguaje natural
    de las situaciones detectadas por el sistema.
    """
    
    def __init__(self, alert_manager, config=None):
        """
        Inicializa el agente de descripción generativa.
        
        Args:
            alert_manager: Gestor de alertas del sistema
            config: Configuración opcional del agente
        """
        super().__init__("generative_description_agent")
        self.alert_manager = alert_manager
        self.config = config or {}
        self.logger = logging.getLogger("generative_description")
        
        # Cargar configuración
        self.api_key = self.config.get('openai_api_key', os.environ.get('OPENAI_API_KEY'))
        self.api_endpoint = self.config.get('api_endpoint', 'https://api.openai.com/v1/chat/completions')
        self.model = self.config.get('model', 'gpt-3.5-turbo')
        self.max_tokens = self.config.get('max_tokens', 150)
        self.temperature = self.config.get('temperature', 0.7)
        
        # Nivel mínimo de severidad para generar descripciones
        self.min_severity_level = self.config.get('min_severity_level', 'warning')
        
        # Último procesamiento para evitar duplicados
        self.last_processed = {}
        
        # Verificar configuración
        if not self.api_key:
            self.logger.warning("No se ha configurado API key para IA generativa. Funcionando en modo limitado.")
            self._enabled = False
        else:
            self._enabled = True
    
    def process(self, message):
        """
        Procesa eventos de alertas para generar descripciones.
        
        Args:
            message: Mensaje a procesar
        """
        if not self._enabled:
            return
            
        # Solo procesar mensajes de alerta
        if message.get('type') != 'alert':
            return
            
        alert_id = message.get('alert_id')
        alert_data = message.get('data', {})
        severity = message.get('severity', 'info')
        
        # Verificar si debemos procesar esta alerta basado en severidad
        severity_levels = {'info': 0, 'warning': 1, 'critical': 2}
        if severity_levels.get(severity, 0) < severity_levels.get(self.min_severity_level, 0):
            return
            
        # Evitar procesar la misma alerta múltiples veces
        if alert_id in self.last_processed and time.time() - self.last_processed[alert_id] < 60:
            return
            
        self.last_processed[alert_id] = time.time()
        
        # Generar descripción detallada
        description = self.generate_description(alert_data, severity, message.get('message', ''))
        
        if description:
            # Actualizar la alerta con la descripción generada
            self.alert_manager.update_alert(
                alert_id=alert_id,
                additional_data={'generated_description': description}
            )
            
            self.logger.info(f"Descripción generada para alerta {alert_id}: {description[:50]}...")
    
    def generate_description(self, alert_data, severity, base_message):
        """
        Genera una descripción detallada usando IA generativa.
        
        Args:
            alert_data: Datos de la alerta
            severity: Nivel de severidad de la alerta
            base_message: Mensaje base de la alerta
            
        Returns:
            str: Descripción generada
        """
        try:
            # Crear contexto para la generación
            context = {
                "base_message": base_message,
                "severity": severity,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "details": alert_data
            }
            
            # Preparar prompt para el modelo
            prompt = self._prepare_prompt(context)
            
            # Llamar a la API de IA generativa
            response = self._call_ai_api(prompt)
            
            if response:
                return response
                
            return None
            
        except Exception as e:
            self.logger.error(f"Error al generar descripción: {str(e)}")
            return None
    
    def _prepare_prompt(self, context):
        """
        Prepara el prompt para el modelo de IA generativa.
        
        Args:
            context: Contexto para la generación
            
        Returns:
            list: Mensajes formateados para la API
        """
        # Formatear los detalles en texto legible
        details_text = ""
        for key, value in context.get('details', {}).items():
            if isinstance(value, dict):
                details_text += f"{key.replace('_', ' ').title()}:\n"
                for sub_key, sub_value in value.items():
                    details_text += f"  - {sub_key.replace('_', ' ').title()}: {sub_value}\n"
            else:
                details_text += f"{key.replace('_', ' ').title()}: {value}\n"
        
        # Crear sistema prompt
        system_prompt = (
            "Eres un analista de seguridad experto que describe situaciones de vigilancia "
            "de manera clara y concisa. Genera descripciones detalladas pero objetivas "
            "basadas en los datos de detección y alertas. No exageres ni minimices la situación."
        )
        
        # Crear user prompt
        user_prompt = (
            f"Describe la siguiente situación de seguridad detectada:\n\n"
            f"Alerta: {context['base_message']}\n"
            f"Severidad: {context['severity']}\n"
            f"Hora: {context['timestamp']}\n\n"
            f"Detalles técnicos:\n{details_text}\n\n"
            f"Proporciona una descripción clara y completa de lo que está sucediendo, "
            f"posibles riesgos, y si es necesaria alguna acción inmediata. "
            f"Sé conciso pero informativo (máximo 3 párrafos)."
        )
        
        return [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
    
    def _call_ai_api(self, messages):
        """
        Llama a la API de IA generativa.
        
        Args:
            messages: Lista de mensajes para la API
            
        Returns:
            str: Texto generado o None si hay error
        """
        if not self._enabled or not self.api_key:
            # Modo de respaldo si no hay API configurada
            return f"Situación detectada que requiere atención. Revisar los detalles técnicos para más información."
            
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }
            
            payload = {
                "model": self.model,
                "messages": messages,
                "max_tokens": self.max_tokens,
                "temperature": self.temperature
            }
            
            response = requests.post(
                self.api_endpoint,
                headers=headers,
                data=json.dumps(payload),
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('choices', [{}])[0].get('message', {}).get('content', '').strip()
            else:
                self.logger.error(f"Error en la API: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            self.logger.error(f"Error al llamar a la API de IA: {str(e)}")
            return None 

--------------------------------------------------------------------------------

📄 src\geo_manager.py
--------------------------------------------------------------------------------
import logging
import json
import os
import uuid
import time
import math
import threading
from src.mcp_framework import MCPAgent

logger = logging.getLogger("geo_manager")

class GeoManager:
    """Gestor de información geográfica y mapas."""
    
    def __init__(self, config_dir='config/geo'):
        """
        Inicializa el gestor geográfico.
        
        Args:
            config_dir: Directorio donde se guardan las configuraciones geográficas
        """
        self.config_dir = config_dir
        self.locations = {}
        self.routes = {}
        self.geo_fences = {}
        
        # Crear directorio si no existe
        if not os.path.exists(config_dir):
            os.makedirs(config_dir)
            
        # Cargar datos existentes
        self._load_geo_data()
    
    def _load_geo_data(self):
        """Carga datos geográficos desde archivos."""
        try:
            # Cargar ubicaciones
            locations_file = os.path.join(self.config_dir, 'locations.json')
            if os.path.exists(locations_file):
                with open(locations_file, 'r') as f:
                    self.locations = json.load(f)
            
            # Cargar rutas
            routes_file = os.path.join(self.config_dir, 'routes.json')
            if os.path.exists(routes_file):
                with open(routes_file, 'r') as f:
                    self.routes = json.load(f)
            
            # Cargar geocercas
            fences_file = os.path.join(self.config_dir, 'geo_fences.json')
            if os.path.exists(fences_file):
                with open(fences_file, 'r') as f:
                    self.geo_fences = json.load(f)
                    
            logger.info("Datos geográficos cargados")
            
        except Exception as e:
            logger.error(f"Error al cargar datos geográficos: {str(e)}")
    
    def _save_geo_data(self):
        """Guarda datos geográficos en archivos."""
        try:
            # Guardar ubicaciones
            locations_file = os.path.join(self.config_dir, 'locations.json')
            with open(locations_file, 'w') as f:
                json.dump(self.locations, f, indent=2)
            
            # Guardar rutas
            routes_file = os.path.join(self.config_dir, 'routes.json')
            with open(routes_file, 'w') as f:
                json.dump(self.routes, f, indent=2)
            
            # Guardar geocercas
            fences_file = os.path.join(self.config_dir, 'geo_fences.json')
            with open(fences_file, 'w') as f:
                json.dump(self.geo_fences, f, indent=2)
                
            logger.info("Datos geográficos guardados")
            
        except Exception as e:
            logger.error(f"Error al guardar datos geográficos: {str(e)}")
    
    def add_location(self, name, lat, lng, description=None, type=None):
        """
        Añade una ubicación al sistema.
        
        Args:
            name: Nombre de la ubicación
            lat: Latitud
            lng: Longitud
            description: Descripción opcional
            type: Tipo de ubicación (cámara, checkpoint, etc.)
            
        Returns:
            str: ID de la ubicación
        """
        location_id = str(uuid.uuid4())
        
        location_data = {
            "id": location_id,
            "name": name,
            "lat": lat,
            "lng": lng,
            "description": description or "",
            "type": type or "generic",
            "created_at": time.time()
        }
        
        self.locations[location_id] = location_data
        self._save_geo_data()
        
        return location_id
    
    def add_route(self, name, points, description=None):
        """
        Añade una ruta al sistema.
        
        Args:
            name: Nombre de la ruta
            points: Lista de puntos [lat, lng]
            description: Descripción opcional
            
        Returns:
            str: ID de la ruta
        """
        route_id = str(uuid.uuid4())
        
        route_data = {
            "id": route_id,
            "name": name,
            "points": points,
            "description": description or "",
            "created_at": time.time()
        }
        
        self.routes[route_id] = route_data
        self._save_geo_data()
        
        return route_id
    
    def add_geo_fence(self, name, points, type="restricted", description=None):
        """
        Añade una geocerca al sistema.
        
        Args:
            name: Nombre de la geocerca
            points: Lista de puntos [lat, lng] que forman el perímetro
            type: Tipo de geocerca (restricted, allowed, etc.)
            description: Descripción opcional
            
        Returns:
            str: ID de la geocerca
        """
        fence_id = str(uuid.uuid4())
        
        fence_data = {
            "id": fence_id,
            "name": name,
            "points": points,
            "type": type,
            "description": description or "",
            "created_at": time.time()
        }
        
        self.geo_fences[fence_id] = fence_data
        self._save_geo_data()
        
        return fence_id
    
    def is_point_in_fence(self, lat, lng, fence_id):
        """
        Verifica si un punto está dentro de una geocerca.
        
        Args:
            lat: Latitud del punto
            lng: Longitud del punto
            fence_id: ID de la geocerca
            
        Returns:
            bool: True si el punto está dentro de la geocerca
        """
        if fence_id not in self.geo_fences:
            return False
        
        fence = self.geo_fences[fence_id]
        points = fence.get("points", [])
        
        if len(points) < 3:
            return False
        
        # Algoritmo Ray Casting para determinar si un punto está dentro de un polígono
        inside = False
        j = len(points) - 1
        
        for i in range(len(points)):
            if ((points[i][1] > lng) != (points[j][1] > lng)) and \
               (lat < (points[j][0] - points[i][0]) * (lng - points[i][1]) / 
                (points[j][1] - points[i][1]) + points[i][0]):
                inside = not inside
            j = i
        
        return inside
    
    def calculate_distance(self, lat1, lng1, lat2, lng2):
        """
        Calcula la distancia entre dos puntos geográficos en metros.
        
        Args:
            lat1: Latitud del punto 1
            lng1: Longitud del punto 1
            lat2: Latitud del punto 2
            lng2: Longitud del punto 2
            
        Returns:
            float: Distancia en metros
        """
        # Fórmula de Haversine para calcular distancia entre puntos geográficos
        R = 6371000  # Radio de la Tierra en metros
        
        # Convertir a radianes
        lat1_rad = math.radians(lat1)
        lng1_rad = math.radians(lng1)
        lat2_rad = math.radians(lat2)
        lng2_rad = math.radians(lng2)
        
        # Diferencias
        dlat = lat2_rad - lat1_rad
        dlng = lng2_rad - lng1_rad
        
        # Fórmula
        a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlng/2)**2
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        distance = R * c
        
        return distance


class GuardTrackingAgent(MCPAgent):
    """Agente para seguimiento de guardias de seguridad."""
    
    def __init__(self, agent_id, name, geo_manager, check_interval=30):
        """
        Inicializa el agente de seguimiento de guardias.
        
        Args:
            agent_id: ID único del agente
            name: Nombre descriptivo del agente
            geo_manager: Instancia de GeoManager
            check_interval: Intervalo de verificación en segundos
        """
        super().__init__(agent_id, name, interested_types=["location", "command"])
        
        self.geo_manager = geo_manager
        self.check_interval = check_interval
        self.enabled = True
        
        # Diccionario para almacenar información de guardias
        self.guards = {}
        
        # Diccionario para almacenar rutas asignadas
        self.assigned_routes = {}
        
        # Diccionario para almacenar alertas generadas
        self.alerts = {}
        
        # Iniciar hilo de verificación
        self.stop_event = threading.Event()
        self.check_thread = threading.Thread(target=self._route_check_loop)
        self.check_thread.daemon = True
        self.check_thread.start()
        
        logger.info(f"Agente de seguimiento de guardias {agent_id} inicializado")
    
    def on_message(self, message):
        """Procesa mensajes recibidos."""
        if not self.enabled:
            return
            
        if message.type == "location":
            self._process_location(message.data)
        elif message.type == "command":
            self._process_command(message.data)
    
    def _process_location(self, data):
        """
        Procesa actualizaciones de ubicación.
        
        Args:
            data: Diccionario con datos de ubicación
        """
        guard_id = data.get("guard_id")
        lat = data.get("lat")
        lng = data.get("lng")
        timestamp = data.get("timestamp", time.time())
        
        if not guard_id or lat is None or lng is None:
            return
        
        # Actualizar información del guardia
        if guard_id not in self.guards:
            self.guards[guard_id] = {
                "id": guard_id,
                "name": data.get("name", f"Guardia {guard_id}"),
                "history": []
            }
        
        # Registrar ubicación
        location_record = {
            "lat": lat,
            "lng": lng,
            "timestamp": timestamp,
            "speed": data.get("speed", 0),
            "accuracy": data.get("accuracy", 0)
        }
        
        self.guards[guard_id]["history"].append(location_record)
        self.guards[guard_id]["current_location"] = location_record
        
        # Verificar si está en ruta
        if guard_id in self.assigned_routes:
            route_id = self.assigned_routes[guard_id]["route_id"]
            route = self.geo_manager.routes.get(route_id)
            
            if route:
                # Verificar si está en el siguiente checkpoint
                next_point_index = self.assigned_routes[guard_id].get("next_point", 0)
                
                if next_point_index < len(route["points"]):
                    next_point = route["points"][next_point_index]
                    
                    # Calcular distancia al punto
                    distance = self.geo_manager.calculate_distance(
                        lat, lng, next_point[0], next_point[1]
                    )
                    
                    # Si está a menos de 20 metros, considerarlo como alcanzado
                    if distance < 20:
                        # Avanzar al siguiente punto
                        self.assigned_routes[guard_id]["next_point"] = next_point_index + 1
                        
                        # Registrar tiempo de llegada
                        if "checkpoint_times" not in self.assigned_routes[guard_id]:
                            self.assigned_routes[guard_id]["checkpoint_times"] = []
                        
                        self.assigned_routes[guard_id]["checkpoint_times"].append({
                            "point_index": next_point_index,
                            "arrival_time": timestamp
                        })
                        
                        # Verificar si ha completado la ronda
                        if next_point_index + 1 >= len(route["points"]):
                            # Ronda completada
                            self.broadcast_message("notification", {
                                "type": "route_completed",
                                "guard_id": guard_id,
                                "route_id": route_id,
                                "route_name": route["name"],
                                "completed_at": timestamp,
                                "duration": timestamp - self.assigned_routes[guard_id].get("start_time", timestamp),
                                "guard_name": self.guards[guard_id]["name"]
                            })
                            
                            logger.info(f"Guardia {guard_id} completó la ruta {route['name']}")
                            
                            # Reiniciar para la próxima ronda si es una ruta cíclica
                            if self.assigned_routes[guard_id].get("cyclic", False):
                                self.assigned_routes[guard_id]["next_point"] = 0
                                self.assigned_routes[guard_id]["start_time"] = timestamp
                                
                                # Limpiar registros de checkpoints
                                self.assigned_routes[guard_id]["checkpoint_times"] = []
                            else:
                                # Eliminar la asignación
                                del self.assigned_routes[guard_id]
    
    def _route_check_loop(self):
        """Bucle para verificar periódicamente el progreso en rutas."""
        while not self.stop_event.is_set():
            if self.enabled:
                self._check_route_progress()
            
            # Esperar hasta el próximo intervalo
            self.stop_event.wait(self.check_interval)
    
    def _check_route_progress(self):
        """Verifica el progreso de los guardias en sus rutas asignadas."""
        current_time = time.time()
        
        for guard_id, route_data in list(self.assigned_routes.items()):
            # Verificar si el guardia ha enviado actualización de ubicación recientemente
            guard = self.guards.get(guard_id)
            
            if not guard or "current_location" not in guard:
                continue
            
            last_update = guard["current_location"]["timestamp"]
            
            # Si han pasado más de 5 minutos sin actualización, generar alerta
            if current_time - last_update > 300:  # 5 minutos
                alert_id = f"location_timeout_{guard_id}_{int(current_time)}"
                
                # Evitar duplicar alertas
                if alert_id not in self.alerts:
                    self.alerts[alert_id] = {
                        "id": alert_id,
                        "type": "location_timeout",
                        "guard_id": guard_id,
                        "guard_name": guard["name"],
                        "route_id": route_data["route_id"],
                        "last_update": last_update,
                        "timestamp": current_time
                    }
                    
                    # Enviar alerta
                    self.broadcast_message("alert", {
                        "type": "guard_location_timeout",
                        "timestamp": current_time,
                        "message": f"Guardia {guard['name']} sin actualización de ubicación por más de 5 minutos",
                        "severity": "warning",
                        "guard_id": guard_id,
                        "route_id": route_data["route_id"],
                        "last_known_location": {
                            "lat": guard["current_location"]["lat"],
                            "lng": guard["current_location"]["lng"]
                        }
                    })
            
            # Verificar retrasos en la ruta
            if "start_time" in route_data and "expected_duration" in route_data:
                elapsed_time = current_time - route_data["start_time"]
                estimated_progress = elapsed_time / route_data["expected_duration"]
                
                # Obtener punto actual y calcular progreso real
                next_point = route_data.get("next_point", 0)
                route = self.geo_manager.routes.get(route_data["route_id"])
                
                if route:
                    total_points = len(route["points"])
                    actual_progress = next_point / total_points if total_points > 0 else 0
                    
                    # Si está retrasado más del 20%, generar alerta
                    if estimated_progress > 0.5 and actual_progress < estimated_progress - 0.2:
                        alert_id = f"route_delay_{guard_id}_{int(current_time / 900)}"  # Agrupar por 15 minutos
                        
                        # Evitar duplicar alertas
                        if alert_id not in self.alerts:
                            self.alerts[alert_id] = {
                                "id": alert_id,
                                "type": "route_delay",
                                "guard_id": guard_id,
                                "guard_name": guard["name"],
                                "route_id": route_data["route_id"],
                                "timestamp": current_time,
                                "estimated_progress": estimated_progress,
                                "actual_progress": actual_progress
                            }
                            
                            # Enviar alerta
                            self.broadcast_message("alert", {
                                "type": "guard_route_delay",
                                "timestamp": current_time,
                                "message": f"Guardia {guard['name']} retrasado en su ruta",
                                "severity": "info",
                                "guard_id": guard_id,
                                "route_id": route_data["route_id"],
                                "route_name": route["name"],
                                "estimated_progress": f"{estimated_progress:.0%}",
                                "actual_progress": f"{actual_progress:.0%}"
                            })
    
    def assign_route(self, guard_id, route_id, cyclic=False, expected_duration=None):
        """
        Asigna una ruta a un guardia.
        
        Args:
            guard_id: ID del guardia
            route_id: ID de la ruta
            cyclic: Si la ruta debe repetirse continuamente
            expected_duration: Duración esperada en segundos
            
        Returns:
            bool: True si se asignó correctamente
        """
        if route_id not in self.geo_manager.routes:
            logger.error(f"Ruta {route_id} no existe")
            return False
        
        self.assigned_routes[guard_id] = {
            "route_id": route_id,
            "start_time": time.time(),
            "next_point": 0,
            "cyclic": cyclic,
            "expected_duration": expected_duration
        }
        
        # Asegurar que existe el registro del guardia
        if guard_id not in self.guards:
            self.guards[guard_id] = {
                "id": guard_id,
                "name": f"Guardia {guard_id}",
                "history": []
            }
        
        logger.info(f"Ruta {route_id} asignada a guardia {guard_id}")
        return True
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente de seguimiento {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente de seguimiento {self.agent_id} deshabilitado")
        elif command == "assign_route":
            guard_id = data.get("guard_id")
            route_id = data.get("route_id")
            
            if guard_id and route_id:
                self.assign_route(
                    guard_id,
                    route_id,
                    cyclic=data.get("cyclic", False),
                    expected_duration=data.get("expected_duration")
                )
        elif command == "unassign_route":
            guard_id = data.get("guard_id")
            
            if guard_id and guard_id in self.assigned_routes:
                del self.assigned_routes[guard_id]
                logger.info(f"Ruta desasignada del guardia {guard_id}")
        elif command == "set_interval":
            self.check_interval = max(10, data.get("value", self.check_interval))
            logger.info(f"Intervalo actualizado a {self.check_interval} segundos")
    
    def stop(self):
        """Detiene el agente."""
        self.stop_event.set()
        if self.check_thread.is_alive():
            self.check_thread.join(timeout=5)
        logger.info(f"Agente de seguimiento {self.agent_id} detenido") 

--------------------------------------------------------------------------------

📄 src\industrial_agents.py
--------------------------------------------------------------------------------
import time
import logging
import numpy as np
import cv2
from src.mcp_framework import MCPAgent

logger = logging.getLogger("industrial_agents")

class FireDetectionAgent(MCPAgent):
    """Agente especializado en detección de incendios y humo."""
    
    def __init__(self, agent_id, name, threshold=0.7, frames_to_confirm=5):
        """
        Inicializa el agente de detección de incendios.
        
        Args:
            agent_id: ID único del agente
            name: Nombre descriptivo del agente
            threshold: Umbral de confianza para detecciones
            frames_to_confirm: Frames consecutivos para confirmar incendio
        """
        super().__init__(agent_id, name, interested_types=["frame", "command"])
        
        self.threshold = threshold
        self.frames_to_confirm = frames_to_confirm
        self.consecutive_detections = {}  # Por cámara
        self.enabled = True
        
        # En una implementación real, aquí cargaríamos un modelo entrenado
        logger.info(f"Agente de detección de incendios {agent_id} inicializado")
    
    def on_message(self, message):
        """Procesa mensajes recibidos."""
        if not self.enabled:
            return
            
        if message.type == "frame":
            self._process_frame(message.data)
        elif message.type == "command":
            self._process_command(message.data)
    
    def _process_frame(self, data):
        """
        Procesa un frame de video.
        
        Args:
            data: Diccionario con frame y metadatos
        """
        frame = data.get("frame")
        camera_id = data.get("camera_id")
        
        if frame is None or camera_id is None:
            return
            
        # Detectar posibles incendios y humo
        # (En implementación real, usaríamos un modelo de detección)
        fire_detected, confidence, bounding_box = self._detect_fire(frame)
        
        if fire_detected and confidence >= self.threshold:
            # Incrementar contador de detecciones consecutivas
            if camera_id not in self.consecutive_detections:
                self.consecutive_detections[camera_id] = 0
            
            self.consecutive_detections[camera_id] += 1
            
            # Verificar si se alcanzó el umbral de confirmación
            if self.consecutive_detections[camera_id] >= self.frames_to_confirm:
                # Generar alerta de incendio
                self.broadcast_message("alert", {
                    "type": "fire",
                    "camera_id": camera_id,
                    "timestamp": time.time(),
                    "confidence": confidence,
                    "location": bounding_box,
                    "message": "¡ALERTA DE INCENDIO DETECTADO!",
                    "severity": "critical"
                })
                
                # Reiniciar contador
                self.consecutive_detections[camera_id] = 0
        else:
            # Reiniciar contador si no se detecta incendio
            if camera_id in self.consecutive_detections:
                self.consecutive_detections[camera_id] = 0
    
    def _detect_fire(self, frame):
        """
        Detecta incendios en un frame.
        
        Args:
            frame: Frame de video
            
        Returns:
            tuple: (fuego_detectado, confianza, bounding_box)
        """
        # Simulación - en un sistema real implementaríamos un modelo de detección
        
        # Convertir a espacio de color HSV para detectar colores de fuego
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        
        # Definir rango de colores para fuego (rojo-naranja)
        # En un sistema real, esto sería mucho más sofisticado
        lower_red = np.array([0, 120, 100])
        upper_red = np.array([20, 255, 255])
        
        # Crear máscara
        mask = cv2.inRange(hsv, lower_red, upper_red)
        
        # Contar píxeles que corresponden a fuego
        fire_pixels = cv2.countNonZero(mask)
        total_pixels = frame.shape[0] * frame.shape[1]
        
        # Calcular porcentaje
        percentage = fire_pixels / total_pixels
        
        # Determinar si hay suficientes píxeles de fuego
        fire_detected = percentage > 0.01  # 1% de la imagen
        confidence = min(1.0, percentage * 20)  # Escalar para obtener confianza
        
        # Encontrar ubicación (bounding box)
        x, y, w, h = 0, 0, 0, 0
        
        if fire_detected:
            # Encontrar contornos
            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            if contours:
                # Tomar el contorno más grande
                largest_contour = max(contours, key=cv2.contourArea)
                x, y, w, h = cv2.boundingRect(largest_contour)
        
        return fire_detected, confidence, [x, y, w, h]
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente de detección de incendios {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente de detección de incendios {self.agent_id} deshabilitado")
        elif command == "set_threshold":
            self.threshold = data.get("value", self.threshold)
            logger.info(f"Umbral actualizado a {self.threshold}")
        elif command == "set_frames_to_confirm":
            self.frames_to_confirm = max(1, data.get("value", self.frames_to_confirm))
            logger.info(f"Frames para confirmar actualizado a {self.frames_to_confirm}")

class SafetyComplianceAgent(MCPAgent):
    """Agente para verificar cumplimiento de normas de seguridad."""
    
    def __init__(self, agent_id, name, rules=None):
        """
        Inicializa el agente de cumplimiento de seguridad.
        
        Args:
            agent_id: ID único del agente
            name: Nombre descriptivo del agente
            rules: Reglas de seguridad a verificar
        """
        super().__init__(agent_id, name, interested_types=["detection", "command"])
        
        self.rules = rules or [
            {"name": "sin_casco", "description": "Persona sin casco de seguridad"},
            {"name": "sin_chaleco", "description": "Persona sin chaleco reflectante"},
            {"name": "zona_prohibida", "description": "Persona en zona prohibida"}
        ]
        
        self.enabled = True
        self.violations = {}  # Registro de infracciones por cámara
        
        logger.info(f"Agente de cumplimiento de seguridad {agent_id} inicializado")
    
    def on_message(self, message):
        """Procesa mensajes recibidos."""
        if not self.enabled:
            return
            
        if message.type == "detection":
            self._process_detection(message.data)
        elif message.type == "command":
            self._process_command(message.data)
    
    def _process_detection(self, data):
        """
        Procesa detecciones de objetos.
        
        Args:
            data: Diccionario con detecciones
        """
        camera_id = data.get("camera_id")
        detections = data.get("detections", [])
        
        if not camera_id or not detections:
            return
        
        # Verificar cada detección contra las reglas de seguridad
        for detection in detections:
            if detection.get("class") == "persona":
                # Aquí implementaríamos la lógica para verificar equipamiento de seguridad
                # En un sistema real, tendríamos modelos específicos para detectar cascos,
                # chalecos, etc. o usaríamos clasificadores de imágenes
                
                violations = self._check_safety_violations(detection)
                
                if violations:
                    # Registrar infracciones
                    if camera_id not in self.violations:
                        self.violations[camera_id] = []
                    
                    # Añadir a la lista de infracciones
                    violation_record = {
                        "timestamp": time.time(),
                        "detection": detection,
                        "violations": violations
                    }
                    
                    self.violations[camera_id].append(violation_record)
                    
                    # Generar alerta
                    violation_descriptions = [v["description"] for v in violations]
                    message = f"Infracciones de seguridad detectadas: {', '.join(violation_descriptions)}"
                    
                    self.broadcast_message("alert", {
                        "type": "safety_violation",
                        "camera_id": camera_id,
                        "timestamp": time.time(),
                        "message": message,
                        "violations": violations,
                        "detection": detection,
                        "severity": "warning"
                    })
    
    def _check_safety_violations(self, detection):
        """
        Verifica infracciones de seguridad para una detección.
        
        Args:
            detection: Detección de persona
            
        Returns:
            list: Infracciones detectadas
        """
        # Simulación - en un sistema real esto se basaría en análisis de imagen
        # o en clasificadores específicos para equipo de seguridad
        
        # Generar aleatoriamente algunas infracciones para demostración
        import random
        
        violations = []
        
        # 20% de probabilidad de infracción de casco
        if random.random() < 0.2:
            violations.append(next(rule for rule in self.rules 
                                 if rule["name"] == "sin_casco"))
        
        # 15% de probabilidad de infracción de chaleco
        if random.random() < 0.15:
            violations.append(next(rule for rule in self.rules 
                                 if rule["name"] == "sin_chaleco"))
        
        # 10% de probabilidad de estar en zona prohibida
        if random.random() < 0.1:
            violations.append(next(rule for rule in self.rules 
                                 if rule["name"] == "zona_prohibida"))
        
        return violations
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente de cumplimiento {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente de cumplimiento {self.agent_id} deshabilitado")
        elif command == "set_rules":
            self.rules = data.get("rules", self.rules)
            logger.info(f"Reglas actualizadas") 

--------------------------------------------------------------------------------

📄 src\industrial_safety.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import logging
import os
import json
from datetime import datetime

logger = logging.getLogger("industrial_safety")

class IndustrialSafetyManager:
    """Gestor para funcionalidades de seguridad industrial."""
    
    def __init__(self):
        """Inicializa el gestor de seguridad industrial."""
        self.logger = logging.getLogger("industrial_safety")
        self.config_dir = os.path.join('config', 'industrial')
        
        # Crear directorio si no existe
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)
        
        # Cargar configuraciones
        self._load_config()
        
        self.logger.info("Configuración de seguridad industrial cargada")
        
    def _load_config(self):
        """Carga la configuración de seguridad industrial."""
        # Archivo de configuración principal
        config_file = os.path.join(self.config_dir, 'industrial_config.json')
        
        # Configuración predeterminada
        self.active = False
        self.ppe_requirements = {
            'helmet': True,
            'vest': True,
            'glasses': False,
            'gloves': False,
            'boots': False,
            'mask': False
        }
        self.danger_zones = {}
        self.restricted_zones = {}
        
        # Cargar si existe
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r') as f:
                    config = json.load(f)
                    
                self.active = config.get('active', False)
                self.ppe_requirements = config.get('ppe_requirements', self.ppe_requirements)
                self.danger_zones = config.get('danger_zones', {})
                self.restricted_zones = config.get('restricted_zones', {})
            except Exception as e:
                self.logger.error(f"Error cargando configuración industrial: {e}")
    
    def _save_config(self):
        """Guarda la configuración actual."""
        config_file = os.path.join(self.config_dir, 'industrial_config.json')
        try:
            config = {
                'active': self.active,
                'ppe_requirements': self.ppe_requirements,
                'danger_zones': self.danger_zones,
                'restricted_zones': self.restricted_zones
            }
            
            with open(config_file, 'w') as f:
                json.dump(config, f, indent=4)
                
            return True
        except Exception as e:
            self.logger.error(f"Error guardando configuración industrial: {e}")
            return False
    
    def is_active(self):
        """Devuelve si el modo industrial está activo."""
        return self.active
    
    def set_active(self, active):
        """Activa o desactiva el modo industrial."""
        self.active = active
        self._save_config()
        return True
    
    def get_ppe_requirements(self):
        """Obtiene los requisitos de equipo de protección personal."""
        return self.ppe_requirements
    
    def update_ppe_requirements(self, requirements):
        """Actualiza los requisitos de equipo de protección personal."""
        if not isinstance(requirements, dict):
            raise ValueError("Los requisitos deben ser un diccionario")
            
        # Actualizar solo las claves válidas
        valid_keys = {'helmet', 'vest', 'glasses', 'gloves', 'boots', 'mask'}
        for key in valid_keys:
            if key in requirements:
                self.ppe_requirements[key] = bool(requirements[key])
        
        self._save_config()
        return True
    
    def get_danger_zones(self):
        """Obtiene las zonas de peligro configuradas."""
        return self.danger_zones
    
    def update_danger_zones(self, zones_data):
        """Actualiza las zonas de peligro."""
        if not isinstance(zones_data, dict):
            raise ValueError("Los datos de zonas deben ser un diccionario")
            
        self.danger_zones = zones_data
        self._save_config()
        return True
    
    def get_restricted_zones(self):
        """Obtiene las zonas restringidas configuradas."""
        return self.restricted_zones
    
    def update_restricted_zones(self, zones_data):
        """Actualiza las zonas restringidas."""
        if not isinstance(zones_data, dict):
            raise ValueError("Los datos de zonas deben ser un diccionario")
            
        self.restricted_zones = zones_data
        self._save_config()
        return True
    
    def add_danger_zone(self, camera_id, zone_id, points, description="", alert_level="warning"):
        """
        Añade una zona de peligro para una cámara.
        
        Args:
            camera_id: ID de la cámara
            zone_id: ID único para la zona
            points: Lista de puntos (x,y) que definen el polígono
            description: Descripción de la zona
            alert_level: Nivel de alerta (info, warning, danger)
        """
        if camera_id not in self.danger_zones:
            self.danger_zones[camera_id] = {}
            
        self.danger_zones[camera_id][zone_id] = {
            'points': points,
            'description': description,
            'alert_level': alert_level,
            'created_at': datetime.now().isoformat()
        }
        
        self._save_config()
        self.logger.info(f"Zona de peligro {zone_id} añadida para cámara {camera_id}")
        return True
    
    def delete_danger_zone(self, camera_id, zone_id):
        """Elimina una zona de peligro."""
        if camera_id in self.danger_zones and zone_id in self.danger_zones[camera_id]:
            del self.danger_zones[camera_id][zone_id]
            
            # Si no quedan zonas para esta cámara, eliminar la entrada
            if not self.danger_zones[camera_id]:
                del self.danger_zones[camera_id]
                
            self._save_config()
            self.logger.info(f"Zona de peligro {zone_id} eliminada para cámara {camera_id}")
            return True
        return False
    
    def check_ppe_compliance(self, frame, camera_id):
        """
        Verifica el cumplimiento de EPP en un frame.
        
        Args:
            frame: Imagen de la cámara
            camera_id: ID de la cámara
            
        Returns:
            list: Violaciones detectadas
        """
        if not self.active:
            return []
            
        violations = []
        
        # Aquí iría la lógica para detectar EPP con modelos específicos
        # Por ahora, simulamos algunas detecciones
        
        # Ejemplo: Detectar cascos (simulado)
        persons = self._detect_persons(frame)
        for person in persons:
            has_helmet = self._detect_helmet(frame, person)
            if not has_helmet:
                violations.append({
                    'type': 'ppe_violation',
                    'ppe_type': 'helmet',
                    'camera_id': camera_id,
                    'timestamp': datetime.now().isoformat(),
                    'confidence': 0.85,
                    'bbox': person
                })
        
        return violations
    
    def check_danger_zone_violations(self, frame, camera_id, detections):
        """
        Verifica violaciones de zonas de peligro.
        
        Args:
            frame: Imagen de la cámara
            camera_id: ID de la cámara
            detections: Detecciones de objetos (personas, etc.)
            
        Returns:
            list: Violaciones detectadas
        """
        if not self.active or camera_id not in self.danger_zones:
            return []
            
        violations = []
        zones = self.danger_zones[camera_id]
        
        for zone_id, zone in zones.items():
            # Convertir puntos de la zona a formato numpy
            zone_polygon = np.array(zone['points'], np.int32)
            zone_polygon = zone_polygon.reshape((-1, 1, 2))
            
            # Verificar cada detección
            for det in detections:
                if det['class'] != 'person':  # Solo nos importan las personas
                    continue
                    
                # Obtener el punto central inferior de la persona (pies)
                bbox = det['bbox']  # [x1, y1, x2, y2]
                foot_point = (int((bbox[0] + bbox[2]) / 2), bbox[3])
                
                # Verificar si el punto está dentro del polígono
                result = cv2.pointPolygonTest(zone_polygon, foot_point, False)
                if result >= 0:  # Punto dentro o en el borde de la zona
                    violations.append({
                        'type': 'zone_violation',
                        'zone_id': zone_id,
                        'description': zone['description'],
                        'alert_level': zone['alert_level'],
                        'camera_id': camera_id,
                        'timestamp': datetime.now().isoformat(),
                        'person_id': det.get('track_id', 'unknown')
                    })
        
        return violations
    
    def detect_fire(self, frame, camera_id):
        """
        Detecta fuego o humo en un frame.
        
        Args:
            frame: Imagen de la cámara
            camera_id: ID de la cámara
            
        Returns:
            dict: Información sobre la detección de fuego/humo
        """
        if not self.active:
            return None
            
        # Aquí iría la lógica para detectar fuego/humo
        # Por ahora, implementamos una detección simple basada en color
        
        # Convertir a HSV
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        
        # Definir rangos de color para fuego (tonos rojos/naranjas)
        lower_red1 = np.array([0, 120, 70])
        upper_red1 = np.array([10, 255, 255])
        lower_red2 = np.array([170, 120, 70])
        upper_red2 = np.array([180, 255, 255])
        
        # Crear máscaras y combinarlas
        mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
        mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
        mask = cv2.bitwise_or(mask1, mask2)
        
        # Calcular porcentaje de píxeles de fuego
        fire_pixel_count = cv2.countNonZero(mask)
        total_pixels = frame.shape[0] * frame.shape[1]
        fire_percentage = fire_pixel_count / total_pixels
        
        # Establecer un umbral de detección (ajustable)
        threshold = 0.01  # 1% de la imagen
        
        if fire_percentage > threshold:
            # Encontrar contornos para localizar el fuego
            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            if contours:
                # Obtener el contorno más grande
                largest_contour = max(contours, key=cv2.contourArea)
                x, y, w, h = cv2.boundingRect(largest_contour)
                
                return {
                    'type': 'fire_detection',
                    'camera_id': camera_id,
                    'timestamp': datetime.now().isoformat(),
                    'confidence': float(fire_percentage) * 100,
                    'bbox': [x, y, x + w, y + h]
                }
        
        return None
        
    def _detect_persons(self, frame):
        """Método simulado para detectar personas en el frame."""
        # En una implementación real, esto usaría un modelo de detección
        # Por ahora, devolvemos algunos resultados simulados
        h, w = frame.shape[:2]
        return [
            [int(w * 0.2), int(h * 0.3), int(w * 0.3), int(h * 0.9)],
            [int(w * 0.6), int(h * 0.4), int(w * 0.7), int(h * 0.95)]
        ]
    
    def _detect_helmet(self, frame, person_bbox):
        """Método simulado para detectar si una persona lleva casco."""
        # Simulamos una detección aleatoria para demo
        import random
        return random.random() > 0.5 

--------------------------------------------------------------------------------

📄 src\industrial_safety_agent.py
--------------------------------------------------------------------------------
import logging
import uuid
from src.mcp_framework import MCPAgent
from datetime import datetime
import cv2
import numpy as np
import time

logger = logging.getLogger("industrial_safety_agent")

class IndustrialSafetyAgent(MCPAgent):
    """Agente MCP para monitoreo de seguridad industrial."""
    
    def __init__(self, industrial_safety_manager, alert_manager, object_detector):
        """
        Inicializa el agente de seguridad industrial.
        
        Args:
            industrial_safety_manager: Gestor de seguridad industrial
            alert_manager: Gestor de alertas
            object_detector: Detector de objetos
        """
        # Generar ID y nombre para el agente
        agent_id = f"industrial_safety_agent_{uuid.uuid4().hex[:8]}"
        name = "Agente de Seguridad Industrial"
        
        # Llamar al constructor de la clase padre con los argumentos requeridos
        super().__init__(agent_id=agent_id, name=name)
        
        self.industrial_safety_manager = industrial_safety_manager
        self.alert_manager = alert_manager
        self.object_detector = object_detector
        
        # Configuración de detección de riesgos
        self.safety_config = {
            'ppe_detection': True,         # Detección de equipo de protección personal
            'fire_detection': True,        # Detección de fuego/humo
            'spill_detection': True,       # Detección de derrames
            'restricted_area': True,       # Detección de acceso a áreas restringidas
            'machinery_proximity': True,   # Proximidad peligrosa a maquinaria
            'posture_analysis': True,      # Análisis de postura de trabajo
            'crowd_analysis': True         # Análisis de densidad en zonas de trabajo
        }
        
        self.active = True
        self.cooldown = 0
        self.detection_thresholds = {
            'ppe': 0.7,
            'fire': 0.6,
            'spill': 0.65,
            'restricted': 0.75,
            'machinery': 0.7,
            'posture': 0.65,
            'crowd': 0.7
        }
        
        # Definir equipos de protección requeridos por zona
        self.zone_ppe_requirements = {
            'factory_floor': ['helmet', 'safety_vest', 'gloves'],
            'chemical_area': ['helmet', 'safety_vest', 'gloves', 'face_mask', 'goggles'],
            'loading_dock': ['helmet', 'safety_vest', 'safety_boots'],
            'office': []  # Sin requisitos especiales
        }
        
        # Zonas restringidas (ejemplo)
        self.restricted_zones = {
            'cam1': [(100, 100, 300, 400)],  # Lista de bounding boxes por cámara
            'cam2': [(50, 50, 200, 150), (400, 300, 600, 500)]
        }
        
        # Intervalos para alertas repetidas (en segundos)
        self.alert_intervals = {
            'ppe': 300,          # 5 minutos entre alertas de EPP
            'fire': 30,          # 30 segundos entre alertas de fuego
            'spill': 180,        # 3 minutos entre alertas de derrames
            'restricted': 120,   # 2 minutos entre alertas de zonas restringidas
            'machinery': 60,     # 1 minuto entre alertas de proximidad
            'posture': 600,      # 10 minutos entre alertas de postura
            'crowd': 300         # 5 minutos entre alertas de densidad
        }
        
        # Registro de últimas alertas por tipo y zona
        self.last_alerts = {}
        
        logger.info(f"Agente de seguridad industrial inicializado con ID: {agent_id}")
    
    def process(self, message):
        """
        Procesa mensajes del orquestador MCP.
        
        Args:
            message: Mensaje a procesar
        """
        # Solo procesar si está en modo industrial
        if not self.industrial_safety_manager.is_enabled():
            return
            
        # Procesar según el tipo de mensaje
        if message['type'] == 'detection':
            self._process_detection(message)
        elif message['type'] == 'tick' and message.get('interval', 0) >= 5:
            self._check_active_cameras()
    
    def _process_detection(self, message):
        """
        Procesa una detección para verificar cumplimiento de seguridad.
        
        Args:
            message: Mensaje con datos de la detección
        """
        detection = message.get('detection', {})
        frame = message.get('frame')
        camera_id = message.get('camera_id')
        
        if not frame is not None or not camera_id:
            return
            
        # Procesar detección con el gestor de seguridad industrial
        safety_results = self.industrial_safety_manager.process_detection(
            detection, frame, camera_id
        )
        
        # Crear alertas para violaciones de seguridad
        for violation in safety_results.get('violations', []):
            alert_data = {
                'type': 'safety_violation',
                'subtype': violation['type'],
                'camera_id': camera_id,
                'timestamp': datetime.now().isoformat(),
                'severity': 'warning',
                'message': violation['message'],
                'location': violation.get('location', 'Desconocida'),
                'image_data': violation.get('image_data')
            }
            
            # Generar alerta
            self.alert_manager.add_alert(alert_data)
            logger.info(f"Alerta de seguridad generada: {violation['type']} en cámara {camera_id}")
    
    def _check_active_cameras(self):
        """Verifica el estado de seguridad en cámaras activas."""
        # Implementar verificación periódica de seguridad
        self.industrial_safety_manager.check_all_cameras()
    
    def _handle_ppe_violation(self, violation, frame):
        """Gestiona una violación de EPP."""
        camera_id = violation['camera_id']
        ppe_type = violation['ppe_type']
        alert_key = f"{camera_id}_ppe_{ppe_type}"
        
        # Verificar cooldown
        current_time = time.time()
        if alert_key in self.last_alert_time:
            if current_time - self.last_alert_time[alert_key] < self.cooldown:
                return
        
        # Generar alerta
        alert_data = {
            'type': 'safety_violation',
            'subtype': f'ppe_{ppe_type}',
            'camera_id': camera_id,
            'timestamp': datetime.now().isoformat(),
            'message': f"Violación de EPP: No se detectó {self._translate_ppe(ppe_type)}",
            'severity': 'warning',
            'image': self._get_cropped_image(frame, violation['bbox'])
        }
        
        self.alert_manager.add_alert(alert_data)
        self.last_alert_time[alert_key] = current_time
        
        logger.info(f"Alerta de EPP generada: {ppe_type} en cámara {camera_id}")
    
    def _handle_zone_violation(self, violation, frame):
        """Gestiona una violación de zona de peligro."""
        camera_id = violation['camera_id']
        zone_id = violation['zone_id']
        alert_key = f"{camera_id}_zone_{zone_id}"
        
        # Verificar cooldown
        current_time = time.time()
        if alert_key in self.last_alert_time:
            if current_time - self.last_alert_time[alert_key] < self.cooldown:
                return
        
        # Generar alerta
        alert_data = {
            'type': 'safety_violation',
            'subtype': 'danger_zone',
            'camera_id': camera_id,
            'timestamp': datetime.now().isoformat(),
            'message': f"Violación de zona de peligro: {violation['description']}",
            'severity': violation['alert_level'],
            'zone_id': zone_id
        }
        
        self.alert_manager.add_alert(alert_data)
        self.last_alert_time[alert_key] = current_time
        
        logger.info(f"Alerta de zona generada: {zone_id} en cámara {camera_id}")
    
    def _handle_fire_detection(self, detection, frame):
        """Gestiona una detección de fuego/humo."""
        camera_id = detection['camera_id']
        alert_key = f"{camera_id}_fire"
        
        # Verificar cooldown
        current_time = time.time()
        if alert_key in self.last_alert_time:
            if current_time - self.last_alert_time[alert_key] < self.cooldown:
                return
        
        # Generar alerta
        alert_data = {
            'type': 'safety_violation',
            'subtype': 'fire',
            'camera_id': camera_id,
            'timestamp': datetime.now().isoformat(),
            'message': f"¡ALERTA! Posible fuego detectado (confianza: {detection['confidence']:.1f}%)",
            'severity': 'critical',
            'image': self._get_cropped_image(frame, detection['bbox'])
        }
        
        self.alert_manager.add_alert(alert_data)
        self.last_alert_time[alert_key] = current_time
        
        logger.info(f"¡ALERTA DE FUEGO generada en cámara {camera_id}!")
    
    def _translate_ppe(self, ppe_type):
        """Traduce el tipo de EPP a español."""
        translations = {
            'helmet': 'casco',
            'vest': 'chaleco',
            'glasses': 'gafas de seguridad',
            'gloves': 'guantes',
            'boots': 'botas de seguridad',
            'mask': 'mascarilla'
        }
        return translations.get(ppe_type, ppe_type)
    
    def _get_cropped_image(self, frame, bbox):
        """
        Obtiene una imagen recortada del frame original.
        
        Args:
            frame: Frame completo
            bbox: [x1, y1, x2, y2]
            
        Returns:
            bytes: Imagen recortada en formato JPEG
        """
        try:
            import cv2
            import numpy as np
            
            x1, y1, x2, y2 = bbox
            # Asegurar que los valores estén dentro de los límites
            h, w = frame.shape[:2]
            x1 = max(0, min(w-1, x1))
            y1 = max(0, min(h-1, y1))
            x2 = max(0, min(w-1, x2))
            y2 = max(0, min(h-1, y2))
            
            cropped = frame[y1:y2, x1:x2].copy()
            
            # Convertir a JPEG
            is_success, buffer = cv2.imencode(".jpg", cropped)
            if is_success:
                return buffer.tobytes()
            return None
        except Exception as e:
            logger.error(f"Error al recortar imagen: {str(e)}")
            return None

    def process_message(self, message):
        """Procesa mensajes recibidos del orquestador MCP."""
        if not self.active:
            return
            
        if message.get('type') == 'frame_processed':
            frame = message.get('frame')
            detections = message.get('detections', [])
            camera_id = message.get('camera_id')
            
            if frame is not None and len(detections) > 0:
                self.analyze_frame(frame, detections, camera_id)
                
    def analyze_frame(self, frame, detections, camera_id):
        """Analiza un frame para detectar problemas de seguridad industrial."""
        # Detección de equipo de protección personal (EPP)
        if self.safety_config['ppe_detection']:
            self._check_ppe_compliance(frame, detections, camera_id)
            
        # Detección de fuego/humo
        if self.safety_config['fire_detection']:
            self._detect_fire(frame, camera_id)
            
        # Detección de derrames
        if self.safety_config['spill_detection']:
            self._detect_spills(frame, camera_id)
            
        # Detección de acceso a zonas restringidas
        if self.safety_config['restricted_area']:
            self._detect_restricted_access(frame, detections, camera_id)
            
        # Proximidad peligrosa a maquinaria
        if self.safety_config['machinery_proximity']:
            self._detect_machinery_proximity(frame, detections, camera_id)
            
        # Análisis de postura de trabajo
        if self.safety_config['posture_analysis']:
            self._analyze_work_posture(frame, detections, camera_id)
            
        # Análisis de densidad de personas
        if self.safety_config['crowd_analysis']:
            self._analyze_worker_density(frame, detections, camera_id)
    
    def _check_ppe_compliance(self, frame, detections, camera_id):
        """Verifica que los trabajadores lleven el equipo de protección personal adecuado."""
        # Determinar zona para esta cámara (en un sistema real, usaríamos una tabla de configuración)
        zone = self._get_zone_for_camera(camera_id)
        required_ppe = self.zone_ppe_requirements.get(zone, [])
        
        if not required_ppe:
            return  # Si no hay requisitos para esta zona, salimos
            
        for detection in detections:
            if detection['class'] == 'person' and detection['confidence'] > 0.8:
                # Extraer la región de la persona
                box = detection['bbox']
                person_img = frame[box[1]:box[3], box[0]:box[2]]
                
                if person_img.size == 0:
                    continue
                    
                # Verificar cada tipo de EPP requerido
                missing_ppe = []
                
                for ppe_type in required_ppe:
                    if not self._detect_ppe(detection, person_img):
                        missing_ppe.append(ppe_type)
                
                # Si falta algún EPP, generar alerta
                if missing_ppe and self._can_send_alert('ppe', camera_id):
                    alert_description = f"Trabajador sin {', '.join(missing_ppe)} en {zone}"
                    self._send_safety_alert('ppe_violation', alert_description, frame, camera_id)
    
    def _detect_ppe(self, person_detection, frame):
        """
        Detecta si una persona lleva el EPP requerido.
        
        Args:
            person_detection (dict): Detección de una persona
            frame (numpy.ndarray): Frame completo
            
        Returns:
            dict: Diccionario con resultados de detección de EPP
        """
        # Extraer región de la persona
        x, y, w, h = person_detection['bbox']
        
        # Asegurar que las coordenadas están dentro de los límites del frame
        frame_height, frame_width = frame.shape[:2]
        x = max(0, x)
        y = max(0, y)
        w = min(w, frame_width - x)
        h = min(h, frame_height - y)
        
        # Si el área es muy pequeña, saltamos la detección
        if w < 30 or h < 60:
            return {
                'has_helmet': None,
                'has_safety_vest': None,
                'has_gloves': None,
                'has_face_mask': None,
                'has_goggles': None,
                'has_safety_boots': None
            }
        
        person_img = frame[y:y+h, x:x+w]
        
        # Implementación simple basada en color para demostración
        # En un sistema real, usaríamos un modelo de detección entrenado específicamente para EPP
        
        # 1. Detección de casco (búsqueda de colores típicos de cascos en la parte superior)
        helmet_region = person_img[0:int(h*0.2), :] # 20% superior de la persona
        
        # Buscar píxeles en rangos de color típicos de cascos (amarillo, blanco, rojo)
        # Convertir a HSV para detección de color más robusta
        hsv_helmet = cv2.cvtColor(helmet_region, cv2.COLOR_BGR2HSV)
        
        # Máscaras para colores comunes de cascos
        # Amarillo
        yellow_lower = np.array([20, 100, 100])
        yellow_upper = np.array([30, 255, 255])
        yellow_mask = cv2.inRange(hsv_helmet, yellow_lower, yellow_upper)
        
        # Blanco
        white_lower = np.array([0, 0, 200])
        white_upper = np.array([180, 30, 255])
        white_mask = cv2.inRange(hsv_helmet, white_lower, white_upper)
        
        # Rojo (dos rangos en HSV)
        red_lower1 = np.array([0, 100, 100])
        red_upper1 = np.array([10, 255, 255])
        red_lower2 = np.array([170, 100, 100])
        red_upper2 = np.array([180, 255, 255])
        red_mask1 = cv2.inRange(hsv_helmet, red_lower1, red_upper1)
        red_mask2 = cv2.inRange(hsv_helmet, red_lower2, red_upper2)
        red_mask = cv2.bitwise_or(red_mask1, red_mask2)
        
        # Azul
        blue_lower = np.array([100, 100, 100])
        blue_upper = np.array([130, 255, 255])
        blue_mask = cv2.inRange(hsv_helmet, blue_lower, blue_upper)
        
        # Combinar todas las máscaras
        helmet_mask = cv2.bitwise_or(yellow_mask, white_mask)
        helmet_mask = cv2.bitwise_or(helmet_mask, red_mask)
        helmet_mask = cv2.bitwise_or(helmet_mask, blue_mask)
        
        helmet_pixels = cv2.countNonZero(helmet_mask)
        helmet_area = helmet_region.shape[0] * helmet_region.shape[1]
        helmet_ratio = helmet_pixels / helmet_area if helmet_area > 0 else 0
        
        has_helmet = helmet_ratio > 0.25  # Umbral empírico, ajustar según necesidades
        
        # 2. Detección de chaleco de seguridad (buscar colores fluorescentes en torso)
        vest_region = person_img[int(h*0.2):int(h*0.6), :]  # Región del torso
        
        hsv_vest = cv2.cvtColor(vest_region, cv2.COLOR_BGR2HSV)
        
        # Máscaras para colores fluorescentes típicos de chalecos
        # Amarillo/Verde fluorescente
        fluorescent_yellow_lower = np.array([25, 100, 180])
        fluorescent_yellow_upper = np.array([45, 255, 255])
        fluorescent_yellow_mask = cv2.inRange(hsv_vest, fluorescent_yellow_lower, fluorescent_yellow_upper)
        
        # Naranja fluorescente
        fluorescent_orange_lower = np.array([10, 100, 200])
        fluorescent_orange_upper = np.array([25, 255, 255])
        fluorescent_orange_mask = cv2.inRange(hsv_vest, fluorescent_orange_lower, fluorescent_orange_upper)
        
        # Combinar máscaras
        vest_mask = cv2.bitwise_or(fluorescent_yellow_mask, fluorescent_orange_mask)
        
        vest_pixels = cv2.countNonZero(vest_mask)
        vest_area = vest_region.shape[0] * vest_region.shape[1]
        vest_ratio = vest_pixels / vest_area if vest_area > 0 else 0
        
        has_safety_vest = vest_ratio > 0.15  # Umbral empírico
        
        # 3. Otros EPP (simplificado)
        # En un sistema real, estos tendrían sus propios detectores especializados
        has_gloves = False
        has_face_mask = False  
        has_goggles = False
        has_safety_boots = False
        
        # Retornar resultados
        return {
            'has_helmet': has_helmet,
            'has_safety_vest': has_safety_vest,
            'has_gloves': has_gloves,
            'has_face_mask': has_face_mask,
            'has_goggles': has_goggles,
            'has_safety_boots': has_safety_boots
        }
    
    def _detect_fire(self, frame, camera_id):
        """
        Detecta posibles focos de incendio o humo en un frame.
        
        Args:
            frame (numpy.ndarray): Frame completo
            camera_id (str): ID de la cámara
            
        Returns:
            list: Lista de regiones con posible fuego/humo
                [{'type': 'fire', 'confidence': 0.8, 'bbox': [x, y, w, h]}, ...]
        """
        # Verificar frame
        if frame is None or frame.size == 0:
            return []
        
        detections = []
        
        # Convertir a diferentes espacios de color para análisis
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # 1. Detección de fuego basada en color
        # Rango de color para fuego (rojo-amarillo en HSV)
        fire_lower1 = np.array([0, 70, 150])
        fire_upper1 = np.array([10, 255, 255])
        fire_lower2 = np.array([170, 70, 150])
        fire_upper2 = np.array([180, 255, 255])
        
        # Crear máscaras y combinarlas
        mask1 = cv2.inRange(hsv, fire_lower1, fire_upper1)
        mask2 = cv2.inRange(hsv, fire_lower2, fire_upper2)
        fire_mask = cv2.bitwise_or(mask1, mask2)
        
        # Eliminar ruido y encontrar contornos
        kernel = np.ones((5, 5), np.uint8)
        fire_mask = cv2.morphologyEx(fire_mask, cv2.MORPH_OPEN, kernel)
        fire_mask = cv2.morphologyEx(fire_mask, cv2.MORPH_CLOSE, kernel)
        
        contours, _ = cv2.findContours(fire_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        for contour in contours:
            # Filtrar por área mínima
            area = cv2.contourArea(contour)
            if area < 100:  # Ignorar áreas pequeñas
                continue
            
            # Obtener el rectángulo delimitador
            x, y, w, h = cv2.boundingRect(contour)
            
            # Calcular confianza basada en área del contorno
            # El porcentaje del frame que ocupa el fuego y la saturación de colores
            frame_area = frame.shape[0] * frame.shape[1]
            confidence = min(0.9, (area / frame_area) * 10)  # Limitar a 0.9 máximo
            
            # Verificación adicional: los píxeles de fuego deben ser brillantes (valor alto en HSV)
            roi = frame[y:y+h, x:x+w]
            hsv_roi = hsv[y:y+h, x:x+w]
            fire_pixels = cv2.countNonZero(cv2.inRange(hsv_roi, fire_lower1, fire_upper1)) + \
                          cv2.countNonZero(cv2.inRange(hsv_roi, fire_lower2, fire_upper2))
            
            roi_area = roi.shape[0] * roi.shape[1]
            if roi_area > 0 and fire_pixels / roi_area > 0.3:  # Al menos 30% de píxeles de fuego
                detections.append({
                    'type': 'fire',
                    'confidence': float(confidence),
                    'bbox': [x, y, w, h]
                })
        
        # 2. Detección de humo basada en textura y color
        # El humo suele ser grisáceo con bordes difusos
        
        # Aplicar desenfoque gaussiano para reducir ruido
        blurred = cv2.GaussianBlur(gray, (21, 21), 0)
        
        # Umbral adaptativo para detectar regiones grisáceas
        thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                     cv2.THRESH_BINARY_INV, 11, 2)
        
        # Eliminar ruido
        smoke_mask = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
        smoke_mask = cv2.morphologyEx(smoke_mask, cv2.MORPH_CLOSE, kernel)
        
        smoke_contours, _ = cv2.findContours(smoke_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        for contour in smoke_contours:
            area = cv2.contourArea(contour)
            if area < 200:  # Más grande que para fuego, el humo suele ocupar más área
                continue
            
            x, y, w, h = cv2.boundingRect(contour)
            
            # Calcular confianza basada en propiedades del humo
            frame_area = frame.shape[0] * frame.shape[1]
            confidence = min(0.7, (area / frame_area) * 8)  # Confianza máxima menor que para fuego
            
            # Verificación: en regiones de humo, la desviación estándar de color debería ser baja
            # (colores homogéneos) y la luminosidad moderada
            roi = frame[y:y+h, x:x+w]
            gray_roi = gray[y:y+h, x:x+w]
            mean_val = np.mean(gray_roi)
            std_val = np.std(gray_roi)
            
            # Criterios para humo: valor medio grisáceo y baja desviación estándar
            if 80 < mean_val < 200 and std_val < 40:
                # Verificar que no es simplemente una pared gris
                edges = cv2.Canny(gray_roi, 50, 150)
                edge_percentage = cv2.countNonZero(edges) / (roi.shape[0] * roi.shape[1])
                
                # El humo tiene pocos bordes definidos
                if edge_percentage < 0.05:
                    detections.append({
                        'type': 'smoke',
                        'confidence': float(confidence),
                        'bbox': [x, y, w, h]
                    })
        
        return detections
    
    def _detect_spills(self, frame, camera_id):
        """
        Detecta posibles derrames líquidos en el suelo.
        
        Utiliza segmentación por color y análisis de textura.
        """
        # Implementación simulada
        # En una implementación real, buscaríamos cambios de reflectividad o color en el suelo
        
        # Simular detección esporádica
        import random
        if random.random() < 0.05 and self._can_send_alert('spill', camera_id):  # 5% de probabilidad
            alert_description = "Posible derrame detectado en el suelo"
            self._send_safety_alert('spill_detected', alert_description, frame, camera_id)
    
    def _detect_restricted_access(self, frame, detections, camera_id):
        """Detecta personas en áreas restringidas."""
        # Obtener zonas restringidas para esta cámara
        restricted_boxes = self.restricted_zones.get(camera_id, [])
        
        if not restricted_boxes:
            return
            
        for detection in detections:
            if detection['class'] == 'person' and detection['confidence'] > 0.7:
                person_box = detection['bbox']
                
                # Verificar si la persona está en alguna zona restringida
                for zone_box in restricted_boxes:
                    if self._boxes_overlap(person_box, zone_box):
                        if self._can_send_alert('restricted', camera_id):
                            alert_description = "Persona detectada en zona restringida"
                            self._send_safety_alert('restricted_access', alert_description, frame, camera_id)
                            break
    
    def _detect_machinery_proximity(self, frame, detections, camera_id):
        """Detecta personas demasiado cerca de maquinaria peligrosa."""
        # Simular máquinas peligrosas (en un sistema real, estas vendrían de una configuración)
        # Formato: [x, y, width, height, safe_distance]
        machinery = []
        
        # Dependiendo de la cámara, definir maquinaria diferente
        if camera_id == "cam1":
            machinery = [
                [100, 200, 150, 100, 50],  # Sierra circular
                [400, 300, 200, 150, 70]   # Prensa hidráulica
            ]
        elif camera_id == "cam2":
            machinery = [
                [250, 150, 180, 120, 60]   # Robot de soldadura
            ]
        
        for detection in detections:
            if detection['class'] == 'person' and detection['confidence'] > 0.7:
                person_box = detection['bbox']
                
                for machine in machinery:
                    machine_box = [machine[0], machine[1], machine[0] + machine[2], machine[1] + machine[3]]
                    safe_distance = machine[4]
                    
                    distance = self._calculate_distance(person_box, machine_box)
                    
                    if distance < safe_distance and self._can_send_alert('machinery', camera_id):
                        alert_description = f"Persona demasiado cerca de maquinaria peligrosa ({distance}px < {safe_distance}px)"
                        self._send_safety_alert('machinery_proximity', alert_description, frame, camera_id)
    
    def _analyze_work_posture(self, frame, detections, camera_id):
        """
        Analiza la postura de los trabajadores para identificar posiciones ergonómicamente peligrosas.
        
        Utiliza estimación de pose para detectar posturas incorrectas como:
        - Espalda excesivamente inclinada
        - Levantamiento incorrecto de cargas
        - Posturas forzadas mantenidas
        """
        # En una implementación real, utilizaríamos un modelo de estimación de pose
        # como MediaPipe o BlazePose, similar al detector de manos levantadas
        
        try:
            import mediapipe as mp
            
            for detection in detections:
                if detection['class'] == 'person' and detection['confidence'] > 0.8:
                    # Extraer región de la persona
                    box = detection['bbox']
                    person_img = frame[box[1]:box[3], box[0]:box[2]]
                    
                    if person_img.size == 0:
                        continue
                        
                    # Procesar con MediaPipe para obtener landmarks
                    # Aquí sólo simularemos la detección
                    import random
                    if random.random() < 0.1 and self._can_send_alert('posture', camera_id):
                        alert_description = "Posible postura de trabajo peligrosa detectada"
                        self._send_safety_alert('bad_posture', alert_description, frame, camera_id)
                        
        except ImportError:
            # Si no está disponible MediaPipe, loguear y continuar
            logger.warning("MediaPipe no disponible para análisis de postura")
    
    def _analyze_worker_density(self, frame, detections, camera_id):
        """
        Analiza la densidad de trabajadores para identificar posibles sobrecarga en zonas de trabajo.
        
        Importante para:
        - Prevención de accidentes por espacio insuficiente
        - Cumplimiento de normativas de ocupación
        - Optimización de flujos de trabajo
        """
        # Contar personas
        person_count = sum(1 for d in detections if d['class'] == 'person' and d['confidence'] > 0.7)
        
        # Umbrales de densidad por cámara (ejemplo)
        density_thresholds = {
            "cam1": 5,   # Máximo 5 personas en área de cam1
            "cam2": 3,   # Máximo 3 personas en área de cam2
            "default": 8  # Valor por defecto
        }
        
        max_people = density_thresholds.get(camera_id, density_thresholds["default"])
        
        if person_count > max_people and self._can_send_alert('crowd', camera_id):
            alert_description = f"Demasiadas personas en zona de trabajo ({person_count} > {max_people})"
            self._send_safety_alert('worker_density', alert_description, frame, camera_id)
    
    def _send_safety_alert(self, alert_type, description, frame, camera_id):
        """Envía una alerta de seguridad industrial."""
        # Capturar imagen de la alerta
        timestamp = datetime.now().isoformat()
        
        # Crear la alerta con toda la información relevante
        alert_data = {
            'type': alert_type,
            'description': description,
            'camera_id': camera_id,
            'timestamp': timestamp,
            'priority': self._get_priority_for_alert_type(alert_type),
            'safety_category': self._get_category_for_alert_type(alert_type)
        }
        
        # Registrar la última alerta para evitar duplicados en corto tiempo
        alert_key = f"{alert_type}_{camera_id}"
        self.last_alerts[alert_key] = datetime.now()
        
        # Enviar la alerta
        self.alert_manager.add_alert(alert_data)
        logger.info(f"Alerta de seguridad industrial generada: {description}")
    
    # Métodos auxiliares
    
    def _get_zone_for_camera(self, camera_id):
        """Determina a qué zona pertenece una cámara."""
        # Simulación simple, en un sistema real esto vendría de la configuración
        zone_mapping = {
            "cam1": "factory_floor",
            "cam2": "chemical_area",
            "cam3": "loading_dock",
            "cam4": "office"
        }
        return zone_mapping.get(camera_id, "factory_floor")
    
    def _can_send_alert(self, alert_category, camera_id):
        """
        Verifica si podemos enviar una alerta basado en el tiempo transcurrido desde la última.
        Evita saturación de alertas del mismo tipo en la misma ubicación.
        """
        alert_key = f"{alert_category}_{camera_id}"
        interval = self.alert_intervals.get(alert_category, 60)  # Intervalo en segundos
        
        if alert_key in self.last_alerts:
            time_diff = (datetime.now() - self.last_alerts[alert_key]).total_seconds()
            return time_diff > interval
            
        return True  # Si no hay alerta previa, podemos enviar
    
    def _get_priority_for_alert_type(self, alert_type):
        """Determina la prioridad de la alerta según su tipo."""
        priority_mapping = {
            'fire_detected': 'critical',
            'spill_detected': 'high',
            'restricted_access': 'medium',
            'machinery_proximity': 'high',
            'ppe_violation': 'medium',
            'bad_posture': 'low',
            'worker_density': 'medium'
        }
        return priority_mapping.get(alert_type, 'medium')
    
    def _get_category_for_alert_type(self, alert_type):
        """Clasifica el tipo de alerta en categorías más amplias."""
        category_mapping = {
            'fire_detected': 'emergency',
            'spill_detected': 'environmental',
            'restricted_access': 'security',
            'machinery_proximity': 'safety',
            'ppe_violation': 'compliance',
            'bad_posture': 'ergonomics',
            'worker_density': 'occupational'
        }
        return category_mapping.get(alert_type, 'general')
    
    def _boxes_overlap(self, box1, box2):
        """Verifica si dos bounding boxes se solapan."""
        # Convertir formato [x, y, w, h] a [x1, y1, x2, y2] si es necesario
        if len(box1) == 4 and len(box2) == 4:
            if isinstance(box1[2], int) and box1[2] < 1000:  # Probable [x, y, w, h]
                box1 = [box1[0], box1[1], box1[0] + box1[2], box1[1] + box1[3]]
                
            if isinstance(box2[2], int) and box2[2] < 1000:  # Probable [x, y, w, h]
                box2 = [box2[0], box2[1], box2[0] + box2[2], box2[1] + box2[3]]
                
        # Comprobar solapamiento
        return not (box1[2] < box2[0] or box1[0] > box2[2] or box1[3] < box2[1] or box1[1] > box2[3])
    
    def _calculate_distance(self, box1, box2):
        """Calcula la distancia mínima entre dos bounding boxes."""
        # Centros de las cajas
        center1 = [(box1[0] + box1[2]) / 2, (box1[1] + box1[3]) / 2]
        center2 = [(box2[0] + box2[2]) / 2, (box2[1] + box2[3]) / 2]
        
        # Distancia euclidiana
        return np.sqrt((center1[0] - center2[0])**2 + (center1[1] - center2[1])**2)

    def _analyze_posture(self, person_detection, frame):
        """
        Analiza si la postura de trabajo es ergonómica usando MediaPipe.
        
        Args:
            person_detection (dict): Detección de una persona
            frame (numpy.ndarray): Frame completo
            
        Returns:
            tuple: (es_ergonómica, tipo_problema, confianza)
        """
        try:
            import mediapipe as mp
            
            # Extraer región de la persona del frame
            x, y, w, h = person_detection['bbox']
            
            # Asegurar que las coordenadas están dentro de los límites del frame
            frame_height, frame_width = frame.shape[:2]
            x = max(0, x)
            y = max(0, y)
            w = min(w, frame_width - x)
            h = min(h, frame_height - y)
            
            # Si el área es muy pequeña, saltamos el análisis
            if w < 30 or h < 60:
                return (True, None, 0)
            
            person_image = frame[y:y+h, x:x+w]
            
            # Inicializar el detector de pose si no existe
            if not hasattr(self, 'pose_detector'):
                self.pose_detector = mp.solutions.pose.Pose(
                    static_image_mode=False,
                    min_detection_confidence=0.6,
                    min_tracking_confidence=0.6
                )
            
            # Detectar poses
            results = self.pose_detector.process(cv2.cvtColor(person_image, cv2.COLOR_BGR2RGB))
            
            # Si no se detectan landmarks, no podemos analizar la postura
            if not results.pose_landmarks:
                return (True, None, 0)
            
            landmarks = results.pose_landmarks.landmark
            mp_pose = mp.solutions.pose
            
            # Verificar si se detectaron todos los puntos clave necesarios
            required_landmarks = [
                mp_pose.PoseLandmark.LEFT_SHOULDER, 
                mp_pose.PoseLandmark.RIGHT_SHOULDER,
                mp_pose.PoseLandmark.LEFT_HIP, 
                mp_pose.PoseLandmark.RIGHT_HIP,
                mp_pose.PoseLandmark.LEFT_KNEE, 
                mp_pose.PoseLandmark.RIGHT_KNEE,
                mp_pose.PoseLandmark.LEFT_ANKLE, 
                mp_pose.PoseLandmark.RIGHT_ANKLE
            ]
            
            for landmark in required_landmarks:
                if landmark.value >= len(landmarks):
                    return (True, None, 0)
            
            # Extraer coordenadas
            left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value]
            right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value]
            left_hip = landmarks[mp_pose.PoseLandmark.LEFT_HIP.value]
            right_hip = landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value]
            left_knee = landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value]
            right_knee = landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value]
            left_ankle = landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value]
            right_ankle = landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value]
            
            # 1. Verificar si está agachado inadecuadamente
            # Calcular el ángulo de la espalda (entre hombros y caderas)
            back_angle = self._calculate_angle(
                (left_shoulder.x + right_shoulder.x) / 2,
                (left_shoulder.y + right_shoulder.y) / 2,
                (left_hip.x + right_hip.x) / 2,
                (left_hip.y + right_hip.y) / 2,
                (left_knee.x + right_knee.x) / 2,
                (left_knee.y + right_knee.y) / 2
            )
            
            # Si está inclinado hacia adelante más de 45 grados
            if 45 < back_angle < 135:
                # Verificar si las rodillas están dobladas (buena postura al levantar)
                knee_angle = self._calculate_angle(
                    (left_hip.x + right_hip.x) / 2,
                    (left_hip.y + right_hip.y) / 2,
                    (left_knee.x + right_knee.x) / 2,
                    (left_knee.y + right_knee.y) / 2,
                    (left_ankle.x + right_ankle.x) / 2,
                    (left_ankle.y + right_ankle.y) / 2
                )
                
                # Si las rodillas están relativamente rectas mientras la espalda está inclinada
                if knee_angle > 160:
                    return (False, "bad_posture_lifting", 0.8)
            
            # 2. Verificar si está en posición forzada (brazos por encima de los hombros)
            left_wrist = landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value]
            right_wrist = landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value]
            
            if left_wrist.y < left_shoulder.y - 0.05 and right_wrist.y < right_shoulder.y - 0.05:
                # Ambos brazos elevados por encima de los hombros
                return (False, "arms_overhead", 0.75)
            
            # 3. Verificar si está en cuclillas por tiempo prolongado
            # Medimos la distancia entre caderas y tobillos
            hip_ankle_distance = ((left_hip.y - left_ankle.y) + (right_hip.y - right_ankle.y)) / 2
            
            if hip_ankle_distance < 0.3:  # Cuclillas (distancia corta entre caderas y tobillos)
                return (False, "prolonged_squatting", 0.7)
            
            # Por defecto, la postura es aceptable
            return (True, None, 0.6)
            
        except Exception as e:
            logger.error(f"Error en análisis de postura: {str(e)}")
            return (True, None, 0)  # Por defecto, asumir que la postura es correcta en caso de error
        
    def _calculate_angle(self, x1, y1, x2, y2, x3, y3):
        """
        Calcula el ángulo entre tres puntos en grados.
        
        Args:
            x1, y1: Coordenadas del primer punto
            x2, y2: Coordenadas del segundo punto (vértice)
            x3, y3: Coordenadas del tercer punto
            
        Returns:
            float: Ángulo en grados (0-180)
        """
        import math
        
        # Calcular vectores
        vector1 = [x1 - x2, y1 - y2]
        vector2 = [x3 - x2, y3 - y2]
        
        # Calcular producto punto
        dot_product = vector1[0] * vector2[0] + vector1[1] * vector2[1]
        
        # Calcular magnitudes
        magnitude1 = math.sqrt(vector1[0]**2 + vector1[1]**2)
        magnitude2 = math.sqrt(vector2[0]**2 + vector2[1]**2)
        
        # Calcular ángulo en radianes
        if magnitude1 * magnitude2 == 0:
            return 0
        
        cos_angle = max(-1, min(1, dot_product / (magnitude1 * magnitude2)))
        angle_rad = math.acos(cos_angle)
        
        # Convertir a grados
        angle_deg = angle_rad * 180 / math.pi
        
        return angle_deg 

    def _process_frame(self, frame, camera_id, detections):
        """
        Procesa un frame para detectar riesgos industriales.
        
        Args:
            frame (numpy.ndarray): Frame a analizar
            camera_id (str): ID de la cámara
            detections (list): Lista de detecciones previas
            
        Returns:
            list: Riesgos detectados
        """
        if not self.active or frame is None:
            return []
        
        zone = self._get_zone_for_camera(camera_id)
        risks = []
        
        # 1. Detección de fuego/humo
        if self.safety_config['fire_detection']:
            fire_detections = self._detect_fire(frame)
            for detection in fire_detections:
                risk_type = detection['type']  # 'fire' o 'smoke'
                confidence = detection['confidence']
                if confidence >= self.detection_thresholds['fire']:
                    # Generar alerta de fuego/humo
                    if self._can_send_alert('fire', camera_id):
                        self._generate_alert(
                            camera_id, 
                            'fire_detected',
                            f"Posible {risk_type} detectado en {zone}",
                            detection['bbox'],
                            frame
                        )
                    risks.append({'type': risk_type, 'bbox': detection['bbox']})
        
        # 2. Procesar detecciones de personas
        people = [d for d in detections if d['class'] == 'person']
        for person in people:
            person_risks = []
            
            # 2.1. Verificar EPP si está configurado
            if self.safety_config['ppe_detection']:
                ppe_results = self._detect_ppe(person, frame)
                required_ppe = self.zone_ppe_requirements.get(zone, [])
                
                # Verificar cada tipo de EPP requerido
                missing_ppe = []
                
                if 'helmet' in required_ppe and not ppe_results['has_helmet']:
                    missing_ppe.append('casco')
                    
                if 'safety_vest' in required_ppe and not ppe_results['has_safety_vest']:
                    missing_ppe.append('chaleco reflectante')
                    
                if 'gloves' in required_ppe and not ppe_results['has_gloves']:
                    missing_ppe.append('guantes')
                    
                if 'face_mask' in required_ppe and not ppe_results['has_face_mask']:
                    missing_ppe.append('mascarilla')
                    
                if 'goggles' in required_ppe and not ppe_results['has_goggles']:
                    missing_ppe.append('gafas protectoras')
                    
                if 'safety_boots' in required_ppe and not ppe_results['has_safety_boots']:
                    missing_ppe.append('botas de seguridad')
                
                # Si falta algún EPP, generar alerta
                if missing_ppe:
                    person_risks.append('missing_ppe')
                    if self._can_send_alert('ppe', camera_id):
                        self._generate_alert(
                            camera_id,
                            'ppe_violation',
                            f"Trabajador sin {', '.join(missing_ppe)} en {zone}",
                            person['bbox'],
                            frame
                        )
            
            # 2.2. Verificar postura si está configurado
            if self.safety_config['posture_analysis']:
                is_ergonomic, problem_type, confidence = self._analyze_posture(person, frame)
                if not is_ergonomic and confidence >= self.detection_thresholds['posture']:
                    person_risks.append('bad_posture')
                    
                    # Determinar mensaje según el tipo de problema
                    posture_messages = {
                        'bad_posture_lifting': f"Trabajador levantando carga incorrectamente en {zone}",
                        'arms_overhead': f"Trabajador con brazos elevados de forma prolongada en {zone}",
                        'prolonged_squatting': f"Trabajador en cuclillas por tiempo prolongado en {zone}"
                    }
                    
                    message = posture_messages.get(problem_type, f"Postura no ergonómica detectada en {zone}")
                    
                    if self._can_send_alert('posture', camera_id):
                        self._generate_alert(
                            camera_id,
                            'bad_posture',
                            message,
                            person['bbox'],
                            frame
                        )
            
            # 2.3. Verificar acceso a zonas restringidas
            if self.safety_config['restricted_area']:
                if camera_id in self.restricted_zones:
                    person_box = person['bbox']
                    
                    for restricted_zone in self.restricted_zones[camera_id]:
                        if self._boxes_overlap(person_box, restricted_zone):
                            person_risks.append('restricted_zone')
                            
                            if self._can_send_alert('restricted', camera_id):
                                self._generate_alert(
                                    camera_id,
                                    'restricted_access',
                                    f"Trabajador en zona restringida en {zone}",
                                    person_box,
                                    frame
                                )
                            break
            
            # Añadir riesgos de esta persona
            if person_risks:
                risks.extend([{'type': risk, 'person': person['bbox']} for risk in person_risks])
        
        # 3. Analizar proximidad peligrosa a maquinaria (simulado)
        # En un sistema real, tendríamos detecciones de maquinaria
        # Aquí simulamos algunas máquinas para demostración
        if self.safety_config['machinery_proximity']:
            machines = [
                {'bbox': [50, 100, 150, 150], 'name': 'Torno CNC'},
                {'bbox': [300, 200, 100, 100], 'name': 'Prensa hidráulica'},
                {'bbox': [500, 150, 120, 180], 'name': 'Robot industrial'}
            ]
            
            for person in people:
                person_box = person['bbox']
                
                for machine in machines:
                    distance = self._calculate_distance(person_box, machine['bbox'])
                    
                    # Distancia peligrosa (en píxeles)
                    if distance < 50:  # Umbral arbitrario para demostración
                        risks.append({'type': 'machine_proximity', 'person': person_box, 'machine': machine['bbox']})
                        
                        if self._can_send_alert('machinery', camera_id):
                            self._generate_alert(
                                camera_id,
                                'machinery_proximity',
                                f"Proximidad peligrosa a {machine['name']} en {zone}",
                                person_box,
                                frame
                            )
        
        return risks 

    def set_active(self, active=True):
        """Activa o desactiva el agente.
        
        Args:
            active (bool): Estado de activación deseado
        """
        self.active = active
        
        # Verificar el nombre correcto del atributo
        if hasattr(self, 'industrial_safety_manager'):
            self.industrial_safety_manager.set_active(active)
        elif hasattr(self, 'safety_manager'):
            self.safety_manager.set_active(active)
        
        logger.info(f"Agente industrial {'activado' if active else 'desactivado'}") 

--------------------------------------------------------------------------------

📄 src\industrial_safety_manager.py
--------------------------------------------------------------------------------
def get_recent_violations(self):
    """Obtiene las violaciones recientes de seguridad industrial"""
    # Implementación básica para evitar errores
    return 0  # Sin violaciones por defecto

def get_safe_zones(self):
    """Obtiene el número de zonas seguras configuradas"""
    # Implementación básica
    return 4  # Número por defecto 

--------------------------------------------------------------------------------

📄 src\mcp_framework.py
--------------------------------------------------------------------------------
# src/mcp_framework.py
import threading
import queue
import time
import json
import logging
from typing import Dict, List, Any, Callable, Optional
from enum import Enum
import uuid

# Configuración de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("mcp_framework")

class MessageType(Enum):
    """Tipos de mensajes estándar en el protocolo MCP"""
    QUERY = "query"              # Solicitud de información
    RESPONSE = "response"        # Respuesta a una solicitud
    NOTIFICATION = "notification"  # Notificación de evento
    COMMAND = "command"          # Orden para ejecutar una acción
    RESULT = "result"            # Resultado de una acción
    ERROR = "error"              # Notificación de error


class Message:
    """Clase para representar mensajes en el protocolo MCP"""
    
    def __init__(self, 
                 msg_type: MessageType, 
                 sender: str, 
                 receiver: str, 
                 content: Any,
                 correlation_id: Optional[str] = None,
                 priority: int = 1):
        """
        Inicializa un mensaje MCP
        
        Args:
            msg_type: Tipo de mensaje
            sender: ID del agente emisor
            receiver: ID del agente receptor ("broadcast" para todos)
            content: Contenido del mensaje (debe ser serializable)
            correlation_id: ID para correlacionar consultas y respuestas
            priority: Prioridad del mensaje (1-5, donde 5 es máxima prioridad)
        """
        self.type = msg_type
        self.sender = sender
        self.receiver = receiver
        self.content = content
        self.timestamp = time.time()
        self.correlation_id = correlation_id or f"{int(self.timestamp * 1000)}-{sender}"
        self.priority = max(1, min(5, priority))  # Prioridad entre 1 y 5
    
    def to_dict(self) -> Dict:
        """Convierte el mensaje a un diccionario"""
        return {
            "type": self.type.value,
            "sender": self.sender,
            "receiver": self.receiver,
            "content": self.content,
            "timestamp": self.timestamp,
            "correlation_id": self.correlation_id,
            "priority": self.priority
        }
    
    @classmethod
    def from_dict(cls, data: Dict) -> 'Message':
        """Crea un mensaje a partir de un diccionario"""
        return cls(
            msg_type=MessageType(data["type"]),
            sender=data["sender"],
            receiver=data["receiver"],
            content=data["content"],
            correlation_id=data["correlation_id"],
            priority=data["priority"]
        )


class SharedMemory:
    """Memoria compartida entre agentes"""
    
    def __init__(self):
        self._data = {}
        self._lock = threading.RLock()
        self._subscriptions = {}
    
    def set(self, key: str, value: Any, publisher: str) -> None:
        """
        Almacena un valor en la memoria compartida
        
        Args:
            key: Clave para el valor
            value: Valor a almacenar
            publisher: ID del agente que publica
        """
        with self._lock:
            old_value = self._data.get(key)
            self._data[key] = value
            
            # Notificar a los suscriptores
            if key in self._subscriptions:
                for subscriber in self._subscriptions[key]:
                    self._notify_subscriber(subscriber, key, value, old_value, publisher)
    
    def get(self, key: str, default=None) -> Any:
        """Obtiene un valor de la memoria compartida"""
        with self._lock:
            return self._data.get(key, default)
    
    def delete(self, key: str) -> None:
        """Elimina un valor de la memoria compartida"""
        with self._lock:
            if key in self._data:
                del self._data[key]
    
    def subscribe(self, key: str, subscriber: str) -> None:
        """
        Suscribe un agente a cambios en una clave
        
        Args:
            key: Clave a la que suscribirse
            subscriber: ID del agente suscriptor
        """
        with self._lock:
            if key not in self._subscriptions:
                self._subscriptions[key] = set()
            self._subscriptions[key].add(subscriber)
    
    def unsubscribe(self, key: str, subscriber: str) -> None:
        """Cancela la suscripción de un agente a una clave"""
        with self._lock:
            if key in self._subscriptions and subscriber in self._subscriptions[key]:
                self._subscriptions[key].remove(subscriber)
                if not self._subscriptions[key]:
                    del self._subscriptions[key]
    
    def _notify_subscriber(self, subscriber: str, key: str, 
                           new_value: Any, old_value: Any, publisher: str) -> None:
        """
        Notifica a un suscriptor sobre un cambio
        Este método debe ser sobreescrito para enviar la notificación
        """
        # En la implementación base, solo registramos
        logger.debug(f"Cambio en {key}: {old_value} -> {new_value} (suscriptor: {subscriber})")
        # La implementación real enviará un mensaje al suscriptor


class MCPOrchestrator:
    """Orquestador central del protocolo MCP"""
    
    def __init__(self):
        self.agents = {}  # Registro de agentes {agent_id: agent_info}
        self.memory = SharedMemory()
        self.message_queue = queue.PriorityQueue()
        self.is_running = False
        self.processing_thread = None
    
    def register_agent(self, agent_id: str, capabilities: List[str], 
                      callback: Callable[[Message], None]) -> bool:
        """
        Registra un agente en el sistema
        
        Args:
            agent_id: Identificador único del agente
            capabilities: Lista de capacidades del agente
            callback: Función para enviar mensajes al agente
            
        Returns:
            bool: True si se registró correctamente
        """
        if agent_id in self.agents:
            logger.warning(f"Agente {agent_id} ya registrado, actualizando información")
        
        self.agents[agent_id] = {
            "id": agent_id,
            "capabilities": capabilities,
            "callback": callback,
            "status": "active",
            "last_seen": time.time()
        }
        
        logger.info(f"Agente {agent_id} registrado con capacidades: {capabilities}")
        return True
    
    def unregister_agent(self, agent_id: str) -> bool:
        """Elimina un agente del registro"""
        if agent_id in self.agents:
            del self.agents[agent_id]
            logger.info(f"Agente {agent_id} eliminado del registro")
            return True
        return False
    
    def send_message(self, message: Message) -> bool:
        """
        Envía un mensaje a través del sistema MCP
        
        Args:
            message: Mensaje a enviar
            
        Returns:
            bool: True si el mensaje se puso en cola correctamente
        """
        # Verificar que el remitente está registrado
        if message.sender != "orchestrator" and message.sender not in self.agents:
            logger.warning(f"Mensaje rechazado: remitente {message.sender} no registrado")
            return False
        
        # Poner mensaje en cola con prioridad
        # Menor número = mayor prioridad en PriorityQueue
        priority = 6 - message.priority  # Convertir 5->1, 4->2, etc.
        self.message_queue.put((priority, message))
        return True
    
    def start(self):
        """Inicia el procesamiento de mensajes"""
        if self.is_running:
            return
        
        self.is_running = True
        self.processing_thread = threading.Thread(target=self._process_messages)
        self.processing_thread.daemon = True
        self.processing_thread.start()
        
        logger.info("Orquestador MCP iniciado")
    
    def stop(self):
        """Detiene el procesamiento de mensajes"""
        self.is_running = False
        if self.processing_thread:
            self.processing_thread.join(timeout=2.0)
        logger.info("Orquestador MCP detenido")
    
    def _process_messages(self):
        """Procesa continuamente los mensajes en cola"""
        while self.is_running:
            try:
                # Esperar hasta 0.5 segundos por un mensaje
                priority, message = self.message_queue.get(timeout=0.5)
                
                # Procesar el mensaje
                self._route_message(message)
                
                # Marcar como procesado
                self.message_queue.task_done()
                
            except queue.Empty:
                # Sin mensajes en la cola
                pass
            except Exception as e:
                logger.error(f"Error procesando mensaje: {e}")
    
    def _route_message(self, message: Message):
        """
        Encamina un mensaje al destinatario correspondiente
        
        Args:
            message: Mensaje a encaminar
        """
        # Actualizar timestamp de último mensaje del remitente
        if message.sender in self.agents:
            self.agents[message.sender]["last_seen"] = time.time()
        
        # Si el mensaje es para el orquestador, procesarlo
        if message.receiver == "orchestrator":
            self._handle_orchestrator_message(message)
            return
        
        # Si es un mensaje broadcast, enviarlo a todos los agentes
        if message.receiver == "broadcast":
            for agent_id, agent_info in self.agents.items():
                if agent_id != message.sender:  # No enviar al remitente
                    try:
                        agent_info["callback"](message)
                    except Exception as e:
                        logger.error(f"Error enviando mensaje broadcast a {agent_id}: {e}")
            return
        
        # Enviar a un agente específico
        if message.receiver in self.agents:
            try:
                self.agents[message.receiver]["callback"](message)
            except Exception as e:
                logger.error(f"Error enviando mensaje a {message.receiver}: {e}")
        else:
            logger.warning(f"Destinatario desconocido: {message.receiver}")
            
            # Enviar mensaje de error al remitente
            if message.sender in self.agents:
                error_message = Message(
                    msg_type=MessageType.ERROR,
                    sender="orchestrator",
                    receiver=message.sender,
                    content=f"Destinatario {message.receiver} no encontrado",
                    correlation_id=message.correlation_id,
                    priority=message.priority
                )
                try:
                    self.agents[message.sender]["callback"](error_message)
                except Exception as e:
                    logger.error(f"Error enviando mensaje de error a {message.sender}: {e}")
    
    def _handle_orchestrator_message(self, message: Message):
        """
        Procesa mensajes dirigidos al orquestador
        
        Args:
            message: Mensaje a procesar
        """
        if message.type == MessageType.QUERY:
            content = message.content
            
            # Consulta sobre agentes disponibles
            if content.get("query") == "available_agents":
                response = {
                    "agents": [
                        {"id": a_id, "capabilities": a_info["capabilities"], "status": a_info["status"]}
                        for a_id, a_info in self.agents.items()
                    ]
                }
                
                response_message = Message(
                    msg_type=MessageType.RESPONSE,
                    sender="orchestrator",
                    receiver=message.sender,
                    content=response,
                    correlation_id=message.correlation_id,
                    priority=message.priority
                )
                
                if message.sender in self.agents:
                    try:
                        self.agents[message.sender]["callback"](response_message)
                    except Exception as e:
                        logger.error(f"Error enviando respuesta a {message.sender}: {e}")
            
            # Consulta sobre valor en memoria
            elif content.get("query") == "memory_get":
                key = content.get("key")
                value = self.memory.get(key)
                
                response_message = Message(
                    msg_type=MessageType.RESPONSE,
                    sender="orchestrator",
                    receiver=message.sender,
                    content={"key": key, "value": value},
                    correlation_id=message.correlation_id,
                    priority=message.priority
                )
                
                if message.sender in self.agents:
                    try:
                        self.agents[message.sender]["callback"](response_message)
                    except Exception as e:
                        logger.error(f"Error enviando respuesta a {message.sender}: {e}")
        
        # Comando para modificar la memoria compartida
        elif message.type == MessageType.COMMAND:
            content = message.content
            
            if content.get("command") == "memory_set":
                key = content.get("key")
                value = content.get("value")
                
                if key and value is not None:
                    self.memory.set(key, value, message.sender)
                    
                    response_message = Message(
                        msg_type=MessageType.RESULT,
                        sender="orchestrator",
                        receiver=message.sender,
                        content={"status": "success", "key": key},
                        correlation_id=message.correlation_id,
                        priority=message.priority
                    )
                    
                    if message.sender in self.agents:
                        try:
                            self.agents[message.sender]["callback"](response_message)
                        except Exception as e:
                            logger.error(f"Error enviando respuesta a {message.sender}: {e}")
            
            elif content.get("command") == "memory_subscribe":
                key = content.get("key")
                
                if key:
                    self.memory.subscribe(key, message.sender)
                    
                    response_message = Message(
                        msg_type=MessageType.RESULT,
                        sender="orchestrator",
                        receiver=message.sender,
                        content={"status": "success", "key": key, "action": "subscribed"},
                        correlation_id=message.correlation_id,
                        priority=message.priority
                    )
                    
                    if message.sender in self.agents:
                        try:
                            self.agents[message.sender]["callback"](response_message)
                        except Exception as e:
                            logger.error(f"Error enviando respuesta a {message.sender}: {e}")


class MCPAgent:
    """Clase base para todos los agentes en el framework MCP."""
    
    def __init__(self, agent_id=None, name=None):
        self.agent_id = agent_id or str(uuid.uuid4())
        self.name = name or f"Agent-{self.agent_id[:8]}"
        self.active = False
        self.orchestrator = None
        self.logger = logging.getLogger(f"agent.{self.agent_id[:8]}")

    # Métodos que todos los agentes deben implementar
    def initialize(self):
        """Inicializa el agente con configuración y recursos."""
        pass
        
    def process(self, message):
        """Procesa un mensaje entrante."""
        pass
        
    def handle_command(self, command_data):
        """Maneja un comando administrativo."""
        pass
    
    def get_status(self):
        """Devuelve el estado actual del agente."""
        return {
            "id": self.agent_id,
            "name": self.name,
            "active": self.active,
            "type": self.__class__.__name__
        }


# Ejemplo de integración con el gestor de agentes existente
class MCPCompatibleAgentManager:
    """Versión del gestor de agentes compatible con MCP"""
    
    def __init__(self):
        # Crear orquestador MCP
        self.orchestrator = MCPOrchestrator()
        self.agents = {}
        
        # Iniciar orquestador
        self.orchestrator.start()
    
    def initialize_agent(self, agent_class, agent_id, capabilities, **kwargs):
        """
        Inicializa un agente compatible con MCP
        
        Args:
            agent_class: Clase del agente que hereda de MCPAgent
            agent_id: ID único para el agente
            capabilities: Lista de capacidades del agente
            **kwargs: Argumentos adicionales para el constructor del agente
        """
        # Crear instancia del agente
        agent = agent_class(agent_id, capabilities, self.orchestrator, **kwargs)
        
        # Almacenar referencia
        self.agents[agent_id] = agent
        
        return agent
    
    def start_all_agents(self):
        """Inicia todos los agentes"""
        for agent_id, agent in self.agents.items():
            agent.start()
    
    def stop_all_agents(self):
        """Detiene todos los agentes"""
        for agent_id, agent in self.agents.items():
            agent.stop()
        
        # Detener orquestador
        self.orchestrator.stop()
    
    def get_agent(self, agent_id):
        """Obtiene un agente por su ID"""
        return self.agents.get(agent_id)


# Ejemplo de implementación de un agente específico
class FaceDetectionMCPAgent(MCPAgent):
    """Agente MCP para detección facial"""
    
    def __init__(self, agent_id, capabilities, orchestrator, **kwargs):
        super().__init__(agent_id, capabilities, orchestrator)
        
        # Inicializar detector facial
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        self.min_size = kwargs.get('min_size', (30, 30))
        
        # Contadores y estadísticas
        self.faces_detected = 0
        self.frames_processed = 0
    
    def handle_message(self, message: Message):
        """Procesa mensajes recibidos"""
        if message.type == MessageType.COMMAND:
            content = message.content
            
            # Comando para procesar un frame
            if content.get('command') == 'process_frame':
                frame_data = content.get('frame')
                frame_id = content.get('frame_id')
                source_id = content.get('source_id')
                
                if frame_data:
                    # Convertir datos a imagen (asumiendo que es un array serializado)
                    import numpy as np
                    try:
                        frame = np.array(frame_data, dtype=np.uint8)
                        
                        # Procesar frame
                        result = self.process_frame(frame)
                        
                        # Enviar resultado
                        self.send_message(
                            receiver=message.sender,
                            msg_type=MessageType.RESULT,
                            content={
                                'result': 'faces_detected',
                                'frame_id': frame_id,
                                'source_id': source_id,
                                'faces': result['faces'],
                                'count': len(result['faces'])
                            },
                            correlation_id=message.correlation_id
                        )
                        
                        # Actualizar estadísticas en memoria compartida
                        self.update_stats(result['count'])
                        
                    except Exception as e:
                        logger.error(f"Error procesando frame: {e}")
                        
                        # Enviar error
                        self.send_message(
                            receiver=message.sender,
                            msg_type=MessageType.ERROR,
                            content={
                                'error': str(e),
                                'frame_id': frame_id,
                                'source_id': source_id
                            },
                            correlation_id=message.correlation_id
                        )
        
        elif message.type == MessageType.RESPONSE:
            # Procesar respuestas a consultas anteriores
            if message.sender == "orchestrator" and "value" in message.content:
                logger.debug(f"Recibida respuesta de memoria: {message.content}")
    
    def process_frame(self, frame):
        """
        Procesa un frame para detectar rostros
        
        Args:
            frame: Frame a procesar (numpy array)
            
        Returns:
            dict: Resultado del procesamiento con rostros detectados
        """
        self.frames_processed += 1
        
        # Convertir a escala de grises
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # Detectar rostros
        faces = self.face_cascade.detectMultiScale(
            gray,
            scaleFactor=1.1,
            minNeighbors=5,
            minSize=self.min_size
        )
        
        # Convertir a lista de diccionarios
        face_list = []
        for (x, y, w, h) in faces:
            face_list.append({
                'x': int(x),
                'y': int(y),
                'width': int(w),
                'height': int(h)
            })
        
        self.faces_detected += len(face_list)
        
        return {
            'faces': face_list,
            'count': len(face_list)
        }
    
    def update_stats(self, face_count):
        """Actualiza estadísticas en memoria compartida"""
        # Actualizar contador total de rostros
        self.set_memory(
            key=f"stats.{self.agent_id}.total_faces",
            value=self.faces_detected
        )
        
        # Actualizar contador de frames
        self.set_memory(
            key=f"stats.{self.agent_id}.frames_processed",
            value=self.frames_processed
        )
        
        # Actualizar último conteo
        self.set_memory(
            key=f"stats.{self.agent_id}.last_detection",
            value={
                'count': face_count,
                'timestamp': time.time()
            }
        )

class MCPMessage:
    """Mensaje del sistema MCP."""
    
    def __init__(self, sender, msg_type, data, target=None):
        """
        Inicializa un mensaje MCP.
        
        Args:
            sender: Identificador del remitente
            msg_type: Tipo de mensaje (detection, alert, command, etc.)
            data: Datos del mensaje
            target: Destinatario específico (opcional)
        """
        self.id = str(uuid.uuid4())
        self.sender = sender
        self.target = target
        self.type = msg_type
        self.data = data
        self.timestamp = time.time()
    
    def __str__(self):
        return f"MCPMessage(id={self.id}, sender={self.sender}, target={self.target}, type={self.type})"

class MCPOrchestrator:
    """Orquestador central para el sistema MCP."""
    
    def __init__(self):
        """Inicializa el orquestador MCP."""
        self.agents = {}
        self.message_queue = queue.Queue()
        self.running = False
        self.thread = None
    
    def register_agent(self, agent):
        """
        Registra un agente en el orquestador.
        
        Args:
            agent: Instancia de MCPAgent
        """
        if agent.agent_id in self.agents:
            logger.warning(f"Agente {agent.agent_id} ya está registrado. Reemplazando.")
        
        self.agents[agent.agent_id] = agent
        agent.set_orchestrator(self)
        logger.info(f"Agente {agent.agent_id} registrado en el orquestador.")
    
    def unregister_agent(self, agent_id):
        """
        Elimina un agente del orquestador.
        
        Args:
            agent_id: ID del agente a eliminar
        """
        if agent_id in self.agents:
            del self.agents[agent_id]
            logger.info(f"Agente {agent_id} eliminado del orquestador.")
    
    def enqueue_message(self, message):
        """
        Encola un mensaje para ser procesado.
        
        Args:
            message: Instancia de MCPMessage
        """
        self.message_queue.put(message)
        logger.debug(f"Mensaje {message.id} encolado.")
    
    def _process_messages(self):
        """Procesa los mensajes en la cola."""
        while self.running:
            try:
                # Obtener mensaje con timeout para poder interrumpir el hilo
                message = self.message_queue.get(timeout=1.0)
                
                # Entregar a destinatario específico si está definido
                if message.target and message.target in self.agents:
                    self.agents[message.target].on_message(message)
                # O entregar a todos los agentes interesados
                else:
                    for agent_id, agent in self.agents.items():
                        if agent_id != message.sender:  # No enviar al remitente
                            if agent.is_interested_in(message):
                                agent.on_message(message)
                
                self.message_queue.task_done()
                
            except queue.Empty:
                # Timeout, seguir intentando
                pass
            except Exception as e:
                logger.error(f"Error procesando mensajes: {str(e)}")
    
    def start(self):
        """Inicia el orquestador."""
        if self.running:
            logger.warning("Orquestador ya está en ejecución.")
            return
        
        self.running = True
        self.thread = threading.Thread(target=self._process_messages, daemon=True)
        self.thread.start()
        logger.info("Orquestador MCP iniciado.")
    
    def stop(self):
        """Detiene el orquestador."""
        if not self.running:
            return
        
        self.running = False
        if self.thread:
            self.thread.join(timeout=5.0)
        logger.info("Orquestador MCP detenido.")
    
    def broadcast_message(self, sender, msg_type, data):
        """
        Envía un mensaje a todos los agentes.
        
        Args:
            sender: ID del remitente
            msg_type: Tipo de mensaje
            data: Datos del mensaje
        """
        message = MCPMessage(sender, msg_type, data)
        self.enqueue_message(message)
    
    def send_message(self, sender, target, msg_type, data):
        """
        Envía un mensaje a un agente específico.
        
        Args:
            sender: ID del remitente
            target: ID del destinatario
            msg_type: Tipo de mensaje
            data: Datos del mensaje
        """
        message = MCPMessage(sender, msg_type, data, target)
        self.enqueue_message(message)

class MCPAgent:
    """Clase base para agentes MCP."""
    
    def __init__(self, agent_id, name, interested_types=None):
        """
        Inicializa un agente MCP.
        
        Args:
            agent_id: Identificador único del agente
            name: Nombre descriptivo del agente
            interested_types: Tipos de mensajes en los que está interesado
        """
        self.agent_id = agent_id
        self.name = name
        self.interested_types = interested_types or []
        self.orchestrator = None
        self.running = False
        self.thread = None
    
    def set_orchestrator(self, orchestrator):
        """
        Establece el orquestador para este agente.
        
        Args:
            orchestrator: Instancia de MCPOrchestrator
        """
        self.orchestrator = orchestrator
    
    def is_interested_in(self, message):
        """
        Determina si este agente está interesado en un mensaje.
        
        Args:
            message: Instancia de MCPMessage
            
        Returns:
            bool: True si está interesado, False en caso contrario
        """
        if not self.interested_types:
            return True  # Interesado en todos los mensajes si no se especifica
        
        return message.type in self.interested_types
    
    def on_message(self, message):
        """
        Procesa un mensaje recibido.
        
        Args:
            message: Instancia de MCPMessage
        """
        # Método abstracto a implementar por las subclases
        pass
    
    def send_message(self, target, msg_type, data):
        """
        Envía un mensaje a otro agente.
        
        Args:
            target: ID del agente destinatario
            msg_type: Tipo de mensaje
            data: Datos del mensaje
        """
        if not self.orchestrator:
            logger.error(f"Agente {self.agent_id} no tiene orquestador asignado.")
            return
        
        self.orchestrator.send_message(self.agent_id, target, msg_type, data)
    
    def broadcast_message(self, msg_type, data):
        """
        Envía un mensaje a todos los agentes.
        
        Args:
            msg_type: Tipo de mensaje
            data: Datos del mensaje
        """
        if not self.orchestrator:
            logger.error(f"Agente {self.agent_id} no tiene orquestador asignado.")
            return
        
        self.orchestrator.broadcast_message(self.agent_id, msg_type, data)
    
    def start(self):
        """Inicia el agente."""
        # Implementar en subclases si es necesario
        pass
    
    def stop(self):
        """Detiene el agente."""
        # Implementar en subclases si es necesario
        pass

--------------------------------------------------------------------------------

📄 src\model_trainer.py
--------------------------------------------------------------------------------
import os
import json
import logging
import threading
import time
import uuid
import cv2
import numpy as np
from datetime import datetime

logger = logging.getLogger("model_trainer")

class ModelTrainer:
    """Entrenador de modelos de IA."""
    
    def __init__(self, models_dir='models'):
        """
        Inicializa el entrenador de modelos.
        
        Args:
            models_dir: Directorio para almacenar modelos entrenados
        """
        self.models_dir = models_dir
        self.models = {}
        self.training_jobs = {}
        
        # Crear directorio si no existe
        if not os.path.exists(models_dir):
            os.makedirs(models_dir)
            
        # Cargar modelos existentes
        self._load_models()
    
    def _load_models(self):
        """Carga información de modelos existentes."""
        for model_dir in os.listdir(self.models_dir):
            model_path = os.path.join(self.models_dir, model_dir)
            
            if os.path.isdir(model_path):
                metadata_file = os.path.join(model_path, 'metadata.json')
                
                if os.path.exists(metadata_file):
                    try:
                        with open(metadata_file, 'r') as f:
                            metadata = json.load(f)
                            self.models[model_dir] = metadata
                    except Exception as e:
                        logger.error(f"Error al cargar metadata del modelo {model_dir}: {str(e)}")
    
    def create_training_job(self, name, dataset_id, model_type, hyperparams=None):
        """
        Crea un trabajo de entrenamiento.
        
        Args:
            name: Nombre del modelo a entrenar
            dataset_id: ID del dataset a utilizar
            model_type: Tipo de modelo (yolo, tensorflow, etc.)
            hyperparams: Hiperparámetros para el entrenamiento
            
        Returns:
            str: ID del trabajo de entrenamiento
        """
        job_id = str(uuid.uuid4())
        
        # Configuración del trabajo
        job_config = {
            "id": job_id,
            "name": name,
            "dataset_id": dataset_id,
            "model_type": model_type,
            "hyperparams": hyperparams or {},
            "created_at": datetime.now().isoformat(),
            "status": "pending",
            "progress": 0,
            "model_id": None
        }
        
        # Registrar trabajo
        self.training_jobs[job_id] = job_config
        
        # Iniciar entrenamiento en segundo plano
        thread = threading.Thread(target=self._run_training_job, args=(job_id,))
        thread.daemon = True
        thread.start()
        
        return job_id
        
    def _run_training_job(self, job_id):
        """
        Ejecuta un trabajo de entrenamiento.
        
        Args:
            job_id: ID del trabajo de entrenamiento
        """
        job = self.training_jobs[job_id]
        
        try:
            # Actualizar estado
            job["status"] = "running"
            
            # Simular entrenamiento (en un sistema real, aquí se entrenaría el modelo)
            total_steps = 100
            for step in range(total_steps):
                progress = (step + 1) / total_steps * 100
                job["progress"] = progress
                
                # Simular trabajo de entrenamiento
                time.sleep(1)
                
                # En un sistema real, aquí se actualizaría el progreso basado en el entrenamiento actual
                
            # Crear ID de modelo
            model_id = str(uuid.uuid4())
            model_dir = os.path.join(self.models_dir, model_id)
            os.makedirs(model_dir)
            
            # Crear metadata del modelo
            model_metadata = {
                "id": model_id,
                "name": job["name"],
                "created_at": datetime.now().isoformat(),
                "dataset_id": job["dataset_id"],
                "type": job["model_type"],
                "hyperparams": job["hyperparams"],
                "metrics": {
                    "accuracy": 0.85,  # Valores simulados
                    "precision": 0.82,
                    "recall": 0.79,
                    "f1_score": 0.80
                },
                "status": "ready"
            }
            
            # Guardar metadata
            with open(os.path.join(model_dir, 'metadata.json'), 'w') as f:
                json.dump(model_metadata, f, indent=2)
            
            # Registrar modelo
            self.models[model_id] = model_metadata
            
            # Actualizar trabajo
            job["status"] = "completed"
            job["model_id"] = model_id
            
        except Exception as e:
            # Actualizar estado en caso de error
            job["status"] = "failed"
            job["error"] = str(e)
            logger.error(f"Error en trabajo de entrenamiento {job_id}: {str(e)}")

    def get_active_trainings(self):
        """
        Obtiene la lista de entrenamientos activos actualmente.
        
        Returns:
            list: Lista de entrenamientos activos
        """
        active_trainings = []
        for training_id, training in self.training_jobs.items():
            if training.get('status') == 'running':
                active_trainings.append({
                    'id': training_id,
                    'name': training.get('name', f'Entrenamiento {training_id[:8]}'),
                    'model_type': training.get('model_type', 'desconocido'),
                    'progress': training.get('progress', 0),
                    'start_time': training.get('created_at'),
                    'eta': None,  # Assuming 'eta' is not available in the current structure
                    'dataset': training.get('dataset_id', 'Desconocido')
                })
        return active_trainings

    def get_completed_trainings(self):
        """
        Obtiene la lista de entrenamientos completados.
        
        Returns:
            list: Lista de entrenamientos completados
        """
        completed_trainings = []
        for training_id, training in self.training_jobs.items():
            if training.get('status') in ['completed', 'failed']:
                completed_trainings.append({
                    'id': training_id,
                    'name': training.get('name', f'Entrenamiento {training_id[:8]}'),
                    'model_type': training.get('model_type', 'desconocido'),
                    'status': training.get('status', 'unknown'),
                    'progress': 100 if training.get('status') == 'completed' else training.get('progress', 0),
                    'start_time': training.get('created_at'),
                    'end_time': training.get('updated_at', None),
                    'dataset': training.get('dataset_id', 'Desconocido'),
                    'error': training.get('error', None) if training.get('status') == 'failed' else None
                })
        return completed_trainings


--------------------------------------------------------------------------------

📄 src\modes_config.py
--------------------------------------------------------------------------------
"""Configuración de modos de operación y sus agentes asociados."""

OPERATION_MODES = {
    "normal": {
        "name": "Modo Normal",
        "description": "Vigilancia estándar con detección básica",
        "agents": ["DetectionAgent", "MotionDetectionAgent", "AlertAgent"],
        "settings": {
            "detection_interval": 1.0,
            "confidence_threshold": 0.5
        }
    },
    "industrial": {
        "name": "Modo Industrial",
        "description": "Optimizado para seguridad en entornos industriales",
        "agents": ["DetectionAgent", "IndustrialSafetyAgent", "FireDetectionAgent", 
                  "PPEComplianceAgent", "AlertAgent"],
        "settings": {
            "detection_interval": 0.5,
            "safety_zones_enabled": True
        }
    },
    "retail": {
        "name": "Modo Comercial",
        "description": "Enfocado en seguridad y analítica para comercios",
        "agents": ["DetectionAgent", "RetailSecurityAgent", "FaceRecognitionAgent", 
                  "CustomerAnalyticsAgent", "AlertAgent"],
        "settings": {
            "customer_tracking": True,
            "theft_detection": True
        }
    },
    "forensic": {
        "name": "Análisis Forense",
        "description": "Herramientas para investigación de eventos pasados",
        "agents": ["ForensicAnalysisAgent", "GenerativeDescriptionAgent"],
        "settings": {
            "deep_search_enabled": True,
            "max_historical_days": 30
        }
    }
} 

--------------------------------------------------------------------------------

📄 src\motion_detector.py
--------------------------------------------------------------------------------
import cv2
import numpy as np

class MotionDetector:
    def __init__(self):
        self.background_subtractor = cv2.createBackgroundSubtractorMOG2()
        
    def detect_motion(self, frame):
        # Aplicar sustracción de fondo
        fg_mask = self.background_subtractor.apply(frame)
        return fg_mask


--------------------------------------------------------------------------------

📄 src\object_detector.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import time
import logging
import os
from threading import Lock
import random
from src.roi_manager import ROIManager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("object_detector")

class ObjectDetector:
    """Detector de objetos usando modelos preentrenados."""
    
    def __init__(self, 
                 confidence_threshold=0.5, 
                 nms_threshold=0.4,
                 model_path=None):
        """
        Inicializa el detector de objetos.
        
        Args:
            confidence_threshold: Umbral de confianza para detecciones
            nms_threshold: Umbral para supresión no máxima
            model_path: Ruta al modelo preentrenado (si es None, usa COCO)
        """
        self.confidence_threshold = confidence_threshold
        self.nms_threshold = nms_threshold
        self.lock = Lock()
        self.last_process_time = 0
        
        # Cargar modelo COCO para detección de personas y objetos
        self._load_model(model_path)
    
    def _load_model(self, model_path=None):
        """Carga el modelo de detección preentrenado."""
        try:
            # Si no se proporciona un modelo, usar el modelo COCO
            if model_path is None:
                # Usar YOLOv3 preentrenado con COCO
                model_dir = os.path.join('models', 'yolo')
                os.makedirs(model_dir, exist_ok=True)
                
                # Simular carga del modelo (sin descargar realmente para este demo)
                self.classes = ["persona", "bicicleta", "coche", "moto", "avión", "autobús", 
                                "tren", "camión", "barco", "semáforo", "boca de incendios", 
                                "señal de stop", "parquímetro", "banco", "pájaro", "gato", 
                                "perro", "caballo", "oveja", "vaca", "elefante", "oso", 
                                "cebra", "jirafa", "mochila", "paraguas", "bolso", "corbata", 
                                "maleta", "frisbee", "esquís", "tabla de snow", "pelota", 
                                "cometa", "bate", "guante", "patineta", "tabla de surf", 
                                "raqueta", "botella", "copa de vino", "taza", "tenedor", 
                                "cuchillo", "cuchara", "cuenco", "plátano", "manzana", 
                                "sandwich", "naranja", "brócoli", "zanahoria", "hot dog", 
                                "pizza", "dona", "pastel", "silla", "sofá", "planta", "cama", 
                                "mesa", "inodoro", "monitor", "portátil", "ratón", "control", 
                                "teclado", "teléfono", "microondas", "horno", "tostadora", 
                                "fregadero", "refrigerador", "libro", "reloj", "jarrón", 
                                "tijeras", "oso de peluche", "secador", "cepillo de dientes"]
                
                # En un sistema real, cargaríamos el modelo así:
                # self.net = cv2.dnn.readNetFromDarknet("yolov3.cfg", "yolov3.weights")
                
                # Para este demo, simularemos la detección
                logger.info("Modelo de detección simulado cargado correctamente")
            else:
                # Para implementación futura con modelos personalizados
                logger.warning("Carga de modelos personalizados no implementada")
            
            # Rastreador de rendimiento
            self.detections_count = 0
            self.process_time_total = 0
            self.process_count = 0
            
        except Exception as e:
            logger.error(f"Error al cargar el modelo: {str(e)}")
            raise
    
    def detect(self, frame, camera_id=None):
        """
        Detecta objetos en un frame.
        
        Args:
            frame: Frame de video
            camera_id: ID de la cámara (opcional, para filtrado por ROI)
            
        Returns:
            dict: Resultados de la detección
        """
        # Medir tiempo de proceso
        start_time = time.time()
        
        height, width = frame.shape[:2]
        results = {
            'detections': [],
            'timestamp': time.time()
        }
        
        # Simular algunas detecciones para demostración
        with self.lock:
            # Incrementar contador de frames procesados
            self.process_count += 1
            
            # En un sistema real, aquí se ejecutaría el modelo de detección de objetos
            # Por ahora, simulamos detecciones aleatorias para demostración
            num_detections = 0
            
            # Personas (detecciones más probables en vigilancia)
            if random.random() < 0.7:  # 70% de probabilidad de detectar personas
                num_people = random.randint(0, 2)
                for _ in range(num_people):
                    # Generar coordenadas aleatorias para el bounding box
                    x1 = random.randint(0, width - 100)
                    y1 = random.randint(0, height - 200)
                    w = random.randint(50, 100)
                    h = random.randint(100, 200)
                    x2 = min(x1 + w, width)
                    y2 = min(y1 + h, height)
                    
                    confidence = random.uniform(0.6, 0.95)
                    
                    detection = {
                        'class': 'persona',
                        'confidence': confidence,
                        'bbox': [x1, y1, x2, y2]
                    }
                    
                    # Si camera_id está presente, filtrar por ROI
                    if camera_id and roi_manager:
                        in_roi, roi_type = roi_manager.is_detection_in_roi(camera_id, detection)
                        if not in_roi:
                            continue  # Saltar esta detección si no está en una ROI
                        
                        # Guardar tipo de ROI en la detección
                        detection['roi_type'] = roi_type
                    
                    # Añadir a resultados
                    results['detections'].append(detection)
                    num_detections += 1
            
            # Vehículos (menos comunes)
            if random.random() < 0.3:  # 30% de probabilidad de detectar vehículos
                num_vehicles = random.randint(0, 1)
                for _ in range(num_vehicles):
                    x1 = random.randint(0, width - 150)
                    y1 = random.randint(0, height - 100)
                    w = random.randint(100, 150)
                    h = random.randint(50, 100)
                    x2 = min(x1 + w, width)
                    y2 = min(y1 + h, height)
                    
                    vehicle_type = random.choice(['coche', 'moto'])
                    confidence = random.uniform(0.65, 0.9)
                    
                    detection = {
                        'class': vehicle_type,
                        'confidence': confidence,
                        'bbox': [x1, y1, x2, y2]
                    }
                    
                    # Si camera_id está presente, filtrar por ROI
                    if camera_id and roi_manager:
                        in_roi, roi_type = roi_manager.is_detection_in_roi(camera_id, detection)
                        if not in_roi:
                            continue  # Saltar esta detección si no está en una ROI
                        
                        # Guardar tipo de ROI en la detección
                        detection['roi_type'] = roi_type
                    
                    # Añadir a resultados
                    results['detections'].append(detection)
                    num_detections += 1
            
            # Actualizar estadísticas
            self.detections_count += num_detections
            self.last_process_time = time.time() - start_time
            self.process_time_total += self.last_process_time
        
        return results
    
    def draw_detections(self, frame, detection_result):
        """
        Dibuja las detecciones en el frame.
        
        Args:
            frame: Frame original
            detection_result: Resultado de detect()
            
        Returns:
            numpy.ndarray: Frame con las detecciones dibujadas
        """
        output = frame.copy()
        detections = detection_result['detections']
        
        for detection in detections:
            box = detection['bbox']
            label = f"{detection['class']}: {detection['confidence']:.2f}"
            
            # Dibujar rectángulo
            cv2.rectangle(output, 
                          (box[0], box[1]), 
                          (box[0] + box[2], box[1] + box[3]), 
                          (0, 255, 0), 2)
            
            # Dibujar etiqueta
            y = box[1] - 15 if box[1] - 15 > 15 else box[1] + 15
            cv2.putText(output, label, (box[0], y), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        
        return output
    
    def get_stats(self):
        """Obtiene estadísticas del detector."""
        avg_time = 0
        if self.process_count > 0:
            avg_time = self.process_time_total / self.process_count
        
        return {
            'total_detections': self.detections_count,
            'processed_frames': self.process_count,
            'avg_process_time': avg_time,
            'last_process_time': self.last_process_time
        }

    def detect_objects(self, frame):
        """
        Detecta objetos en un frame de video.
        
        Args:
            frame (numpy.ndarray): Frame de video en formato BGR
            
        Returns:
            list: Lista de detecciones con formato
                [{'class': 'person', 'confidence': 0.92, 'bbox': [x, y, w, h]}, ...]
                
        Raises:
            TypeError: Si frame no es un array de numpy válido
            RuntimeError: Si ocurre un error durante la detección
        """
        # Validación de tipo
        if not isinstance(frame, np.ndarray):
            raise TypeError("El frame debe ser un array de numpy")
        
        # Validación de contenido
        if frame.size == 0 or len(frame.shape) != 3:
            raise ValueError("Frame inválido: debe ser una imagen RGB/BGR de 3 canales")
        
        try:
            # Código de detección (implementar aquí la lógica real de detección)
            # Por ahora, simulamos una detección básica
            frame_height, frame_width = frame.shape[:2]
            
            # Simulación de detecciones
            objects = self._simulate_detections(frame)
            
            # Actualizar estadísticas
            self.detections_count += len(objects)
            self.process_count += 1
            
            return objects
        except Exception as e:
            logger.error(f"Error en la detección de objetos: {str(e)}")
            raise RuntimeError(f"Error durante la detección de objetos: {str(e)}") 

--------------------------------------------------------------------------------

📄 src\operation_mode.py
--------------------------------------------------------------------------------
class OperationMode:
    def __init__(self):
        self.current_mode = 'normal'
        self.available_modes = ['normal', 'training', 'maintenance']
        
    def set_mode(self, mode):
        if mode in self.available_modes:
            self.current_mode = mode
            return True
        return False


--------------------------------------------------------------------------------

📄 src\operation_mode_router.py
--------------------------------------------------------------------------------
import logging
from .mcp_framework import MCPAgent

class OperationModeRouter(MCPAgent):
    """
    Agente especializado en enrutar mensajes según el modo de operación activo.
    
    Este agente funciona como un router que canaliza las detecciones y eventos
    hacia los agentes apropiados según el modo de operación seleccionado.
    """
    
    def __init__(self, config=None):
        """
        Inicializa el router de modos de operación.
        
        Args:
            config: Configuración del router
        """
        agent_id = "operation_mode_router"
        super().__init__(agent_id=agent_id, name="Router de Modos de Operación")
        self.config = config or {}
        self.logger = logging.getLogger("OperationModeRouter")
        
        # Modos disponibles
        self.available_modes = [
            'normal', 'industrial', 'commercial', 'residential', 'airport'
        ]
        
        # Modo activo actual
        self.active_mode = self.config.get('default_mode', 'normal')
        
        # Mapeo de agentes por modo
        # Indica qué agentes deben estar activos en cada modo
        self.mode_agents = {
            'normal': [
                'detection_agent',
                'alert_agent',
                'camera_agent',
                'motion_detection_agent'
            ],
            'industrial': [
                'detection_agent',
                'alert_agent',
                'camera_agent',
                'industrial_safety_agent',
                'fire_detection_agent'
            ],
            'commercial': [
                'detection_agent',
                'alert_agent',
                'camera_agent',
                'retail_security_agent',
                'assault_detection_agent'
            ],
            'residential': [
                'detection_agent',
                'alert_agent',
                'camera_agent',
                'motion_detection_agent',
                'perimeter_agent'
            ],
            'airport': [
                'detection_agent',
                'alert_agent',
                'camera_agent',
                'face_recognition_agent',
                'abandoned_object_agent',
                'crowd_analysis_agent'
            ]
        }
        
        # Agentes registrados en el sistema
        self.registered_agents = {}
        
        # Configuración específica por modo
        self.mode_config = {
            'normal': {
                'detection_threshold': 0.5,
                'alert_level': 'info'
            },
            'industrial': {
                'detection_threshold': 0.6,
                'alert_level': 'warning',
                'ppe_required': True
            },
            'commercial': {
                'detection_threshold': 0.6,
                'alert_level': 'warning',
                'retail_monitoring': True
            },
            'residential': {
                'detection_threshold': 0.7,
                'alert_level': 'warning',
                'perimeter_strict': True
            },
            'airport': {
                'detection_threshold': 0.7,
                'alert_level': 'critical',
                'face_matching_threshold': 0.8
            }
        }
        
        self.logger.info(f"Router de modos inicializado con modo: {self.active_mode}")
    
    def register_agent(self, agent_id, agent_type, agent_instance=None):
        """
        Registra un agente en el router.
        
        Args:
            agent_id: ID único del agente
            agent_type: Tipo de agente (debe coincidir con las entradas en mode_agents)
            agent_instance: Instancia del agente (opcional)
            
        Returns:
            bool: True si se registró correctamente
        """
        self.registered_agents[agent_id] = {
            'type': agent_type,
            'instance': agent_instance,
            'active': False
        }
        
        self.logger.info(f"Agente registrado: {agent_id} ({agent_type})")
        
        # Activar el agente si corresponde al modo actual
        if agent_type in self.mode_agents.get(self.active_mode, []):
            self._activate_agent(agent_id)
        
        return True
    
    def set_mode(self, mode):
        """
        Cambia el modo de operación del sistema.
        
        Args:
            mode: Nombre del modo a activar
            
        Returns:
            bool: True si se cambió correctamente
        """
        if mode not in self.available_modes:
            self.logger.error(f"Modo no disponible: {mode}")
            return False
            
        # Si es el mismo modo, no hacer nada
        if mode == self.active_mode:
            return True
            
        self.logger.info(f"Cambiando modo: {self.active_mode} -> {mode}")
        
        old_mode = self.active_mode
        self.active_mode = mode
        
        # Activar/desactivar agentes según corresponda
        for agent_id, agent_data in self.registered_agents.items():
            agent_type = agent_data['type']
            
            # Determinar si debe estar activo en el nuevo modo
            should_be_active = agent_type in self.mode_agents.get(mode, [])
            
            # Cambiar estado si es necesario
            if should_be_active and not agent_data['active']:
                self._activate_agent(agent_id)
            elif not should_be_active and agent_data['active']:
                self._deactivate_agent(agent_id)
        
        # Distribuir configuración del nuevo modo
        self._distribute_mode_config()
        
        self.logger.info(f"Modo cambiado: {old_mode} -> {self.active_mode}")
        return True
    
    def get_active_mode(self):
        """Obtiene el modo activo actual."""
        return self.active_mode
    
    def _activate_agent(self, agent_id):
        """Activa un agente específico."""
        if agent_id not in self.registered_agents:
            return False
            
        agent_data = self.registered_agents[agent_id]
        agent_data['active'] = True
        
        # Si tenemos la instancia, llamar a su método de activación
        if agent_data['instance'] and hasattr(agent_data['instance'], 'set_active'):
            agent_data['instance'].set_active(True)
            
        self.logger.info(f"Agente activado: {agent_id}")
        return True
    
    def _deactivate_agent(self, agent_id):
        """Desactiva un agente específico."""
        if agent_id not in self.registered_agents:
            return False
            
        agent_data = self.registered_agents[agent_id]
        agent_data['active'] = False
        
        # Si tenemos la instancia, llamar a su método de desactivación
        if agent_data['instance'] and hasattr(agent_data['instance'], 'set_active'):
            agent_data['instance'].set_active(False)
            
        self.logger.info(f"Agente desactivado: {agent_id}")
        return True
    
    def _distribute_mode_config(self):
        """
        Distribuye la configuración del modo activo a los agentes correspondientes.
        """
        mode_config = self.mode_config.get(self.active_mode, {})
        
        # Enviar mensaje de configuración a todos los agentes activos
        for agent_id, agent_data in self.registered_agents.items():
            if agent_data['active']:
                # Si tenemos la instancia, configurarla directamente
                if agent_data['instance'] and hasattr(agent_data['instance'], 'configure'):
                    agent_data['instance'].configure(mode_config)
        
        self.logger.info(f"Configuración distribuida para modo: {self.active_mode}")
    
    def process(self, message):
        """
        Procesa un mensaje y lo enruta según el modo activo.
        
        Args:
            message: Mensaje a procesar
        """
        # Solo procesar si es un mensaje de tipo 'detection' o 'system'
        if message['type'] not in ['detection', 'system']:
            return
            
        # Si es un mensaje de cambio de modo
        if message['type'] == 'system' and message.get('action') == 'change_mode':
            new_mode = message.get('mode')
            if new_mode:
                self.set_mode(new_mode)
            return
        
        # Para detecciones, enviar solo a los agentes activos según el modo
        if message['type'] == 'detection':
            # Determinar los tipos de agentes activos para el modo actual
            active_agent_types = self.mode_agents.get(self.active_mode, [])
            
            # Reenviar mensaje solo a los agentes activos
            for agent_id, agent_data in self.registered_agents.items():
                if agent_data['active'] and agent_data['type'] in active_agent_types:
                    # Si tenemos la instancia, enviar directamente
                    if agent_data['instance'] and hasattr(agent_data['instance'], 'process'):
                        agent_data['instance'].process(message) 

--------------------------------------------------------------------------------

📄 src\retail_security_agent.py
--------------------------------------------------------------------------------
import logging
import time
import numpy as np
from collections import defaultdict
from .mcp_framework import MCPAgent

class RetailSecurityAgent(MCPAgent):
    """
    Agente especializado en seguridad para entornos comerciales/retail.
    Se enfoca en detectar comportamientos sospechosos y posibles hurtos.
    """
    
    def __init__(self, alert_manager, object_detector, config=None):
        """
        Inicializa el agente de seguridad retail.
        
        Args:
            alert_manager: Gestor de alertas del sistema
            object_detector: Detector de objetos para análisis de comportamiento
            config: Configuración opcional
        """
        agent_id = "retail_security_agent"
        super().__init__(agent_id, name="Agente de Seguridad Retail")
        self.alert_manager = alert_manager
        self.object_detector = object_detector
        self.config = config or {}
        self.logger = logging.getLogger("retail_security")
        
        # Configuración de sensibilidad
        self.suspicious_time_threshold = self.config.get('suspicious_time_threshold', 60)  # segundos
        self.theft_confidence_threshold = self.config.get('theft_confidence_threshold', 0.7)
        
        # Seguimiento de personas
        self.person_tracking = defaultdict(dict)  # {camera_id: {track_id: {data}}}
        
        # Regiones de interés para productos de alto valor
        self.high_value_zones = self.config.get('high_value_zones', {})  # {camera_id: [zones]}
        
        # Iniciar como activo
        self._active = True
        self.logger.info("Agente de seguridad retail inicializado")
    
    def process(self, message):
        """
        Procesa mensajes para detectar comportamientos sospechosos en entorno retail.
        
        Args:
            message: Mensaje con detecciones
        """
        if not self._active:
            return
        
        if message.get('type') != 'detection':
            return
            
        camera_id = message.get('camera_id')
        if not camera_id:
            return
            
        # Obtener detecciones relacionadas con personas
        detections = message.get('detections', [])
        timestamp = message.get('timestamp', time.time())
        
        # Actualizar seguimiento
        self._track_persons(camera_id, detections, timestamp)
        
        # Analizar comportamientos
        self._analyze_retail_behaviors(camera_id, timestamp)
    
    def _track_persons(self, camera_id, detections, timestamp):
        """
        Mantiene seguimiento de personas detectadas.
        
        Args:
            camera_id: ID de la cámara
            detections: Lista de detecciones
            timestamp: Marca de tiempo
        """
        # Filtrar solo detecciones de personas
        person_detections = [d for d in detections if d.get('class_name', '').lower() in ['person', 'persona']]
        
        # Crear ID temporal para seguimiento si no existe
        for detection in person_detections:
            if 'track_id' not in detection:
                detection['track_id'] = f"temp_{detection.get('id', str(hash(str(detection['bbox']))))}"
        
        # Actualizar personas existentes y registrar nuevas
        current_tracks = set()
        for person in person_detections:
            track_id = person.get('track_id')
            if not track_id:
                continue
                
            current_tracks.add(track_id)
            
            # Si es una nueva persona
            if track_id not in self.person_tracking[camera_id]:
                self.person_tracking[camera_id][track_id] = {
                    'first_seen': timestamp,
                    'last_seen': timestamp,
                    'positions': [person.get('bbox', [0, 0, 0, 0])],
                    'loitering_time': 0,
                    'in_high_value_zone': False,
                    'suspicious_actions': 0,
                    'current_zone': self._get_current_zone(camera_id, person.get('bbox')),
                }
            else:
                # Actualizar persona existente
                track_data = self.person_tracking[camera_id][track_id]
                track_data['last_seen'] = timestamp
                track_data['positions'].append(person.get('bbox', [0, 0, 0, 0]))
                
                # Limitar histórico de posiciones
                if len(track_data['positions']) > 30:
                    track_data['positions'] = track_data['positions'][-30:]
                
                # Verificar si está en zona de alto valor
                track_data['current_zone'] = self._get_current_zone(camera_id, person.get('bbox'))
                track_data['in_high_value_zone'] = self._is_in_high_value_zone(camera_id, person.get('bbox'))
                
                # Calcular tiempo de permanencia
                if self._is_stationary(track_data['positions']):
                    track_data['loitering_time'] = timestamp - track_data['first_seen']
        
        # Limpiar tracks que ya no existen
        tracks_to_remove = []
        for track_id in self.person_tracking[camera_id]:
            if track_id not in current_tracks:
                # Si la persona desapareció recientemente, mantenerla un poco más
                time_since_last_seen = timestamp - self.person_tracking[camera_id][track_id]['last_seen']
                if time_since_last_seen > 10:  # 10 segundos de gracia
                    tracks_to_remove.append(track_id)
        
        for track_id in tracks_to_remove:
            del self.person_tracking[camera_id][track_id]
    
    def _analyze_retail_behaviors(self, camera_id, timestamp):
        """
        Analiza comportamientos sospechosos en entorno retail.
        
        Args:
            camera_id: ID de la cámara
            timestamp: Marca de tiempo
        """
        if camera_id not in self.person_tracking:
            return
            
        for track_id, person_data in self.person_tracking[camera_id].items():
            # 1. Detección de merodeo (loitering)
            if person_data['loitering_time'] > self.suspicious_time_threshold:
                if not person_data.get('loitering_alert_sent', False):
                    alert_data = {
                        'type': 'retail_security',
                        'subtype': 'loitering',
                        'camera_id': camera_id,
                        'timestamp': timestamp,
                        'confidence': 0.7,
                        'message': f"Persona merodeando por más de {int(person_data['loitering_time'])} segundos",
                        'details': {
                            'track_id': track_id,
                            'time': person_data['loitering_time'],
                            'zone': person_data.get('current_zone', 'unknown')
                        },
                        'severity': 'warning' if person_data['in_high_value_zone'] else 'info'
                    }
                    
                    self.alert_manager.add_alert(alert_data)
                    person_data['loitering_alert_sent'] = True
                    self.logger.info(f"Alerta de merodeo generada en {camera_id} para {track_id}")
            
            # 2. Comportamiento errático (cambios bruscos de dirección)
            if len(person_data['positions']) >= 10:
                if self._is_erratic_movement(person_data['positions']):
                    person_data['suspicious_actions'] += 1
                    
                    if person_data['suspicious_actions'] >= 3 and not person_data.get('suspicious_alert_sent', False):
                        alert_data = {
                            'type': 'retail_security',
                            'subtype': 'suspicious_behavior',
                            'camera_id': camera_id,
                            'timestamp': timestamp,
                            'confidence': 0.65,
                            'message': "Comportamiento sospechoso detectado: movimiento errático",
                            'details': {
                                'track_id': track_id,
                                'zone': person_data.get('current_zone', 'unknown'),
                                'actions': person_data['suspicious_actions']
                            },
                            'severity': 'warning'
                        }
                        
                        self.alert_manager.add_alert(alert_data)
                        person_data['suspicious_alert_sent'] = True
                        self.logger.info(f"Alerta de comportamiento sospechoso en {camera_id} para {track_id}")
    
    def _is_stationary(self, positions, threshold=0.1):
        """
        Determina si una persona ha permanecido relativamente estática.
        
        Args:
            positions: Lista de posiciones de bounding box
            threshold: Umbral de movimiento (porcentaje de la imagen)
            
        Returns:
            bool: True si la persona está estática
        """
        if len(positions) < 3:
            return False
            
        # Calcular el centro de cada posición
        centers = []
        for pos in positions:
            x, y, w, h = pos
            centers.append((x + w/2, y + h/2))
            
        # Calcular distancia máxima entre centros
        max_dist = 0
        for i in range(len(centers)):
            for j in range(i+1, len(centers)):
                dist = np.sqrt((centers[i][0] - centers[j][0])**2 + (centers[i][1] - centers[j][1])**2)
                max_dist = max(max_dist, dist)
        
        return max_dist < threshold
    
    def _is_erratic_movement(self, positions, angle_threshold=90):
        """
        Detecta movimientos erráticos basados en cambios bruscos de dirección.
        
        Args:
            positions: Lista de posiciones de bounding box
            angle_threshold: Umbral de ángulo para considerar un cambio brusco
            
        Returns:
            bool: True si el movimiento es errático
        """
        if len(positions) < 5:
            return False
            
        # Utilizar solo las últimas 5 posiciones
        recent_positions = positions[-5:]
        
        # Calcular centros
        centers = []
        for pos in recent_positions:
            x, y, w, h = pos
            centers.append((x + w/2, y + h/2))
            
        # Calcular vectores de movimiento
        vectors = []
        for i in range(1, len(centers)):
            dx = centers[i][0] - centers[i-1][0]
            dy = centers[i][1] - centers[i-1][1]
            vectors.append((dx, dy))
            
        # Contar cambios bruscos de dirección
        sharp_turns = 0
        for i in range(1, len(vectors)):
            v1 = vectors[i-1]
            v2 = vectors[i]
            
            # Evitar vectores de magnitud muy pequeña
            mag1 = np.sqrt(v1[0]**2 + v1[1]**2)
            mag2 = np.sqrt(v2[0]**2 + v2[1]**2)
            
            if mag1 < 0.01 or mag2 < 0.01:
                continue
                
            # Calcular el ángulo entre vectores
            dot_product = v1[0]*v2[0] + v1[1]*v2[1]
            cos_angle = dot_product / (mag1 * mag2)
            cos_angle = max(-1, min(cos_angle, 1))  # Evitar errores de precisión
            angle = np.degrees(np.arccos(cos_angle))
            
            if angle > angle_threshold:
                sharp_turns += 1
                
        return sharp_turns >= 2
    
    def _get_current_zone(self, camera_id, bbox):
        """
        Determina en qué zona de la tienda se encuentra una persona.
        
        Args:
            camera_id: ID de la cámara
            bbox: Bounding box de la persona
            
        Returns:
            str: Nombre de la zona
        """
        # Esta sería una implementación básica. En la práctica, debería
        # basarse en un mapa real de zonas definidas para cada cámara.
        zones = {
            "entrance": [[0, 0, 0.3, 0.3]],  # Ejemplo: la zona de entrada está en la esquina superior izquierda
            "checkout": [[0.8, 0.8, 0.2, 0.2]],  # Ejemplo: la caja está en la esquina inferior derecha
            "electronics": [[0.5, 0.2, 0.3, 0.3]]  # Ejemplo: electrónica está en el centro superior
        }
        
        x, y, w, h = bbox
        center_x = x + w/2
        center_y = y + h/2
        
        for zone_name, zone_rects in zones.items():
            for zx, zy, zw, zh in zone_rects:
                if (zx <= center_x <= zx + zw) and (zy <= center_y <= zy + zh):
                    return zone_name
                    
        return "general_floor"
    
    def _is_in_high_value_zone(self, camera_id, bbox):
        """
        Determina si una persona está en una zona de productos de alto valor.
        
        Args:
            camera_id: ID de la cámara
            bbox: Bounding box de la persona
            
        Returns:
            bool: True si está en zona de alto valor
        """
        if camera_id not in self.high_value_zones:
            return False
            
        high_value_zones = self.high_value_zones[camera_id]
        
        x, y, w, h = bbox
        center_x = x + w/2
        center_y = y + h/2
        
        for zone in high_value_zones:
            zx, zy, zw, zh = zone
            if (zx <= center_x <= zx + zw) and (zy <= center_y <= zy + zh):
                return True
                
        return False
    
    def set_active(self, active):
        """
        Activa o desactiva el agente.
        
        Args:
            active: True para activar, False para desactivar
        """
        self._active = active
        self.logger.info(f"Agente de seguridad retail {'activado' if active else 'desactivado'}")
        return True 

--------------------------------------------------------------------------------

📄 src\roi_manager.py
--------------------------------------------------------------------------------
import os
import json
import logging
import numpy as np
import cv2

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("roi_manager")

class ROIManager:
    """Gestor de Regiones de Interés (ROI) para cámaras."""
    
    def __init__(self, config_dir='config/roi'):
        """
        Inicializa el gestor de ROI.
        
        Args:
            config_dir: Directorio donde se guardan las configuraciones de ROI
        """
        self.config_dir = config_dir
        self.roi_configs = {}
        self.active_rois = {}
        
        # Crear directorio si no existe
        if not os.path.exists(config_dir):
            os.makedirs(config_dir)
            
        # Cargar configuraciones existentes
        self._load_configurations()
    
    def _load_configurations(self):
        """Carga las configuraciones de ROI existentes."""
        logger.info(f"Cargando configuraciones de ROI desde {self.config_dir}")
        for file_name in os.listdir(self.config_dir):
            if file_name.endswith('.json'):
                camera_id = file_name.replace('.json', '')
                try:
                    with open(os.path.join(self.config_dir, file_name), 'r') as f:
                        config = json.load(f)
                        self.roi_configs[camera_id] = config
                        logger.info(f"Configuración de ROI cargada para cámara {camera_id}")
                except Exception as e:
                    logger.error(f"Error al cargar configuración de ROI para cámara {camera_id}: {str(e)}")
    
    def save_roi_config(self, camera_id, roi_config):
        """
        Guarda una configuración de ROI para una cámara.
        
        Args:
            camera_id: ID de la cámara
            roi_config: Configuración de ROI (contiene zonas, tipos, etc.)
        """
        try:
            self.roi_configs[camera_id] = roi_config
            
            # Guardar en archivo
            with open(os.path.join(self.config_dir, f"{camera_id}.json"), 'w') as f:
                json.dump(roi_config, f, indent=2)
                
            logger.info(f"Configuración de ROI guardada para cámara {camera_id}")
            return True
        except Exception as e:
            logger.error(f"Error al guardar configuración de ROI para cámara {camera_id}: {str(e)}")
            return False
    
    def get_roi_config(self, camera_id):
        """
        Obtiene la configuración de ROI para una cámara.
        
        Args:
            camera_id: ID de la cámara
            
        Returns:
            Configuración de ROI o None si no existe
        """
        return self.roi_configs.get(camera_id)
    
    def delete_roi_config(self, camera_id):
        """
        Elimina la configuración de ROI para una cámara.
        
        Args:
            camera_id: ID de la cámara
        """
        try:
            if camera_id in self.roi_configs:
                del self.roi_configs[camera_id]
                
            # Eliminar archivo si existe
            file_path = os.path.join(self.config_dir, f"{camera_id}.json")
            if os.path.exists(file_path):
                os.remove(file_path)
                
            logger.info(f"Configuración de ROI eliminada para cámara {camera_id}")
            return True
        except Exception as e:
            logger.error(f"Error al eliminar configuración de ROI para cámara {camera_id}: {str(e)}")
            return False
    
    def is_detection_in_roi(self, camera_id, detection):
        """
        Verifica si una detección está dentro de alguna ROI definida.
        
        Args:
            camera_id: ID de la cámara
            detection: Detección (debe tener 'bbox': [x1, y1, x2, y2])
            
        Returns:
            (bool, str): (Está en ROI, Tipo de ROI) o (False, None) si no está en ninguna ROI
        """
        roi_config = self.roi_configs.get(camera_id)
        if not roi_config or 'zones' not in roi_config:
            # Si no hay configuración, permitir todas las detecciones
            return (True, "all")
            
        # Extraer coordenadas de la detección
        x1, y1, x2, y2 = detection['bbox']
        # Centro de la detección
        center_x = (x1 + x2) // 2
        center_y = (y1 + y2) // 2
        
        # Verificar cada zona
        for zone in roi_config['zones']:
            # Verificar si el tipo de objeto está permitido en esta zona
            if 'detect_classes' in zone and detection['class'] not in zone['detect_classes']:
                continue
                
            # Verificar si el centro de la detección está dentro del polígono
            if self._point_in_polygon(center_x, center_y, zone['points']):
                return (True, zone['type'])
                
        return (False, None)
        
    def _point_in_polygon(self, x, y, polygon):
        """
        Verifica si un punto está dentro de un polígono usando el algoritmo de ray casting.
        
        Args:
            x, y: Coordenadas del punto
            polygon: Lista de puntos [[x1,y1], [x2,y2], ...]
            
        Returns:
            bool: True si el punto está dentro del polígono
        """
        n = len(polygon)
        inside = False
        
        p1x, p1y = polygon[0]
        for i in range(1, n + 1):
            p2x, p2y = polygon[i % n]
            if y > min(p1y, p2y):
                if y <= max(p1y, p2y):
                    if x <= max(p1x, p2x):
                        if p1y != p2y:
                            xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x
                        if p1x == p2x or x <= xinters:
                            inside = not inside
            p1x, p1y = p2x, p2y
            
        return inside
    
    def draw_roi_zones(self, frame, camera_id):
        """
        Dibuja las zonas ROI en un frame.
        
        Args:
            frame: Frame de video
            camera_id: ID de la cámara
            
        Returns:
            Frame con zonas dibujadas
        """
        roi_config = self.roi_configs.get(camera_id)
        if not roi_config or 'zones' not in roi_config:
            return frame
            
        overlay = frame.copy()
        
        # Colores para diferentes tipos de zonas
        zone_colors = {
            'motion': (0, 255, 0),    # Verde para zonas de movimiento
            'perimeter': (0, 0, 255), # Rojo para perímetros
            'entry': (255, 0, 0),     # Azul para entradas
            'exclusion': (128, 128, 128), # Gris para zonas excluidas
            'default': (255, 255, 0)   # Amarillo para zonas de tipo desconocido
        }
        
        # Dibujar cada zona
        for zone in roi_config['zones']:
            points = np.array(zone['points'], np.int32)
            points = points.reshape((-1, 1, 2))
            
            # Obtener color según tipo
            color = zone_colors.get(zone.get('type', 'default'), zone_colors['default'])
            
            # Dibujar polígono
            cv2.polylines(overlay, [points], True, color, 2)
            
            # Rellenar polígono con transparencia
            cv2.fillPoly(overlay, [points], color)
            
            # Agregar etiqueta
            label = zone.get('name', zone.get('type', 'zona'))
            x, y = points[0][0]
            cv2.putText(overlay, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
        
        # Mezclar con transparencia
        alpha = 0.3  # Factor de transparencia
        cv2.addWeighted(overlay, alpha, frame, 1 - alpha, 0, frame)
        
        return frame 

--------------------------------------------------------------------------------

📄 src\training_api.py
--------------------------------------------------------------------------------
from flask import Blueprint, request, jsonify

training_bp = Blueprint('training', __name__)

@training_bp.route('/train', methods=['POST'])
def train_model():
    return jsonify({'status': 'success'})

@training_bp.route('/status', methods=['GET'])
def get_training_status():
    return jsonify({'status': 'ready'})

def register_training_api(app):
    """
    Registra las rutas de la API relacionadas con el entrenamiento
    
    Args:
        app: La aplicación Flask
    """
    @app.route('/api/training/start', methods=['POST'])
    def start_training():
        # Implementa la lógica para iniciar el entrenamiento
        return {"status": "training started"}
    
    @app.route('/api/training/status', methods=['GET'])
    def training_status():
        # Implementa la lógica para obtener el estado del entrenamiento
        return {"status": "in progress"}
    
    # Puedes agregar más rutas relacionadas con el entrenamiento aquí
    
    return app


--------------------------------------------------------------------------------

📄 src\video_capture.py
--------------------------------------------------------------------------------
import cv2
import threading
import time
import queue
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("video_capture")

class VideoCapture:
    """Gestiona la captura de video de una cámara."""
    
    def __init__(self, camera_id, source_url, buffer_size=10):
        """
        Inicializa el capturador de video.
        
        Args:
            camera_id: ID único de la cámara
            source_url: URL de la cámara (puede ser índice numérico)
            buffer_size: Tamaño del buffer de frames
        """
        self.camera_id = camera_id
        self.source_url = source_url
        self.buffer_size = buffer_size
        self.frame_buffer = queue.Queue(maxsize=buffer_size)
        self.last_frame = None
        self.is_running = False
        self.capture_thread = None
        self.fps = 0
        self.last_frame_time = 0
        self.frame_count = 0
        
    def start(self):
        """Inicia la captura de video en un hilo separado."""
        if self.is_running:
            logger.warning(f"Cámara {self.camera_id} ya está en ejecución")
            return False
        
        self.is_running = True
        self.capture_thread = threading.Thread(
            target=self._capture_loop,
            daemon=True
        )
        self.capture_thread.start()
        logger.info(f"Captura iniciada para cámara {self.camera_id}")
        return True
    
    def stop(self):
        """Detiene la captura de video."""
        self.is_running = False
        if self.capture_thread:
            self.capture_thread.join(timeout=2.0)
            self.capture_thread = None
        logger.info(f"Captura detenida para cámara {self.camera_id}")
    
    def get_frame(self):
        """
        Obtiene el siguiente frame de la cámara.
        
        Returns:
            numpy.ndarray: Frame capturado o None si hay error
        """
        try:
            if not self.cap or not self.cap.isOpened():
                logger.warning(f"Cámara {self.camera_id} no iniciada o no disponible")
                return None
            
            ret, frame = self.cap.read()
            if not ret:
                logger.warning(f"Error al leer frame de cámara {self.camera_id}")
                return None
            
            # Validar que el frame es válido
            if frame is None or frame.size == 0:
                logger.warning(f"Frame inválido de cámara {self.camera_id}")
                return None
            
            return frame
        except Exception as e:
            logger.error(f"Error al capturar frame de cámara {self.camera_id}: {str(e)}")
            return None
    
    def _capture_loop(self):
        """Bucle principal de captura de video."""
        try:
            # Convertir a int si es posible (para índices de cámara)
            source = self.source_url
            if str(source).isdigit():
                source = int(source)
                logger.info(f"Usando cámara con índice numérico: {source}")
            
            # Abrir la cámara con diagnóstico adicional
            logger.info(f"Intentando abrir cámara {self.camera_id} con fuente {source}")
            cap = cv2.VideoCapture(source)
            
            if not cap.isOpened():
                # Información detallada sobre el error
                logger.error(f"ERROR: No se pudo abrir la cámara {self.camera_id} en {self.source_url}")
                
                # Intentar listar cámaras disponibles en Windows
                try:
                    import subprocess
                    result = subprocess.run(['dshow-devices.exe'], capture_output=True, text=True)
                    logger.info(f"Cámaras disponibles: {result.stdout}")
                except:
                    logger.info("No se pudo obtener lista de cámaras disponibles")
                    
                self.is_running = False
                return
            
            # Establecer resolución (opcional)
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            
            frame_time = time.time()
            fps_update_time = frame_time
            frame_count = 0
            
            # Bucle principal de captura
            while self.is_running:
                ret, frame = cap.read()
                
                if not ret:
                    logger.warning(f"Error al leer frame de cámara {self.camera_id}")
                    time.sleep(0.1)  # Pequeña pausa para evitar CPU al 100%
                    continue
                
                # Almacenar el último frame
                self.last_frame = frame
                
                # Calcular FPS
                current_time = time.time()
                frame_count += 1
                
                if current_time - fps_update_time >= 1.0:
                    self.fps = frame_count / (current_time - fps_update_time)
                    fps_update_time = current_time
                    frame_count = 0
                
                # Agregar al buffer si hay espacio
                if not self.frame_buffer.full():
                    frame_data = {
                        'frame': frame,
                        'timestamp': current_time,
                        'camera_id': self.camera_id
                    }
                    self.frame_buffer.put(frame_data, block=False)
                
                # Pequeña pausa para controlar la velocidad de captura
                time.sleep(0.01)
            
            # Liberar recursos
            cap.release()
            logger.info(f"Liberados recursos de cámara {self.camera_id}")
            
        except Exception as e:
            logger.error(f"Error en captura de cámara {self.camera_id}: {str(e)}")
            self.is_running = False
    
    def get_status(self):
        """Obtiene el estado actual de la captura."""
        return {
            'camera_id': self.camera_id,
            'is_running': self.is_running,
            'fps': self.fps,
            'buffer_size': self.frame_buffer.qsize(),
            'source': self.source_url
        }


class VideoCaptureManager:
    """Gestiona múltiples capturas de video."""
    
    def __init__(self):
        self.captures = {}
    
    def add_camera(self, camera_id, source_url, auto_start=True):
        """
        Agrega una nueva cámara al gestor.
        
        Args:
            camera_id: ID único de la cámara
            source_url: URL o índice de la cámara
            auto_start: Inicia automáticamente la captura
            
        Returns:
            bool: True si se agregó correctamente
        """
        if camera_id in self.captures:
            logger.warning(f"La cámara {camera_id} ya existe")
            return False
        
        capture = VideoCapture(camera_id, source_url)
        self.captures[camera_id] = capture
        
        if auto_start:
            capture.start()
        
        return True
    
    def remove_camera(self, camera_id):
        """Elimina una cámara del gestor."""
        if camera_id in self.captures:
            self.captures[camera_id].stop()
            del self.captures[camera_id]
            return True
        return False
    
    def get_camera(self, camera_id):
        """Obtiene una instancia de captura por ID."""
        return self.captures.get(camera_id)
    
    def get_frame(self, camera_id):
        """Obtiene el último frame de una cámara específica."""
        if camera_id in self.captures:
            return self.captures[camera_id].get_frame()
        return None
    
    def start_camera(self, camera_id):
        """Inicia la captura de una cámara específica."""
        if camera_id in self.captures:
            return self.captures[camera_id].start()
        return False
    
    def stop_camera(self, camera_id):
        """Detiene la captura de una cámara específica."""
        if camera_id in self.captures:
            self.captures[camera_id].stop()
            return True
        return False
    
    def start_all(self):
        """Inicia todas las cámaras."""
        for camera_id in self.captures:
            self.captures[camera_id].start()
    
    def stop_all(self):
        """Detiene todas las cámaras."""
        for camera_id in self.captures:
            self.captures[camera_id].stop()
    
    def get_all_status(self):
        """Obtiene el estado de todas las cámaras."""
        return {
            camera_id: capture.get_status() 
            for camera_id, capture in self.captures.items()
        }


class CameraManager:
    def reconnect_camera(self, camera_id):
        """Intenta reconectar una cámara caída"""
        logger.info(f"Intentando reconectar cámara {camera_id}")
        try:
            camera = self.cameras.get(camera_id)
            if not camera:
                logger.error(f"Cámara {camera_id} no encontrada")
                return False
                
            # Cerrar conexión actual si existe
            if camera.capture and camera.capture.isOpened():
                camera.capture.release()
                
            # Reintentar conexión con backoff exponencial
            max_attempts = 5
            for attempt in range(1, max_attempts + 1):
                logger.info(f"Intento {attempt}/{max_attempts} para cámara {camera_id}")
                camera.capture = cv2.VideoCapture(camera.url)
                if camera.capture.isOpened():
                    logger.info(f"Reconexión exitosa para cámara {camera_id}")
                    camera.status = "online"
                    camera.last_error = None
                    camera.last_reconnect = time.time()
                    return True
                
                # Esperar antes del siguiente intento (backoff exponencial)
                wait_time = min(30, 2 ** attempt)
                time.sleep(wait_time)
            
            logger.error(f"Falló la reconexión después de {max_attempts} intentos para cámara {camera_id}")
            camera.status = "offline"
            camera.last_error = "Failed to reconnect after multiple attempts"
            return False
            
        except Exception as e:
            logger.error(f"Error en reconexión de cámara {camera_id}: {str(e)}")
            return False 

--------------------------------------------------------------------------------

📄 src\whatsapp_alert_agent.py
--------------------------------------------------------------------------------
import logging
import uuid
from src.mcp_framework import MCPAgent
from datetime import datetime, timedelta

logger = logging.getLogger("whatsapp_alert_agent")

class WhatsAppAlertAgent(MCPAgent):
    """Agente MCP para enviar alertas vía WhatsApp."""
    
    def __init__(self, whatsapp_connector, alert_manager):
        """
        Inicializa el agente de alertas WhatsApp.
        
        Args:
            whatsapp_connector: Conector de WhatsApp
            alert_manager: Gestor de alertas
        """
        # Generar ID y nombre para el agente
        agent_id = f"whatsapp_alert_agent_{uuid.uuid4().hex[:8]}"
        name = "Agente de Alertas WhatsApp"
        
        # Llamar al constructor de la clase padre con los argumentos requeridos
        super().__init__(agent_id=agent_id, name=name)
        
        self.whatsapp_connector = whatsapp_connector
        self.alert_manager = alert_manager
        self.last_processed_id = None
        self.cooldown_alerts = {}  # Para evitar spam de alertas similares
        self.cooldown_period = 300  # 5 minutos entre alertas similares
        
        logger.info(f"Agente de alertas WhatsApp inicializado con ID: {agent_id}")
    
    def process(self, message):
        """
        Procesa mensajes del orquestador MCP.
        
        Args:
            message: Mensaje a procesar
        """
        # Solo procesar si WhatsApp está activo
        if not self.whatsapp_connector.is_active():
            return
        
        # Procesar nuevas alertas
        if message['type'] == 'new_alert':
            self._process_alert(message['alert'])
        
        # Procesar alertas pendientes periódicamente
        elif message['type'] == 'tick' and message.get('interval', 0) >= 60:
            self._check_pending_alerts()
    
    def _process_alert(self, alert):
        """
        Procesa una alerta para posible envío por WhatsApp.
        
        Args:
            alert: Datos de la alerta
        """
        alert_id = alert.get('id')
        alert_type = alert.get('type')
        alert_subtype = alert.get('subtype')
        camera_id = alert.get('camera_id')
        severity = alert.get('severity', 'info')
        
        # Crear una clave única para esta alerta (tipo + cámara)
        alert_key = f"{alert_type}_{alert_subtype}_{camera_id}"
        
        # Verificar cooldown para evitar spam
        current_time = datetime.now()
        if alert_key in self.cooldown_alerts:
            last_time = self.cooldown_alerts[alert_key]
            if (current_time - last_time).total_seconds() < self.cooldown_period:
                logger.debug(f"Alerta {alert_id} en cooldown, no se enviará por WhatsApp")
                return
        
        # Intentar enviar por WhatsApp
        sent = self.whatsapp_connector.send_alert(alert)
        
        if sent > 0:
            logger.info(f"Alerta {alert_id} enviada por WhatsApp a {sent} destinatarios")
            # Actualizar cooldown
            self.cooldown_alerts[alert_key] = current_time
            
            # Actualizar alerta con información de envío
            self.alert_manager.update_alert(alert_id, {
                'whatsapp_sent': True,
                'whatsapp_recipients': sent,
                'whatsapp_sent_at': current_time.isoformat()
            })
        else:
            logger.debug(f"No se pudo enviar alerta {alert_id} por WhatsApp")
    
    def _check_pending_alerts(self):
        """Revisa alertas pendientes que no se hayan enviado por WhatsApp."""
        # Obtener alertas recientes sin procesar
        recent_alerts = self.alert_manager.get_recent_alerts(limit=10, 
                                                           max_age_minutes=30)
        
        for alert in recent_alerts:
            # Si ya fue enviada por WhatsApp, saltar
            if alert.get('whatsapp_sent'):
                continue
                
            # Procesar alerta
            self._process_alert(alert) 

--------------------------------------------------------------------------------

📄 src\whatsapp_connector.py
--------------------------------------------------------------------------------
import logging
import requests
import json
import os
import time
import threading
import uuid
from src.mcp_framework import MCPAgent
from datetime import datetime
import base64

logger = logging.getLogger("whatsapp_connector")

class WhatsAppConnector:
    """Conector para enviar notificaciones a través de WhatsApp."""
    
    def __init__(self, config_path="config/whatsapp.json"):
        """
        Inicializa el conector de WhatsApp.
        
        Args:
            config_path: Ruta al archivo de configuración
        """
        self.config_path = config_path
        self.active = False
        self.api_key = ""
        self.phone_id = ""
        self.business_account_id = ""
        self.recipients = []
        self.alert_levels = ["critical", "warning"]
        self.alert_types = ["intrusion", "fire", "safety_violation"]
        self.daily_limit = 100
        self.messages_sent_today = 0
        self.last_reset_date = datetime.now().date().isoformat()
        
        # Asegurar que existe el directorio de configuración
        os.makedirs(os.path.dirname(config_path), exist_ok=True)
        
        # Cargar configuración
        self.load_config()
        
    def load_config(self):
        """Carga la configuración desde el archivo JSON."""
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, 'r') as f:
                    config = json.load(f)
                
                self.active = config.get("active", False)
                self.api_key = config.get("api_key", "")
                self.phone_id = config.get("phone_id", "")
                self.business_account_id = config.get("business_account_id", "")
                self.recipients = config.get("recipients", [])
                self.alert_levels = config.get("alert_levels", ["critical", "warning"])
                self.alert_types = config.get("alert_types", ["intrusion", "fire", "safety_violation"])
                self.daily_limit = config.get("daily_limit", 100)
                self.messages_sent_today = config.get("messages_sent_today", 0)
                self.last_reset_date = config.get("last_reset_date", datetime.now().date().isoformat())
                
                # Reiniciar contador diario si es un nuevo día
                today = datetime.now().date().isoformat()
                if self.last_reset_date != today:
                    self.messages_sent_today = 0
                    self.last_reset_date = today
                    self.save_config()
                
                logger.info("Configuración de WhatsApp cargada correctamente")
            except Exception as e:
                logger.error(f"Error al cargar configuración de WhatsApp: {str(e)}")
                self._create_default_config()
        else:
            logger.info("Creando configuración predeterminada para WhatsApp")
            self._create_default_config()
    
    def _create_default_config(self):
        """Crea una configuración predeterminada."""
        config = {
            "active": False,
            "api_key": "",
            "phone_id": "",
            "business_account_id": "",
            "recipients": [],
            "alert_levels": ["critical", "warning"],
            "alert_types": ["intrusion", "fire", "safety_violation"],
            "daily_limit": 100,
            "messages_sent_today": 0,
            "last_reset_date": datetime.now().date().isoformat()
        }
        
        try:
            with open(self.config_path, 'w') as f:
                json.dump(config, f, indent=4)
                
            self.active = config["active"]
            self.api_key = config["api_key"]
            self.phone_id = config["phone_id"]
            self.business_account_id = config["business_account_id"]
            self.recipients = config["recipients"]
            self.alert_levels = config["alert_levels"]
            self.alert_types = config["alert_types"]
            self.daily_limit = config["daily_limit"]
            self.messages_sent_today = config["messages_sent_today"]
            self.last_reset_date = config["last_reset_date"]
        except Exception as e:
            logger.error(f"Error al crear configuración predeterminada: {str(e)}")
    
    def save_config(self):
        """Guarda la configuración actual en el archivo JSON."""
        config = {
            "active": self.active,
            "api_key": self.api_key,
            "phone_id": self.phone_id,
            "business_account_id": self.business_account_id,
            "recipients": self.recipients,
            "alert_levels": self.alert_levels,
            "alert_types": self.alert_types,
            "daily_limit": self.daily_limit,
            "messages_sent_today": self.messages_sent_today,
            "last_reset_date": self.last_reset_date
        }
        
        try:
            with open(self.config_path, 'w') as f:
                json.dump(config, f, indent=4)
            logger.info("Configuración de WhatsApp guardada correctamente")
            return True
        except Exception as e:
            logger.error(f"Error al guardar configuración de WhatsApp: {str(e)}")
            return False
    
    def is_active(self):
        """
        Verifica si el conector de WhatsApp está activo y configurado.
        
        Returns:
            bool: True si está activo, False en caso contrario
        """
        return self.active and self.api_key and self.phone_id
    
    def activate(self):
        """Activa el conector."""
        self.active = True
        return self.save_config()
    
    def deactivate(self):
        """Desactiva el conector."""
        self.active = False
        return self.save_config()
    
    def add_recipient(self, phone_number, name=""):
        """Añade un destinatario a la lista."""
        # Normalizar número de teléfono (solo dígitos)
        phone_number = ''.join(filter(str.isdigit, phone_number))
        
        # Verificar si ya existe
        for recipient in self.recipients:
            if recipient.get("phone") == phone_number:
                return False
        
        # Añadir nuevo destinatario
        self.recipients.append({
            "phone": phone_number,
            "name": name,
            "active": True
        })
        
        return self.save_config()
    
    def remove_recipient(self, phone_number):
        """Elimina un destinatario de la lista."""
        # Normalizar número de teléfono
        phone_number = ''.join(filter(str.isdigit, phone_number))
        
        # Buscar y eliminar
        for i, recipient in enumerate(self.recipients):
            if recipient.get("phone") == phone_number:
                del self.recipients[i]
                return self.save_config()
        
        return False
    
    def update_recipient(self, phone_number, active=None, name=None):
        """Actualiza la información de un destinatario."""
        # Normalizar número de teléfono
        phone_number = ''.join(filter(str.isdigit, phone_number))
        
        # Buscar y actualizar
        for i, recipient in enumerate(self.recipients):
            if recipient.get("phone") == phone_number:
                if active is not None:
                    self.recipients[i]["active"] = active
                if name is not None:
                    self.recipients[i]["name"] = name
                return self.save_config()
        
        return False
    
    def send_message(self, recipient, message, image_url=None):
        """
        Envía un mensaje a un destinatario.
        
        Args:
            recipient: Número de teléfono del destinatario
            message: Texto del mensaje
            image_url: URL de imagen (opcional)
            
        Returns:
            bool: True si se envió correctamente, False en caso contrario
        """
        if not self.active:
            logger.warning("Intento de enviar mensaje con WhatsApp desactivado")
            return False
        
        # Verificar límite diario
        if self.messages_sent_today >= self.daily_limit:
            logger.warning(f"Límite diario de mensajes de WhatsApp alcanzado ({self.daily_limit})")
            return False
        
        # Verificar API key
        if not self.api_key or not self.phone_id:
            logger.error("Falta configuración de API para WhatsApp")
            return False
        
        # Normalizar número de teléfono
        recipient = ''.join(filter(str.isdigit, recipient))
        
        try:
            # Implementación para la API de WhatsApp Cloud
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            # Endpoint de la API
            url = f'https://graph.facebook.com/v18.0/{self.phone_id}/messages'
            
            # Definir el cuerpo del mensaje
            if image_url:
                # Mensaje con imagen
                payload = {
                    'messaging_product': 'whatsapp',
                    'recipient_type': 'individual',
                    'to': recipient,
                    'type': 'image',
                    'image': {
                        'link': image_url,
                        'caption': message
                    }
                }
            else:
                # Mensaje solo texto
                payload = {
                    'messaging_product': 'whatsapp',
                    'recipient_type': 'individual',
                    'to': recipient,
                    'type': 'text',
                    'text': {
                        'body': message
                    }
                }
            
            # Realizar la petición HTTP
            response = requests.post(url, headers=headers, json=payload)
            
            # Verificar respuesta
            if response.status_code >= 200 and response.status_code < 300:
                logger.info(f"Mensaje de WhatsApp enviado a {recipient}")
                self.messages_sent_today += 1
                self.save_config()
                return True
            else:
                logger.error(f"Error al enviar mensaje de WhatsApp: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"Error al enviar mensaje de WhatsApp: {str(e)}")
            return False
    
    def send_alert(self, alert):
        """
        Envía una alerta a través de WhatsApp a todos los destinatarios configurados.
        
        Args:
            alert (dict): Datos de la alerta a enviar
            
        Returns:
            int: Número de destinatarios a los que se envió el mensaje
        """
        if not self.is_active():
            return 0
        
        recipients = self.recipients
        if not recipients:
            return 0
        
        # Preparar mensaje
        message = self.format_alert_message(alert)
        
        # Contar destinatarios exitosos
        success_count = 0
        
        # Enviar a cada destinatario
        for recipient in recipients:
            if recipient.get("active", True):
                phone = recipient.get("phone")
                if phone and self.send_message(phone, message):
                    success_count += 1
        
        return success_count
    
    def format_alert_message(self, alert_data):
        """
        Formatea un mensaje de alerta para WhatsApp.
        
        Args:
            alert_data: Datos de la alerta
        
        Returns:
            str: Mensaje formateado
        """
        try:
            # Obtener detalles de la alerta
            alert_type = alert_data.get('type', 'unknown')
            severity = alert_data.get('severity', 'info')
            timestamp = alert_data.get('timestamp', datetime.now().isoformat())
            camera_name = alert_data.get('camera_name', 'Cámara desconocida')
            location = alert_data.get('location', 'Ubicación desconocida')
            description = alert_data.get('description', '')
            
            # Traducir tipo y severidad
            alert_type_es = self._translate_alert_type(alert_type)
            severity_es = self._translate_severity(severity)
            
            # Formatear fecha/hora
            try:
                if isinstance(timestamp, str):
                    dt = datetime.fromisoformat(timestamp)
                else:
                    dt = timestamp
                formatted_time = dt.strftime("%d/%m/%Y %H:%M:%S")
            except:
                formatted_time = str(timestamp)
            
            # Construir mensaje
            message = f"🚨 *ALERTA DE SEGURIDAD* 🚨\n\n"
            message += f"*Tipo:* {alert_type_es}\n"
            message += f"*Severidad:* {severity_es}\n"
            message += f"*Cámara:* {camera_name}\n"
            message += f"*Ubicación:* {location}\n"
            message += f"*Hora:* {formatted_time}\n"
            
            # Añadir descripción si existe
            if description:
                message += f"\n*Descripción:* {description}\n"
            
            # Añadir recomendaciones según el tipo de alerta
            if alert_type.startswith('safety_violation'):
                message += "\n⚠️ *Acción recomendada:* Verificar cumplimiento de normas de seguridad industrial."
            elif alert_type == 'intrusion':
                message += "\n⚠️ *Acción recomendada:* Verificar presencia no autorizada. Considerar contactar seguridad."
            elif alert_type == 'fire':
                message += "\n🔥 *ACCIÓN URGENTE:* Verificar posible incendio. Seguir protocolos de emergencia."
            
            return message
        except Exception as e:
            logger.error(f"Error al formatear mensaje de alerta: {str(e)}")
            return "🚨 Alerta de seguridad detectada. Revisar sistema de vigilancia."
    
    def _translate_alert_type(self, alert_type):
        """Traduce el tipo de alerta a español."""
        translations = {
            "intrusion": "Intrusión",
            "motion": "Movimiento",
            "object": "Objeto Detectado",
            "face": "Persona Identificada",
            "fire": "Incendio",
            "safety_violation": "Violación de Seguridad",
            "safety_violation_ppe_helmet": "Falta Casco de Seguridad",
            "safety_violation_ppe_vest": "Falta Chaleco Reflectante",
            "safety_violation_danger_zone": "Entrada en Zona Peligrosa"
        }
        return translations.get(alert_type, alert_type)
    
    def _translate_severity(self, severity):
        """Traduce el nivel de severidad a español."""
        translations = {
            "info": "Informativa",
            "warning": "Advertencia",
            "critical": "Crítica",
            "emergency": "Emergencia"
        }
        return translations.get(severity, severity)
    
    def get_config(self):
        """
        Obtiene la configuración actual del conector.
        
        Returns:
            dict: Configuración actual
        """
        return {
            "active": self.active,
            "api_key": self.api_key,
            "phone_id": self.phone_id,
            "business_account_id": self.business_account_id,
            "recipients": self.recipients,
            "alert_levels": self.alert_levels,
            "alert_types": self.alert_types,
            "daily_limit": self.daily_limit,
            "messages_sent_today": self.messages_sent_today
        }

    def send_alert_with_image(self, number, message, image_path=None, alert_data=None):
        """Envía una alerta con imagen adjunta vía WhatsApp."""
        try:
            if not self.is_active():
                self.logger.warning("Conector de WhatsApp no activo. Mensaje no enviado.")
                return False
            
            # Verificar enfriamiento
            current_time = time.time()
            if self._is_in_cooldown(number, current_time):
                self.logger.info(f"Mensaje no enviado a {number}: en período de enfriamiento")
                return False
            
            # Preparar datos para la API
            api_data = {
                "to": number,
                "type": "image" if image_path else "text",
                "recipient_type": "individual"
            }
            
            if image_path:
                # Si hay imagen, codificarla en base64
                try:
                    with open(image_path, "rb") as img_file:
                        img_data = base64.b64encode(img_file.read()).decode('utf-8')
                    
                    api_data["image"] = {
                        "file": img_data,
                        "caption": message
                    }
                except Exception as e:
                    self.logger.error(f"Error al procesar imagen: {str(e)}")
                    # Si falla, enviar solo texto
                    api_data["type"] = "text"
                    api_data["text"] = {"body": message}
            else:
                # Mensaje de solo texto
                api_data["text"] = {"body": message}
            
            # Llamar a la API
            response = self._call_api("messages", api_data)
            
            if response and response.status_code == 200:
                self._update_cooldown(number, current_time)
                self.sent_count += 1
                self.logger.info(f"Mensaje enviado a {number}")
                return True
            else:
                error_msg = response.text if response else "No response"
                self.logger.error(f"Error al enviar mensaje a {number}: {error_msg}")
                return False
            
        except Exception as e:
            self.logger.error(f"Error en envío de mensaje WhatsApp: {str(e)}")
            return False


class WhatsAppNotificationAgent(MCPAgent):
    """Agente para enviar notificaciones vía WhatsApp."""
    
    def __init__(self, agent_id, name, api_key=None, phone_id=None, 
                 recipients=None, alert_types=None, cooldown=300):
        """
        Inicializa el agente de notificaciones WhatsApp.
        
        Args:
            agent_id: ID único del agente
            name: Nombre descriptivo del agente
            api_key: Clave API de WhatsApp Business
            phone_id: ID del número de teléfono
            recipients: Lista de destinatarios (números de teléfono)
            alert_types: Tipos de alertas a notificar
            cooldown: Tiempo mínimo entre alertas del mismo tipo (segundos)
        """
        super().__init__(agent_id, name, interested_types=["alert", "command"])
        
        self.whatsapp = WhatsAppConnector(api_key, phone_id)
        self.recipients = recipients or []
        self.alert_types = alert_types or ["fire", "intrusion", "ai_robbery", "ai_accident"]
        self.cooldown = cooldown
        self.enabled = True
        
        # Control de frecuencia de notificaciones
        self.last_notification_time = {}  # Por tipo de alerta
        
        logger.info(f"Agente de notificaciones WhatsApp {agent_id} inicializado")
    
    def on_message(self, message):
        """Procesa mensajes recibidos."""
        if not self.enabled:
            return
            
        if message.type == "alert":
            self._process_alert(message.data)
        elif message.type == "command":
            self._process_command(message.data)
    
    def _process_alert(self, data):
        """
        Procesa alertas para enviar notificaciones.
        
        Args:
            data: Diccionario con datos de la alerta
        """
        alert_type = data.get("type")
        
        if not alert_type or alert_type not in self.alert_types:
            return
        
        # Verificar cooldown
        current_time = time.time()
        last_time = self.last_notification_time.get(alert_type, 0)
        
        if current_time - last_time < self.cooldown:
            logger.info(f"Alerta {alert_type} en cooldown, no se envía notificación")
            return
        
        # Actualizar tiempo de última notificación
        self.last_notification_time[alert_type] = current_time
        
        # Componer mensaje según tipo de alerta
        message_text = self._compose_alert_message(data)
        
        # Enviar a todos los destinatarios
        for recipient in self.recipients:
            # Iniciar envío en un hilo separado para no bloquear
            thread = threading.Thread(
                target=self._send_notification,
                args=(recipient, message_text, data)
            )
            thread.daemon = True
            thread.start()
    
    def _compose_alert_message(self, alert_data):
        """
        Compone mensaje basado en datos de alerta.
        
        Args:
            alert_data: Diccionario con datos de la alerta
            
        Returns:
            str: Mensaje formateado
        """
        alert_type = alert_data.get("type", "desconocido")
        severity = alert_data.get("severity", "info")
        message = alert_data.get("message", "Alerta sin detalles")
        camera_id = alert_data.get("camera_id", "desconocida")
        
        # Obtener información de la cámara si está disponible
        camera_name = camera_id  # Por defecto usar ID
        
        # Formatear mensaje
        severity_emojis = {
            "info": "ℹ️",
            "warning": "⚠️",
            "alert": "🚨",
            "critical": "🔴"
        }
        
        emoji = severity_emojis.get(severity, "⚠️")
        timestamp = time.strftime("%H:%M:%S", time.localtime())
        
        formatted_message = (
            f"{emoji} *ALERTA DE SEGURIDAD* {emoji}\n\n"
            f"*Tipo:* {alert_type.upper()}\n"
            f"*Cámara:* {camera_name}\n"
            f"*Hora:* {timestamp}\n\n"
            f"*Detalles:* {message}\n\n"
        )
        
        # Añadir detalles adicionales según tipo de alerta
        if alert_type == "ai_robbery" or alert_type == "ai_accident":
            confidence = alert_data.get("confidence", 0)
            evidence = alert_data.get("evidence", [])
            
            formatted_message += (
                f"*Confianza:* {confidence:.1%}\n"
                f"*Evidencia:* {', '.join(evidence)}\n\n"
            )
        
        formatted_message += "Responda a este mensaje para comunicarse con un operador."
        
        return formatted_message
    
    def _send_notification(self, recipient, message_text, alert_data):
        """
        Envía notificación a un destinatario.
        
        Args:
            recipient: Número de teléfono del destinatario
            message_text: Texto del mensaje
            alert_data: Datos completos de la alerta
        """
        try:
            # Enviar mensaje de texto
            result = self.whatsapp.send_text_message(recipient, message_text)
            
            # Si hay imagen disponible, enviarla también
            image_url = alert_data.get("image_url")
            
            if image_url:
                caption = f"Imagen de alerta: {alert_data.get('type', 'alerta')}"
                self.whatsapp.send_image_message(recipient, image_url=image_url, caption=caption)
                
        except Exception as e:
            logger.error(f"Error al enviar notificación WhatsApp: {str(e)}")
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente WhatsApp {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente WhatsApp {self.agent_id} deshabilitado")
        elif command == "add_recipient":
            number = data.get("number")
            if number and number not in self.recipients:
                self.recipients.append(number)
                logger.info(f"Destinatario añadido: {number}")
        elif command == "remove_recipient":
            number = data.get("number")
            if number and number in self.recipients:
                self.recipients.remove(number)
                logger.info(f"Destinatario eliminado: {number}")
        elif command == "set_cooldown":
            self.cooldown = max(60, data.get("value", self.cooldown))
            logger.info(f"Cooldown actualizado a {self.cooldown} segundos")


class WhatsAppAlertAgent(MCPAgent):
    """Agente para enviar alertas a través de WhatsApp."""
    
    def __init__(self, agent_id, name, whatsapp_connector, recipients=None, cooldown=300):
        """
        Inicializa el agente de alertas WhatsApp.
        
        Args:
            agent_id: ID único del agente
            name: Nombre descriptivo del agente
            whatsapp_connector: Instancia de WhatsAppConnector
            recipients: Lista de números de destino
            cooldown: Tiempo mínimo (segundos) entre alertas para evitar spam
        """
        super().__init__(agent_id, name, interested_types=["alert", "command"])
        
        self.whatsapp = whatsapp_connector
        self.recipients = recipients or []
        self.cooldown = cooldown
        self.enabled = True
        
        # Control de frecuencia de alertas
        self.last_alert_time = {}  # Por tipo de alerta
        
        logger.info(f"Agente WhatsApp {agent_id} inicializado con {len(self.recipients)} destinatarios")
    
    def process_data(self, data_type, data):
        """
        Procesa datos recibidos del orquestador.
        
        Args:
            data_type: Tipo de datos (alert, command)
            data: Datos a procesar
        """
        if not self.enabled:
            return
            
        if data_type == "alert":
            self._process_alert(data)
        elif data_type == "command":
            self._process_command(data)
    
    def _process_alert(self, alert_data):
        """
        Procesa una alerta y envía notificación por WhatsApp si corresponde.
        
        Args:
            alert_data: Datos de la alerta
        """
        alert_type = alert_data.get("type", "general")
        alert_severity = alert_data.get("severity", "info")
        
        # Verificar cooldown para este tipo de alerta
        current_time = time.time()
        if alert_type in self.last_alert_time:
            time_since_last = current_time - self.last_alert_time[alert_type]
            if time_since_last < self.cooldown:
                logger.info(f"Alerta {alert_type} ignorada por cooldown ({time_since_last:.0f}s < {self.cooldown}s)")
                return
        
        # Actualizar tiempo de última alerta de este tipo
        self.last_alert_time[alert_type] = current_time
        
        # Solo enviar alertas de cierta severidad (warning, error, critical)
        if alert_severity == "info":
            return
            
        try:
            # Preparar mensaje según el tipo de alerta
            if alert_type == "intrusion":
                message = f"⚠️ *ALERTA DE INTRUSIÓN* ⚠️\nDetectada en: {alert_data.get('location', 'Ubicación desconocida')}\nFecha/Hora: {alert_data.get('timestamp', 'Ahora')}\nDetalles: {alert_data.get('description', 'No hay detalles')}"
            elif alert_type == "fire":
                message = f"🔥 *ALERTA DE INCENDIO* 🔥\nDetectado en: {alert_data.get('location', 'Ubicación desconocida')}\nFecha/Hora: {alert_data.get('timestamp', 'Ahora')}\nDetalles: {alert_data.get('description', 'No hay detalles')}"
            elif alert_type == "safety":
                message = f"⛑️ *ALERTA DE SEGURIDAD* ⛑️\nViolación de normativa: {alert_data.get('description', 'No especificada')}\nUbicación: {alert_data.get('location', 'Ubicación desconocida')}\nFecha/Hora: {alert_data.get('timestamp', 'Ahora')}"
            else:
                message = f"📢 *ALERTA DE SEGURIDAD* 📢\nTipo: {alert_type}\nUbicación: {alert_data.get('location', 'Ubicación desconocida')}\nFecha/Hora: {alert_data.get('timestamp', 'Ahora')}\nDetalles: {alert_data.get('description', 'No hay detalles')}"
            
            # Enviar a todos los destinatarios
            for recipient in self.recipients:
                self.whatsapp.send_text_message(recipient, message)
                logger.info(f"Alerta {alert_type} enviada a {recipient}")
            
            # Si hay imagen disponible, enviarla también
            image_url = alert_data.get("image_url")
            
            if image_url:
                caption = f"Imagen de alerta: {alert_data.get('type', 'alerta')}"
                for recipient in self.recipients:
                    self.whatsapp.send_image_message(recipient, image_url=image_url, caption=caption)
                
        except Exception as e:
            logger.error(f"Error al enviar notificación WhatsApp: {str(e)}")
    
    def _process_command(self, data):
        """
        Procesa comandos de configuración.
        
        Args:
            data: Diccionario con comandos
        """
        command = data.get("command")
        
        if command == "enable":
            self.enabled = True
            logger.info(f"Agente WhatsApp {self.agent_id} habilitado")
        elif command == "disable":
            self.enabled = False
            logger.info(f"Agente WhatsApp {self.agent_id} deshabilitado")
        elif command == "add_recipient":
            number = data.get("number")
            if number and number not in self.recipients:
                self.recipients.append(number)
                logger.info(f"Destinatario añadido: {number}")
        elif command == "remove_recipient":
            number = data.get("number")
            if number and number in self.recipients:
                self.recipients.remove(number)
                logger.info(f"Destinatario eliminado: {number}")
        elif command == "set_cooldown":
            self.cooldown = max(60, data.get("value", self.cooldown))
            logger.info(f"Cooldown actualizado a {self.cooldown} segundos") 

--------------------------------------------------------------------------------

📄 src\ai_modules\detection_manager.py
--------------------------------------------------------------------------------
import logging
import threading
import time
import queue
import cv2
import numpy as np
from datetime import datetime
from src.mcp_framework import MCPAgent

logger = logging.getLogger("detection_manager")

class AdvancedDetectionManager:
    """
    Gestor centralizado de detectores avanzados de IA.
    Coordina la ejecución de múltiples detectores especializados optimizando recursos.
    """
    
    def __init__(self, alert_manager=None):
        """
        Inicializa el gestor de detección avanzada.
        
        Args:
            alert_manager: Gestor de alertas del sistema
        """
        self.alert_manager = alert_manager
        self.detectors = {}
        self.active = True
        self.logger = logging.getLogger("detection_manager")
        
        # Cola de procesamiento para tareas asíncronas
        self.processing_queue = queue.Queue()
        self.processing_thread = threading.Thread(target=self._process_queue, daemon=True)
        self.processing_thread.start()
        
        # Control de recursos y rendimiento
        self.max_concurrent_detectors = 2  # Número máximo de detectores a ejecutar en paralelo
        self.processing_interval = {}  # Intervalo mínimo entre procesamientos por detector
        self.last_execution = {}  # Tiempo de última ejecución por detector
        
        # Estadísticas
        self.stats = {
            "frames_processed": 0,
            "detections": 0,
            "alerts_generated": 0,
            "processing_times": []  # Tiempos de procesamiento (ms)
        }
    
    def register_detector(self, detector_id, detector, interval=1.0):
        """
        Registra un detector en el gestor.
        
        Args:
            detector_id: Identificador único del detector
            detector: Instancia del detector
            interval: Intervalo mínimo entre ejecuciones (segundos)
        """
        self.detectors[detector_id] = detector
        self.processing_interval[detector_id] = interval
        self.last_execution[detector_id] = 0
        self.logger.info(f"Detector {detector_id} registrado con intervalo {interval}s")
        
        # Si el detector tiene un gestor de alertas propio, configurarlo
        if hasattr(detector, 'alert_manager') and detector.alert_manager is None:
            detector.alert_manager = self.alert_manager
    
    def process_frame(self, frame, camera_id=None, priority_detectors=None):
        """
        Procesa un frame con los detectores registrados.
        
        Args:
            frame: Frame de imagen a procesar
            camera_id: ID de la cámara de origen
            priority_detectors: Lista de IDs de detectores prioritarios
            
        Returns:
            dict: Resultados combinados de los detectores
        """
        if not self.active or frame is None:
            return {}
        
        try:
            self.stats["frames_processed"] += 1
            current_time = time.time()
            results = {}
            
            # Determinar qué detectores deben ejecutarse
            detectors_to_run = []
            
            # Primero los prioritarios
            if priority_detectors:
                for detector_id in priority_detectors:
                    if detector_id in self.detectors:
                        # Verificar intervalo mínimo
                        if current_time - self.last_execution.get(detector_id, 0) >= self.processing_interval.get(detector_id, 0):
                            detectors_to_run.append(detector_id)
            
            # Luego los demás, hasta el máximo permitido
            if len(detectors_to_run) < self.max_concurrent_detectors:
                for detector_id, detector in self.detectors.items():
                    if detector_id not in detectors_to_run:
                        # Verificar intervalo mínimo
                        if current_time - self.last_execution.get(detector_id, 0) >= self.processing_interval.get(detector_id, 0):
                            detectors_to_run.append(detector_id)
                            if len(detectors_to_run) >= self.max_concurrent_detectors:
                                break
            
            # Ejecutar detectores seleccionados
            for detector_id in detectors_to_run:
                detector = self.detectors[detector_id]
                start_time = time.time()
                
                # Crear mensaje para el detector
                message = {
                    "type": "frame",
                    "frame": frame.copy(),  # Copia para evitar problemas de concurrencia
                    "camera_id": camera_id,
                    "timestamp": datetime.now().isoformat()
                }
                
                # Procesar con el detector
                try:
                    detector.process(message)
                    self.last_execution[detector_id] = current_time
                    
                    # Registrar tiempo de procesamiento
                    processing_time = (time.time() - start_time) * 1000  # en ms
                    self.stats["processing_times"].append(processing_time)
                    # Mantener solo los últimos 100 tiempos
                    if len(self.stats["processing_times"]) > 100:
                        self.stats["processing_times"].pop(0)
                        
                except Exception as e:
                    self.logger.error(f"Error en detector {detector_id}: {str(e)}")
            
            return results
            
        except Exception as e:
            self.logger.error(f"Error en procesamiento de frame: {str(e)}")
            return {}
    
    def _process_queue(self):
        """Procesa la cola de tareas en segundo plano."""
        while True:
            try:
                task = self.processing_queue.get()
                
                if task["type"] == "frame":
                    self.process_frame(
                        task["frame"],
                        task.get("camera_id"),
                        task.get("priority_detectors")
                    )
                
                self.processing_queue.task_done()
                
            except Exception as e:
                self.logger.error(f"Error en procesamiento de cola: {str(e)}")
                
            # Breve pausa para evitar consumo excesivo de CPU
            time.sleep(0.01)
    
    def queue_frame(self, frame, camera_id=None, priority_detectors=None):
        """
        Encola un frame para procesamiento asíncrono.
        
        Args:
            frame: Frame de imagen a procesar
            camera_id: ID de la cámara de origen
            priority_detectors: Lista de IDs de detectores prioritarios
            
        Returns:
            bool: True si se encoló correctamente
        """
        try:
            if not self.active or frame is None:
                return False
                
            task = {
                "type": "frame",
                "frame": frame.copy(),
                "camera_id": camera_id,
                "priority_detectors": priority_detectors
            }
            
            self.processing_queue.put(task)
            return True
            
        except Exception as e:
            self.logger.error(f"Error al encolar frame: {str(e)}")
            return False
    
    def get_stats(self):
        """
        Obtiene estadísticas del gestor de detección.
        
        Returns:
            dict: Estadísticas de rendimiento
        """
        stats = self.stats.copy()
        
        # Calcular estadísticas adicionales
        if self.stats["processing_times"]:
            stats["avg_processing_time"] = sum(self.stats["processing_times"]) / len(self.stats["processing_times"])
            stats["max_processing_time"] = max(self.stats["processing_times"])
            stats["min_processing_time"] = min(self.stats["processing_times"])
        else:
            stats["avg_processing_time"] = 0
            stats["max_processing_time"] = 0
            stats["min_processing_time"] = 0
            
        # Añadir información de detectores
        stats["detectors"] = {
            detector_id: {
                "interval": self.processing_interval.get(detector_id, 0),
                "last_execution": self.last_execution.get(detector_id, 0),
                "time_since_last": time.time() - self.last_execution.get(detector_id, 0)
            }
            for detector_id in self.detectors
        }
        
        # Añadir información de la cola
        stats["queue_size"] = self.processing_queue.qsize()
        
        return stats

    def detect(self, frame, detector_type='all'):
        """
        Método de compatibilidad que redirige a los métodos de procesamiento específicos
        
        Args:
            frame: Imagen/frame a procesar
            detector_type: Tipo de detector a utilizar (pose, fire, water, face, all)
        
        Returns:
            Resultados de la detección
        """
        if detector_type == 'pose':
            return self.process_pose(frame)
        elif detector_type == 'fire':
            return self.process_fire(frame)
        elif detector_type == 'water':
            return self.process_water(frame)
        elif detector_type == 'face':
            return self.process_face(frame)
        else:  # 'all' o cualquier otro valor
            return self.process_all(frame)

    # Método genérico para procesar todos los detectores
    def process_all(self, frame, camera_id=None):
        """Procesa un frame con todos los detectores disponibles"""
        results = {
            'pose': None,
            'fire': None,
            'water': None,
            'face': None,
            'timestamp': time.time()
        }
        
        try:
            # Intentar cada detector individualmente para evitar que uno que falle afecte a todos
            try:
                results['pose'] = self.process_pose(frame)
            except Exception as e:
                logger.error(f"Error en detector de pose: {str(e)}")
                
            try:
                results['fire'] = self.process_fire(frame)
            except Exception as e:
                logger.error(f"Error en detector de fuego: {str(e)}")
                
            try:
                results['water'] = self.process_water(frame)
            except Exception as e:
                logger.error(f"Error en detector de agua: {str(e)}")
                
            try:
                results['face'] = self.process_face(frame)
            except Exception as e:
                logger.error(f"Error en detector facial: {str(e)}")
                
        except Exception as e:
            logger.error(f"Error en procesamiento general: {str(e)}")
            
        return results

    def process_pose(self, frame):
        """Procesa detección de pose en un frame"""
        try:
            # Por ahora una implementación simple
            # En un entorno real, aquí usaríamos un modelo de pose detection
            
            # Simulación de detección para pruebas
            result = [{
                'posture': 'standing',
                'confidence': 0.85,
                'bbox': [100, 100, 200, 300]  # x, y, width, height
            }]
            
            return result
        except Exception as e:
            logger.error(f"Error en detección de pose: {str(e)}")
            return []

    def process_fire(self, frame):
        """Procesa detección de fuego/humo en un frame"""
        try:
            # Simulación de detección para pruebas
            has_fire = False
            confidence = 0.0
            
            # Análisis simple para simulación: si hay píxeles muy rojos o brillantes
            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
            # Rango de color para fuego (rojizo)
            lower_red = np.array([0, 120, 70])
            upper_red = np.array([10, 255, 255])
            mask = cv2.inRange(hsv, lower_red, upper_red)
            
            # Si hay suficientes píxeles de color fuego
            if cv2.countNonZero(mask) > 100:
                has_fire = True
                confidence = min(1.0, cv2.countNonZero(mask) / 1000)
            
            return {
                'detected': has_fire,
                'confidence': confidence,
                'regions': []  # En implementación real, regiones donde se detectó
            }
        except Exception as e:
            logger.error(f"Error en detección de fuego: {str(e)}")
            return {'detected': False, 'confidence': 0.0}

    def process_water(self, frame):
        """Procesa detección de agua/inundación en un frame"""
        try:
            # Simulación de detección para pruebas
            # Detección simple basada en color azulado
            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
            # Rango de color para agua (azulado)
            lower_blue = np.array([90, 50, 50])
            upper_blue = np.array([130, 255, 255])
            mask = cv2.inRange(hsv, lower_blue, upper_blue)
            
            has_water = cv2.countNonZero(mask) > 500
            confidence = min(1.0, cv2.countNonZero(mask) / 5000)
            
            return {
                'detected': has_water,
                'confidence': confidence,
                'area_percentage': cv2.countNonZero(mask) / (frame.shape[0] * frame.shape[1])
            }
        except Exception as e:
            logger.error(f"Error en detección de agua: {str(e)}")
            return {'detected': False, 'confidence': 0.0}

    def process_face(self, frame):
        """Procesa reconocimiento facial en un frame"""
        try:
            # Simulación de reconocimiento facial
            # En implementación real, usaríamos face_recognition o similar
            
            # Detector simple de cara usando Haar Cascade
            face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
            
            results = []
            for (x, y, w, h) in faces:
                results.append({
                    'name': 'Unknown Person',  # En implementación real, comparar con base de datos
                    'confidence': 0.7,
                    'bbox': [x, y, w, h]
                })
                
            return results
        except Exception as e:
            logger.error(f"Error en reconocimiento facial: {str(e)}")
            return []

class AdvancedDetectionAgent(MCPAgent):
    """Agente que coordina detectores avanzados para el sistema de vigilancia."""
    
    def __init__(self, agent_id=None, name=None, alert_manager=None):
        super().__init__(agent_id=agent_id or "advanced_detection_agent", 
                          name=name or "Detector Avanzado")
        
        self.detection_manager = AdvancedDetectionManager(alert_manager)
        self.alert_manager = alert_manager
        self.active = True
        
        # Configuración
        self.enable_async = True  # Procesamiento asíncrono habilitado por defecto
        
        # Registrar detectores
        self._register_default_detectors()
    
    def _register_default_detectors(self):
        """Registra los detectores predeterminados."""
        try:
            # Intentar importar e inicializar los detectores
            from src.ai_modules.pose_detector import PoseDetectionAgent
            from src.ai_modules.fire_smoke_detector import FireSmokeDetectionAgent
            from src.ai_modules.water_flood_detector import WaterFloodDetectionAgent
            from src.ai_modules.face_recognition_enhanced import FaceRecognitionAgent
            
            # Registrar detectores con diferentes intervalos para balancear carga
            self.detection_manager.register_detector(
                "pose_detection",
                PoseDetectionAgent(alert_manager=self.alert_manager),
                interval=0.5  # Ejecutar cada 0.5 segundos
            )
            
            self.detection_manager.register_detector(
                "fire_smoke_detection",
                FireSmokeDetectionAgent(alert_manager=self.alert_manager),
                interval=1.0  # Ejecutar cada 1 segundo
            )
            
            self.detection_manager.register_detector(
                "water_flood_detection",
                WaterFloodDetectionAgent(alert_manager=self.alert_manager),
                interval=2.0  # Ejecutar cada 2 segundos
            )
            
            self.detection_manager.register_detector(
                "face_recognition",
                FaceRecognitionAgent(alert_manager=self.alert_manager),
                interval=1.5  # Ejecutar cada 1.5 segundos
            )
            
            self.logger.info("Detectores predeterminados registrados exitosamente")
            
        except Exception as e:
            self.logger.error(f"Error al registrar detectores predeterminados: {str(e)}")
    
    def process(self, message):
        """Procesa un mensaje con imágenes para detectores avanzados."""
        if not self.active or message.get("type") != "frame":
            return
        
        try:
            frame = message.get("frame")
            camera_id = message.get("camera_id", "unknown")
            
            if frame is None:
                return
            
            # Determinar si hay detectores prioritarios según contexto
            priority_detectors = []
            
            # Modo asíncrono o síncrono
            if self.enable_async:
                # Procesar en segundo plano
                self.detection_manager.queue_frame(
                    frame, 
                    camera_id=camera_id,
                    priority_detectors=priority_detectors
                )
            else:
                # Procesar inmediatamente
                self.detection_manager.process_frame(
                    frame, 
                    camera_id=camera_id,
                    priority_detectors=priority_detectors
                )
                
        except Exception as e:
            self.logger.error(f"Error en procesamiento de frame: {str(e)}")
    
    def get_status(self):
        """
        Obtiene el estado actual del agente.
        
        Returns:
            dict: Estado del agente y estadísticas
        """
        status = super().get_status()
        
        # Añadir estadísticas de detección
        status.update({
            "stats": self.detection_manager.get_stats(),
            "async_mode": self.enable_async,
            "registered_detectors": list(self.detection_manager.detectors.keys())
        })
        
        return status 

--------------------------------------------------------------------------------

📄 src\ai_modules\face_recognition_enhanced.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import logging
import time
import os
from datetime import datetime
import threading
import pickle
import face_recognition
from collections import defaultdict
from src.mcp_framework import MCPAgent

logger = logging.getLogger("face_recognition")

class EnhancedFaceRecognizer:
    """Clase mejorada para reconocimiento facial con detección de personas desconocidas."""
    
    def __init__(self, known_faces_path="data/known_faces", 
                 model_type="hog", 
                 tolerance=0.6,
                 detection_threshold=0.7,
                 min_face_size=30):
        """
        Inicializa el sistema de reconocimiento facial mejorado.
        
        Args:
            known_faces_path: Ruta al directorio con rostros conocidos
            model_type: Tipo de modelo (hog o cnn). CNN es más preciso pero requiere GPU
            tolerance: Tolerancia para coincidencias (menor = más estricto)
            detection_threshold: Umbral para considerar una detección válida
            min_face_size: Tamaño mínimo de rostro (en píxeles)
        """
        self.known_faces_path = known_faces_path
        self.model_type = model_type
        self.tolerance = tolerance
        self.detection_threshold = detection_threshold
        self.min_face_size = min_face_size
        self.logger = logging.getLogger("face_recognition")
        
        # Crear directorio si no existe
        os.makedirs(known_faces_path, exist_ok=True)
        
        # Para guardar rostros conocidos y sus encodings
        self.known_face_encodings = []
        self.known_face_names = []
        self.known_face_metadata = {}
        
        # Métricas
        self.recognition_count = 0
        self.detection_count = 0
        self.last_recognition_time = None
        
        # Cargar rostros conocidos
        self.load_known_faces()
        
        # Inicializar detector de rostros
        self.face_detector = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        
        # Base de datos de personas desconocidas (para tracking)
        self.unknown_faces = {}
        self.unknown_face_counter = 0
        
        # Para eliminar duplicados
        self.recently_seen = defaultdict(lambda: 0)
        self.min_detection_interval = 2.0  # segundos
        
        self.logger.info(f"Reconocedor facial inicializado, {len(self.known_face_names)} rostros conocidos cargados")
    
    def load_known_faces(self):
        """Carga rostros conocidos desde el directorio configurado."""
        self.known_face_encodings = []
        self.known_face_names = []
        self.known_face_metadata = {}
        
        try:
            # Cargar archivo de encodings si existe
            encodings_file = os.path.join(self.known_faces_path, "encodings.pkl")
            if os.path.exists(encodings_file):
                with open(encodings_file, 'rb') as f:
                    data = pickle.load(f)
                    self.known_face_encodings = data.get('encodings', [])
                    self.known_face_names = data.get('names', [])
                    self.known_face_metadata = data.get('metadata', {})
                    
                self.logger.info(f"Cargados {len(self.known_face_names)} rostros conocidos desde archivo")
                return
            
            # Si no hay archivo, cargar desde imágenes individuales
            for person_folder in os.listdir(self.known_faces_path):
                person_path = os.path.join(self.known_faces_path, person_folder)
                
                # Saltar archivos, solo procesar directorios
                if not os.path.isdir(person_path):
                    continue
                
                person_name = person_folder
                
                # Cargar metadatos si existen
                metadata_file = os.path.join(person_path, "metadata.json")
                person_metadata = {}
                if os.path.exists(metadata_file):
                    try:
                        with open(metadata_file, 'r') as f:
                            import json
                            person_metadata = json.load(f)
                    except Exception as e:
                        self.logger.warning(f"Error al cargar metadatos para {person_name}: {e}")
                
                # Procesar cada imagen
                face_encodings = []
                for image_file in os.listdir(person_path):
                    if not image_file.lower().endswith(('.png', '.jpg', '.jpeg')):
                        continue
                    
                    try:
                        image_path = os.path.join(person_path, image_file)
                        image = face_recognition.load_image_file(image_path)
                        encodings = face_recognition.face_encodings(image)
                        
                        if encodings:
                            face_encodings.append(encodings[0])
                    except Exception as e:
                        self.logger.warning(f"Error al procesar {image_path}: {e}")
                
                # Si se encontraron encodings, añadir a la lista
                if face_encodings:
                    # Usar el promedio de encodings como representación
                    avg_encoding = np.mean(face_encodings, axis=0)
                    self.known_face_encodings.append(avg_encoding)
                    self.known_face_names.append(person_name)
                    self.known_face_metadata[person_name] = person_metadata
                    
                    self.logger.info(f"Cargado rostro de {person_name} con {len(face_encodings)} imágenes")
            
            # Guardar encodings para cargas futuras más rápidas
            if self.known_face_encodings:
                data = {
                    'encodings': self.known_face_encodings,
                    'names': self.known_face_names,
                    'metadata': self.known_face_metadata
                }
                with open(encodings_file, 'wb') as f:
                    pickle.dump(data, f)
                    
        except Exception as e:
            self.logger.error(f"Error al cargar rostros conocidos: {e}")
    
    def recognize_faces(self, frame):
        """
        Reconoce rostros en un frame de video.
        
        Args:
            frame: Imagen en formato BGR (OpenCV)
            
        Returns:
            dict: Resultados del reconocimiento facial
        """
        try:
            # Reducir tamaño para procesamiento más rápido
            frame_small = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
            rgb_small = cv2.cvtColor(frame_small, cv2.COLOR_BGR2RGB)
            
            # Detectar rostros
            face_locations = face_recognition.face_locations(rgb_small, model=self.model_type)
            face_encodings = face_recognition.face_encodings(rgb_small, face_locations)
            
            # Scala de vuelta a tamaño original
            face_locations = [(top*4, right*4, bottom*4, left*4) 
                             for top, right, bottom, left in face_locations]
            
            current_time = time.time()
            self.detection_count += len(face_locations)
            
            # Procesar cada rostro detectado
            faces = []
            for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
                # Filtrar rostros demasiado pequeños
                face_size = max(right - left, bottom - top)
                if face_size < self.min_face_size:
                    continue
                
                # Verificar si es un rostro conocido
                matches = face_recognition.compare_faces(
                    self.known_face_encodings, face_encoding, tolerance=self.tolerance
                )
                
                # Calcular distancias con rostros conocidos
                face_distances = face_recognition.face_distance(self.known_face_encodings, face_encoding)
                
                name = "Desconocido"
                confidence = 0.0
                metadata = {}
                
                if len(face_distances) > 0:
                    best_match_index = np.argmin(face_distances)
                    
                    if matches[best_match_index]:
                        confidence = 1.0 - min(1.0, face_distances[best_match_index])
                        
                        if confidence >= self.detection_threshold:
                            name = self.known_face_names[best_match_index]
                            metadata = self.known_face_metadata.get(name, {})
                            self.recognition_count += 1
                            self.last_recognition_time = current_time
                
                # Generar ID único para rostros desconocidos
                face_id = name
                if name == "Desconocido":
                    # Verificar si este rostro desconocido ya se ha visto antes
                    if self.unknown_faces:
                        # Comparar con rostros desconocidos recientes
                        unknown_encodings = [data['encoding'] for data in self.unknown_faces.values()]
                        unknown_matches = face_recognition.compare_faces(unknown_encodings, face_encoding, tolerance=0.55)
                        
                        if True in unknown_matches:
                            # Encontrar el mejor match
                            unknown_face_ids = list(self.unknown_faces.keys())
                            best_unknown_idx = unknown_matches.index(True)
                            face_id = unknown_face_ids[best_unknown_idx]
                            
                            # Actualizar encoding (promedio móvil)
                            old_encoding = self.unknown_faces[face_id]['encoding']
                            self.unknown_faces[face_id]['encoding'] = (old_encoding * 0.7 + face_encoding * 0.3)
                            self.unknown_faces[face_id]['last_seen'] = current_time
                            self.unknown_faces[face_id]['count'] += 1
                        else:
                            # Nuevo rostro desconocido
                            face_id = f"Unknown_{self.unknown_face_counter}"
                            self.unknown_face_counter += 1
                            
                            self.unknown_faces[face_id] = {
                                'encoding': face_encoding,
                                'first_seen': current_time,
                                'last_seen': current_time,
                                'count': 1
                            }
                    else:
                        # Primer rostro desconocido
                        face_id = "Unknown_0"
                        self.unknown_face_counter += 1
                        
                        self.unknown_faces[face_id] = {
                            'encoding': face_encoding,
                            'first_seen': current_time,
                            'last_seen': current_time,
                            'count': 1
                        }
                
                # Verificar si este rostro ya se reportó recientemente (para evitar duplicados)
                if face_id in self.recently_seen:
                    last_reported = self.recently_seen[face_id]
                    if current_time - last_reported < self.min_detection_interval:
                        # Saltarse este rostro si se reportó recientemente
                        continue
                
                # Actualizar tiempo de último reporte
                self.recently_seen[face_id] = current_time
                
                # Recolectar resultados
                faces.append({
                    'id': face_id,
                    'name': name,
                    'bbox': (left, top, right - left, bottom - top),
                    'confidence': confidence,
                    'known': name != "Desconocido",
                    'metadata': metadata
                })
            
            # Limpiar rostros desconocidos antiguos (más de 1 hora sin ver)
            if current_time % 60 < 1:  # Ejecutar aproximadamente cada minuto
                old_threshold = current_time - 3600  # 1 hora
                to_remove = []
                
                for face_id, data in self.unknown_faces.items():
                    if data['last_seen'] < old_threshold:
                        to_remove.append(face_id)
                
                for face_id in to_remove:
                    del self.unknown_faces[face_id]
                
                if to_remove:
                    self.logger.info(f"Eliminados {len(to_remove)} rostros desconocidos antiguos")
            
            return {
                'faces': faces,
                'timestamp': current_time,
                'count': len(faces)
            }
            
        except Exception as e:
            self.logger.error(f"Error en reconocimiento facial: {e}")
            return {
                'faces': [],
                'timestamp': time.time(),
                'count': 0,
                'error': str(e)
            }
    
    def add_face(self, name, image, metadata=None):
        """
        Añade un nuevo rostro a la base de datos.
        
        Args:
            name: Nombre de la persona
            image: Imagen del rostro (numpy array BGR)
            metadata: Información adicional (opcional)
            
        Returns:
            bool: True si se añadió correctamente
        """
        try:
            # Convertir BGR a RGB
            rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # Detectar rostros
            face_locations = face_recognition.face_locations(rgb_image, model=self.model_type)
            
            if not face_locations:
                self.logger.warning(f"No se detectaron rostros en la imagen para {name}")
                return False
            
            # Tomar el rostro más grande (asumiendo que es la persona principal)
            face_size = [
                (right - left) * (bottom - top)
                for top, right, bottom, left in face_locations
            ]
            largest_face_idx = face_size.index(max(face_size))
            face_location = face_locations[largest_face_idx]
            
            # Generar encoding
            face_encodings = face_recognition.face_encodings(rgb_image, [face_location])
            
            if not face_encodings:
                self.logger.warning(f"No se pudo generar encoding para {name}")
                return False
            
            face_encoding = face_encodings[0]
            
            # Crear directorio para la persona si no existe
            person_dir = os.path.join(self.known_faces_path, name)
            os.makedirs(person_dir, exist_ok=True)
            
            # Guardar imagen
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            image_path = os.path.join(person_dir, f"{timestamp}.jpg")
            cv2.imwrite(image_path, image)
            
            # Guardar metadatos si existen
            if metadata:
                metadata_path = os.path.join(person_dir, "metadata.json")
                with open(metadata_path, 'w') as f:
                    import json
                    json.dump(metadata, f, indent=4)
            
            # Actualizar listas en memoria
            self.known_face_encodings.append(face_encoding)
            self.known_face_names.append(name)
            self.known_face_metadata[name] = metadata or {}
            
            # Actualizar archivo de encodings
            encodings_file = os.path.join(self.known_faces_path, "encodings.pkl")
            data = {
                'encodings': self.known_face_encodings,
                'names': self.known_face_names,
                'metadata': self.known_face_metadata
            }
            with open(encodings_file, 'wb') as f:
                pickle.dump(data, f)
            
            self.logger.info(f"Rostro de {name} añadido correctamente")
            return True
            
        except Exception as e:
            self.logger.error(f"Error al añadir rostro: {e}")
            return False
    
    def get_stats(self):
        """Obtiene estadísticas del reconocedor facial."""
        return {
            'known_faces_count': len(self.known_face_names),
            'unknown_faces_count': len(self.unknown_faces),
            'recognition_count': self.recognition_count,
            'detection_count': self.detection_count,
            'last_recognition_time': self.last_recognition_time
        }


class FaceRecognitionAgent(MCPAgent):
    """Agente para reconocimiento facial con detección de personas desconocidas."""
    
    def __init__(self, agent_id=None, name=None, alert_manager=None, 
                 known_faces_path="data/known_faces",
                 confidence_threshold=0.7,
                 alert_on_unknown=True):
        super().__init__(agent_id=agent_id or "face_recognition_agent", 
                          name=name or "Detector de Rostros")
        
        self.face_recognizer = EnhancedFaceRecognizer(
            known_faces_path=known_faces_path,
            detection_threshold=confidence_threshold
        )
        self.alert_manager = alert_manager
        self.confidence_threshold = confidence_threshold
        self.alert_on_unknown = alert_on_unknown
        self.active = True
        
        # Configuración de alertas
        self.alert_cooldown = 60  # Segundos entre alertas del mismo tipo
        self.last_alerts = {}  # Registro de últimas alertas
    
    def process(self, message):
        """Procesa un mensaje con imágenes para reconocimiento facial."""
        if not self.active or message.get("type") != "frame":
            return
        
        try:
            frame = message.get("frame")
            camera_id = message.get("camera_id", "unknown")
            timestamp = message.get("timestamp")
            
            if frame is None:
                return
            
            # Ejecutar reconocimiento
            result = self.face_recognizer.recognize_faces(frame)
            
            if not result['faces']:
                return
            
            # Procesar cada rostro detectado
            current_time = time.time()
            
            for face in result['faces']:
                face_id = face['id']
                is_known = face['known']
                name = face['name']
                confidence = face['confidence']
                
                # Determinar si debemos generar alerta
                create_alert = False
                alert_type = ""
                description = ""
                severity = "info"
                
                if is_known and confidence >= self.confidence_threshold:
                    # Persona conocida detectada
                    alert_key = f"known_face_{face_id}_{camera_id}"
                    
                    # Verificar cooldown
                    if (alert_key not in self.last_alerts or 
                        current_time - self.last_alerts[alert_key] > self.alert_cooldown):
                        
                        create_alert = True
                        alert_type = "known_person"
                        description = f"Persona conocida detectada: {name}"
                        severity = "info"
                        
                        # Actualizar tiempo de última alerta
                        self.last_alerts[alert_key] = current_time
                        
                elif not is_known and self.alert_on_unknown:
                    # Persona desconocida detectada
                    alert_key = f"unknown_face_{face_id}_{camera_id}"
                    
                    # Para desconocidos, usamos un cooldown más corto por cámara
                    camera_key = f"any_unknown_{camera_id}"
                    
                    # Verificar cooldown por cámara para desconocidos
                    if (camera_key not in self.last_alerts or 
                        current_time - self.last_alerts[camera_key] > 15):  # 15 segundos
                        
                        create_alert = True
                        alert_type = "unknown_person"
                        description = "Persona desconocida detectada"
                        severity = "warning"
                        
                        # Actualizar tiempo de última alerta
                        self.last_alerts[camera_key] = current_time
                        self.last_alerts[alert_key] = current_time
                
                # Crear alerta si corresponde
                if create_alert:
                    # Recortar imagen del rostro
                    x, y, w, h = face['bbox']
                    face_img = frame[y:y+h, x:x+w]
                    
                    # Añadir margen
                    margin = int(min(w, h) * 0.2)
                    x = max(0, x - margin)
                    y = max(0, y - margin)
                    w = min(frame.shape[1] - x, w + 2 * margin)
                    h = min(frame.shape[0] - y, h + 2 * margin)
                    
                    face_context = frame[y:y+h, x:x+w]
                    
                    self._create_alert(
                        camera_id=camera_id,
                        frame=frame,
                        face_img=face_context,
                        alert_type=alert_type,
                        description=description,
                        severity=severity,
                        confidence=confidence,
                        metadata={
                            "face_id": face_id,
                            "name": name,
                            "bbox": face['bbox'],
                            "is_known": is_known,
                            "metadata": face.get('metadata', {})
                        }
                    )
                    
        except Exception as e:
            self.logger.error(f"Error en procesamiento de reconocimiento facial: {str(e)}")
    
    def _create_alert(self, camera_id, frame, face_img, alert_type, description, 
                     severity, confidence, metadata=None):
        """Crea una alerta en el sistema."""
        if not self.alert_manager:
            self.logger.warning("No se puede crear alerta: alert_manager no configurado")
            return
        
        try:
            alert_data = {
                "camera_id": camera_id,
                "timestamp": datetime.now().isoformat(),
                "alert_type": alert_type,
                "severity": severity,
                "description": description,
                "confidence": confidence,
                "metadata": metadata or {}
            }
            
            # Guardar imagen del rostro
            if face_img is not None:
                # Convertir frame a bytes o guardar en disco
                face_path = self.alert_manager.save_alert_image(
                    face_img, 
                    alert_data, 
                    prefix="face_"
                )
                alert_data["face_path"] = face_path
            
            # Guardar imagen completa
            if frame is not None:
                image_path = self.alert_manager.save_alert_image(frame, alert_data)
                alert_data["image_path"] = image_path
            
            # Crear alerta
            alert_id = self.alert_manager.create_alert(alert_data)
            self.logger.info(f"Alerta creada: {alert_id}, tipo: {alert_type}")
            
            return alert_id
            
        except Exception as e:
            self.logger.error(f"Error al crear alerta: {str(e)}")
            return None 

--------------------------------------------------------------------------------

📄 src\ai_modules\fire_smoke_detector.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import logging
import time
from datetime import datetime
from src.mcp_framework import MCPAgent

logger = logging.getLogger("fire_smoke_detector")

class FireSmokeDetector:
    """Detector especializado en fuego y humo."""
    
    def __init__(self, model_path=None, confidence_threshold=0.5):
        """
        Inicializa el detector de fuego y humo.
        
        Args:
            model_path: Ruta al modelo YOLOv5 entrenado para detección de fuego/humo
            confidence_threshold: Umbral de confianza para detecciones
        """
        self.confidence_threshold = confidence_threshold
        self.logger = logging.getLogger("fire_smoke_detector")
        
        # Inicializar modelo
        try:
            if model_path:
                # Cargar modelo YOLOv5 personalizado
                import torch
                self.model = torch.hub.load('ultralytics/yolov5', 'custom', path=model_path)
                self.model.conf = confidence_threshold
                self.using_custom_model = True
                self.logger.info(f"Modelo YOLOv5 cargado desde {model_path}")
            else:
                # Inicializar detector basado en análisis de color
                self.using_custom_model = False
                self.logger.info("Usando detector basado en análisis de color")
                
                # Parámetros para detección basada en color
                self.fire_lower = np.array([0, 120, 120])
                self.fire_upper = np.array([35, 255, 255])
                
                self.smoke_lower = np.array([0, 0, 150])
                self.smoke_upper = np.array([180, 35, 255])
        except Exception as e:
            self.logger.error(f"Error al inicializar detector: {str(e)}")
            self.using_custom_model = False
    
    def detect(self, frame):
        """
        Detecta fuego y humo en un frame.
        
        Args:
            frame: Imagen en formato BGR (OpenCV)
            
        Returns:
            dict: Resultados de la detección
        """
        if self.using_custom_model:
            return self._detect_with_model(frame)
        else:
            return self._detect_with_color(frame)
    
    def _detect_with_model(self, frame):
        """Detecta fuego y humo usando modelo YOLOv5."""
        try:
            # Ejecutar inferencia
            results = self.model(frame)
            
            # Extraer resultados
            detections = []
            fire_detected = False
            smoke_detected = False
            max_confidence = 0.0
            
            # Procesar detecciones
            preds = results.xyxy[0].cpu().numpy()
            
            for pred in preds:
                x1, y1, x2, y2, conf, cls = pred
                
                if conf < self.confidence_threshold:
                    continue
                
                label = results.names[int(cls)]
                
                # Guardar detección con mayor confianza
                if conf > max_confidence:
                    max_confidence = conf
                
                # Verificar tipo de detección
                if label.lower() in ['fire', 'fuego']:
                    fire_detected = True
                elif label.lower() in ['smoke', 'humo']:
                    smoke_detected = True
                
                detections.append({
                    'class': label,
                    'confidence': float(conf),
                    'bbox': [int(x1), int(y1), int(x2-x1), int(y2-y1)]
                })
            
            return {
                'fire_detected': fire_detected,
                'smoke_detected': smoke_detected,
                'confidence': max_confidence,
                'detections': detections
            }
            
        except Exception as e:
            self.logger.error(f"Error en detección con modelo: {str(e)}")
            return {
                'fire_detected': False,
                'smoke_detected': False,
                'confidence': 0.0,
                'detections': [],
                'error': str(e)
            }
    
    def _detect_with_color(self, frame):
        """Detecta fuego y humo usando análisis de color."""
        try:
            # Convertir a HSV para mejor segmentación de color
            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
            
            # Crear máscaras para fuego y humo
            fire_mask = cv2.inRange(hsv, self.fire_lower, self.fire_upper)
            smoke_mask = cv2.inRange(hsv, self.smoke_lower, self.smoke_upper)
            
            # Calcular porcentaje de píxeles de fuego y humo
            total_pixels = frame.shape[0] * frame.shape[1]
            fire_percent = cv2.countNonZero(fire_mask) / total_pixels
            smoke_percent = cv2.countNonZero(smoke_mask) / total_pixels
            
            # Aplicar umbrales para determinar detección
            fire_detected = fire_percent > 0.01  # Más del 1% de la imagen es fuego
            smoke_detected = smoke_percent > 0.05  # Más del 5% de la imagen es humo
            
            # Calcular confianza proporcional al porcentaje
            fire_confidence = min(1.0, fire_percent * 5) if fire_detected else 0
            smoke_confidence = min(1.0, smoke_percent * 3) if smoke_detected else 0
            max_confidence = max(fire_confidence, smoke_confidence)
            
            # Encontrar contornos para las áreas de detección
            detections = []
            
            if fire_detected:
                fire_contours, _ = cv2.findContours(fire_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                
                for contour in fire_contours:
                    if cv2.contourArea(contour) > 500:  # Filtrar pequeños falsos positivos
                        x, y, w, h = cv2.boundingRect(contour)
                        detections.append({
                            'class': 'fire',
                            'confidence': fire_confidence,
                            'bbox': [x, y, w, h]
                        })
            
            if smoke_detected:
                smoke_contours, _ = cv2.findContours(smoke_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                
                for contour in smoke_contours:
                    if cv2.contourArea(contour) > 1000:  # Área mínima para humo
                        x, y, w, h = cv2.boundingRect(contour)
                        detections.append({
                            'class': 'smoke',
                            'confidence': smoke_confidence,
                            'bbox': [x, y, w, h]
                        })
            
            return {
                'fire_detected': fire_detected,
                'smoke_detected': smoke_detected,
                'confidence': max_confidence,
                'detections': detections
            }
            
        except Exception as e:
            self.logger.error(f"Error en detección con color: {str(e)}")
            return {
                'fire_detected': False,
                'smoke_detected': False,
                'confidence': 0.0,
                'detections': [],
                'error': str(e)
            }


class FireSmokeDetectionAgent(MCPAgent):
    """Agente para detectar y alertar sobre fuego y humo."""
    
    def __init__(self, agent_id=None, name=None, alert_manager=None, 
                 model_path=None, confidence_threshold=0.6):
        super().__init__(agent_id=agent_id or "fire_smoke_detection_agent", 
                         name=name or "Detector de Fuego y Humo")
        
        self.fire_smoke_detector = FireSmokeDetector(
            model_path=model_path,
            confidence_threshold=confidence_threshold
        )
        self.alert_manager = alert_manager
        self.confidence_threshold = confidence_threshold
        self.active = True
        
        # Configuración de alertas
        self.alert_cooldown = 30  # Segundos entre alertas del mismo tipo
        self.last_alerts = {}  # Registro de últimas alertas
        
        # Verificación de falsos positivos
        self.consecutive_detections = {}  # Contador para reducir falsos positivos
        self.min_consecutive = 3  # Mínimo de detecciones consecutivas para alertar
    
    def process(self, message):
        """Procesa un mensaje con imágenes para detectar fuego o humo."""
        if not self.active or message.get("type") != "frame":
            return
        
        try:
            frame = message.get("frame")
            camera_id = message.get("camera_id", "unknown")
            timestamp = message.get("timestamp")
            
            if frame is None:
                return
            
            # Ejecutar detección
            result = self.fire_smoke_detector.detect(frame)
            
            # Gestionar contadores de detecciones consecutivas
            if not camera_id in self.consecutive_detections:
                self.consecutive_detections[camera_id] = {
                    'fire': 0,
                    'smoke': 0
                }
            
            # Actualizar contadores
            if result['fire_detected'] and result['confidence'] > self.confidence_threshold:
                self.consecutive_detections[camera_id]['fire'] += 1
            else:
                self.consecutive_detections[camera_id]['fire'] = 0
                
            if result['smoke_detected'] and result['confidence'] > self.confidence_threshold:
                self.consecutive_detections[camera_id]['smoke'] += 1
            else:
                self.consecutive_detections[camera_id]['smoke'] = 0
            
            # Verificar umbral de detecciones consecutivas
            current_time = time.time()
            
            # Alerta de fuego
            if self.consecutive_detections[camera_id]['fire'] >= self.min_consecutive:
                alert_key = f"fire_{camera_id}"
                
                # Verificar cooldown
                if (alert_key not in self.last_alerts or 
                    current_time - self.last_alerts[alert_key] > self.alert_cooldown):
                    
                    # Registrar alerta
                    self._create_alert(
                        camera_id=camera_id,
                        frame=frame,
                        alert_type="fire",
                        description="¡ALERTA! Posible fuego detectado",
                        severity="critical",
                        confidence=result["confidence"],
                        metadata={"detections": result["detections"]}
                    )
                    
                    # Actualizar tiempo de última alerta
                    self.last_alerts[alert_key] = current_time
            
            # Alerta de humo
            if self.consecutive_detections[camera_id]['smoke'] >= self.min_consecutive:
                alert_key = f"smoke_{camera_id}"
                
                # Verificar cooldown
                if (alert_key not in self.last_alerts or 
                    current_time - self.last_alerts[alert_key] > self.alert_cooldown):
                    
                    # Registrar alerta
                    self._create_alert(
                        camera_id=camera_id,
                        frame=frame,
                        alert_type="smoke",
                        description="Posible humo detectado",
                        severity="warning",
                        confidence=result["confidence"],
                        metadata={"detections": result["detections"]}
                    )
                    
                    # Actualizar tiempo de última alerta
                    self.last_alerts[alert_key] = current_time
                    
        except Exception as e:
            self.logger.error(f"Error en detección de fuego/humo: {str(e)}")
    
    def _create_alert(self, camera_id, frame, alert_type, description, 
                     severity, confidence, metadata=None):
        """Crea una alerta en el sistema."""
        if not self.alert_manager:
            self.logger.warning("No se puede crear alerta: alert_manager no configurado")
            return
        
        try:
            alert_data = {
                "camera_id": camera_id,
                "timestamp": datetime.now().isoformat(),
                "alert_type": alert_type,
                "severity": severity,
                "description": description,
                "confidence": confidence,
                "metadata": metadata or {}
            }
            
            # Guardar imagen de la detección
            if frame is not None:
                # Convertir frame a bytes o guardar en disco
                image_path = self.alert_manager.save_alert_image(frame, alert_data)
                alert_data["image_path"] = image_path
            
            # Crear alerta
            alert_id = self.alert_manager.create_alert(alert_data)
            self.logger.info(f"Alerta creada: {alert_id}, tipo: {alert_type}")
            
            return alert_id
            
        except Exception as e:
            self.logger.error(f"Error al crear alerta: {str(e)}")
            return None 

--------------------------------------------------------------------------------

📄 src\ai_modules\pose_detector.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import logging
from src.mcp_framework import MCPAgent
import mediapipe as mp

logger = logging.getLogger("pose_detector")

class PoseDetector:
    """Detector de posturas corporales para identificar situaciones específicas."""
    
    def __init__(self, confidence_threshold=0.6):
        self.mp_pose = mp.solutions.pose
        self.pose = self.mp_pose.Pose(
            static_image_mode=False,
            model_complexity=1,
            min_detection_confidence=confidence_threshold,
            min_tracking_confidence=confidence_threshold
        )
        self.confidence_threshold = confidence_threshold
        self.logger = logging.getLogger("pose_detector")
    
    def detect(self, frame):
        """
        Detecta posturas corporales en un frame.
        
        Args:
            frame: Imagen en formato BGR (OpenCV)
            
        Returns:
            dict: Resultados de detección con posturas y anomalías
        """
        # Convertir BGR a RGB
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # Procesar frame
        results = self.pose.process(rgb_frame)
        
        if not results.pose_landmarks:
            return {
                "detected": False,
                "pose_landmarks": None,
                "raised_arms": False,
                "person_on_ground": False,
                "confidence": 0.0
            }
        
        # Obtener landmarks
        landmarks = results.pose_landmarks.landmark
        
        # Identificar posturas específicas
        raised_arms = self._check_raised_arms(landmarks)
        person_on_ground = self._check_person_on_ground(landmarks)
        
        return {
            "detected": True,
            "pose_landmarks": landmarks,
            "raised_arms": raised_arms,
            "person_on_ground": person_on_ground,
            "confidence": self._get_confidence(landmarks)
        }
    
    def _check_raised_arms(self, landmarks):
        """Verifica si la persona tiene los brazos levantados."""
        try:
            # Obtener coordenadas relevantes
            left_shoulder = landmarks[self.mp_pose.PoseLandmark.LEFT_SHOULDER.value]
            right_shoulder = landmarks[self.mp_pose.PoseLandmark.RIGHT_SHOULDER.value]
            left_elbow = landmarks[self.mp_pose.PoseLandmark.LEFT_ELBOW.value]
            right_elbow = landmarks[self.mp_pose.PoseLandmark.RIGHT_ELBOW.value]
            left_wrist = landmarks[self.mp_pose.PoseLandmark.LEFT_WRIST.value]
            right_wrist = landmarks[self.mp_pose.PoseLandmark.RIGHT_WRIST.value]
            
            # Verificar si las muñecas están por encima de los hombros
            left_raised = (left_wrist.y < left_shoulder.y) and (left_wrist.visibility > 0.7)
            right_raised = (right_wrist.y < right_shoulder.y) and (right_wrist.visibility > 0.7)
            
            # También verificar si los codos están por encima de los hombros para una detección más precisa
            left_elbow_raised = (left_elbow.y < left_shoulder.y) and (left_elbow.visibility > 0.7)
            right_elbow_raised = (right_elbow.y < right_shoulder.y) and (right_elbow.visibility > 0.7)
            
            # Se considera brazos levantados si al menos uno está claramente arriba
            return (left_raised and left_elbow_raised) or (right_raised and right_elbow_raised)
            
        except Exception as e:
            self.logger.error(f"Error al analizar posición de brazos: {str(e)}")
            return False
    
    def _check_person_on_ground(self, landmarks):
        """Verifica si la persona parece estar en el suelo."""
        try:
            # Obtener coordenadas relevantes
            nose = landmarks[self.mp_pose.PoseLandmark.NOSE.value]
            left_shoulder = landmarks[self.mp_pose.PoseLandmark.LEFT_SHOULDER.value]
            right_shoulder = landmarks[self.mp_pose.PoseLandmark.RIGHT_SHOULDER.value]
            left_hip = landmarks[self.mp_pose.PoseLandmark.LEFT_HIP.value]
            right_hip = landmarks[self.mp_pose.PoseLandmark.RIGHT_HIP.value]
            
            # Calcular los ángulos de inclinación del torso
            torso_vertical = self._calculate_vertical_angle(
                (left_shoulder.x + right_shoulder.x) / 2, 
                (left_shoulder.y + right_shoulder.y) / 2,
                (left_hip.x + right_hip.x) / 2, 
                (left_hip.y + right_hip.y) / 2
            )
            
            # Una persona en el suelo suele tener ángulos cercanos a la horizontal
            is_horizontal = abs(torso_vertical) > 60 and abs(torso_vertical) < 120
            
            # También verificar si la nariz está a una altura similar a los hombros o caderas
            similar_height = (
                abs(nose.y - left_shoulder.y) < 0.1 or 
                abs(nose.y - right_shoulder.y) < 0.1 or
                abs(nose.y - left_hip.y) < 0.2 or
                abs(nose.y - right_hip.y) < 0.2
            )
            
            return is_horizontal or similar_height
            
        except Exception as e:
            self.logger.error(f"Error al analizar posición de persona: {str(e)}")
            return False
    
    def _calculate_vertical_angle(self, x1, y1, x2, y2):
        """Calcula el ángulo con respecto a la vertical."""
        angle = np.degrees(np.arctan2(x2 - x1, y2 - y1))
        return angle
    
    def _get_confidence(self, landmarks):
        """Obtiene nivel de confianza promedio de landmarks clave."""
        key_points = [
            self.mp_pose.PoseLandmark.NOSE.value,
            self.mp_pose.PoseLandmark.LEFT_SHOULDER.value,
            self.mp_pose.PoseLandmark.RIGHT_SHOULDER.value,
            self.mp_pose.PoseLandmark.LEFT_ELBOW.value,
            self.mp_pose.PoseLandmark.RIGHT_ELBOW.value,
            self.mp_pose.PoseLandmark.LEFT_WRIST.value,
            self.mp_pose.PoseLandmark.RIGHT_WRIST.value,
            self.mp_pose.PoseLandmark.LEFT_HIP.value,
            self.mp_pose.PoseLandmark.RIGHT_HIP.value,
        ]
        
        confidences = [landmarks[i].visibility for i in key_points]
        return sum(confidences) / len(confidences)


class PoseDetectionAgent(MCPAgent):
    """Agente para detectar y analizar posturas corporales anómalas."""
    
    def __init__(self, agent_id=None, name=None, alert_manager=None, confidence_threshold=0.6):
        super().__init__(agent_id=agent_id or "pose_detection_agent", 
                          name=name or "Detector de Posturas")
        
        self.pose_detector = PoseDetector(confidence_threshold)
        self.alert_manager = alert_manager
        self.confidence_threshold = confidence_threshold
        self.active = True
        
        # Configuración de umbrales
        self.alert_cooldown = 10  # Segundos entre alertas del mismo tipo
        self.last_alerts = {}  # Registro de últimas alertas
    
    def process(self, message):
        """Procesa un mensaje con imágenes para detectar posturas anómalas."""
        if not self.active or message.get("type") != "frame":
            return
        
        try:
            frame = message.get("frame")
            camera_id = message.get("camera_id", "unknown")
            timestamp = message.get("timestamp")
            
            if frame is None:
                return
            
            # Ejecutar detección
            result = self.pose_detector.detect(frame)
            
            # Verificar resultados
            if not result["detected"]:
                return
            
            # Analizar posturas específicas
            current_time = time.time()
            
            # Comprobar brazos levantados (posible asalto)
            if result["raised_arms"] and result["confidence"] > self.confidence_threshold:
                alert_key = f"raised_arms_{camera_id}"
                
                # Verificar cooldown
                if (alert_key not in self.last_alerts or 
                    current_time - self.last_alerts[alert_key] > self.alert_cooldown):
                    
                    # Registrar alerta
                    self._create_alert(
                        camera_id=camera_id,
                        frame=frame,
                        alert_type="possible_robbery",
                        description="Persona con brazos levantados detectada",
                        severity="warning",
                        confidence=result["confidence"],
                        metadata={"pose_type": "raised_arms"}
                    )
                    
                    # Actualizar tiempo de última alerta
                    self.last_alerts[alert_key] = current_time
            
            # Comprobar persona en el suelo (posible emergencia)
            if result["person_on_ground"] and result["confidence"] > self.confidence_threshold:
                alert_key = f"person_down_{camera_id}"
                
                # Verificar cooldown
                if (alert_key not in self.last_alerts or 
                    current_time - self.last_alerts[alert_key] > self.alert_cooldown):
                    
                    # Registrar alerta
                    self._create_alert(
                        camera_id=camera_id,
                        frame=frame,
                        alert_type="possible_emergency",
                        description="Persona en el suelo detectada",
                        severity="critical",
                        confidence=result["confidence"],
                        metadata={"pose_type": "person_on_ground"}
                    )
                    
                    # Actualizar tiempo de última alerta
                    self.last_alerts[alert_key] = current_time
                    
        except Exception as e:
            self.logger.error(f"Error en detección de posturas: {str(e)}")
    
    def _create_alert(self, camera_id, frame, alert_type, description, 
                     severity, confidence, metadata=None):
        """Crea una alerta en el sistema."""
        if not self.alert_manager:
            self.logger.warning("No se puede crear alerta: alert_manager no configurado")
            return
        
        try:
            alert_data = {
                "camera_id": camera_id,
                "timestamp": datetime.now().isoformat(),
                "alert_type": alert_type,
                "severity": severity,
                "description": description,
                "confidence": confidence,
                "metadata": metadata or {}
            }
            
            # Guardar imagen de la detección
            if frame is not None:
                # Convertir frame a bytes o guardar en disco
                image_path = self.alert_manager.save_alert_image(frame, alert_data)
                alert_data["image_path"] = image_path
            
            # Crear alerta
            alert_id = self.alert_manager.create_alert(alert_data)
            self.logger.info(f"Alerta creada: {alert_id}, tipo: {alert_type}")
            
            return alert_id
            
        except Exception as e:
            self.logger.error(f"Error al crear alerta: {str(e)}")
            return None 

--------------------------------------------------------------------------------

📄 src\ai_modules\water_flood_detector.py
--------------------------------------------------------------------------------
import cv2
import numpy as np
import logging
import time
from datetime import datetime
from src.mcp_framework import MCPAgent

logger = logging.getLogger("water_detector")

class WaterFloodDetector:
    """Detector especializado en agua e inundaciones."""
    
    def __init__(self, confidence_threshold=0.6):
        """
        Inicializa el detector de agua e inundaciones.
        
        Args:
            confidence_threshold: Umbral de confianza para detecciones
        """
        self.confidence_threshold = confidence_threshold
        self.logger = logging.getLogger("water_detector")
        
        # Parámetros para detección de agua
        self.water_lower_hsv = np.array([90, 50, 50])  # Azul claro a verde-azulado
        self.water_upper_hsv = np.array([130, 255, 255])
        
        # Inicializar detector de movimiento para agua
        self.background_subtractor = cv2.createBackgroundSubtractorMOG2(
            history=500, 
            varThreshold=16, 
            detectShadows=False
        )
        
        # Almacenar frames anteriores para análisis de cambios temporales
        self.prev_frames = []
        self.max_prev_frames = 5
    
    def detect(self, frame):
        """
        Detecta agua e inundaciones en un frame.
        
        Args:
            frame: Imagen en formato BGR (OpenCV)
            
        Returns:
            dict: Resultados de la detección
        """
        try:
            # Convertir a HSV para mejor segmentación de color
            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
            
            # Crear máscara para agua
            water_mask = cv2.inRange(hsv, self.water_lower_hsv, self.water_upper_hsv)
            
            # Aplicar filtros para reducir ruido
            water_mask = cv2.GaussianBlur(water_mask, (7, 7), 0)
            
            # Aplicar detección de movimiento
            fg_mask = self.background_subtractor.apply(frame)
            
            # Calcular áreas de agua en movimiento (posibles inundaciones)
            moving_water_mask = cv2.bitwise_and(water_mask, fg_mask)
            
            # Calcular porcentajes
            total_pixels = frame.shape[0] * frame.shape[1]
            water_percent = cv2.countNonZero(water_mask) / total_pixels
            moving_water_percent = cv2.countNonZero(moving_water_mask) / total_pixels
            
            # Guardar frame para análisis temporal
            self.prev_frames.append(water_percent)
            if len(self.prev_frames) > self.max_prev_frames:
                self.prev_frames.pop(0)
            
            # Detectar incremento en la cantidad de agua (posible inundación)
            water_increasing = False
            if len(self.prev_frames) > 2:
                # Verificar si hay tendencia al aumento
                trend = np.polyfit(range(len(self.prev_frames)), self.prev_frames, 1)[0]
                water_increasing = trend > 0.005  # Umbral para considerar aumento significativo
            
            # Determinar detecciones
            water_detected = water_percent > 0.1  # Más del 10% de la imagen es agua
            flood_detected = (water_percent > 0.25 or  # Más del 25% es agua
                             (water_detected and water_increasing) or  # Agua en aumento
                             moving_water_percent > 0.05)  # Agua en movimiento
            
            # Calcular confianza
            water_confidence = min(1.0, water_percent * 3) if water_detected else 0
            flood_confidence = min(1.0, max(water_percent * 2, moving_water_percent * 5)) if flood_detected else 0
            
            # Encontrar contornos para las áreas de detección
            detections = []
            water_contours, _ = cv2.findContours(water_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            for contour in water_contours:
                if cv2.contourArea(contour) > 1000:  # Área mínima para reducir falsos positivos
                    x, y, w, h = cv2.boundingRect(contour)
                    
                    # Determinar tipo (agua o inundación)
                    is_flood = False
                    contour_mask = np.zeros_like(fg_mask)
                    cv2.drawContours(contour_mask, [contour], 0, 255, -1)
                    
                    # Verificar movimiento en esta región
                    motion_in_region = cv2.bitwise_and(contour_mask, fg_mask)
                    motion_percent = cv2.countNonZero(motion_in_region) / cv2.contourArea(contour)
                    
                    is_flood = motion_percent > 0.2 or (w * h) / total_pixels > 0.25
                    
                    detections.append({
                        'class': 'flood' if is_flood else 'water',
                        'confidence': flood_confidence if is_flood else water_confidence,
                        'bbox': [x, y, w, h]
                    })
            
            return {
                'water_detected': water_detected,
                'flood_detected': flood_detected,
                'water_confidence': water_confidence,
                'flood_confidence': flood_confidence,
                'confidence': max(water_confidence, flood_confidence),
                'detections': detections,
                'water_percent': water_percent,
                'water_increasing': water_increasing
            }
            
        except Exception as e:
            self.logger.error(f"Error en detección de agua: {str(e)}")
            return {
                'water_detected': False,
                'flood_detected': False,
                'confidence': 0.0,
                'detections': [],
                'error': str(e)
            }


class WaterFloodDetectionAgent(MCPAgent):
    """Agente para detectar y alertar sobre agua e inundaciones."""
    
    def __init__(self, agent_id=None, name=None, alert_manager=None, 
                 confidence_threshold=0.6):
        super().__init__(agent_id=agent_id or "water_flood_detection_agent", 
                         name=name or "Detector de Agua e Inundaciones")
        
        self.water_detector = WaterFloodDetector(confidence_threshold)
        self.alert_manager = alert_manager
        self.confidence_threshold = confidence_threshold
        self.active = True
        
        # Configuración de alertas
        self.alert_cooldown = 60  # Segundos entre alertas del mismo tipo
        self.last_alerts = {}  # Registro de últimas alertas
        
        # Verificación de falsos positivos
        self.consecutive_detections = {}  # Contador para reducir falsos positivos
        self.min_consecutive_water = 3  # Mínimo de detecciones consecutivas para agua
        self.min_consecutive_flood = 2  # Mínimo de detecciones consecutivas para inundación
    
    def process(self, message):
        """Procesa un mensaje con imágenes para detectar agua o inundaciones."""
        if not self.active or message.get("type") != "frame":
            return
        
        try:
            frame = message.get("frame")
            camera_id = message.get("camera_id", "unknown")
            timestamp = message.get("timestamp", datetime.now().isoformat())
            
            if frame is None:
                return
            
            # Ejecutar detección
            result = self.water_detector.detect(frame)
            
            # Gestionar contadores de detecciones consecutivas
            if not camera_id in self.consecutive_detections:
                self.consecutive_detections[camera_id] = {
                    'water': 0,
                    'flood': 0
                }
            
            # Actualizar contadores
            if result['water_detected'] and result['water_confidence'] > self.confidence_threshold:
                self.consecutive_detections[camera_id]['water'] += 1
            else:
                self.consecutive_detections[camera_id]['water'] = 0
                
            if result['flood_detected'] and result['flood_confidence'] > self.confidence_threshold:
                self.consecutive_detections[camera_id]['flood'] += 1
            else:
                self.consecutive_detections[camera_id]['flood'] = 0
            
            # Verificar umbral de detecciones consecutivas
            current_time = time.time()
            
            # Alerta de inundación (más alta prioridad)
            if self.consecutive_detections[camera_id]['flood'] >= self.min_consecutive_flood:
                alert_key = f"flood_{camera_id}"
                
                # Verificar cooldown
                if (alert_key not in self.last_alerts or 
                    current_time - self.last_alerts[alert_key] > self.alert_cooldown):
                    
                    # Registrar alerta
                    self._create_alert(
                        camera_id=camera_id,
                        frame=frame,
                        alert_type="flood",
                        description="¡ALERTA! Posible inundación detectada",
                        severity="critical",
                        confidence=result["flood_confidence"],
                        metadata={
                            "detections": result["detections"],
                            "water_percent": result["water_percent"],
                            "water_increasing": result["water_increasing"]
                        }
                    )
                    
                    # Actualizar tiempo de última alerta
                    self.last_alerts[alert_key] = current_time
            
            # Alerta de agua (menor prioridad que inundación)
            elif self.consecutive_detections[camera_id]['water'] >= self.min_consecutive_water:
                alert_key = f"water_{camera_id}"
                
                # Verificar cooldown
                if (alert_key not in self.last_alerts or 
                    current_time - self.last_alerts[alert_key] > self.alert_cooldown):
                    
                    # Registrar alerta
                    self._create_alert(
                        camera_id=camera_id,
                        frame=frame,
                        alert_type="water",
                        description="Agua detectada en área monitoreada",
                        severity="warning",
                        confidence=result["water_confidence"],
                        metadata={
                            "detections": result["detections"],
                            "water_percent": result["water_percent"]
                        }
                    )
                    
                    # Actualizar tiempo de última alerta
                    self.last_alerts[alert_key] = current_time
                    
        except Exception as e:
            self.logger.error(f"Error en detección de agua/inundación: {str(e)}")
    
    def _create_alert(self, camera_id, frame, alert_type, description, 
                     severity, confidence, metadata=None):
        """Crea una alerta en el sistema."""
        if not self.alert_manager:
            self.logger.warning("No se puede crear alerta: alert_manager no configurado")
            return
        
        try:
            alert_data = {
                "camera_id": camera_id,
                "timestamp": datetime.now().isoformat(),
                "alert_type": alert_type,
                "severity": severity,
                "description": description,
                "confidence": confidence,
                "metadata": metadata or {}
            }
            
            # Guardar imagen de la detección
            if frame is not None:
                # Convertir frame a bytes o guardar en disco
                image_path = self.alert_manager.save_alert_image(frame, alert_data)
                alert_data["image_path"] = image_path
            
            # Crear alerta
            alert_id = self.alert_manager.create_alert(alert_data)
            self.logger.info(f"Alerta creada: {alert_id}, tipo: {alert_type}")
            
            return alert_id
            
        except Exception as e:
            self.logger.error(f"Error al crear alerta: {str(e)}")
            return None 

--------------------------------------------------------------------------------

📄 src\routes\api.py
--------------------------------------------------------------------------------
from flask import Blueprint, jsonify, request, Response
from src.database import db, Camera, Alert, DetectionEvent
from src.agent_manager import AgentManager
import logging
import time
import os
import cv2
import json
import threading
from datetime import datetime, timedelta
import platform
import psutil

api_bp = Blueprint('api', __name__)
logger = logging.getLogger(__name__)

def try_alternate_camera_sources(primary_source):
    """Intenta diferentes backend/APIs de OpenCV para abrir la cámara"""
    if isinstance(primary_source, int):
        # Para webcams, intentar diferentes backends
        alternate_sources = [
            primary_source,  # Original
            f"msmf:{primary_source}",  # Microsoft Media Foundation
            f"dshow:{primary_source}",  # DirectShow
            f"vfw:{primary_source}"     # Video for Windows
        ]
        
        for source in alternate_sources:
            try:
                cap = cv2.VideoCapture(source)
                if cap.isOpened():
                    logger.info(f"Cámara abierta con éxito usando fuente: {source}")
                    return cap
                cap.release()
            except Exception as e:
                logger.warning(f"Error intentando abrir cámara con fuente {source}: {str(e)}")
                
        # Último intento: especificar parámetros MSMF
        try:
            cap = cv2.VideoCapture(primary_source, cv2.CAP_MSMF)
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            cap.set(cv2.CAP_PROP_FPS, 30)
            if cap.isOpened():
                return cap
            cap.release()
        except:
            pass
            
    # Si todos los intentos fallan o no es un índice numérico, intentar con la fuente original
    return cv2.VideoCapture(primary_source)

@api_bp.route('/status')
def status():
    return jsonify({'status': 'online'})

@api_bp.route('/cameras', methods=['GET'])
def get_cameras():
    try:
        cameras = Camera.query.all()
        result = [{
            'id': camera.id,
            'name': camera.name,
            'url': camera.url,
            'location': camera.location,
            'active': camera.active
        } for camera in cameras]
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error al obtener cámaras: {str(e)}")
        return jsonify({'error': 'Error al obtener cámaras'}), 500

@api_bp.route('/cameras', methods=['POST'])
def add_camera():
    try:
        data = request.json
        camera = Camera(
            name=data.get('name'),
            url=data.get('url'),
            location=data.get('location', ''),
            active=data.get('active', True)
        )
        db.session.add(camera)
        db.session.commit()
        return jsonify({'id': camera.id, 'message': 'Cámara añadida correctamente'}), 201
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al añadir cámara: {str(e)}")
        return jsonify({'error': 'Error al añadir cámara'}), 500

@api_bp.route('/alerts', methods=['GET'])
def get_alerts():
    try:
        alerts = Alert.query.order_by(Alert.timestamp.desc()).limit(50).all()
        result = [{
            'id': alert.id,
            'camera_id': alert.camera_id,
            'timestamp': alert.timestamp.isoformat(),
            'alert_type': alert.alert_type,
            'severity': alert.severity,
            'description': alert.description,
            'resolved': alert.resolved
        } for alert in alerts]
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error al obtener alertas: {str(e)}")
        return jsonify({'error': 'Error al obtener alertas'}), 500

@api_bp.route('/alerts/<int:alert_id>/resolve', methods=['POST'])
def resolve_alert(alert_id):
    try:
        alert = Alert.query.get_or_404(alert_id)
        alert.resolved = True
        db.session.commit()
        return jsonify({'message': 'Alerta marcada como resuelta'})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al resolver alerta: {str(e)}")
        return jsonify({'error': 'Error al resolver alerta'}), 500

@api_bp.route('/modes', methods=['GET'])
def get_modes():
    """Obtiene los modos de operación disponibles"""
    try:
        from src.modes_config import OPERATION_MODES
        
        # Obtener el modo actual
        current_mode = request.args.get('current', True)
        
        # Preparar respuesta
        response = {
            'modes': []
        }
        
        # Añadir información de cada modo
        for mode_id, mode_info in OPERATION_MODES.items():
            mode_data = {
                'id': mode_id,
                'name': mode_info['name'],
                'description': mode_info['description']
            }
            response['modes'].append(mode_data)
            
        # Si se solicitó, añadir información sobre el modo actual
        if current_mode:
            from src.operation_mode import OperationMode
            op_mode = OperationMode()
            response['current_mode'] = op_mode.get_current_mode()
            
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Error al obtener modos: {str(e)}")
        return jsonify({'error': 'Error al obtener modos de operación'}), 500

@api_bp.route('/modes/<mode_id>', methods=['POST'])
def set_mode(mode_id):
    """Cambia el modo de operación del sistema"""
    try:
        from src.modes_config import OPERATION_MODES
        from src.operation_mode import OperationMode
        from src.agent_manager import AgentManager
        
        # Verificar que el modo existe
        if mode_id not in OPERATION_MODES:
            return jsonify({'error': 'Modo de operación no válido'}), 400
            
        # Cambiar el modo
        op_mode = OperationMode()
        success = op_mode.set_mode(mode_id)
        
        if not success:
            return jsonify({'error': 'No se pudo cambiar el modo de operación'}), 500
            
        # Activar los agentes correspondientes
        agent_manager = AgentManager()
        agent_manager.activate_agents_for_mode(mode_id)
        
        return jsonify({
            'success': True,
            'mode': mode_id,
            'name': OPERATION_MODES[mode_id]['name'],
            'message': f'Modo cambiado a {OPERATION_MODES[mode_id]["name"]}'
        })
        
    except Exception as e:
        logger.error(f"Error al cambiar modo: {str(e)}")
        return jsonify({'error': 'Error al cambiar modo de operación'}), 500

@api_bp.route('/forensic/search', methods=['POST'])
def forensic_search():
    """Realiza una búsqueda forense de eventos"""
    try:
        from src.forensic_analysis import ForensicAnalysis
        
        # Obtener parámetros de búsqueda del cuerpo de la solicitud
        search_params = request.json or {}
        
        # Crear log detallado para diagnóstico
        logger.info(f"Búsqueda forense con parámetros: {search_params}")
        
        # Obtener límite y desplazamiento para paginación
        limit = int(search_params.get('limit', 50))
        offset = int(search_params.get('offset', 0))
        
        # Realizar búsqueda
        forensic = ForensicAnalysis()
        filters = search_params.get('filters', {})
        logger.info(f"Aplicando filtros: {filters}")
        
        results = forensic.search_events(
            filters=filters,
            limit=limit,
            offset=offset
        )
        
        return jsonify({
            'success': True,
            'count': len(results),
            'results': results
        })
        
    except Exception as e:
        logger.error(f"Error en búsqueda forense: {str(e)}", exc_info=True)
        return jsonify({'error': f'Error al realizar búsqueda forense: {str(e)}'}), 500

@api_bp.route('/forensic/test', methods=['GET'])
def forensic_test():
    """Endpoint de prueba para verificar que la API forense funciona"""
    return jsonify({
        'success': True,
        'message': 'API forense funcionando correctamente'
    })

@api_bp.route('/detectors', methods=['GET'])
def get_detectors():
    """Obtiene la lista de detectores disponibles y su estado"""
    try:
        # Datos de prueba para desarrollo
        mock_detectors = [
            "pose_detection",
            "fire_smoke_detection", 
            "water_flood_detection",
            "face_recognition"
        ]
        
        mock_stats = {
            "frames_processed": 1256,
            "detections": 345,
            "alerts_generated": 12,
            "avg_processing_time": 45.2,
            "max_processing_time": 120.5,
            "min_processing_time": 28.1,
            "queue_size": 0,
            "detectors": {
                "pose_detection": {
                    "interval": 0.5,
                    "last_execution": time.time() - 2.3,
                    "time_since_last": 2.3,
                    "active": True
                },
                "fire_smoke_detection": {
                    "interval": 1.0,
                    "last_execution": time.time() - 0.8,
                    "time_since_last": 0.8,
                    "active": True
                },
                "water_flood_detection": {
                    "interval": 2.0,
                    "last_execution": time.time() - 1.5,
                    "time_since_last": 1.5,
                    "active": False
                },
                "face_recognition": {
                    "interval": 1.5,
                    "last_execution": time.time() - 3.2,
                    "time_since_last": 3.2,
                    "active": True
                }
            }
        }
        
        return jsonify({
            'status': 'success',
            'detectors': mock_detectors,
            'stats': mock_stats,
            'async_mode': True,
            'active': True
        })
        
    except Exception as e:
        logger.error(f"Error al obtener detectores: {str(e)}")
        return jsonify({'error': 'Error al obtener detectores'}), 500

@api_bp.route('/detectors/<detector_id>/toggle', methods=['POST'])
def toggle_detector(detector_id):
    """Activa o desactiva un detector específico"""
    try:
        # Obtener estado solicitado
        data = request.json or {}
        active = data.get('active')
        
        if active is None:
            return jsonify({'error': 'Se requiere el parámetro "active"'}), 400
            
        # Para desarrollo, simplemente devuelve success
        return jsonify({
            'status': 'success',
            'detector_id': detector_id,
            'active': active,
            'message': f'Detector {detector_id} {"activado" if active else "desactivado"}'
        })
        
    except Exception as e:
        logger.error(f"Error al modificar detector: {str(e)}")
        return jsonify({'error': 'Error al modificar detector'}), 500

@api_bp.route('/system/hardware', methods=['GET'])
def get_hardware_info():
    """Obtiene información sobre el hardware del sistema"""
    try:
        from src.utils.hardware_detector import HardwareDetector
        
        detector = HardwareDetector()
        
        return jsonify({
            'status': 'success',
            'cpu': detector.cpu_info,
            'gpu': detector.gpu_info,
            'frameworks': {
                'tensorflow': detector.tensorflow_available,
                'pytorch': detector.torch_available,
                'onnx': detector.onnx_available
            }
        })
        
    except Exception as e:
        logger.error(f"Error al obtener información de hardware: {str(e)}")
        return jsonify({'error': 'Error al obtener información de hardware'}), 500

@api_bp.route('/system/hardware/optimize', methods=['POST'])
def optimize_hardware():
    """Optimiza la configuración para el hardware disponible"""
    try:
        from src.utils.hardware_detector import HardwareDetector
        
        # Obtener el framework a optimizar, si se especificó
        data = request.json or {}
        framework = data.get('framework')  # tensorflow, torch, onnx, o None para todos
        
        detector = HardwareDetector()
        config = detector.configure_for_optimal_performance(framework)
        
        return jsonify({
            'status': 'success',
            'message': 'Configuración optimizada aplicada',
            'configuration': config
        })
        
    except Exception as e:
        logger.error(f"Error al optimizar hardware: {str(e)}")
        return jsonify({'error': 'Error al optimizar hardware'}), 500

@api_bp.route('/cameras/discover', methods=['POST'])
def discover_cameras():
    """Descubre cámaras disponibles en el sistema y la red"""
    try:
        from src.camera_manager import CameraManager
        
        data = request.json or {}
        methods = data.get('methods', ['usb', 'onvif', 'rtsp_scan'])
        network_range = data.get('network_range')
        
        # Obtener o crear instancia de CameraManager
        camera_manager = _get_camera_manager()
        
        # Iniciar descubrimiento
        discovered = camera_manager.discover_cameras(
            methods=methods,
            network_range=network_range
        )
        
        return jsonify({
            'status': 'success',
            'message': 'Descubrimiento de cámaras iniciado',
            'discovery_status': camera_manager.is_discovering,
            'initial_results': discovered
        })
        
    except Exception as e:
        logger.error(f"Error al descubrir cámaras: {str(e)}")
        return jsonify({'error': 'Error al descubrir cámaras'}), 500

@api_bp.route('/cameras/status', methods=['GET'])
def get_cameras_status():
    """Obtiene el estado actual de todas las cámaras para actualización"""
    try:
        # Obtener todas las cámaras
        cameras = Camera.query.all()
        
        # Obtener estado desde CameraManager
        camera_manager = _get_camera_manager()
        manager_status = camera_manager.get_status()
        
        # Combinar información
        result = []
        
        for camera in cameras:
            # Obtener estadísticas del manager si está disponible
            stats = {}
            for cam_info in manager_status.get('cameras', []):
                if cam_info.get('id') == camera.id:
                    stats = {
                        'status': cam_info.get('status', 'unknown'),
                        'fps': cam_info.get('fps', 0)
                    }
                    break
            
            # Crear diccionario de cámara
            camera_info = {
                'id': camera.id,
                'name': camera.name,
                'location': camera.location,
                'url': camera.url,
                'active': camera.active,
                'stats': stats,
                'last_event': None
            }
            
            # Obtener último evento
            last_event = DetectionEvent.query.filter_by(
                camera_id=camera.id
            ).order_by(DetectionEvent.timestamp.desc()).first()
            
            if last_event:
                camera_info['last_event'] = {
                    'id': last_event.id,
                    'event_type': last_event.event_type,
                    'timestamp': last_event.timestamp.timestamp(),
                    'formatted_time': last_event.timestamp.strftime('%H:%M:%S')
                }
            
            result.append(camera_info)
        
        return jsonify({
            'status': 'success',
            'cameras': result,
            'total': len(result),
            'active': sum(1 for c in result if c['active']),
            'server_time': time.time()
        })
        
    except Exception as e:
        logger.error(f"Error al obtener estado de cámaras: {str(e)}")
        return jsonify({'error': f'Error al obtener estado: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/start', methods=['POST'])
def start_camera_stream(camera_id):
    """Inicia el streaming de una cámara"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Verificar si la cámara ya está activa para evitar errores
        camera_manager = _get_camera_manager()
        if camera_manager.is_camera_active(camera_id):
            logger.info(f"La cámara {camera_id} ya está activa")
            # Actualizar estado en la base de datos si no coincide
            if not camera.active:
                camera.active = True
                db.session.commit()
            
            return jsonify({
                'status': 'success',
                'message': f'Cámara {camera_id} ya estaba activa'
            })
        
        # Intentar iniciar la cámara con manejo de errores más robusto
        try:
            success = camera_manager.start_camera(camera_id)
            
            if success:
                # Actualizar estado en la base de datos
                camera.active = True
                db.session.commit()
                
                return jsonify({
                    'status': 'success',
                    'message': f'Cámara {camera_id} iniciada correctamente'
                })
            else:
                return jsonify({
                    'status': 'error',
                    'message': 'No se pudo iniciar la cámara'
                }), 500
        except Exception as camera_error:
            logger.error(f"Error específico al iniciar cámara {camera_id}: {str(camera_error)}")
            return jsonify({
                'status': 'error',
                'message': f'Error al iniciar cámara: {str(camera_error)}'
            }), 500
            
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error general al iniciar cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error al iniciar cámara: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/stop', methods=['POST'])
def stop_camera_stream(camera_id):
    """Detiene el streaming de una cámara"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Actualizar estado en la base de datos
        camera.active = False
        db.session.commit()
        
        # Detener la cámara en el CameraManager
        camera_manager = _get_camera_manager()
        success = camera_manager.stop_camera(camera_id)
        
        if not success:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo detener la cámara'
            }), 500
            
        return jsonify({
            'status': 'success',
            'message': f'Cámara {camera_id} detenida correctamente'
        })
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al detener cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error al detener cámara: {str(e)}'}), 500

@api_bp.route('/cameras/<camera_id>', methods=['DELETE'])
def remove_camera(camera_id):
    """Elimina una cámara del sistema"""
    try:
        # Verificar si la cámara existe en la base de datos
        camera = Camera.query.filter_by(id=camera_id).first()
        if not camera:
            return jsonify({'error': f'Cámara {camera_id} no encontrada'}), 404
        
        # Detener la cámara si está activa
        try:
            from src.camera_manager import CameraManager
            camera_manager = _get_camera_manager()
            if camera_id in camera_manager.active_streams:
                camera_manager.stop_camera(camera_id)
        except Exception as e:
            logger.warning(f"Error al detener cámara antes de eliminar: {str(e)}")
        
        # Eliminar de la base de datos
        db.session.delete(camera)
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': f'Cámara {camera_id} eliminada correctamente'
        })
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al eliminar cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error al eliminar cámara: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>', methods=['PUT'])
def update_camera(camera_id):
    """Actualiza una cámara existente"""
    try:
        camera = Camera.query.get_or_404(camera_id)
        data = request.json
        
        if 'name' in data:
            camera.name = data['name']
        if 'url' in data:
            camera.url = data['url']
        if 'location' in data:
            camera.location = data['location']
        if 'active' in data is not None:
            camera.active = data['active']
            
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': 'Cámara actualizada correctamente'
        })
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al actualizar cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error al actualizar cámara: {str(e)}'}), 500

# Función auxiliar para obtener o crear una instancia de CameraManager
def _get_camera_manager():
    """Obtiene o crea una instancia de CameraManager"""
    # En una aplicación real, esto podría ser un singleton o estar en el contexto de la aplicación
    from src.camera_manager import CameraManager
    from flask import current_app
    
    if not hasattr(current_app, 'camera_manager'):
        current_app.camera_manager = CameraManager()
        
        # Cargar cámaras existentes desde la base de datos
        cameras = Camera.query.all()
        for camera in cameras:
            # Convertir a int si es un número para webcams
            url = camera.url
            if url.isdigit():
                url = int(url)
                
            current_app.camera_manager.add_camera(
                camera_id=str(camera.id),
                url=url,
                name=camera.name,
                camera_type=None,  # Se detectará automáticamente
                parameters={'location': camera.location}
            )
    
    return current_app.camera_manager

@api_bp.route('/system/diagnostics', methods=['GET'])
def run_diagnostics():
    """Ejecuta diagnósticos del sistema"""
    try:
        # Importar aquí para evitar dependencias circulares
        import importlib.util
        import sys
        import os
        
        # Preparar ruta al módulo de diagnóstico - CORREGIR RUTA
        module_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), 
                                  'tools/module_checker.py')
        
        # Verificar si el archivo existe
        if not os.path.exists(module_path):
            return jsonify({
                'error': f'No se encuentra el archivo de diagnóstico: {module_path}'
            }), 404
            
        # Cargar y ejecutar el módulo
        spec = importlib.util.spec_from_file_location("module_checker", module_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules["module_checker"] = module
        spec.loader.exec_module(module)
        
        # Ejecutar diagnóstico
        results = module.check_modules(verbose=False)
        report = module.generate_report(results)
        
        return jsonify({
            'status': 'success',
            'diagnostics': report
        })
        
    except Exception as e:
        logger.error(f"Error al ejecutar diagnósticos: {str(e)}")
        return jsonify({'error': f'Error al ejecutar diagnósticos: {str(e)}'}), 500

@api_bp.route('/cameras/test', methods=['POST'])
def test_camera():
    """Realiza una prueba rápida de conexión a una cámara"""
    try:
        data = request.json
        logger.debug(f"Datos recibidos en /cameras/test: {data}")
        
        if not data:
            logger.warning("No se proporcionaron datos en la solicitud")
            return jsonify({'error': 'No se proporcionó información para la prueba'}), 400
            
        # Compatibilidad con ambos formatos
        camera_url = data.get('url') or data.get('camera_url')
        logger.debug(f"URL de cámara extraída: {camera_url}")
        
        if not camera_url:
            logger.warning("No se proporcionó URL de cámara")
            return jsonify({'error': 'Se requiere URL de cámara'}), 400
            
        # Si es un índice numérico, convertir a entero
        if isinstance(camera_url, str) and camera_url.isdigit():
            camera_url = int(camera_url)
            
        # Intentar abrir la cámara
        cap = cv2.VideoCapture(camera_url)
        if not cap.isOpened():
            return jsonify({
                'status': 'error',
                'message': 'No se pudo conectar a la cámara',
                'details': 'La cámara no pudo ser abierta con la URL proporcionada'
            }), 400
            
        # Capturar un frame
        ret, frame = cap.read()
        cap.release()
        
        if not ret:
            return jsonify({
                'status': 'error',
                'message': 'Conexión establecida pero no se pudo obtener imagen',
                'details': 'La cámara se conectó pero no devolvió frames'
            }), 400
            
        # Obtener información
        height, width = frame.shape[:2]
        
        # Guardar captura de prueba
        test_dir = 'test_captures'
        if not os.path.exists(test_dir):
            os.makedirs(test_dir)
            
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"test_{timestamp}.jpg"
        filepath = os.path.join(test_dir, filename)
        
        cv2.imwrite(filepath, frame)
        
        return jsonify({
            'status': 'success',
            'message': 'Cámara probada correctamente',
            'resolution': f"{width}x{height}",
            'test_image': f"/test_captures/{filename}"
        })
        
    except Exception as e:
        logger.error(f"Error al probar cámara: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error al probar cámara: {str(e)}',
            'details': str(e)
        }), 500

@api_bp.route('/cameras/test/<test_id>/stop', methods=['POST'])
def stop_camera_test(test_id):
    """Detiene una prueba de cámara"""
    try:
        if not hasattr(current_app, 'camera_testers') or test_id not in current_app.camera_testers:
            return jsonify({'error': 'Test no encontrado'}), 404
            
        tester = current_app.camera_testers[test_id]
        tester.stop_test()
        
        # Eliminar referencia
        del current_app.camera_testers[test_id]
        
        return jsonify({
            'status': 'success',
            'message': 'Prueba de cámara detenida'
        })
        
    except Exception as e:
        logger.error(f"Error al detener test de cámara: {str(e)}")
        return jsonify({'error': f'Error al detener test: {str(e)}'}), 500

@api_bp.route('/cameras/test/<test_id>/captures', methods=['GET'])
def get_test_captures(test_id):
    """Obtiene las capturas guardadas de un test"""
    try:
        if not hasattr(current_app, 'camera_testers') or test_id not in current_app.camera_testers:
            return jsonify({'error': 'Test no encontrado'}), 404
            
        tester = current_app.camera_testers[test_id]
        save_dir = tester.save_dir
        
        # Listar archivos en el directorio
        captures = []
        if os.path.exists(save_dir):
            for filename in os.listdir(save_dir):
                if filename.endswith('.jpg') and not filename.endswith('_thumbnail.jpg'):
                    file_path = os.path.join(save_dir, filename)
                    
                    # Verificar si hay un JSON asociado
                    json_path = file_path.replace('.jpg', '_detections.json')
                    has_detections = os.path.exists(json_path)
                    
                    # Crear thumbnail si no existe
                    thumbnail_path = file_path.replace('.jpg', '_thumbnail.jpg')
                    if not os.path.exists(thumbnail_path):
                        try:
                            # Crear thumbnail
                            img = cv2.imread(file_path)
                            height, width = img.shape[:2]
                            max_size = 320
                            
                            # Redimensionar manteniendo proporción
                            if height > width:
                                new_height = max_size
                                new_width = int(width * (max_size / height))
                            else:
                                new_width = max_size
                                new_height = int(height * (max_size / width))
                                
                            resized = cv2.resize(img, (new_width, new_height))
                            cv2.imwrite(thumbnail_path, resized)
                        except:
                            pass
                    
                    # Añadir a la lista
                    captures.append({
                        'filename': filename,
                        'path': f'/test_captures/{filename}',
                        'thumbnail': f'/test_captures/{os.path.basename(thumbnail_path)}',
                        'has_detections': has_detections,
                        'timestamp': os.path.getmtime(file_path)
                    })
                    
        # Ordenar por timestamp (más reciente primero)
        captures.sort(key=lambda x: x['timestamp'], reverse=True)
                    
        return jsonify({
            'status': 'success',
            'captures': captures
        })
        
    except Exception as e:
        logger.error(f"Error al obtener capturas de test: {str(e)}")
        return jsonify({'error': f'Error al obtener capturas: {str(e)}'}), 500

@api_bp.route('/system/hardware/nvidia', methods=['GET'])
def get_nvidia_info():
    """Obtiene información detallada sobre GPUs NVIDIA"""
    try:
        from src.utils.hardware_detector import HardwareDetector
        
        detector = HardwareDetector()
        nvidia_gpus = detector._detect_nvidia_gpu()
        
        if not nvidia_gpus:
            return jsonify({
                'status': 'not_available',
                'message': 'No se detectaron GPUs NVIDIA en el sistema'
            })
        
        return jsonify({
            'status': 'success',
            'nvidia_gpus': nvidia_gpus,
            'count': len(nvidia_gpus)
        })
        
    except Exception as e:
        logger.error(f"Error al obtener información de NVIDIA: {str(e)}")
        return jsonify({'error': f'Error al obtener información de NVIDIA: {str(e)}'}), 500

@api_bp.route('/system/hardware/optimize/nvidia', methods=['POST'])
def optimize_for_nvidia():
    """Optimiza el sistema específicamente para GPUs NVIDIA GeForce"""
    try:
        from src.utils.hardware_detector import HardwareDetector
        
        detector = HardwareDetector()
        config = detector.configure_for_geforce()
        
        if config['status'] == 'not_available':
            return jsonify({
                'status': 'not_available',
                'message': 'No se detectaron GPUs NVIDIA GeForce en el sistema'
            })
        
        return jsonify({
            'status': 'success',
            'message': 'Sistema optimizado para NVIDIA GeForce',
            'configuration': config
        })
        
    except Exception as e:
        logger.error(f"Error al optimizar para NVIDIA: {str(e)}")
        return jsonify({'error': f'Error al optimizar para NVIDIA: {str(e)}'}), 500

@api_bp.route('/cameras/discover/usb', methods=['GET'])
def discover_usb_cameras():
    """Descubre cámaras USB conectadas al sistema (incluidas webcams integradas)"""
    try:
        from src.camera_manager import CameraManager
        
        # Obtener o crear instancia de CameraManager
        camera_manager = _get_camera_manager()
        
        # Descubrir cámaras USB
        discovered = camera_manager.discover_usb_cameras()
        
        return jsonify({
            'status': 'success',
            'cameras': discovered,
            'count': len(discovered)
        })
        
    except Exception as e:
        logger.error(f"Error al descubrir cámaras USB: {str(e)}")
        return jsonify({'error': f'Error al descubrir cámaras USB: {str(e)}'}), 500

@api_bp.route('/camera/<int:camera_id>/stream', methods=['GET'])
def camera_stream(camera_id):
    """Transmite el stream de video de una cámara en formato MJPEG"""
    try:
        # Verificar si existe la cámara
        camera = Camera.query.get_or_404(camera_id)
        
        # Obtener la URL de la cámara antes de entrar al generador
        camera_url = camera.url
        # Convertir a número si es un índice
        if camera_url.isdigit():
            camera_url = int(camera_url)
            
        # Parámetros para el stream
        width = request.args.get('width', 640, type=int)
        height = request.args.get('height', 480, type=int)
        fps_limit = request.args.get('fps', 15, type=int)
        
        # Crear función de generación de frames que no dependa de current_app
        def generate():
            # Intentar abrir la cámara directamente
            cap = try_alternate_camera_sources(camera_url)
            
            if not cap.isOpened():
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n'
                       b'Error: No se pudo conectar a la camara\r\n\r\n')
                return
                
            # Control de FPS
            min_interval = 1.0 / fps_limit
            last_frame_time = 0
            
            try:
                while True:
                    # Control de FPS
                    current_time = time.time()
                    if current_time - last_frame_time < min_interval:
                        time.sleep(0.01)
                        continue
                        
                    # Leer frame
                    ret, frame = cap.read()
                    if not ret or frame is None:
                        logger.warning(f"Error al leer el frame de la cámara {camera_id}")
                        yield (b'--frame\r\n'
                               b'Content-Type: image/jpeg\r\n\r\n'
                               b'Error: No frame available\r\n\r\n')
                        time.sleep(0.5)
                        continue
                    
                    # Redimensionar si es necesario
                    if width and height:
                        frame = cv2.resize(frame, (width, height))
                        
                    # Convertir a JPEG
                    _, jpeg = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 85])
                    
                    last_frame_time = current_time
                    
                    # Enviar frame
                    yield (b'--frame\r\n'
                           b'Content-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n')
            finally:
                # Asegurarse de liberar la cámara
                cap.release()
                
        # Devolver el stream como respuesta MJPEG
        return Response(generate(),
                       mimetype='multipart/x-mixed-replace; boundary=frame')
        
    except Exception as e:
        logger.error(f"Error en stream de cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error en stream: {str(e)}'}), 500

@api_bp.route('/camera/<int:camera_id>/snapshot', methods=['POST'])
def capture_snapshot(camera_id):
    """Captura una instantánea de la cámara"""
    try:
        # Verificar si existe la cámara
        camera = Camera.query.get_or_404(camera_id)
        
        # Comprobar si el directorio existe antes de intentar cualquier cosa
        save_dir = 'snapshots'
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
            
        # Verificar si la cámara está activa
        camera_manager = _get_camera_manager()
        
        if not camera_manager.is_camera_active(camera_id):
            # Intentar iniciar la cámara para la captura
            try:
                logger.info(f"Intentando iniciar cámara {camera_id} para captura")
                camera_manager.start_camera(camera_id)
                # Pequeña espera para que la cámara se inicialice
                time.sleep(2)
            except Exception as cam_error:
                logger.error(f"No se pudo iniciar la cámara para captura: {str(cam_error)}")
                return jsonify({'error': 'No se pudo iniciar la cámara para captura'}), 400
                
        # Intentar obtener un frame con tiempo de espera
        max_attempts = 3
        frame_data = None
        
        for attempt in range(max_attempts):
            frame_data = camera_manager.get_frame(camera_id, wait=True)
            if frame_data:
                break
            time.sleep(0.5)  # Esperar antes del siguiente intento
            
        if not frame_data:
            logger.error(f"No se pudo obtener imagen de la cámara {camera_id} después de {max_attempts} intentos")
            return jsonify({'error': 'No se pudo obtener imagen de la cámara'}), 400
            
        frame = frame_data['frame']
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"camera_{camera_id}_{timestamp}.jpg"
        filepath = os.path.join(save_dir, filename)
        
        # Guardar imagen
        cv2.imwrite(filepath, frame)
        
        # Crear registro de evento sin intentar procesar detecciones si hay error
        event = DetectionEvent(
            camera_id=camera_id,
            event_type="snapshot",
            timestamp=datetime.now(),
            details=json.dumps({
                'filename': filename,
                'path': filepath
            })
        )
        
        db.session.add(event)
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'filename': filename,
            'path': f"/{save_dir}/{filename}"
        })
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al capturar instantánea: {str(e)}")
        return jsonify({'error': f'Error al capturar instantánea: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/record/start', methods=['POST'])
def start_camera_recording(camera_id):
    """Inicia la grabación de video de una cámara"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Verificar si la cámara está activa
        camera_manager = _get_camera_manager()
        if not camera_manager.is_camera_active(camera_id):
            return jsonify({
                'status': 'error',
                'message': 'La cámara no está activa'
            }), 400
            
        # Directorio para grabaciones
        recordings_dir = 'recordings'
        if not os.path.exists(recordings_dir):
            os.makedirs(recordings_dir)
            
        # Nombre de archivo con timestamp
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"cam_{camera_id}_{timestamp}.mp4"
        filepath = os.path.join(recordings_dir, filename)
        
        # Iniciar grabación
        success = camera_manager.start_recording(camera_id, filepath)
        
        if success:
            # Crear evento de sistema
            event = DetectionEvent(
                camera_id=camera_id,
                event_type="recording_start",
                timestamp=datetime.now(),
                details=json.dumps({
                    'filename': filename,
                    'path': filepath
                })
            )
            db.session.add(event)
            db.session.commit()
            
            return jsonify({
                'status': 'success',
                'message': 'Grabación iniciada',
                'filename': filename,
                'path': f"/recordings/{filename}"
            })
        else:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo iniciar la grabación'
            }), 500
            
    except Exception as e:
        logger.error(f"Error al iniciar grabación: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error al iniciar grabación: {str(e)}'
        }), 500

@api_bp.route('/cameras/<int:camera_id>/record/stop', methods=['POST'])
def stop_camera_recording(camera_id):
    """Detiene la grabación de video de una cámara"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Detener grabación
        camera_manager = _get_camera_manager()
        result = camera_manager.stop_recording(camera_id)
        
        if result and 'filepath' in result:
            # Crear evento de sistema
            event = DetectionEvent(
                camera_id=camera_id,
                event_type="recording_stop",
                timestamp=datetime.now(),
                details=json.dumps({
                    'filename': os.path.basename(result['filepath']),
                    'path': result['filepath'],
                    'duration': result.get('duration', 0)
                })
            )
            db.session.add(event)
            db.session.commit()
            
            return jsonify({
                'status': 'success',
                'message': 'Grabación detenida',
                'filename': os.path.basename(result['filepath']),
                'path': f"/recordings/{os.path.basename(result['filepath'])}",
                'duration': result.get('duration', 0)
            })
        else:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo detener la grabación o no hay grabación activa'
            }), 400
            
    except Exception as e:
        logger.error(f"Error al detener grabación: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error al detener grabación: {str(e)}'
        }), 500

@api_bp.route('/cameras/<int:camera_id>/capture-detection', methods=['POST'])
def capture_detection_snapshot(camera_id):
    """Captura una instantánea con anotaciones de detección"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Verificar si la cámara está activa
        camera_manager = _get_camera_manager()
        if not camera_manager.is_camera_active(camera_id):
            return jsonify({
                'status': 'error',
                'message': 'La cámara no está activa'
            }), 400
            
        # Obtener un frame
        frame_data = camera_manager.get_frame(camera_id, wait=True)
        if not frame_data:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo obtener frame de la cámara'
            }), 400
            
        # Obtener parámetros de detección
        data = request.json or {}
        detectors = data.get('detectors', ['pose', 'fire', 'water', 'face'])
        
        # Inicializar el detector
        from src.ai_modules.detection_manager import AdvancedDetectionManager
        detector = AdvancedDetectionManager()
        
        # Procesar frame con detectores
        frame = frame_data['frame']
        detection_results = {}
        detection_image = frame.copy()
        
        # Realizar detecciones y dibujar resultados
        for detector_type in detectors:
            if detector_type == 'pose':
                results = detector.process_pose(frame)
                detection_results['pose'] = results
                # Dibujar resultados
                for person in results:
                    if 'bbox' in person:
                        x, y, w, h = person['bbox']
                        cv2.rectangle(detection_image, (x, y), (x+w, y+h), (0, 255, 0), 2)
                        confidence = person.get('confidence', 0)
                        cv2.putText(detection_image, f"Person: {confidence:.2f}", 
                                   (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
            elif detector_type == 'fire':
                results = detector.process_fire(frame)
                detection_results['fire'] = results
                # Dibujar resultados
                if results.get('detected', False):
                    cv2.putText(detection_image, f"FIRE DETECTED! ({results.get('confidence', 0):.2f})", 
                               (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                
            elif detector_type == 'water':
                results = detector.process_water(frame)
                detection_results['water'] = results
                # Dibujar resultados
                if results.get('detected', False):
                    cv2.putText(detection_image, f"WATER DETECTED! ({results.get('confidence', 0):.2f})", 
                               (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
                
            elif detector_type == 'face':
                results = detector.process_face(frame)
                detection_results['face'] = results
                # Dibujar resultados
                for face in results:
                    if 'bbox' in face:
                        x, y, w, h = face['bbox']
                        cv2.rectangle(detection_image, (x, y), (x+w, y+h), (255, 0, 255), 2)
                        name = face.get('name', 'Unknown')
                        confidence = face.get('confidence', 0)
                        cv2.putText(detection_image, f"{name}: {confidence:.2f}", 
                                   (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 255), 2)
        
        # Guardar las imágenes
        snapshots_dir = 'detection_snapshots'
        if not os.path.exists(snapshots_dir):
            os.makedirs(snapshots_dir)
            
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Guardar frame original
        orig_filename = f"original_{camera_id}_{timestamp}.jpg"
        orig_filepath = os.path.join(snapshots_dir, orig_filename)
        cv2.imwrite(orig_filepath, frame)
        
        # Guardar imagen con detecciones
        det_filename = f"detection_{camera_id}_{timestamp}.jpg"
        det_filepath = os.path.join(snapshots_dir, det_filename)
        cv2.imwrite(det_filepath, detection_image)
        
        # Crear evento
        event = DetectionEvent(
            camera_id=camera_id,
            event_type="detection_snapshot",
            timestamp=datetime.now(),
            details=json.dumps({
                'original_image': orig_filename,
                'detection_image': det_filename,
                'detections': detection_results
            })
        )
        db.session.add(event)
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': 'Captura con detecciones guardada',
            'original_image': f"/{snapshots_dir}/{orig_filename}",
            'detection_image': f"/{snapshots_dir}/{det_filename}",
            'timestamp': timestamp,
            'detections': detection_results
        })
        
    except Exception as e:
        logger.error(f"Error al capturar instantánea con detecciones: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error al capturar instantánea: {str(e)}'
        }), 500

@api_bp.route('/detectors/<detector_type>/enable', methods=['POST'])
def enable_detector(detector_type):
    """Habilita un detector específico para una cámara"""
    try:
        # Verificar parámetros
        camera_id = request.args.get('camera_id', type=int)
        if not camera_id:
            return jsonify({'error': 'Se requiere ID de cámara'}), 400
            
        # Verificar que la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Verificar tipo de detector válido
        valid_detectors = ['pose', 'fire', 'water', 'face', 'all']
        if detector_type not in valid_detectors:
            return jsonify({'error': f'Tipo de detector no válido: {detector_type}'}), 400
            
        # Activar detector
        from src.ai_modules.detection_manager import AdvancedDetectionManager
        detector_manager = AdvancedDetectionManager()
        
        # Almacenar la configuración para esta cámara
        if not hasattr(current_app, 'active_detectors'):
            current_app.active_detectors = {}
            
        if camera_id not in current_app.active_detectors:
            current_app.active_detectors[camera_id] = {}
            
        current_app.active_detectors[camera_id][detector_type] = {
            'active': True,
            'last_results': None,
            'start_time': time.time()
        }
        
        # Iniciar detección si la cámara está activa
        camera_manager = _get_camera_manager()
        if not camera_manager.is_camera_active(camera_id):
            camera_manager.start_camera(camera_id)
            
        # Iniciar thread de detección si no está en ejecución
        if not hasattr(current_app, 'detection_threads'):
            current_app.detection_threads = {}
            
        if camera_id not in current_app.detection_threads or not current_app.detection_threads[camera_id].is_alive():
            detection_thread = threading.Thread(
                target=_detection_worker,
                args=(camera_id, detector_manager),
                daemon=True
            )
            current_app.detection_threads[camera_id] = detection_thread
            detection_thread.start()
            
        return jsonify({
            'status': 'success',
            'message': f'Detector {detector_type} habilitado para cámara {camera_id}',
            'camera_id': camera_id,
            'detector': detector_type
        })
        
    except Exception as e:
        logger.error(f"Error al habilitar detector {detector_type}: {str(e)}")
        return jsonify({'error': f'Error al habilitar detector: {str(e)}'}), 500

@api_bp.route('/detectors/<detector_type>/disable', methods=['POST'])
def disable_detector(detector_type):
    """Deshabilita un detector específico para una cámara"""
    try:
        # Verificar parámetros
        camera_id = request.args.get('camera_id', type=int)
        if not camera_id:
            return jsonify({'error': 'Se requiere ID de cámara'}), 400
            
        # Verificar que la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Desactivar detector
        if hasattr(current_app, 'active_detectors') and camera_id in current_app.active_detectors:
            if detector_type in current_app.active_detectors[camera_id]:
                current_app.active_detectors[camera_id][detector_type]['active'] = False
                del current_app.active_detectors[camera_id][detector_type]
                
                # Si no hay más detectores activos, detener el thread
                if not current_app.active_detectors[camera_id]:
                    if hasattr(current_app, 'detection_threads') and camera_id in current_app.detection_threads:
                        # No podemos detener threads directamente en Python
                        # El thread terminará automáticamente cuando verifique que no hay detectores activos
                        pass
            
        return jsonify({
            'status': 'success',
            'message': f'Detector {detector_type} deshabilitado para cámara {camera_id}',
            'camera_id': camera_id,
            'detector': detector_type
        })
        
    except Exception as e:
        logger.error(f"Error al deshabilitar detector {detector_type}: {str(e)}")
        return jsonify({'error': f'Error al deshabilitar detector: {str(e)}'}), 500

@api_bp.route('/detectors/<detector_type>/results', methods=['GET'])
def get_detector_results(detector_type):
    """Obtiene los resultados más recientes de un detector"""
    try:
        # Verificar parámetros
        camera_id = request.args.get('camera_id', type=int)
        if not camera_id:
            return jsonify({'error': 'Se requiere ID de cámara'}), 400
            
        # Verificar que hay resultados disponibles
        if not hasattr(current_app, 'active_detectors') or \
           camera_id not in current_app.active_detectors or \
           detector_type not in current_app.active_detectors[camera_id]:
            return jsonify({
                'status': 'inactive',
                'message': f'Detector {detector_type} no está activo para cámara {camera_id}'
            })
            
        # Obtener resultados
        detector_info = current_app.active_detectors[camera_id][detector_type]
        
        return jsonify({
            'status': 'success',
            'camera_id': camera_id,
            'detector': detector_type,
            'results': detector_info.get('last_results'),
            'processing_time': detector_info.get('processing_time', 0),
            'last_update': time.time() - detector_info.get('last_update', 0)
        })
        
    except Exception as e:
        logger.error(f"Error al obtener resultados de detector {detector_type}: {str(e)}")
        return jsonify({'error': f'Error al obtener resultados: {str(e)}'}), 500

def _detection_worker(camera_id, detector_manager):
    """Worker para detecciones en segundo plano"""
    from flask import current_app
    
    # Crear un contexto de aplicación para este thread
    with current_app.app_context():
        try:
            logger.info(f"Iniciando worker de detección para cámara {camera_id}")
            camera_manager = _get_camera_manager()
            
            while (hasattr(current_app, 'active_detectors') and 
                   camera_id in current_app.active_detectors and 
                   any(detector['active'] for detector in current_app.active_detectors[camera_id].values())):
                
                # Obtener frame actual
                frame_data = camera_manager.get_frame(camera_id, wait=True)
                if not frame_data:
                    time.sleep(0.1)
                    continue
                    
                frame = frame_data['frame']
                
                # Procesar con cada detector activo
                for detector_type, detector_info in current_app.active_detectors[camera_id].items():
                    if not detector_info['active']:
                        continue
                        
                    start_time = time.time()
                    
                    try:
                        # Procesar según tipo de detector
                        if detector_type == 'pose':
                            results = detector_manager.process_pose(frame)
                        elif detector_type == 'fire':
                            results = detector_manager.process_fire(frame)
                        elif detector_type == 'water':
                            results = detector_manager.process_water(frame)
                        elif detector_type == 'face':
                            results = detector_manager.process_face(frame)
                        elif detector_type == 'all':
                            results = detector_manager.process_all(frame)
                        else:
                            results = None
                            
                        # Actualizar resultados
                        processing_time = time.time() - start_time
                        
                        detector_info['last_results'] = results
                        detector_info['last_update'] = time.time()
                        detector_info['processing_time'] = processing_time
                        
                        # Crear alerta si se detectó algo de interés
                        if results and _should_create_alert(detector_type, results):
                            _create_detection_alert(camera_id, detector_type, results)
                            
                    except Exception as e:
                        logger.error(f"Error en procesamiento de {detector_type} para cámara {camera_id}: {str(e)}")
                
                # Esperar antes del siguiente procesamiento
                time.sleep(0.1)
                
        except Exception as e:
            logger.error(f"Error en detection worker para cámara {camera_id}: {str(e)}")

def _should_create_alert(detector_type, results):
    """Determina si se debe crear una alerta basada en los resultados de detección"""
    if detector_type == 'fire' and results.get('detected') == True:
        return True
    elif detector_type == 'water' and results.get('detected') == True:
        return True
    elif detector_type == 'pose' and any(pose.get('confidence', 0) > 0.7 for pose in results):
        return True
    
    return False

def _create_detection_alert(camera_id, detector_type, results):
    """Crea una alerta basada en la detección"""
    try:
        # Obtener cámara
        camera = Camera.query.get(camera_id)
        if not camera:
            return
            
        # Determinar tipo y severidad
        alert_type = f"{detector_type}_detection"
        severity = "high" if detector_type in ['fire', 'water'] else "medium"
        
        # Crear descripción
        if detector_type == 'fire':
            description = f"Posible fuego detectado en {camera.name} ({camera.location})"
        elif detector_type == 'water':
            description = f"Posible inundación detectada en {camera.name} ({camera.location})"
        elif detector_type == 'pose':
            poses = [pose['posture'] for pose in results if pose.get('confidence', 0) > 0.7]
            description = f"Postura sospechosa detectada en {camera.name}: {', '.join(poses)}"
        else:
            description = f"Detección de {detector_type} en {camera.name}"
            
        # Guardar captura para evidencia
        camera_manager = _get_camera_manager()
        frame_data = camera_manager.get_frame(camera_id, wait=True)
        
        image_path = None
        if frame_data:
            save_dir = 'alert_captures'
            if not os.path.exists(save_dir):
                os.makedirs(save_dir)
                
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"alert_{camera_id}_{detector_type}_{timestamp}.jpg"
            filepath = os.path.join(save_dir, filename)
            
            cv2.imwrite(filepath, frame_data['frame'])
            image_path = f"/{save_dir}/{filename}"
            
        # Crear alerta
        alert = Alert(
            camera_id=camera_id,
            timestamp=datetime.now(),
            alert_type=alert_type,
            severity=severity,
            description=description,
            resolved=False,
            image_path=image_path,
            details=json.dumps(results)
        )
        
        db.session.add(alert)
        db.session.commit()
        
        logger.info(f"Alerta creada: {description}")
        
        # También crear un evento de detección
        event = DetectionEvent(
            camera_id=camera_id,
            event_type=alert_type,
            timestamp=datetime.now(),
            details=json.dumps({
                'alert_id': alert.id,
                'detector': detector_type,
                'results': results
            })
        )
        
        db.session.add(event)
        db.session.commit()
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al crear alerta de detección: {str(e)}")

@api_bp.route('/events/recent', methods=['GET'])
def get_recent_events():
    """Obtiene eventos recientes para actualización en tiempo real"""
    try:
        # Parámetros opcionales
        since = request.args.get('since', type=float)  # Timestamp Unix
        limit = request.args.get('limit', 10, type=int)
        camera_id = request.args.get('camera_id', type=int)
        
        # Construir query
        query = DetectionEvent.query
        
        if since:
            since_date = datetime.fromtimestamp(since)
            query = query.filter(DetectionEvent.timestamp > since_date)
            
        if camera_id:
            query = query.filter(DetectionEvent.camera_id == camera_id)
            
        # Ordenar y limitar
        events = query.order_by(DetectionEvent.timestamp.desc()).limit(limit).all()
        
        # Procesar resultados
        result = []
        for event in events:
            # Parsear detalles JSON
            try:
                details = json.loads(event.details) if event.details else {}
            except:
                details = {}
                
            # Obtener información de cámara
            camera = Camera.query.get(event.camera_id)
            camera_name = camera.name if camera else f"Cámara {event.camera_id}"
            
            # Crear resultado
            event_data = {
                'id': event.id,
                'timestamp': event.timestamp.timestamp(),
                'formatted_time': event.timestamp.strftime('%H:%M:%S'),
                'event_type': event.event_type,
                'camera_id': event.camera_id,
                'camera_name': camera_name,
                'details': details
            }
            
            result.append(event_data)
            
        return jsonify({
            'status': 'success',
            'events': result,
            'count': len(result),
            'server_time': time.time()
        })
        
    except Exception as e:
        logger.error(f"Error al obtener eventos recientes: {str(e)}")
        return jsonify({'error': f'Error al obtener eventos: {str(e)}'}), 500

@api_bp.route('/summary/today', methods=['GET'])
def get_today_summary():
    """Obtiene un resumen de actividad del día de hoy"""
    try:
        # Calcular inicio y fin del día de hoy
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow = today + timedelta(days=1)
        
        # Estadísticas de alertas
        alert_count = Alert.query.filter(
            Alert.timestamp >= today,
            Alert.timestamp < tomorrow
        ).count()
        
        # Estadísticas de detecciones
        detection_count = DetectionEvent.query.filter(
            DetectionEvent.timestamp >= today,
            DetectionEvent.timestamp < tomorrow
        ).count()
        
        # Detectores por tipo
        detector_counts = {}
        detectors = ['pose', 'fire', 'water', 'face']
        
        for detector in detectors:
            count = DetectionEvent.query.filter(
                DetectionEvent.timestamp >= today,
                DetectionEvent.timestamp < tomorrow,
                DetectionEvent.event_type.like(f"%{detector}%")
            ).count()
            
            detector_counts[detector] = count
        
        # Alertas por severidad
        severity_counts = {}
        severities = ['low', 'medium', 'high', 'critical']
        
        for severity in severities:
            count = Alert.query.filter(
                Alert.timestamp >= today,
                Alert.timestamp < tomorrow,
                Alert.severity == severity
            ).count()
            
            severity_counts[severity] = count
            
        # Tiempo de actividad
        uptime = 0
        try:
            with open('uptime.log', 'r') as f:
                uptime = float(f.read().strip())
        except:
            uptime = time.time() - os.path.getctime(__file__)
            
        # Formatear tiempo de actividad
        uptime_hours = int(uptime / 3600)
        uptime_formatted = f"{uptime_hours}h"
        
        return jsonify({
            'status': 'success',
            'timestamp': time.time(),
            'date': today.strftime('%Y-%m-%d'),
            'stats': {
                'alerts': alert_count,
                'detections': detection_count,
                'cameras_active': Camera.query.filter_by(active=True).count(),
                'uptime': uptime_formatted,
                'uptime_seconds': uptime
            },
            'detectors': detector_counts,
            'severity': severity_counts
        })
        
    except Exception as e:
        logger.error(f"Error al obtener resumen diario: {str(e)}")
        return jsonify({'error': f'Error al obtener resumen: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/diagnostic', methods=['POST'])
def camera_diagnostic(camera_id):
    """Realiza un diagnóstico de cámara para identificar problemas"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        results = {
            'camera_id': camera_id,
            'name': camera.name,
            'url': camera.url,
            'tests': {},
            'suggestions': []
        }
        
        # Test 1: Verificar si podemos abrir la cámara
        try:
            # Si es un índice numérico, convertir a entero
            url = camera.url
            if url.isdigit():
                url = int(url)
                
            cap = cv2.VideoCapture(url)
            if not cap.isOpened():
                results['tests']['connection'] = 'failed'
                results['suggestions'].append('No se pudo conectar a la cámara. Verifique que la URL o ID sea correcta.')
            else:
                results['tests']['connection'] = 'passed'
                
                # Test 2: Obtener un frame
                ret, frame = cap.read()
                if not ret or frame is None:
                    results['tests']['frame_capture'] = 'failed'
                    results['suggestions'].append('La cámara se conectó pero no se pudo obtener imagen.')
                else:
                    results['tests']['frame_capture'] = 'passed'
                    
                    # Obtener información adicional
                    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                    fps = cap.get(cv2.CAP_PROP_FPS)
                    
                    results['camera_info'] = {
                        'resolution': f"{int(width)}x{int(height)}",
                        'fps': fps
                    }
                    
                    # Guardar un frame para verificación
                    if not os.path.exists('diagnostics'):
                        os.makedirs('diagnostics')
                        
                    test_file = f"diagnostics/camera_{camera_id}_test.jpg"
                    cv2.imwrite(test_file, frame)
                    results['test_image'] = f"/diagnostics/{os.path.basename(test_file)}"
                
                # Liberar recursos
                cap.release()
        
        except Exception as e:
            results['tests']['exception'] = str(e)
            results['suggestions'].append(f'Error al probar la cámara: {str(e)}')
            
        # Test 3: Verificar integración con el CameraManager
        camera_manager = _get_camera_manager()
        camera_already_active = camera_manager.is_camera_active(camera_id)
        
        if not camera_already_active:
            try:
                started = camera_manager.start_camera(camera_id)
                if started:
                    results['tests']['camera_manager'] = 'passed'
                    
                    # Esperar un momento y obtener frame
                    time.sleep(1)
                    frame_data = camera_manager.get_frame(camera_id, wait=True)
                    
                    if frame_data:
                        results['tests']['camera_manager_frame'] = 'passed'
                    else:
                        results['tests']['camera_manager_frame'] = 'failed'
                        results['suggestions'].append('El CameraManager no pudo obtener un frame de la cámara.')
                        
                    # Detener la cámara si la iniciamos para el test
                    camera_manager.stop_camera(camera_id)
                else:
                    results['tests']['camera_manager'] = 'failed'
                    results['suggestions'].append('No se pudo iniciar la cámara con el CameraManager.')
            except Exception as e:
                results['tests']['camera_manager'] = 'failed'
                results['suggestions'].append(f'Error con CameraManager: {str(e)}')
        else:
            results['tests']['camera_manager'] = 'passed'
            results['tests']['camera_manager_active'] = True
            
        # Agregar sugerencias generales
        if 'failed' in [v for k, v in results['tests'].items()]:
            results['suggestions'].append('Si es una cámara USB, verifique que esté conectada y no esté siendo usada por otra aplicación.')
            results['suggestions'].append('Si es una cámara IP, verifique que esté en la misma red y que la URL sea correcta.')
            results['suggestions'].append('Intente reiniciar la aplicación o el sistema si los problemas persisten.')
        
        return jsonify(results)
        
    except Exception as e:
        logger.error(f"Error en diagnóstico de cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error en diagnóstico: {str(e)}'}), 500

@api_bp.route('/cameras/test-interfaces', methods=['GET'])
def test_interfaces():
    """Endpoint para probar que las interfaces web funcionan"""
    try:
        # Información general del sistema
        info = {
            'status': 'online',
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'endpoints': {
                'cameras': '/api/cameras',
                'alerts': '/api/alerts',
                'summary': '/api/summary/today',
                'events': '/api/events/recent'
            },
            'cameras_count': Camera.query.count(),
            'active_cameras': Camera.query.filter_by(active=True).count(),
            'total_alerts': Alert.query.count(),
            'open_alerts': Alert.query.filter_by(resolved=False).count(),
            'server_info': {
                'python_version': platform.python_version(),
                'system': platform.system(),
                'architecture': platform.machine()
            }
        }
        
        return jsonify(info)
    except Exception as e:
        logger.error(f"Error en test de interfaces: {str(e)}")
        return jsonify({'error': str(e)}), 500

@api_bp.route('/cameras/<int:camera_id>/test-detectors', methods=['POST'])
def test_camera_detectors(camera_id):
    """Realiza una prueba de detectores en una cámara"""
    try:
        # Verificar que la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Parámetros
        data = request.json or {}
        detectors = data.get('detectors', ['pose', 'fire', 'water', 'face'])
        
        # Asegurarse de que la cámara está activa
        camera_manager = _get_camera_manager()
        if not camera_manager.is_camera_active(camera_id):
            # Iniciar la cámara primero
            success = camera_manager.start_camera(camera_id)
            if not success:
                return jsonify({
                    'status': 'error',
                    'message': 'No se pudo iniciar la cámara para la prueba'
                }), 400
            # Esperar un momento para que se inicialice
            time.sleep(2)
            
        # Obtener un frame para procesar
        frame_data = camera_manager.get_frame(camera_id, wait=True)
        if not frame_data:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo obtener frame de la cámara'
            }), 400
            
        # Guardar el frame para referencia
        frame = frame_data['frame']
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        test_dir = 'test_captures'
        
        if not os.path.exists(test_dir):
            os.makedirs(test_dir)
            
        test_image = f"{test_dir}/detector_test_{camera_id}_{timestamp}.jpg"
        cv2.imwrite(test_image, frame)
        
        # Inicializar el detector
        from src.ai_modules.detection_manager import AdvancedDetectionManager
        detector = AdvancedDetectionManager()
        
        # Resultados por detector
        results = {}
        detection_image = frame.copy()
        
        # Procesar con cada detector solicitado
        for detector_type in detectors:
            if detector_type == 'pose':
                detector_result = detector.process_pose(frame)
                results['pose'] = detector_result
                # Dibujar resultados en la imagen
                for person in detector_result:
                    if 'bbox' in person:
                        x, y, w, h = person['bbox']
                        cv2.rectangle(detection_image, (x, y), (x+w, y+h), (0, 255, 0), 2)
                        confidence = person.get('confidence', 0)
                        cv2.putText(detection_image, f"Person: {confidence:.2f}", 
                                    (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
            elif detector_type == 'fire':
                detector_result = detector.process_fire(frame)
                results['fire'] = detector_result
                # Dibujar resultados en la imagen
                if detector_result.get('detected', False):
                    # Texto en la esquina superior
                    cv2.putText(detection_image, f"FIRE DETECTED! ({detector_result.get('confidence', 0):.2f})", 
                                (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                
            elif detector_type == 'water':
                detector_result = detector.process_water(frame)
                results['water'] = detector_result
                # Dibujar resultados en la imagen
                if detector_result.get('detected', False):
                    # Texto en la esquina superior
                    cv2.putText(detection_image, f"WATER DETECTED! ({detector_result.get('confidence', 0):.2f})", 
                                (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
                
            elif detector_type == 'face':
                detector_result = detector.process_face(frame)
                results['face'] = detector_result
                # Dibujar resultados en la imagen
                for face in detector_result:
                    if 'bbox' in face:
                        x, y, w, h = face['bbox']
                        cv2.rectangle(detection_image, (x, y), (x+w, y+h), (255, 0, 255), 2)
                        name = face.get('name', 'Unknown')
                        confidence = face.get('confidence', 0)
                        cv2.putText(detection_image, f"{name}: {confidence:.2f}", 
                                    (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 255), 2)
        
        # Guardar imagen con detecciones
        detection_image_path = f"{test_dir}/detection_{camera_id}_{timestamp}.jpg"
        cv2.imwrite(detection_image_path, detection_image)
        
        # Devolver resultados
        return jsonify({
            'status': 'success',
            'camera_id': camera_id,
            'timestamp': timestamp,
            'results': results,
            'original_image': f"/{test_image}",
            'detection_image': f"/{detection_image_path}",
            'detectors_used': detectors
        })
        
    except Exception as e:
        logger.error(f"Error en prueba de detectores: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error en prueba de detectores: {str(e)}'
        }), 500

@api_bp.route('/cameras/<int:camera_id>', methods=['GET'])
def get_camera(camera_id):
    """Obtener información de una cámara específica"""
    try:
        camera = Camera.query.get(camera_id)
        
        if not camera:
            logger.warning(f"Cámara {camera_id} no encontrada")
            return jsonify({
                'status': 'error',
                'message': f'No se encontró la cámara con ID {camera_id}'
            }), 404
        
        # Convertir a diccionario
        camera_data = {
            'id': camera.id,
            'name': camera.name,
            'url': camera.url,
            'location': camera.location,
            'type': camera.type,
            'active': camera.active,
            'last_seen': camera.last_seen.isoformat() if camera.last_seen else None,
            'resolution': camera.resolution,
            'status': camera.status
        }
        
        return jsonify(camera_data)
    except Exception as e:
        logger.error(f"Error al obtener cámara: {str(e)}")
        return jsonify({'error': f'Error al obtener cámara: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/start', methods=['POST'])
def start_camera(camera_id):
    """Iniciar una cámara específica"""
    try:
        camera = Camera.query.get(camera_id)
        
        if not camera:
            logger.warning(f"Cámara {camera_id} no encontrada")
            return jsonify({
                'status': 'error',
                'message': f'No se encontró la cámara con ID {camera_id}'
            }), 404
        
        # Obtener el gestor de cámaras
        camera_manager = _get_camera_manager()
        
        # Iniciar la cámara
        success = camera_manager.start_camera(camera_id)
        
        if success:
            # Actualizar el estado en la base de datos
            camera.active = True
            camera.status = 'active'
            db.session.commit()
            
            return jsonify({
                'status': 'success',
                'message': f'Cámara {camera.name} iniciada correctamente'
            })
        else:
            return jsonify({
                'status': 'error',
                'message': f'No se pudo iniciar la cámara {camera.name}'
            }), 500
            
    except Exception as e:
        return jsonify({'error': f'Error al iniciar cámara: {str(e)}'}), 500

@api_bp.route('/dashboard/stats', methods=['GET'])
def get_dashboard_stats():
    """Obtener estadísticas para el dashboard"""
    try:
        # Obtener estadísticas básicas
        active_cameras = Camera.query.filter_by(active=True).count()
        total_cameras = Camera.query.count()
        
        active_alerts = Alert.query.filter_by(resolved=False).count()
        
        # Alertas de hoy
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        alerts_today = Alert.query.filter(Alert.timestamp >= today).count()
        
        # Detecciones totales
        total_detections = DetectionEvent.query.count()
        
        # Detecciones de hoy
        detections_today = DetectionEvent.query.filter(
            DetectionEvent.timestamp >= today
        ).count()
        
        # Estado del sistema
        system_status = 'normal'  # Esto podría determinarse mediante alguna lógica más compleja
        
        # Uso de recursos del sistema (esto sería diferente en un sistema real)
        import psutil
        cpu_usage = psutil.cpu_percent()
        memory_usage = psutil.virtual_memory().percent
        disk_usage = psutil.disk_usage('/').percent
        
        return jsonify({
            'cameras': {
                'active': active_cameras,
                'total': total_cameras,
                'percentage': round((active_cameras / total_cameras) * 100) if total_cameras > 0 else 0
            },
            'alerts': {
                'active': active_alerts,
                'today': alerts_today
            },
            'detections': {
                'total': total_detections,
                'today': detections_today
            },
            'system': {
                'status': system_status,
                'cpu': cpu_usage,
                'memory': memory_usage,
                'disk': disk_usage
            }
        })
    except Exception as e:
        return jsonify({'error': f'Error al obtener estadísticas: {str(e)}'}), 500

@api_bp.route('/events/hourly', methods=['GET'])
def get_hourly_events():
    """Obtener eventos por hora para gráficos"""
    try:
        # Obtener timestamp para las últimas 24 horas
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=24)
        
        # Preparar array con horas (formato de 24 horas)
        hours = [(start_time + timedelta(hours=i)).hour for i in range(24)]
        counts = [0] * 24
        
        # Consultar eventos
        events = DetectionEvent.query.filter(
            DetectionEvent.timestamp >= start_time,
            DetectionEvent.timestamp <= end_time
        ).all()
        
        # Contar eventos por hora
        for event in events:
            hour_idx = (event.timestamp.hour - start_time.hour) % 24
            counts[hour_idx] += 1
        
        return jsonify({
            'hours': hours,
            'counts': counts
        })
    except Exception as e:
        return jsonify({'error': f'Error al obtener eventos por hora: {str(e)}'}), 500

--------------------------------------------------------------------------------

📄 src\routes\main.py
--------------------------------------------------------------------------------
from flask import Blueprint, render_template, redirect, url_for, flash, request
from src.database import db, Camera, Alert, DetectionEvent

main_bp = Blueprint('main', __name__)

@main_bp.route('/')
def index():
    """Página principal/dashboard"""
    return render_template('dashboard.html')

@main_bp.route('/monitoring')
def monitoring():
    """Página de monitoreo"""
    return render_template('monitoring.html')

@main_bp.route('/alerts')
def alerts():
    """Página de alertas"""
    return render_template('alerts.html')

@main_bp.route('/cameras')
def cameras():
    """Página de gestión de cámaras"""
    return render_template('cameras.html')

@main_bp.route('/config')
def config():
    """Página de configuración"""
    # Crear un objeto con configuraciones por defecto o cargar desde la BD
    system_settings = {
        'company_name': 'Sistema de Vigilancia',
        'logo_url': '',
        'alert_email': 'admin@sistema-vigilancia.com',
        'motion_sensitivity': 50,
        'recording_quality': 'medium',
        'retention_days': 30,
        'notification_enabled': True,
        'email_notifications': True,
        'sms_notifications': False,
        'push_notifications': True,
        'camera_prefix': 'CAM',
        # Añadir estructura de APIs
        'apis': {
            'whatsapp': {
                'enabled': False,
                'api_key': '',
                'phone_number': ''
            },
            'telegram': {
                'enabled': False,
                'bot_token': '',
                'chat_id': ''
            },
            'email': {
                'enabled': True,
                'smtp_server': 'smtp.example.com',
                'smtp_port': 587,
                'username': 'notifications@example.com',
                'password': '',
                'use_tls': True
            },
            'sms': {
                'enabled': False,
                'provider': 'twilio',
                'api_key': '',
                'from_number': ''
            },
            'openai': {
                'enabled': False,
                'api_key': '',
                'model': 'gpt-4',
                'temperature': 0.7
            },
            'firebase': {
                'enabled': False,
                'api_key': '',
                'project_id': '',
                'messaging_sender_id': ''
            },
            'google_cloud': {
                'enabled': False,
                'credentials_file': '',
                'project_id': ''
            }
        },
        'integrations': {
            'home_assistant': {
                'enabled': False,
                'url': 'http://homeassistant.local:8123',
                'token': ''
            },
            'zoneminder': {
                'enabled': False,
                'url': '',
                'username': '',
                'password': ''
            }
        }
    }
    return render_template('settings.html', system_settings=system_settings)

@main_bp.route('/diagnostics')
def system_diagnostics():
    """Página de diagnósticos del sistema"""
    return render_template('system_diagnostics.html')

# Rutas para los diferentes modos
@main_bp.route('/modes/normal')
def mode_normal():
    return render_template('modes/normal.html')

@main_bp.route('/modes/industrial')
def mode_industrial():
    return render_template('industrial.html')  # Usamos la plantilla existente

@main_bp.route('/modes/retail')
def mode_retail():
    return render_template('modes/retail.html')

@main_bp.route('/modes/forensic')
def mode_forensic():
    return render_template('modes/forensic.html')

@main_bp.route('/advanced-detectors')
def advanced_detectors():
    """Página de configuración de detectores avanzados"""
    return render_template('advanced_detectors.html')

@main_bp.route('/ai-systems')
def ai_systems():
    """Página de sistemas de IA"""
    return render_template('ai_systems.html')

@main_bp.route('/cameras/advanced')
def cameras_advanced():
    """Página de gestión avanzada de cámaras"""
    return render_template('cameras_advanced.html')

@main_bp.route('/hardware')
def hardware_monitor():
    """Página de monitoreo de hardware"""
    return render_template('hardware_monitor.html')

--------------------------------------------------------------------------------

📄 src\routes\views.py
--------------------------------------------------------------------------------
@views_bp.route('/camera/testing')
def camera_testing():
    """Página de prueba de detectores en tiempo real"""
    return render_template('camera_testing.html') 

--------------------------------------------------------------------------------

📄 src\utils\error_handler.py
--------------------------------------------------------------------------------
from flask import jsonify, render_template, request
import logging
import traceback

def register_error_handlers(app):
    """Registra manejadores de error para la aplicación Flask"""
    
    logger = logging.getLogger(__name__)
    
    @app.errorhandler(404)
    def not_found_error(error):
        if request.path.startswith('/api/'):
            return jsonify(error="Recurso no encontrado"), 404
        return render_template('errors/404.html'), 404
    
    @app.errorhandler(500)
    def internal_error(error):
        logger.error(f"Error interno del servidor: {error}")
        logger.error(traceback.format_exc())
        
        if request.path.startswith('/api/'):
            return jsonify(error="Error interno del servidor"), 500
        return render_template('errors/500.html'), 500
    
    @app.errorhandler(Exception)
    def unhandled_exception(e):
        logger.critical(f"Excepción no manejada: {str(e)}")
        logger.critical(traceback.format_exc())
        
        if request.path.startswith('/api/'):
            return jsonify(error="Error interno del servidor"), 500
        return render_template('errors/500.html'), 500 

--------------------------------------------------------------------------------

📄 src\utils\hardware_detector.py
--------------------------------------------------------------------------------
import platform
import subprocess
import os
import json
import logging
import importlib
import numpy as np

logger = logging.getLogger(__name__)

class HardwareDetector:
    """
    Utilidad para detectar y configurar hardware disponible para
    aceleración de inferencia (GPU, NPU, etc.)
    """
    
    def __init__(self):
        self.system = platform.system()
        self.gpu_info = None
        self.cpu_info = None
        self.tensorflow_available = self._check_module('tensorflow')
        self.torch_available = self._check_module('torch')
        self.onnx_available = self._check_module('onnxruntime')
        
        # Detectar hardware
        self.detect_hardware()
        
    def detect_hardware(self):
        """Detecta hardware disponible en el sistema."""
        self.cpu_info = self._detect_cpu()
        self.gpu_info = self._detect_gpu()
        
        logger.info(f"Sistema: {self.system}")
        logger.info(f"CPU: {self.cpu_info.get('model', 'Desconocido')} ({self.cpu_info.get('cores', 0)} cores)")
        
        if self.gpu_info:
            gpu_str = ", ".join([f"{gpu['name']} ({gpu['memory_mb']}MB)" 
                                for gpu in self.gpu_info])
            logger.info(f"GPUs detectadas: {gpu_str}")
        else:
            logger.info("No se detectaron GPUs compatibles")
        
        # Detectar configuración de librerías
        self._detect_tensorflow_config()
        self._detect_torch_config()
    
    def _check_module(self, module_name):
        """Verifica si un módulo está disponible."""
        try:
            importlib.import_module(module_name)
            return True
        except ImportError:
            return False
        
    def _detect_cpu(self):
        """Detecta información sobre la CPU."""
        info = {
            'model': 'Desconocido',
            'cores': os.cpu_count() or 0,
            'architecture': platform.machine(),
            'avx_support': False,
            'avx2_support': False
        }
        
        try:
            if self.system == 'Linux':
                # Leer /proc/cpuinfo
                with open('/proc/cpuinfo', 'r') as f:
                    cpuinfo = f.read()
                
                # Extraer modelo
                model_line = [line for line in cpuinfo.split('\n') 
                             if 'model name' in line]
                if model_line:
                    info['model'] = model_line[0].split(':')[1].strip()
                
                # Verificar extensiones
                flags_line = [line for line in cpuinfo.split('\n') 
                             if 'flags' in line]
                if flags_line:
                    flags = flags_line[0].split(':')[1].strip().split()
                    info['avx_support'] = 'avx' in flags
                    info['avx2_support'] = 'avx2' in flags
                    
            elif self.system == 'Windows':
                # Usando wmic
                proc = subprocess.run(['wmic', 'cpu', 'get', 'name'], 
                                    capture_output=True, text=True)
                lines = proc.stdout.strip().split('\n')
                if len(lines) > 1:
                    info['model'] = lines[1].strip()
                
                # Para extensiones AVX en Windows necesitaríamos usar herramientas externas
                
            elif self.system == 'Darwin':  # macOS
                # Usando sysctl
                proc = subprocess.run(['sysctl', '-n', 'machdep.cpu.brand_string'], 
                                    capture_output=True, text=True)
                info['model'] = proc.stdout.strip()
                
                # Verificar extensiones
                proc = subprocess.run(['sysctl', '-n', 'machdep.cpu.features'], 
                                    capture_output=True, text=True)
                flags = proc.stdout.strip().split()
                info['avx_support'] = 'AVX1.0' in flags
                info['avx2_support'] = 'AVX2' in flags
                
        except Exception as e:
            logger.warning(f"Error al detectar información de CPU: {str(e)}")
            
        return info
    
    def _detect_gpu(self):
        """Detecta GPUs disponibles en el sistema."""
        gpus = []
        
        try:
            # Detectar GPUs NVIDIA con nvidia-smi
            if self._command_exists('nvidia-smi'):
                proc = subprocess.run(['nvidia-smi', '--query-gpu=name,memory.total,compute_capability.major,compute_capability.minor', 
                                      '--format=csv,noheader,nounits'], 
                                     capture_output=True, text=True)
                
                if proc.returncode == 0:
                    for line in proc.stdout.strip().split('\n'):
                        if line.strip():
                            parts = [p.strip() for p in line.split(',')]
                            if len(parts) >= 2:
                                name = parts[0]
                                memory_mb = float(parts[1])
                                
                                compute_cap = "0.0"
                                if len(parts) >= 4:
                                    compute_cap = f"{parts[2]}.{parts[3]}"
                                
                                gpus.append({
                                    'name': name,
                                    'memory_mb': memory_mb,
                                    'type': 'NVIDIA',
                                    'compute_capability': compute_cap
                                })
            
            # Detectar GPUs AMD en Linux
            if self.system == 'Linux' and os.path.exists('/sys/class/drm/'):
                for card in os.listdir('/sys/class/drm/'):
                    if card.startswith('card') and os.path.exists(f'/sys/class/drm/{card}/device/vendor'):
                        with open(f'/sys/class/drm/{card}/device/vendor', 'r') as f:
                            vendor_id = f.read().strip()
                            
                        # 0x1002 es el ID de AMD
                        if vendor_id == "0x1002":
                            try:
                                with open(f'/sys/class/drm/{card}/device/uevent', 'r') as f:
                                    content = f.read()
                                    # Extraer nombre del dispositivo
                                    for line in content.split('\n'):
                                        if 'DRIVER=' in line:
                                            driver = line.split('=')[1]
                                            break
                                    
                                gpus.append({
                                    'name': f"AMD GPU ({card}, {driver})",
                                    'memory_mb': 0,  # No podemos obtener fácilmente la memoria
                                    'type': 'AMD',
                                    'compute_capability': 'Unknown'
                                })
                            except:
                                pass
            
        except Exception as e:
            logger.warning(f"Error al detectar GPUs: {str(e)}")
            
        return gpus
    
    def _command_exists(self, command):
        """Verifica si un comando existe en el sistema."""
        try:
            subprocess.run([command, '--version'], 
                          stdout=subprocess.DEVNULL, 
                          stderr=subprocess.DEVNULL)
            return True
        except:
            return False
    
    def _detect_tensorflow_config(self):
        """Detecta configuración de TensorFlow."""
        if not self.tensorflow_available:
            return
            
        try:
            import tensorflow as tf
            
            # Verificar si TensorFlow detecta GPU
            gpus = tf.config.list_physical_devices('GPU')
            
            if gpus:
                logger.info(f"TensorFlow detectó {len(gpus)} GPU(s)")
                for gpu in gpus:
                    logger.info(f" - {gpu.name}")
            else:
                logger.info("TensorFlow no detectó GPUs")
                
            # Verificar versión y configuración
            logger.info(f"TensorFlow versión: {tf.__version__}")
            logger.info(f"Compilado con CUDA: {'cuda' in tf.sysconfig.get_build_info()}")
            
        except Exception as e:
            logger.warning(f"Error al detectar configuración de TensorFlow: {str(e)}")
    
    def _detect_torch_config(self):
        """Detecta configuración de PyTorch."""
        if not self.torch_available:
            return
            
        try:
            import torch
            
            logger.info(f"PyTorch versión: {torch.__version__}")
            logger.info(f"CUDA disponible: {torch.cuda.is_available()}")
            
            if torch.cuda.is_available():
                logger.info(f"Dispositivos CUDA: {torch.cuda.device_count()}")
                for i in range(torch.cuda.device_count()):
                    logger.info(f" - {torch.cuda.get_device_name(i)}")
                logger.info(f"CUDA versión: {torch.version.cuda}")
                
        except Exception as e:
            logger.warning(f"Error al detectar configuración de PyTorch: {str(e)}")
    
    def configure_for_optimal_performance(self, framework=None):
        """
        Configura el entorno para rendimiento óptimo basado en el hardware detectado.
        
        Args:
            framework: 'tensorflow', 'torch', 'onnx' o None para configurar todos
            
        Returns:
            dict: Configuración aplicada
        """
        config = {}
        
        if framework is None or framework == 'tensorflow':
            if self.tensorflow_available:
                config['tensorflow'] = self._configure_tensorflow()
                
        if framework is None or framework == 'torch':
            if self.torch_available:
                config['torch'] = self._configure_torch()
                
        if framework is None or framework == 'onnx':
            if self.onnx_available:
                config['onnx'] = self._configure_onnx()
                
        return config
    
    def _configure_tensorflow(self):
        """Configura TensorFlow para rendimiento óptimo."""
        if not self.tensorflow_available:
            return {"status": "not_available"}
            
        try:
            import tensorflow as tf
            
            # Configuración básica
            config = {
                "status": "configured",
                "gpu_enabled": False,
                "memory_growth": False,
                "mixed_precision": False
            }
            
            # Habilitar crecimiento de memoria para evitar ocupar toda la VRAM
            gpus = tf.config.list_physical_devices('GPU')
            if gpus:
                config["gpu_enabled"] = True
                
                for gpu in gpus:
                    try:
                        tf.config.experimental.set_memory_growth(gpu, True)
                        config["memory_growth"] = True
                    except:
                        logger.warning(f"No se pudo configurar memory growth para {gpu.name}")
            
            # Habilitar precisión mixta si hay GPU compatible
            if gpus:
                try:
                    policy = tf.keras.mixed_precision.Policy('mixed_float16')
                    tf.keras.mixed_precision.set_global_policy(policy)
                    config["mixed_precision"] = True
                    logger.info("TensorFlow: Precisión mixta habilitada (float16)")
                except:
                    logger.warning("No se pudo habilitar precisión mixta")
            
            # Configurar threads para CPU
            if not gpus:
                try:
                    tf.config.threading.set_intra_op_parallelism_threads(
                        self.cpu_info.get('cores', 0) // 2)
                    tf.config.threading.set_inter_op_parallelism_threads(2)
                    config["cpu_threads_configured"] = True
                except:
                    pass
                    
            return config
            
        except Exception as e:
            logger.error(f"Error al configurar TensorFlow: {str(e)}")
            return {"status": "error", "message": str(e)}
    
    def _configure_torch(self):
        """Configura PyTorch para rendimiento óptimo."""
        if not self.torch_available:
            return {"status": "not_available"}
            
        try:
            import torch
            
            config = {
                "status": "configured",
                "gpu_enabled": torch.cuda.is_available(),
                "device": "cpu"
            }
            
            # Seleccionar dispositivo
            if torch.cuda.is_available():
                torch.backends.cudnn.benchmark = True
                config["device"] = "cuda"
                config["cudnn_benchmark"] = True
                logger.info("PyTorch: CUDA y cuDNN benchmark habilitados")
                
            # Configurar para inferencia
            torch.set_grad_enabled(False)
            config["gradients_disabled"] = True
            
            return config
            
        except Exception as e:
            logger.error(f"Error al configurar PyTorch: {str(e)}")
            return {"status": "error", "message": str(e)}
    
    def _configure_onnx(self):
        """Configura ONNX Runtime para rendimiento óptimo."""
        if not self.onnx_available:
            return {"status": "not_available"}
            
        try:
            import onnxruntime as ort
            
            providers = ort.get_available_providers()
            config = {
                "status": "configured",
                "available_providers": providers,
                "enabled_providers": []
            }
            
            # Configurar proveedores por orden de preferencia
            preferred_providers = []
            
            if 'CUDAExecutionProvider' in providers:
                preferred_providers.append('CUDAExecutionProvider')
                logger.info("ONNX Runtime: Proveedor CUDA disponible")
                
            if 'TensorrtExecutionProvider' in providers:
                preferred_providers.append('TensorrtExecutionProvider')
                logger.info("ONNX Runtime: Proveedor TensorRT disponible")
                
            if 'CoreMLExecutionProvider' in providers:
                preferred_providers.append('CoreMLExecutionProvider')
                logger.info("ONNX Runtime: Proveedor CoreML disponible")
                
            if 'DirectMLExecutionProvider' in providers:
                preferred_providers.append('DirectMLExecutionProvider')
                logger.info("ONNX Runtime: Proveedor DirectML disponible")
                
            # Siempre agregar CPU al final
            if 'CPUExecutionProvider' in providers:
                preferred_providers.append('CPUExecutionProvider')
                
            config["enabled_providers"] = preferred_providers
            return config
            
        except Exception as e:
            logger.error(f"Error al configurar ONNX Runtime: {str(e)}")
            return {"status": "error", "message": str(e)}

    def _detect_nvidia_gpu(self):
        """Detecta específicamente GPUs NVIDIA y obtiene información detallada."""
        nvidia_gpus = []
        
        try:
            if self.system == 'Windows':
                # Método para Windows usando WMI
                try:
                    import wmi
                    computer = wmi.WMI()
                    for gpu in computer.Win32_VideoController():
                        if 'nvidia' in gpu.Name.lower():
                            # Es una GPU NVIDIA
                            is_geforce = 'geforce' in gpu.Name.lower()
                            model = gpu.Name
                            
                            # Intentar obtener memoria
                            memory_mb = None
                            try:
                                # AdapterRAM está en bytes, convertir a MB
                                if gpu.AdapterRAM:
                                    memory_mb = int(gpu.AdapterRAM) // (1024 * 1024)
                            except:
                                pass
                            
                            nvidia_gpus.append({
                                'name': model,
                                'memory_mb': memory_mb or 0,
                                'is_geforce': is_geforce,
                                'driver_version': getattr(gpu, 'DriverVersion', 'Unknown')
                            })
                except ImportError:
                    logger.warning("Módulo WMI no disponible. Instalarlo con: pip install wmi")
                    
            elif self.system == 'Linux':
                # Método para Linux usando comandos
                try:
                    import subprocess
                    
                    # Verificar si nvidia-smi está disponible
                    try:
                        nvidia_smi = subprocess.check_output(['nvidia-smi', '--query-gpu=name,memory.total,driver_version', '--format=csv,noheader'], text=True)
                        for line in nvidia_smi.strip().split('\n'):
                            parts = line.split(', ')
                            if len(parts) >= 3:
                                model = parts[0]
                                memory_str = parts[1]
                                driver_version = parts[2]
                                
                                # Extraer número de memoria en MB
                                memory_mb = 0
                                import re
                                match = re.search(r'(\d+)', memory_str)
                                if match:
                                    memory_mb = int(match.group(1))
                                
                                is_geforce = 'geforce' in model.lower()
                                
                                nvidia_gpus.append({
                                    'name': model,
                                    'memory_mb': memory_mb,
                                    'is_geforce': is_geforce,
                                    'driver_version': driver_version
                                })
                    except:
                        # nvidia-smi no disponible, intentar con lspci
                        lspci = subprocess.check_output(['lspci', '-v'], text=True)
                        for line in lspci.split('\n'):
                            if 'nvidia' in line.lower() or 'vga' in line.lower():
                                if 'nvidia' in line.lower():
                                    # Es una línea relevante
                                    match = re.search(r'NVIDIA Corporation (.+?) \[', line)
                                    if match:
                                        model = match.group(1)
                                        is_geforce = 'geforce' in model.lower()
                                        
                                        nvidia_gpus.append({
                                            'name': model,
                                            'memory_mb': 0,  # No podemos obtener memoria desde lspci
                                            'is_geforce': is_geforce,
                                            'driver_version': 'Unknown'
                                        })
                except Exception as e:
                    logger.warning(f"Error al detectar GPU NVIDIA en Linux: {str(e)}")
            
            # Si no se encontró nada específico, intentar con método genérico
            if not nvidia_gpus:
                try:
                    import torch
                    if torch.cuda.is_available():
                        for i in range(torch.cuda.device_count()):
                            name = torch.cuda.get_device_name(i)
                            if 'nvidia' in name.lower():
                                is_geforce = 'geforce' in name.lower()
                                
                                nvidia_gpus.append({
                                    'name': name,
                                    'memory_mb': torch.cuda.get_device_properties(i).total_memory // (1024 * 1024),
                                    'is_geforce': is_geforce,
                                    'driver_version': 'Unknown (via PyTorch)'
                                })
                except:
                    pass
            
            return nvidia_gpus
        
        except Exception as e:
            logger.error(f"Error al detectar GPUs NVIDIA: {str(e)}")
            return []

    def configure_for_geforce(self):
        """Configura el sistema específicamente para GPUs GeForce."""
        config = {
            'status': 'not_available',
            'optimizations': []
        }
        
        # Detectar GPUs NVIDIA GeForce
        nvidia_gpus = self._detect_nvidia_gpu()
        geforce_gpus = [gpu for gpu in nvidia_gpus if gpu.get('is_geforce', False)]
        
        if not geforce_gpus:
            return config
        
        config['status'] = 'available'
        config['gpu_info'] = geforce_gpus
        
        # Configuraciones según las bibliotecas disponibles
        if self.tensorflow_available:
            try:
                import tensorflow as tf
                # Limitar el crecimiento de memoria para evitar acaparar toda la VRAM
                for gpu in tf.config.list_physical_devices('GPU'):
                    tf.config.experimental.set_memory_growth(gpu, True)
                
                config['optimizations'].append({
                    'framework': 'tensorflow',
                    'memory_growth': True,
                    'action': 'Habilitado crecimiento de memoria para evitar uso de VRAM completa'
                })
            except Exception as e:
                logger.error(f"Error al configurar TensorFlow para GeForce: {str(e)}")
        
        if self.torch_available:
            try:
                import torch
                
                # Configurar CuDNN para rendimiento
                torch.backends.cudnn.benchmark = True
                
                # Configuración para modelos grandes (batch sizes pequeños)
                if any(gpu.get('memory_mb', 0) < 6000 for gpu in geforce_gpus):
                    # GPUs con menos de 6GB - optimizar para memoria limitada
                    torch.backends.cudnn.deterministic = True
                    config['optimizations'].append({
                        'framework': 'pytorch',
                        'deterministic': True,
                        'action': 'Modo determinístico activado para GPUs con memoria limitada'
                    })
                else:
                    # GPUs con buena memoria - optimizar para rendimiento
                    config['optimizations'].append({
                        'framework': 'pytorch',
                        'benchmark': True,
                        'action': 'Modo benchmark activado para máximo rendimiento'
                    })
            except Exception as e:
                logger.error(f"Error al configurar PyTorch para GeForce: {str(e)}")
        
        if self.onnx_available:
            try:
                import onnxruntime as ort
                
                # Configurar para usar CUDA con fallback a CPU
                providers = []
                
                if 'CUDAExecutionProvider' in ort.get_available_providers():
                    providers.append('CUDAExecutionProvider')
                    config['optimizations'].append({
                        'framework': 'onnxruntime',
                        'provider': 'CUDA',
                        'action': 'Configurado proveedor CUDA para ONNX Runtime'
                    })
                    
                # Añadir proveedor TensorRT si está disponible (mejor rendimiento)
                if 'TensorrtExecutionProvider' in ort.get_available_providers():
                    # TensorRT es más rápido pero usa más memoria
                    if any(gpu.get('memory_mb', 0) > 4000 for gpu in geforce_gpus):
                        providers.insert(0, 'TensorrtExecutionProvider')
                        config['optimizations'].append({
                            'framework': 'onnxruntime',
                            'provider': 'TensorRT',
                            'action': 'Configurado proveedor TensorRT para máximo rendimiento'
                        })
                
                # Siempre añadir CPU como fallback
                providers.append('CPUExecutionProvider')
                
                # Guardar la configuración de proveedores para uso futuro
                config['onnx_providers'] = providers
            except Exception as e:
                logger.error(f"Error al configurar ONNX Runtime para GeForce: {str(e)}")
        
        return config


--------------------------------------------------------------------------------

📄 src\utils\init_db.py
--------------------------------------------------------------------------------
from src.database import db, Camera, Alert, DetectionEvent
from datetime import datetime, timedelta

def initialize_demo_data():
    """Inicializa datos de demostración en la base de datos"""
    
    # Verificar si ya existen cámaras
    if Camera.query.count() == 0:
        # Crear cámaras de ejemplo
        cameras = [
            Camera(id=1, name="Entrada Principal", url="rtsp://admin:password@192.168.1.100:554/stream1", 
                  location="Entrada", type="rtsp", active=True, status="active"),
            Camera(id=2, name="Patio Trasero", url="rtsp://admin:password@192.168.1.101:554/stream1", 
                  location="Patio", type="rtsp", active=True, status="active"),
            Camera(id=3, name="Estacionamiento", url="0", 
                  location="Exterior", type="webcam", active=True, status="active")
        ]
        
        db.session.add_all(cameras)
        db.session.commit() 

--------------------------------------------------------------------------------

📄 src\utils\logger.py
--------------------------------------------------------------------------------
import logging
import sys
import traceback
from datetime import datetime
from flask import has_request_context, request
from logging.handlers import RotatingFileHandler
import os
from ..database import db, SystemLog

class DatabaseHandler(logging.Handler):
    def emit(self, record):
        trace = None
        if record.exc_info:
            trace = traceback.format_exc()
        
        log_entry = SystemLog(
            level=record.levelname,
            component=record.name,
            message=record.getMessage(),
            stack_trace=trace
        )
        
        try:
            db.session.add(log_entry)
            db.session.commit()
        except Exception:
            db.session.rollback()
            print("Error al guardar log en base de datos", file=sys.stderr)

def setup_logging(app):
    """Configura sistema de logging para la aplicación"""
    
    # Asegurar directorio de logs
    if not os.path.exists('logs'):
        os.mkdir('logs')
    
    # Configurar formateador
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - [%(process)d] - %(message)s'
    )
    
    # Handler para archivo
    file_handler = RotatingFileHandler(
        'logs/surveillance.log', 
        maxBytes=10485760,  # 10MB
        backupCount=10
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.INFO)
    
    # Handler para consola
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.DEBUG if app.debug else logging.INFO)
    
    # Handler para base de datos
    db_handler = DatabaseHandler()
    db_handler.setLevel(logging.WARNING)  # Solo errores y críticos
    
    # Configurar root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    root_logger.addHandler(db_handler)
    
    # Evitar propagación de logs desde werkzeug
    logging.getLogger('werkzeug').propagate = False
    
    app.logger.info("Sistema de logging inicializado")
    
    return root_logger 

--------------------------------------------------------------------------------

📄 static\favicon.ico
--------------------------------------------------------------------------------
# Crear un favicon básico para evitar errores 404
mkdir -p static
touch static/favicon.ico 

--------------------------------------------------------------------------------

📄 static\css\agent_factory.css
--------------------------------------------------------------------------------
/* Estilos para la fábrica de agentes */
.agent-factory-container {
    margin: 20px 0;
    padding: 0 20px;
}

.factory-layout {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-top: 20px;
}

.templates-panel, .agent-creator-panel, .existing-agents-panel {
    background: #f5f5f5;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.templates-panel {
    grid-column: 1;
}

.agent-creator-panel {
    grid-column: 2;
    grid-row: 1;
}

.existing-agents-panel {
    grid-column: 1 / span 2;
    margin-top: 20px;
}

.template-card, .agent-card {
    background: white;
    border-radius: 6px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.template-card h4, .agent-card h4 {
    margin-top: 0;
    color: #333;
}

.agent-status {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    margin: 10px 0;
    font-size: 0.8rem;
    font-weight: bold;
}

.agent-status.active {
    background: #a3e4d7;
    color: #1d8348;
}

.agent-status.inactive {
    background: #f5b7b1;
    color: #922b21;
}

.agent-actions, .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 10px;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input, .form-group select, .form-group textarea {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.checkbox-label {
    display: flex;
    align-items: center;
    cursor: pointer;
}

.checkbox-label input {
    margin-right: 10px;
    width: auto;
}

.empty-state {
    text-align: center;
    color: #777;
    padding: 20px;
    font-style: italic;
}

.agents-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 15px;
}

@media (max-width: 768px) {
    .factory-layout {
        grid-template-columns: 1fr;
    }
    
    .templates-panel, .agent-creator-panel {
        grid-column: 1;
    }
    
    .existing-agents-panel {
        grid-column: 1;
    }
} 

--------------------------------------------------------------------------------

📄 static\css\alerts.css
--------------------------------------------------------------------------------
/* Estilo para alertas de seguridad industrial */
.alert-card.safety_violation {
    border-left: 5px solid #dc3545;
}

.alert-card.safety_violation .alert-icon {
    background-color: #dc3545;
}

.alert-card.safety_violation .alert-icon i::before {
    content: '\f071'; /* Icono de advertencia */
}

/* Estilos específicos por subtipo */
.alert-card.ppe_helmet .alert-icon {
    background-color: #fd7e14;
}

.alert-card.ppe_vest .alert-icon {
    background-color: #fd7e14;
}

.alert-card.danger_zone .alert-icon {
    background-color: #dc3545;
}

.alert-card.fire .alert-icon {
    background-color: #dc3545;
}

.alert-card.fire .alert-icon i::before {
    content: '\f06d'; /* Icono de fuego */
} 

--------------------------------------------------------------------------------

📄 static\css\cameras.css
--------------------------------------------------------------------------------
/* Estilos específicos para gestión de cámaras */

.cameras-dashboard {
    margin-top: 20px;
}

/* Header y controles */
.page-header {
    margin-bottom: 25px;
}

.page-header-content {
    margin-bottom: 15px;
}

.page-header-content h1 {
    margin: 0;
    font-size: 1.8rem;
    color: var(--secondary-color);
    display: flex;
    align-items: center;
}

.page-header-content h1 i {
    margin-right: 10px;
    color: var(--primary-color);
}

.page-header-content p {
    margin: 5px 0 0 0;
    color: #6c757d;
}

.cameras-actions {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

/* Grid de cámaras */
.cameras-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.camera-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    overflow: hidden;
    transition: transform 0.3s, box-shadow 0.3s;
}

.camera-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
}

.camera-header {
    padding: 15px;
    background-color: var(--secondary-color);
    color: white;
    position: relative;
}

.camera-title {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 500;
}

.camera-subtitle {
    margin: 5px 0 0 0;
    font-size: 0.85rem;
    opacity: 0.8;
}

.camera-status-badge {
    position: absolute;
    top: 15px;
    right: 15px;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
}

.camera-status-badge.active {
    background-color: var(--success-color);
    color: white;
}

.camera-status-badge.inactive {
    background-color: #e9ecef;
    color: #6c757d;
}

.camera-image {
    height: 180px;
    background-color: #000;
    overflow: hidden;
    position: relative;
}

.camera-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.camera-placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6c757d;
    background-color: #f8f9fa;
}

.camera-placeholder i {
    font-size: 2rem;
    margin-bottom: 10px;
}

.camera-details {
    padding: 15px;
}

.camera-info {
    margin-bottom: 15px;
}

.camera-info-item {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
    font-size: 0.9rem;
}

.camera-info-item i {
    width: 20px;
    margin-right: 8px;
    color: var(--primary-color);
}

.camera-actions {
    display: flex;
    justify-content: space-between;
}

/* Formulario de cámaras */
.camera-form-container {
    max-width: 800px;
    margin: 0 auto;
}

.form-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    padding: 20px;
}

.form-title {
    margin-top: 0;
    margin-bottom: 20px;
    color: var(--secondary-color);
    font-size: 1.5rem;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--border-color);
}

.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--secondary-color);
}

.form-control {
    width: 100%;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    font-size: 1rem;
}

.form-control:focus {
    border-color: var(--primary-color);
    outline: none;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
}

.form-help {
    font-size: 0.85rem;
    color: #6c757d;
    margin-top: 5px;
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 30px;
}

/* Prueba de cámara */
.test-camera-section {
    background-color: var(--background-light);
    border-radius: 10px;
    padding: 20px;
    margin-top: 30px;
    margin-bottom: 20px;
}

.test-camera-section h3 {
    margin-top: 0;
    margin-bottom: 15px;
    color: var(--secondary-color);
}

.test-results {
    margin-top: 20px;
    border-radius: 6px;
    overflow: hidden;
}

.success-message {
    background-color: rgba(46, 204, 113, 0.1);
    border-left: 4px solid var(--success-color);
    padding: 15px;
    border-radius: 6px;
}

.error-message {
    background-color: rgba(231, 76, 60, 0.1);
    border-left: 4px solid var(--danger-color);
    padding: 15px;
    border-radius: 6px;
}

.test-image {
    margin: 15px 0;
    text-align: center;
}

.test-image img {
    max-width: 100%;
    max-height: 300px;
    border-radius: 4px;
    border: 1px solid var(--border-color);
}

/* Descubrimiento de cámaras */
.discovery-settings {
    background-color: var(--background-light);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
}

.discovery-settings h3 {
    margin-top: 0;
    margin-bottom: 15px;
    color: var(--secondary-color);
}

.discovery-options {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
}

.checkbox-option {
    display: flex;
    align-items: center;
}

.checkbox-option input[type="checkbox"] {
    margin-right: 10px;
}

.discovery-results {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    padding: 20px;
    margin-top: 20px;
}

.discovery-results h3 {
    margin-top: 0;
    margin-bottom: 15px;
    color: var(--secondary-color);
}

.discovered-cameras {
    margin-top: 15px;
}

.discovered-camera-item {
    background-color: var(--background-light);
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.discovered-camera-item:last-child {
    margin-bottom: 0;
}

.camera-details h4 {
    margin: 0 0 5px 0;
    font-size: 1rem;
}

.camera-details p {
    margin: 0;
    font-size: 0.9rem;
    color: #6c757d;
}

.loading-spinner {
    display: inline-block;
    width: 30px;
    height: 30px;
    border: 3px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top-color: var(--primary-color);
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

@media (max-width: 768px) {
    .form-row {
        grid-template-columns: 1fr;
        gap: 0;
    }
    
    .cameras-actions {
        flex-direction: column;
    }
    
    .cameras-actions button {
        width: 100%;
    }
} 

--------------------------------------------------------------------------------

📄 static\css\dashboard.css
--------------------------------------------------------------------------------
/* Estilos para el Dashboard */
.dashboard-container {
    padding: 20px;
}

/* Tarjetas de estadísticas */
.stats-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 25px;
}

.stat-card {
    background: #fff;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    text-align: center;
    transition: transform 0.3s ease;
}

.stat-card:hover {
    transform: translateY(-5px);
}

.stat-icon {
    font-size: 24px;
    color: #4a6cf7;
    margin-bottom: 10px;
}

.stat-value {
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 5px;
    color: #333;
}

.stat-label {
    color: #666;
    font-size: 0.9rem;
}

/* Gráficos */
.dashboard-charts {
    margin-bottom: 30px;
}

.chart-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.chart-card {
    background: #fff;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}

.chart-card h3 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 1.2rem;
    color: #333;
}

.chart-container {
    height: 300px;
    position: relative;
}

/* Métricas de rendimiento */
.performance-section {
    margin-bottom: 30px;
}

.performance-section h3 {
    margin-bottom: 15px;
    font-size: 1.2rem;
    color: #333;
}

.performance-metrics {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.performance-metric {
    background: #fff;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}

.metric-title {
    font-weight: bold;
    margin-bottom: 5px;
    color: #333;
}

.metric-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #4a6cf7;
    margin-bottom: 10px;
}

.metric-chart {
    height: 80px;
}

/* Cámaras activas */
.active-cameras-section {
    margin-bottom: 30px;
}

.active-cameras-section h3 {
    margin-bottom: 15px;
    font-size: 1.2rem;
    color: #333;
}

.camera-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: 20px;
}

.camera-card {
    background: #fff;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}

.camera-card h4 {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 1rem;
}

.camera-thumbnail {
    width: 100%;
    height: 150px;
    overflow: hidden;
    border-radius: 4px;
    margin-bottom: 10px;
}

.camera-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.no-cameras {
    grid-column: 1 / -1;
    padding: 20px;
    text-align: center;
    background: #f8f9fa;
    border-radius: 8px;
    color: #666;
}

.view-more {
    grid-column: 1 / -1;
    text-align: center;
    margin-top: 10px;
}

/* Alertas recientes */
.recent-alerts-section {
    margin-bottom: 30px;
}

.recent-alerts-section h3 {
    margin-bottom: 15px;
    font-size: 1.2rem;
    color: #333;
}

.alerts-table-container {
    overflow-x: auto;
}

.alerts-table {
    width: 100%;
    border-collapse: collapse;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}

.alerts-table th {
    text-align: left;
    padding: 12px 15px;
    background: #f8f9fa;
    border-bottom: 2px solid #ddd;
}

.alerts-table td {
    padding: 10px 15px;
    border-bottom: 1px solid #eee;
}

.alerts-table tr:last-child td {
    border-bottom: none;
}

.no-alerts {
    text-align: center;
    padding: 20px;
    color: #666;
}

/* Estilos para niveles de severidad */
.severity-info {
    border-left: 4px solid #17a2b8;
}

.severity-warning {
    border-left: 4px solid #ffc107;
}

.severity-critical {
    border-left: 4px solid #dc3545;
}

.severity-emergency {
    border-left: 4px solid #721c24;
    background-color: rgba(255, 0, 0, 0.05);
}

/* Responsive */
@media (max-width: 992px) {
    .chart-row {
        grid-template-columns: 1fr;
    }
    
    .performance-metrics {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 768px) {
    .stats-overview {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 576px) {
    .stats-overview {
        grid-template-columns: 1fr;
    }
    
    .camera-grid {
        grid-template-columns: 1fr;
    }
} 

--------------------------------------------------------------------------------

📄 static\css\diagnostics.css
--------------------------------------------------------------------------------
/* Estilos para la página de diagnósticos del sistema */

.diagnostics-dashboard {
    margin-bottom: 30px;
}

.system-overview {
    margin-bottom: 20px;
}

.system-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    padding: 20px;
    display: flex;
    flex-direction: column;
}

.system-status {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.status-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 20px;
    font-size: 2rem;
}

.status-icon.good {
    background-color: rgba(46, 204, 113, 0.1);
    color: var(--success-color);
}

.status-icon.warning {
    background-color: rgba(241, 196, 15, 0.1);
    color: var(--warning-color);
}

.status-icon.critical {
    background-color: rgba(231, 76, 60, 0.1);
    color: var(--danger-color);
}

.status-info h2 {
    margin: 0 0 5px 0;
    font-size: 1.5rem;
    color: var(--secondary-color);
}

.status-info p {
    margin: 0;
    color: #6c757d;
}

.system-uptime {
    display: flex;
    align-items: center;
    margin-top: 10px;
    background-color: var(--background-light);
    padding: 10px 15px;
    border-radius: 6px;
}

.uptime-label {
    margin-right: 10px;
    font-weight: 500;
    color: var(--secondary-color);
}

.uptime-value {
    font-family: monospace;
    font-size: 1.1rem;
    color: var(--secondary-color);
}

.system-timestamp {
    margin-top: 10px;
    font-size: 0.85rem;
    color: #6c757d;
    text-align: right;
}

/* Resto de los estilos existentes */

/* Grilla de diagnósticos */
.diagnostics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.diagnostic-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    overflow: hidden;
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background-color: var(--background-light);
    border-bottom: 1px solid var(--border-color);
}

.card-header h3 {
    margin: 0;
    font-size: 1.2rem;
    color: var(--secondary-color);
    display: flex;
    align-items: center;
}

.card-header h3 i {
    margin-right: 10px;
    color: var(--primary-color);
}

.card-body {
    padding: 20px;
}

/* Recursos */
.resources-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
}

.resource-meter {
    margin-bottom: 15px;
}

.resource-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
}

.resource-title {
    font-weight: 500;
    color: var(--secondary-color);
}

.resource-value {
    font-weight: 600;
}

.progress-bar {
    height: 8px;
    background-color: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 8px;
}

.progress {
    height: 100%;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
}

.resource-details {
    display: flex;
    justify-content: space-between;
    font-size: 0.85rem;
    color: #6c757d;
}

/* Otros estilos específicos para las secciones de diagnóstico */ 

--------------------------------------------------------------------------------

📄 static\css\main.css
--------------------------------------------------------------------------------
/* Crear directorio para CSS */
mkdir -p static/css

/* Archivo principal de CSS */
body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa;
}

.container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

/* Estilos de tarjetas */
.card {
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    padding: 20px;
    margin-bottom: 20px;
}

/* Estilos de alertas */
.alert {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 5px;
}

.alert-info {
    background-color: #d1ecf1;
    border: 1px solid #bee5eb;
    color: #0c5460;
}

.alert-warning {
    background-color: #fff3cd;
    border: 1px solid #ffeeba;
    color: #856404;
}

.alert-danger {
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    color: #721c24;
}

.alert-success {
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
}

/* Estilos de botones */
button, .btn {
    display: inline-block;
    padding: 8px 16px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
}

button:hover, .btn:hover {
    background-color: #0069d9;
}

header {
    background-color: #343a40;
    color: #fff;
    padding: 1rem 0;
}

/* Estilos para el menú de navegación */
nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
}

nav ul li {
    position: relative;
    margin-right: 20px;
}

nav ul li a {
    color: #fff;
    text-decoration: none;
    padding: 10px 0;
    display: block;
}

nav ul li a:hover {
    color: #17a2b8;
}

/* Estilos para dropdown */
.dropdown {
    position: relative;
}

.dropdown-toggle {
    display: flex;
    align-items: center;
}

.dropdown-toggle::after {
    content: "▼";
    font-size: 0.7em;
    margin-left: 5px;
}

.dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    background-color: #fff;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    min-width: 150px;
    z-index: 1000;
    display: none;
    border-radius: 4px;
    overflow: hidden;
}

.dropdown-menu a {
    color: #333;
    padding: 10px 15px;
    display: block;
}

.dropdown-menu a:hover {
    background-color: #f8f9fa;
}

.dropdown:hover .dropdown-menu {
    display: block;
}

/* Estilos para contenido principal */
.content {
    background-color: #fff;
    padding: 20px;
    margin: 20px 0;
    border-radius: 5px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

/* Estilos responsivos */
@media (max-width: 768px) {
    nav ul {
        flex-direction: column;
    }
    
    nav ul li {
        margin-right: 0;
        margin-bottom: 10px;
    }
    
    .dropdown-menu {
        position: static;
        box-shadow: none;
        display: block;
        margin-left: 15px;
    }
    
    .dropdown-toggle::after {
        display: none;
    }
} 

--------------------------------------------------------------------------------

📄 static\css\settings.css
--------------------------------------------------------------------------------
/* Estilos para la página de configuraciones */
.settings-container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
}

.settings-section {
    background-color: #fff;
    border-radius: 5px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.settings-nav {
    margin-bottom: 20px;
}

.tab-content {
    padding-top: 20px;
}

.settings-section h3 {
    margin-top: 0;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #e9ecef;
}

.color-picker {
    display: flex;
    align-items: center;
    gap: 10px;
}

.color-preview {
    width: 30px;
    height: 30px;
    border-radius: 4px;
    border: 1px solid #ddd;
}

.theme-preview {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
    margin-top: 10px;
}

.form-actions {
    margin-top: 20px;
}

/* Estilos para los switches */
.toggle-switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
    margin: 0;
}

.toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 24px;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .toggle-slider {
    background-color: #007bff;
}

input:focus + .toggle-slider {
    box-shadow: 0 0 1px #007bff;
}

input:checked + .toggle-slider:before {
    transform: translateX(26px);
}

/* Estilos para el formulario de correo */
.email-test-result {
    margin-top: 10px;
    padding: 10px;
    border-radius: 4px;
    display: none;
}

.email-test-result.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.email-test-result.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
} 

--------------------------------------------------------------------------------

📄 static\css\style.css
--------------------------------------------------------------------------------
:root {
  /* Esquema de colores principal */
  --primary-color: #3498db;
  --primary-dark: #2980b9;
  --secondary-color: #2c3e50;
  --background-light: #f8f9fa;
  --background-dark: #343a40;
  --success-color: #2ecc71;
  --warning-color: #f39c12;
  --danger-color: #e74c3c;
  --info-color: #3498db;
  --text-color: #333;
  --text-light: #f8f9fa;
  --border-color: #e9ecef;
  --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  --transition-speed: 0.3s;
}

body {
  font-family: 'Segoe UI', Roboto, -apple-system, BlinkMacSystemFont, sans-serif;
  line-height: 1.6;
  color: var(--text-color);
  background-color: #f0f2f5;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

/* Header modernizado */
header {
  background: linear-gradient(to right, #2c3e50, #4ca1af);
  color: white;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.header-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 20px;
  max-width: 1400px;
  margin: 0 auto;
  height: 60px;
}

/* Logo mejorado */
.logo a {
  display: flex;
  align-items: center;
  color: white;
  text-decoration: none;
  font-weight: bold;
  font-size: 1.5rem;
}

.logo i {
  margin-right: 10px;
  font-size: 1.8rem;
  color: #3498db;
}

/* Navegación principal */
.main-nav ul {
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
}

.main-nav li {
  margin: 0 5px;
  position: relative;
}

.main-nav a {
  color: white;
  text-decoration: none;
  padding: 10px 15px;
  display: flex;
  align-items: center;
  border-radius: 4px;
  transition: all 0.3s;
}

.main-nav a:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.main-nav a i {
  margin-right: 8px;
}

.main-nav .active {
  background-color: rgba(255, 255, 255, 0.15);
  box-shadow: inset 0 -3px 0 var(--primary-color);
}

/* Contenedor principal mejorado */
.content-container {
  max-width: 1400px;
  margin: 20px auto;
  padding: 0 20px;
}

/* Sistema de grids adaptativo */
.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 20px;
}

.grid-item {
  background: white;
  border-radius: 10px;
  box-shadow: var(--card-shadow);
  overflow: hidden;
  transition: transform 0.3s, box-shadow 0.3s;
}

.grid-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
}

/* Tarjetas modernizadas */
.card {
  background: white;
  border-radius: 10px;
  box-shadow: var(--card-shadow);
  overflow: hidden;
  margin-bottom: 20px;
  transition: transform 0.3s, box-shadow 0.3s;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 20px;
  background-color: white;
  border-bottom: 1px solid var(--border-color);
}

.card-header h2, .card-header h3 {
  margin: 0;
  font-size: 1.3rem;
  color: var(--secondary-color);
}

.card-body {
  padding: 20px;
}

.card-footer {
  padding: 10px 20px;
  background-color: var(--background-light);
  border-top: 1px solid var(--border-color);
}

/* Dashboard widgets */
.stat-card {
  display: flex;
  align-items: center;
  padding: 20px;
}

.stat-icon {
  font-size: 2rem;
  background-color: rgba(52, 152, 219, 0.1);
  color: var(--primary-color);
  border-radius: 50%;
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 20px;
}

.stat-icon.warning {
  background-color: rgba(243, 156, 18, 0.1);
  color: var(--warning-color);
}

.stat-icon.danger {
  background-color: rgba(231, 76, 60, 0.1);
  color: var(--danger-color);
}

.stat-icon.success {
  background-color: rgba(46, 204, 113, 0.1);
  color: var(--success-color);
}

.stat-content h3 {
  margin: 0 0 5px 0;
  font-size: 1.8rem;
}

.stat-content p {
  margin: 0;
  color: #7f8c8d;
}

/* Sistema de monitoreo de cámaras */
.camera-grid {
  display: grid;
  gap: 15px;
  margin-top: 20px;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
}

.camera-grid.layout-1 {
  grid-template-columns: 1fr;
}

.camera-grid.layout-2 {
  grid-template-columns: repeat(2, 1fr);
}

.camera-grid.layout-4 {
  grid-template-columns: repeat(2, 1fr);
}

.camera-item {
  background-color: white;
  border-radius: 10px;
  box-shadow: var(--card-shadow);
  overflow: hidden;
  transition: transform 0.3s;
  position: relative;
}

.camera-item:hover {
  transform: translateY(-5px);
}

.camera-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 15px;
  background-color: var(--secondary-color);
  color: white;
}

.camera-title {
  margin: 0;
  font-size: 1rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 80%;
}

.camera-stream {
  position: relative;
  height: 220px;
  background-color: #000;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.camera-stream img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.camera-controls {
  display: flex;
  justify-content: space-between;
  padding: 10px 15px;
  background-color: rgba(0,0,0,0.03);
  border-top: 1px solid var(--border-color);
}

.detection-buttons {
  display: flex;
  gap: 5px;
}

.btn-icon {
  background: none;
  border: none;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  color: var(--secondary-color);
  transition: all 0.2s;
}

.btn-icon:hover {
  background-color: rgba(0,0,0,0.05);
}

.btn-icon.active {
  background-color: var(--primary-color);
  color: white;
}

/* Botones mejorados */
.btn {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.btn i {
  margin-right: 8px;
}

.primary-btn {
  background-color: var(--primary-color);
  color: white;
}

.primary-btn:hover {
  background-color: var(--primary-dark);
}

.secondary-btn {
  background-color: var(--secondary-color);
  color: white;
}

.secondary-btn:hover {
  background-color: #1a252f;
}

.success-btn {
  background-color: var(--success-color);
  color: white;
}

.warning-btn {
  background-color: var(--warning-color);
  color: white;
}

.danger-btn {
  background-color: var(--danger-color);
  color: white;
}

/* Responsive para móviles */
@media (max-width: 768px) {
  .header-container {
    flex-direction: column;
    height: auto;
    padding: 10px;
  }
  
  .logo {
    margin-bottom: 10px;
  }
  
  .main-nav ul {
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .main-nav li {
    margin: 5px;
  }
  
  .grid-container {
    grid-template-columns: 1fr;
  }
  
  .camera-grid.layout-2,
  .camera-grid.layout-4 {
    grid-template-columns: 1fr;
  }
  
  .stat-card {
    flex-direction: column;
    text-align: center;
  }
  
  .stat-icon {
    margin-right: 0;
    margin-bottom: 15px;
  }
}

/* Animaciones */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.animate-in {
  animation: fadeIn 0.5s ease-out forwards;
}

/* Alertas y notificaciones */
.notification {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 15px 25px;
  background-color: var(--secondary-color);
  color: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  z-index: 1000;
  transform: translateY(20px);
  opacity: 0;
  transition: all 0.3s;
}

.notification.info {
  background-color: var(--info-color);
}

.notification.success {
  background-color: var(--success-color);
}

.notification.warning {
  background-color: var(--warning-color);
}

.notification.error {
  background-color: var(--danger-color);
}

/* Estilos para listas */
.camera-list {
  list-style: none;
  padding: 0;
}

.camera-item h4 {
  margin-top: 0;
  color: #3498db;
}

/* Estilos para formularios */
.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

input[type="text"],
input[type="url"],
select {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}

button {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

button:hover {
  background-color: #2980b9;
}

/* Botón de eliminar */
.delete-btn {
  background-color: #e74c3c;
  position: absolute;
  top: 10px;
  right: 10px;
  padding: 5px 10px;
  font-size: 14px;
}

.delete-btn:hover {
  background-color: #c0392b;
}

/* Mensajes de estado */
.status-message {
  display: none;
  padding: 10px 20px;
  border-radius: 4px;
  margin-bottom: 20px;
}

.status-message.success {
  background-color: #2ecc71;
  color: white;
}

.status-message.error {
  background-color: #e74c3c;
  color: white;
}

/* Estilos específicos de la página */
.dashboard-container,
.cameras-container,
.alerts-container,
.modes-container {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
}

@media (min-width: 768px) {
  .dashboard-container {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .alerts-container,
  .modes-container {
    grid-template-columns: 1fr 1fr;
  }
}

/* Estilos para el selector de modo */
.mode-display {
  background-color: #3498db;
  color: white;
  padding: 10px;
  border-radius: 4px;
  display: inline-block;
  margin-bottom: 20px;
  font-weight: bold;
}

.mode-item {
  padding: 10px;
  margin-bottom: 10px;
  border-left: 4px solid #3498db;
  background-color: #ecf0f1;
}

.mode-item h4 {
  margin-top: 0;
  color: #3498db;
}

/* Estilos para menú desplegable */
.dropdown {
  position: relative;
}

.dropdown-toggle {
  cursor: pointer;
}

.dropdown-menu {
  display: none;
  position: absolute;
  background-color: #34495e;
  min-width: 200px;
  box-shadow: 0 8px 16px rgba(0,0,0,0.2);
  z-index: 1000;
  border-radius: 4px;
  padding: 5px 0;
}

.dropdown:hover .dropdown-menu {
  display: block;
}

.dropdown-menu li {
  margin: 0;
  padding: 0;
  display: block;
}

.dropdown-menu li a {
  display: block;
  padding: 10px 15px;
  color: white;
  text-decoration: none;
}

.dropdown-menu li a:hover {
  background-color: #2c3e50;
}

/* Estilo para controles de IA */
.ai-systems-container {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
}

@media (min-width: 768px) {
  .ai-systems-container {
    grid-template-columns: repeat(2, 1fr);
  }
}

.checkbox-group {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 10px;
  margin-top: 5px;
}

.stat-group {
  margin-bottom: 15px;
  padding-bottom: 15px;
  border-bottom: 1px solid #eee;
}

.stat-group:last-child {
  border-bottom: none;
}

.button.secondary {
  background-color: #7f8c8d;
  margin-top: 10px;
  display: inline-block;
}

.button.secondary:hover {
  background-color: #95a5a6;
}

/* Estilos para depuración */
.debug-container {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
}

@media (min-width: 768px) {
  .debug-container {
    grid-template-columns: 1fr 1fr;
  }
}

.status-online {
  color: #2ecc71;
  font-weight: bold;
}

.status-offline {
  color: #e74c3c;
  font-weight: bold;
}

.video-container {
  margin-top: 15px;
  border: 1px solid #ddd;
  padding: 10px;
  border-radius: 4px;
  background-color: #f9f9f9;
}

/* Indicador de carga */
.loading-indicator {
  display: none;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.8);
  z-index: 9999;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Alertas y mensajes */
.alert {
  padding: 15px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 4px;
  opacity: 1;
  transition: opacity 0.5s;
}

.alert-success {
  color: #155724;
  background-color: #d4edda;
  border-color: #c3e6cb;
}

.alert-info {
  color: #0c5460;
  background-color: #d1ecf1;
  border-color: #bee5eb;
}

.alert-warning {
  color: #856404;
  background-color: #fff3cd;
  border-color: #ffeeba;
}

.alert-danger {
  color: #721c24;
  background-color: #f8d7da;
  border-color: #f5c6cb;
}

.alert-dismissible {
  padding-right: 35px;
}

.alert-dismissible .close {
  position: absolute;
  top: 10px;
  right: 10px;
  font-size: 20px;
  font-weight: bold;
  line-height: 1;
  color: inherit;
  text-shadow: 0 1px 0 #fff;
  opacity: 0.5;
  background: none;
  border: none;
  cursor: pointer;
}

/* Estilos para la cámara y detección */
.camera-stream-container {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  overflow: hidden;
  margin-bottom: 20px;
}

.stream-header {
  padding: 15px;
  background-color: #f8f9fa;
  border-bottom: 1px solid #e9ecef;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.stream-body {
  position: relative;
  background-color: #000;
  min-height: 400px;
}

.stream-body img {
  width: 100%;
  height: auto;
  display: block;
}

.stream-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 10;
}

.detection-info {
  position: absolute;
  bottom: 50px;
  left: 10px;
  right: 10px;
  padding: 10px;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  border-radius: 4px;
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
}

.detection-item {
  background-color: rgba(52, 152, 219, 0.8);
  padding: 5px 8px;
  border-radius: 4px;
  font-size: 14px;
  font-weight: bold;
}

.stream-status {
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 5px 10px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 5px;
  font-size: 12px;
}

.status-indicator {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: #2ecc71;
  display: inline-block;
}

.stream-footer {
  padding: 10px 15px;
  background-color: #f8f9fa;
  border-top: 1px solid #e9ecef;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}

.detection-controls, .capture-controls {
  display: flex;
  gap: 5px;
  flex-wrap: wrap;
}

.btn {
  padding: 5px 10px;
  border-radius: 4px;
  border: 1px solid #ddd;
  background-color: white;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  gap: 5px;
}

.btn:hover {
  background-color: #f1f1f1;
}

.btn i {
  font-size: 14px;
}

.detect-btn {
  border-color: #3498db;
  color: #3498db;
}

.detect-btn:hover {
  background-color: #3498db;
  color: white;
}

.detect-btn.active {
  background-color: #3498db;
  color: white;
}

.capture-btn {
  border-color: #2ecc71;
  color: #2ecc71;
}

.capture-btn:hover {
  background-color: #2ecc71;
  color: white;
}

.record-btn {
  border-color: #e74c3c;
  color: #e74c3c;
}

.record-btn:hover {
  background-color: #e74c3c;
  color: white;
}

.record-btn.recording {
  background-color: #e74c3c;
  color: white;
  animation: pulse 1.5s infinite;
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.7; }
  100% { opacity: 1; }
}

.snapshot-preview {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  padding: 10px;
  z-index: 1000;
  max-width: 90vw;
  max-height: 90vh;
  overflow: auto;
}

.snapshot-preview img {
  max-width: 100%;
  max-height: 70vh;
  display: block;
  margin-bottom: 10px;
}

.snapshot-actions {
  display: flex;
  justify-content: space-between;
}

/* Estilos para la página de monitoreo */
.camera-grid {
  display: grid;
  gap: 20px;
  margin-bottom: 20px;
}

.camera-grid.layout-1 {
  grid-template-columns: 1fr;
}

.camera-grid.layout-2 {
  grid-template-columns: repeat(2, 1fr);
}

.camera-grid.layout-4 {
  grid-template-columns: repeat(2, 1fr);
}

@media (min-width: 1200px) {
  .camera-grid.layout-4 {
    grid-template-columns: repeat(4, 1fr);
  }
}

@media (max-width: 768px) {
  .camera-grid.layout-2,
  .camera-grid.layout-4 {
    grid-template-columns: 1fr;
  }
}

.camera-cell {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  overflow: hidden;
}

.camera-container {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.camera-status {
  display: flex;
  align-items: center;
  gap: 5px;
  font-size: 12px;
  padding: 3px 8px;
  border-radius: 12px;
  background-color: #f8f9fa;
}

.camera-status.active .status-indicator {
  background-color: #2ecc71;
}

.camera-status.inactive .status-indicator {
  background-color: #e74c3c;
}

/* Agregar al final del archivo */
.notification-indicator {
  position: relative;
}

.notification-badge {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: #e74c3c;
  color: white;
  border-radius: 50%;
  width: 16px;
  height: 16px;
  font-size: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

.camera-fallback {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: white;
}

.camera-fallback i {
  font-size: 48px;
  color: #e74c3c;
  margin-bottom: 15px;
}

.retry-btn {
  margin-top: 15px;
  padding: 8px 16px;
  background-color: #3498db;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.retry-btn:hover {
  background-color: #2980b9;
}

.camera-status.error .status-indicator {
  background-color: #e74c3c;
  animation: pulse 1s infinite;
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

/* Estilos para resultados de prueba de detectores */
.detector-test-modal .modal-content {
  width: 90%;
  max-width: 1200px;
}

.detection-images {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 20px;
}

.image-container {
  flex: 1;
  min-width: 300px;
}

.image-container img {
  width: 100%;
  border-radius: 4px;
  border: 1px solid #ddd;
}

.detection-results {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 15px;
}

.detector-result {
  background-color: #f8f9fa;
  border-radius: 8px;
  padding: 15px;
  border-left: 4px solid #3498db;
}

.detector-result.alert {
  background-color: #fff3cd;
  border-left-color: #f39c12;
}

.detector-result h4 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #2c3e50;
} 

--------------------------------------------------------------------------------

📄 static\css\testing.css
--------------------------------------------------------------------------------
/* Estilos específicos para prueba de detectores */

.detector-dashboard {
    display: flex;
    gap: 20px;
    margin-top: 20px;
}

.control-panel {
    width: 300px;
    flex-shrink: 0;
}

.visualization-panel {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.stream-container {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    overflow: hidden;
}

.stream-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
}

.stream-view {
    position: relative;
    width: 100%;
    height: 400px;
    background-color: #000;
    overflow: hidden;
}

.stream-controls {
    display: flex;
    gap: 10px;
}

.btn-icon.recording {
    color: #e74c3c;
    animation: pulse 1s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

.event-item {
    padding: 8px 10px;
    margin-bottom: 5px;
    border-left: 3px solid #3498db;
    background-color: rgba(52, 152, 219, 0.1);
}

.event-item.alert {
    border-left-color: #e74c3c;
    background-color: rgba(231, 76, 60, 0.1);
}

.stats-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 10px;
    margin-top: 10px;
}

.stat-box {
    background-color: #f8f9fa;
    border-radius: 4px;
    padding: 10px;
    text-align: center;
}

.stat-box .value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #2c3e50;
}

.stat-box .label {
    font-size: 0.8rem;
    color: #7f8c8d;
} 

--------------------------------------------------------------------------------

📄 static\css\whatsapp.css
--------------------------------------------------------------------------------
/* Estilos para la configuración de WhatsApp */
.whatsapp-config-container {
    padding: 20px;
}

.status-card {
    background: linear-gradient(135deg, #25d366 0%, #128c7e 100%);
    color: white;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.status-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.status-header h3 {
    margin: 0;
    font-size: 1.4rem;
}

.status-info {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
}

.info-item {
    display: flex;
    flex-direction: column;
}

.info-label {
    font-size: 0.9rem;
    opacity: 0.9;
}

.info-value {
    font-size: 1.2rem;
    font-weight: bold;
}

.toggle-container {
    display: flex;
    align-items: center;
}

.toggle-status {
    margin-left: 10px;
    padding: 5px 10px;
    border-radius: 4px;
    font-weight: bold;
}

.toggle-status.active {
    background-color: #ffffff;
    color: #128c7e;
}

.toggle-status.inactive {
    background-color: rgba(255, 255, 255, 0.3);
    color: #ffffff;
}

.config-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
}

.config-card {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.recipients-card {
    grid-column: 1 / span 2;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-control {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 15px;
}

.checkbox-group {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 10px;
    margin-top: 5px;
}

.checkbox-label {
    display: flex;
    align-items: center;
    cursor: pointer;
}

.checkbox-label input {
    margin-right: 8px;
}

.recipients-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.recipient-card {
    background: #f5f5f5;
    border-radius: 8px;
    padding: 15px;
    position: relative;
}

.recipient-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.recipient-name {
    font-weight: bold;
    font-size: 1.1rem;
    margin: 0;
}

.recipient-phone {
    color: #666;
    margin: 5px 0;
}

.recipient-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 10px;
}

.show-hide-btn {
    background: none;
    border: none;
    color: #0066cc;
    cursor: pointer;
    padding: 0;
    font-size: 0.9rem;
    position: absolute;
    right: 10px;
    top: 30px;
}

.show-hide-btn:hover {
    text-decoration: underline;
}

.add-recipient-form {
    margin-top: 20px;
    background: #f5f5f5;
    border-radius: 8px;
    padding: 15px;
}

.add-recipient-form h4 {
    margin-top: 0;
    margin-bottom: 15px;
}

.add-recipient-form .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr auto;
    gap: 10px;
}

.form-description {
    margin-top: 20px;
    padding: 15px;
    background-color: #e8f4fc;
    border-radius: 8px;
}

.form-description h4 {
    margin-top: 0;
    color: #0066cc;
}

.form-description ol {
    margin-bottom: 0;
}

.form-description li {
    margin-bottom: 8px;
}

.form-description a {
    color: #0066cc;
    text-decoration: none;
}

.form-description a:hover {
    text-decoration: underline;
}

@media (max-width: 768px) {
    .config-grid {
        grid-template-columns: 1fr;
    }
    
    .recipients-card {
        grid-column: 1;
    }
    
    .add-recipient-form .form-row {
        grid-template-columns: 1fr;
    }
} 

--------------------------------------------------------------------------------

📄 static\img\camera-placeholder.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 static\js\alerts.js
--------------------------------------------------------------------------------
/**
 * Gestión de Alertas - Sistema de Vigilancia IA
 * Este archivo maneja la visualización, filtrado y gestión de alertas
 */

// Variables globales
let allAlerts = [];
let filteredAlerts = [];

// Inicialización
document.addEventListener('DOMContentLoaded', function() {
    loadAlerts();
    setupModal();
    
    // Actualizar estadísticas cada 60 segundos
    setInterval(updateAlertStats, 60000);
});

// Cargar alertas desde la API
function loadAlerts() {
    fetch('/api/alerts?limit=100')
        .then(response => response.json())
        .then(data => {
            allAlerts = data;
            filteredAlerts = [...allAlerts];
            
            updateAlertsList();
            updateAlertStats();
        })
        .catch(error => {
            console.error('Error cargando alertas:', error);
            showNotification('Error al cargar alertas. Intente nuevamente.', 'error');
        });
}

// Actualizar las estadísticas de alertas
function updateAlertStats() {
    // Contar alertas activas
    const activeAlerts = allAlerts.filter(a => a.status !== 'resolved').length;
    document.getElementById('totalActiveAlerts').textContent = activeAlerts;
    
    // Contar alertas críticas
    const criticalAlerts = allAlerts.filter(a => 
        (a.severity === 'high' || a.severity === 'critical') && 
        a.status !== 'resolved'
    ).length;
    document.getElementById('criticalAlerts').textContent = criticalAlerts;
    
    // Contar alertas resueltas
    const resolvedAlerts = allAlerts.filter(a => a.status === 'resolved').length;
    document.getElementById('resolvedAlerts').textContent = resolvedAlerts;
    
    // Contar alertas de hoy
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const alertsToday = allAlerts.filter(a => {
        const alertDate = new Date(a.timestamp);
        return alertDate >= today;
    }).length;
    
    document.getElementById('alertsToday').textContent = alertsToday;
}

// Filtrar alertas según los criterios seleccionados
function filterAlerts() {
    const severityFilter = document.getElementById('severityFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const dateFilter = document.getElementById('dateFilter').value;
    const searchText = document.getElementById('searchInput').value.toLowerCase();
    
    filteredAlerts = allAlerts.filter(alert => {
        // Filtro por severidad
        if (severityFilter !== 'all' && alert.severity !== severityFilter) {
            return false;
        }
        
        // Filtro por estado
        if (statusFilter === 'active' && alert.status === 'resolved') {
            return false;
        } else if (statusFilter === 'resolved' && alert.status !== 'resolved') {
            return false;
        }
        
        // Filtro por fecha
        const alertDate = new Date(alert.timestamp);
        const now = new Date();
        
        if (dateFilter === 'today') {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            if (alertDate < today) {
                return false;
            }
        } else if (dateFilter === 'week') {
            const weekStart = new Date();
            weekStart.setDate(now.getDate() - 7);
            if (alertDate < weekStart) {
                return false;
            }
        } else if (dateFilter === 'month') {
            const monthStart = new Date();
            monthStart.setMonth(now.getMonth() - 1);
            if (alertDate < monthStart) {
                return false;
            }
        }
        
        // Filtro por texto de búsqueda
        if (searchText && !alertMatchesSearch(alert, searchText)) {
            return false;
        }
        
        return true;
    });
    
    updateAlertsList();
}

// Verificar si una alerta coincide con el texto de búsqueda
function alertMatchesSearch(alert, searchText) {
    return (
        (alert.alert_type && alert.alert_type.toLowerCase().includes(searchText)) ||
        (alert.description && alert.description.toLowerCase().includes(searchText)) ||
        (alert.camera_name && alert.camera_name.toLowerCase().includes(searchText)) ||
        (alert.location && alert.location.toLowerCase().includes(searchText))
    );
}

// Actualizar la lista de alertas en la UI
function updateAlertsList() {
    const alertsList = document.getElementById('alertsList');
    
    if (filteredAlerts.length === 0) {
        alertsList.innerHTML = `
            <div class="no-alerts">
                <i class="fas fa-bell-slash"></i>
                <h3>No hay alertas</h3>
                <p>No se encontraron alertas que coincidan con los criterios de búsqueda</p>
            </div>
        `;
        return;
    }
    
    let alertsHTML = '';
    
    filteredAlerts.forEach(alert => {
        const severityClass = getSeverityClass(alert.severity);
        const severityIcon = getSeverityIcon(alert.severity);
        
        alertsHTML += `
            <div class="alert-item" data-id="${alert.id}">
                <div class="alert-icon ${severityClass}">
                    <i class="${severityIcon}"></i>
                </div>
                <div class="alert-content">
                    <div class="alert-header">
                        <div class="alert-title">${alert.alert_type}</div>
                        <div class="alert-time">${formatDate(alert.timestamp)}</div>
                    </div>
                    <div class="alert-description">${alert.description}</div>
                    <div class="alert-details">
                        <div class="alert-camera">
                            <i class="fas fa-video"></i> ${alert.camera_name || `Cámara ${alert.camera_id}`}
                        </div>
                        <div class="alert-severity">
                            <i class="fas fa-exclamation-triangle"></i> 
                            <span class="alert-badge ${severityClass}">${getSeverityText(alert.severity)}</span>
                        </div>
                        ${alert.status === 'resolved' ? 
                            `<div class="alert-status resolved">
                                <i class="fas fa-check-circle"></i> Resuelta
                            </div>` : 
                            `<div class="alert-actions">
                                <button class="btn-sm" onclick="resolveAlert(${alert.id})">
                                    <i class="fas fa-check"></i> Resolver
                                </button>
                                <button class="btn-sm" onclick="showAlertDetails(${alert.id})">
                                    <i class="fas fa-eye"></i> Ver
                                </button>
                            </div>`
                        }
                    </div>
                </div>
            </div>
        `;
    });
    
    alertsList.innerHTML = alertsHTML;
}

// Formatear fecha
function formatDate(dateString) {
    const date = new Date(dateString);
    
    // Formatear fecha y hora
    const options = { 
        day: '2-digit', 
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit', 
        minute: '2-digit'
    };
    
    return date.toLocaleString('es-ES', options);
}

// Obtener clase CSS según severidad
function getSeverityClass(severity) {
    switch(severity) {
        case 'critical':
        case 'high':
            return 'high';
        case 'medium':
            return 'medium';
        case 'low':
        default:
            return 'low';
    }
}

// Obtener icono según severidad
function getSeverityIcon(severity) {
    switch(severity) {
        case 'critical':
        case 'high':
            return 'fas fa-exclamation-circle';
        case 'medium':
            return 'fas fa-exclamation-triangle';
        case 'low':
        default:
            return 'fas fa-info-circle';
    }
}

// Obtener texto descriptivo de severidad
function getSeverityText(severity) {
    switch(severity) {
        case 'critical':
            return 'Crítica';
        case 'high':
            return 'Alta';
        case 'medium':
            return 'Media';
        case 'low':
            return 'Baja';
        default:
            return severity;
    }
}

// Marcar una alerta como resuelta
function resolveAlert(alertId) {
    fetch(`/api/alerts/${alertId}/resolve`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Actualizar el estado de la alerta en el array local
            const alertIndex = allAlerts.findIndex(a => a.id === alertId);
            if (alertIndex !== -1) {
                allAlerts[alertIndex].status = 'resolved';
                
                // Actualizar UI
                filterAlerts();
                updateAlertStats();
                
                showNotification('Alerta marcada como resuelta', 'success');
            }
        } else {
            throw new Error(data.message || 'Error al resolver la alerta');
        }
    })
    .catch(error => {
        console.error('Error resolviendo alerta:', error);
        showNotification('Error: ' + error.message, 'error');
    });
}

// Marcar todas las alertas como leídas
function markAllAsRead() {
    fetch('/api/alerts/mark-all-read', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Actualizar el estado de las alertas en el array local
            allAlerts.forEach(alert => {
                if (alert.status === 'new') {
                    alert.status = 'read';
                }
            });
            
            // Actualizar UI
            filterAlerts();
            
            showNotification('Todas las alertas marcadas como leídas', 'success');
        } else {
            throw new Error(data.message || 'Error al marcar alertas como leídas');
        }
    })
    .catch(error => {
        console.error('Error marcando alertas como leídas:', error);
        showNotification('Error: ' + error.message, 'error');
    });
}

// Eliminar alertas resueltas
function clearResolvedAlerts() {
    fetch('/api/alerts/clear-resolved', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Eliminar alertas resueltas del array local
            allAlerts = allAlerts.filter(alert => alert.status !== 'resolved');
            
            // Cerrar modal
            const modal = document.getElementById('confirmModal');
            modal.style.display = 'none';
            
            // Actualizar UI
            filterAlerts();
            updateAlertStats();
            
            showNotification(`${data.count} alertas eliminadas`, 'success');
        } else {
            throw new Error(data.message || 'Error al eliminar alertas');
        }
    })
    .catch(error => {
        console.error('Error eliminando alertas:', error);
        showNotification('Error: ' + error.message, 'error');
    });
}

// Mostrar diálogo de confirmación
function confirmClearAlerts() {
    const modal = document.getElementById('confirmModal');
    modal.style.display = 'block';
}

// Configurar modal
function setupModal() {
    const modal = document.getElementById('confirmModal');
    const closeButtons = modal.querySelectorAll('.modal-close');
    
    closeButtons.forEach(button => {
        button.addEventListener('click', function() {
            modal.style.display = 'none';
        });
    });
    
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
}

// Mostrar notificación
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = message;
    
    // Añadir al DOM
    document.body.appendChild(notification);
    
    // Mostrar con animación
    setTimeout(() => {
        notification.style.transform = 'translateY(0)';
        notification.style.opacity = '1';
    }, 10);
    
    // Auto-ocultar después de 4 segundos
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(-20px)';
        
        // Eliminar del DOM después de la animación
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 4000);
}

// Mostrar detalles de una alerta
function showAlertDetails(alertId) {
    const alert = allAlerts.find(a => a.id === alertId);
    if (!alert) return;
    
    // Crear modal dinámicamente
    const modal = document.createElement('div');
    modal.className = 'modal';
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>Detalles de Alerta</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="alert-detail-header">
                    <div class="alert-detail-title">${alert.alert_type}</div>
                    <div class="alert-badge ${getSeverityClass(alert.severity)}">${getSeverityText(alert.severity)}</div>
                </div>
                
                <div class="alert-detail-section">
                    <div class="alert-detail-timestamp">
                        <i class="fas fa-clock"></i> ${formatDate(alert.timestamp)}
                    </div>
                    
                    <div class="alert-detail-description">
                        ${alert.description}
                    </div>
                </div>
                
                <div class="alert-detail-section">
                    <h4>Información</h4>
                    <div class="alert-detail-info">
                        <div class="info-item">
                            <div class="info-label">Cámara:</div>
                            <div class="info-value">${alert.camera_name || `Cámara ${alert.camera_id}`}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Ubicación:</div>
                            <div class="info-value">${alert.location || 'No especificada'}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Estado:</div>
                            <div class="info-value">${alert.status === 'resolved' ? 'Resuelta' : 'Activa'}</div>
                        </div>
                    </div>
                </div>
                
                ${alert.image_path ? `
                <div class="alert-detail-section">
                    <h4>Imagen</h4>
                    <div class="alert-detail-image">
                        <img src="${alert.image_path}" alt="Imagen de alerta">
                    </div>
                </div>
                ` : ''}
            </div>
            <div class="modal-footer">
                ${alert.status !== 'resolved' ? `
                <button class="btn primary-btn" onclick="resolveAlert(${alert.id}); this.closest('.modal').remove();">
                    <i class="fas fa-check"></i> Marcar como resuelta
                </button>
                ` : ''}
                <button class="btn secondary-btn modal-close">Cerrar</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Configurar cierre de modal
    const closeBtn = modal.querySelector('.modal-close');
    closeBtn.addEventListener('click', () => modal.remove());
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.remove();
    });
} 

--------------------------------------------------------------------------------

📄 static\js\cameras.js
--------------------------------------------------------------------------------
// Crear el directorio para JS si no existe
mkdir -p static/js

// Archivo: static/js/cameras.js
document.addEventListener('DOMContentLoaded', function() {
    const addCameraBtn = document.getElementById('addCameraBtn');
    const modal = document.getElementById('cameraModal');
    const closeBtn = modal.querySelector('.close');
    const cameraForm = document.getElementById('cameraForm');
    const camerasGrid = document.querySelector('.cameras-grid');
    
    // Abrir modal
    addCameraBtn.addEventListener('click', function() {
        modal.style.display = 'flex';
    });
    
    // Cerrar modal
    closeBtn.addEventListener('click', function() {
        modal.style.display = 'none';
    });
    
    // Cerrar modal al hacer clic fuera
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    // Procesar formulario
    cameraForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        const nameInput = document.getElementById('camera-name');
        const urlInput = document.getElementById('camera-url');
        const locationInput = document.getElementById('camera-location');
        const activeInput = document.getElementById('camera-active');
        
        const cameraData = {
            name: nameInput.value,
            url: urlInput.value,
            location: locationInput.value || '',
            active: activeInput.checked
        };
        
        // Enviar datos al servidor
        fetch('/api/cameras', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(cameraData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.id) {
                // Crear elemento visual para la nueva cámara
                const cameraElement = document.createElement('div');
                cameraElement.className = 'camera-card';
                cameraElement.dataset.id = data.id;
                cameraElement.innerHTML = `
                    <h4>${cameraData.name}</h4>
                    <p><strong>URL:</strong> ${cameraData.url}</p>
                    <p><strong>Ubicación:</strong> ${cameraData.location || 'No especificada'}</p>
                    <p><strong>Estado:</strong> <span class="status-active">Activa</span></p>
                    <div class="camera-actions">
                        <button class="btn btn-small" onclick="editCamera('${data.id}')">Editar</button>
                        <button class="btn btn-small btn-danger" onclick="deleteCamera('${data.id}')">Eliminar</button>
                    </div>
                `;
                
                // Si no hay cámaras, limpiar mensaje
                if (camerasGrid.querySelector('p')) {
                    camerasGrid.innerHTML = '';
                }
                
                // Añadir nueva cámara al grid
                camerasGrid.appendChild(cameraElement);
                
                // Cerrar modal y resetear formulario
                modal.style.display = 'none';
                cameraForm.reset();
                
                // Mostrar mensaje de éxito
                alert('Cámara añadida correctamente');
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al añadir cámara');
        });
    });
}); 

--------------------------------------------------------------------------------

📄 static\js\cameras_advanced.js
--------------------------------------------------------------------------------
// Función para probar cámara
function testCamera() {
    const cameraUrl = document.getElementById('cameraUrlTest').value;
    if (!cameraUrl) {
        showNotification('Por favor ingrese una URL de cámara para probar', 'error');
        return;
    }
    
    // Mostrar indicador de carga
    document.getElementById('testResults').innerHTML = '<div class="loading-spinner"></div><p>Probando conexión...</p>';
    document.getElementById('testResults').style.display = 'block';
    
    // Realizar solicitud al servidor
    fetch('/api/cameras/test', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            url: cameraUrl  // Cambiado de camera_url a url para hacerlo compatible con el backend
        })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.message || data.error || 'Error al probar la cámara');
            });
        }
        return response.json();
    })
    .then(data => {
        // Mostrar resultados exitosos
        document.getElementById('testResults').innerHTML = `
            <div class="success-message">
                <h4>¡Conexión exitosa!</h4>
                <p>Resolución: ${data.resolution}</p>
                <div class="test-image">
                    <img src="${data.test_image}" alt="Captura de prueba">
                </div>
                <button class="btn" onclick="useTestedCamera('${cameraUrl}')">Usar esta cámara</button>
            </div>
        `;
    })
    .catch(error => {
        // Mostrar error
        document.getElementById('testResults').innerHTML = `
            <div class="error-message">
                <h4>Error en la prueba</h4>
                <p>${error.message}</p>
                <p>Verifique que la URL es correcta y que la cámara está disponible.</p>
            </div>
        `;
        console.error('Error en la prueba de cámara:', error);
    });
} 

--------------------------------------------------------------------------------

📄 static\js\detection_testing.js
--------------------------------------------------------------------------------
// Variables globales
let cameras = [];
let selectedCamera = null;
let detectionInterval = null;
let streamUpdateInterval = null;
let isDetecting = false;
let isRecording = false;
let detectionStartTime = null;
let frameCounter = 0;
let lastFrameTime = 0;
let detectionResults = {
    pose: [],
    fire: { detected: false },
    water: { detected: false },
    face: []
};
let detectionEvents = [];

// Inicialización
document.addEventListener('DOMContentLoaded', function() {
    loadCameras();
    
    // Configurar event listeners para modales
    document.querySelectorAll('.modal-close').forEach(button => {
        button.addEventListener('click', function() {
            this.closest('.modal').style.display = 'none';
        });
    });
    
    // Cerrar modal al hacer clic fuera
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    });
});

// Cargar cámaras disponibles
function loadCameras() {
    fetch('/api/cameras')
        .then(response => response.json())
        .then(data => {
            cameras = data;
            
            // Llenar selector de cámaras
            const cameraSelect = document.getElementById('cameraSelect');
            cameraSelect.innerHTML = '<option value="">Seleccione una cámara...</option>';
            
            cameras.forEach(camera => {
                const option = document.createElement('option');
                option.value = camera.id;
                option.textContent = `${camera.name} (${camera.location || 'Sin ubicación'})`;
                cameraSelect.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error cargando cámaras:', error);
            showNotification('Error al cargar las cámaras', 'error');
        });
}

// Cambiar cámara seleccionada
function changeTestCamera() {
    const cameraId = parseInt(document.getElementById('cameraSelect').value);
    
    // Si hay detección en curso, detenerla primero
    if (isDetecting) {
        stopRealTimeDetection();
    }
    
    // Si no se seleccionó ninguna cámara
    if (!cameraId) {
        selectedCamera = null;
        document.getElementById('streamTitle').textContent = 'Visualizador de Detecciones';
        document.getElementById('startLiveDetection').disabled = true;
        
        // Mostrar placeholder
        document.getElementById('liveStreamImg').style.display = 'none';
        document.getElementById('detectionOverlay').style.display = 'none';
        document.querySelector('#detectionStream .placeholder-content').style.display = 'flex';
        return;
    }
    
    // Buscar la cámara seleccionada
    selectedCamera = cameras.find(c => c.id === cameraId);
    
    if (selectedCamera) {
        document.getElementById('streamTitle').textContent = selectedCamera.name;
        document.getElementById('startLiveDetection').disabled = false;
    }
}

// Iniciar detección en tiempo real
function startRealTimeDetection() {
    if (!selectedCamera) {
        showNotification('Seleccione una cámara primero', 'warning');
        return;
    }
    
    // Verificar si la cámara está activa
    fetch(`/api/cameras/${selectedCamera.id}`)
        .then(response => response.json())
        .then(camera => {
            if (!camera.active) {
                // Activar la cámara primero
                return fetch(`/api/cameras/${selectedCamera.id}/start`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('No se pudo activar la cámara');
                    }
                    return response.json();
                });
            }
            return { status: 'success' };
        })
        .then(result => {
            if (result.status === 'success') {
                // Comenzar visualización y detección
                startLiveStream();
                startDetectionLoop();
                
                // Actualizar UI
                document.getElementById('startLiveDetection').style.display = 'none';
                document.getElementById('stopLiveDetection').style.display = 'inline-block';
                document.getElementById('captureBtn').disabled = false;
                document.getElementById('recordBtn').disabled = false;
                
                // Inicializar variables
                isDetecting = true;
                detectionStartTime = Date.now();
                frameCounter = 0;
                detectionEvents = [];
                document.getElementById('eventsLog').innerHTML = '<p>Monitoreo iniciado...</p>';
                
                showNotification('Detección en tiempo real iniciada', 'success');
            } else {
                showNotification('No se pudo iniciar la detección', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification(`Error: ${error.message}`, 'error');
        });
}

// Iniciar visualización de stream
function startLiveStream() {
    // Ocultar placeholder y mostrar imagen
    document.querySelector('#detectionStream .placeholder-content').style.display = 'none';
    const streamImg = document.getElementById('liveStreamImg');
    const overlayCanvas = document.getElementById('detectionOverlay');
    
    streamImg.style.display = 'block';
    overlayCanvas.style.display = 'block';
    
    // Crear URL de stream con timestamp para evitar cache
    const timestamp = Date.now();
    streamImg.src = `/api/camera/${selectedCamera.id}/stream?width=640&height=480&t=${timestamp}`;
    
    // Configurar canvas para overlays
    const streamContainer = document.getElementById('detectionStream');
    overlayCanvas.width = streamContainer.offsetWidth;
    overlayCanvas.height = streamContainer.offsetHeight;
    
    // Manejar errores de stream
    streamImg.onerror = function() {
        showNotification('Error al cargar el stream de video', 'error');
    };
    
    // Actualizar el stream periódicamente para asegurar que no se congele
    if (streamUpdateInterval) {
        clearInterval(streamUpdateInterval);
    }
    
    streamUpdateInterval = setInterval(() => {
        if (isDetecting) {
            const t = Date.now();
            streamImg.src = `/api/camera/${selectedCamera.id}/stream?width=640&height=480&t=${t}`;
        }
    }, 30000); // Actualizar cada 30 segundos
}

// Iniciar bucle de detección
function startDetectionLoop() {
    // Obtener los detectores activados
    const enabledDetectors = [];
    if (document.getElementById('poseDetector').checked) enabledDetectors.push('pose');
    if (document.getElementById('fireDetector').checked) enabledDetectors.push('fire');
    if (document.getElementById('waterDetector').checked) enabledDetectors.push('water');
    if (document.getElementById('faceDetector').checked) enabledDetectors.push('face');
    
    if (enabledDetectors.length === 0) {
        showNotification('Seleccione al menos un detector', 'warning');
        return;
    }
    
    // Iniciar intervalo de detección
    if (detectionInterval) {
        clearInterval(detectionInterval);
    }
    
    detectionInterval = setInterval(() => {
        if (!isDetecting) return;
        
        // Realizar la detección
        fetch(`/api/cameras/${selectedCamera.id}/test-detectors`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ detectors: enabledDetectors })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error en la detección');
            }
            return response.json();
        })
        .then(data => {
            // Guardar resultados
            frameCounter++;
            lastFrameTime = Date.now();
            
            // Actualizar resultados de detección
            detectionResults = data.results;
            
            // Procesar eventos
            processDetectionEvents(data.results);
            
            // Dibujar overlays
            drawDetectionOverlays(data.results);
            
            // Actualizar estadísticas
            updateDetectionStats(data.results);
        })
        .catch(error => {
            console.error('Error en detección:', error);
        });
    }, 1000); // Realizar detección cada segundo
}

// Procesar eventos detectados
function processDetectionEvents(results) {
    const events = [];
    
    // Verificar personas
    if (results.pose && results.pose.length > 0) {
        const personCount = results.pose.length;
        if (personCount > 0) {
            events.push({
                type: 'pose',
                message: `Detectadas ${personCount} personas`,
                severity: personCount > 3 ? 'warning' : 'info',
                time: new Date()
            });
        }
    }
    
    // Verificar fuego
    if (results.fire && results.fire.detected) {
        events.push({
            type: 'fire',
            message: `¡ALERTA! Fuego detectado (${(results.fire.confidence * 100).toFixed(1)}%)`,
            severity: 'critical',
            time: new Date()
        });
    }
    
    // Verificar agua
    if (results.water && results.water.detected) {
        events.push({
            type: 'water',
            message: `¡ALERTA! Agua detectada (${(results.water.confidence * 100).toFixed(1)}%)`,
            severity: 'warning',
            time: new Date()
        });
    }
    
    // Verificar caras
    if (results.face && results.face.length > 0) {
        events.push({
            type: 'face',
            message: `Detectados ${results.face.length} rostros`,
            severity: 'info',
            time: new Date()
        });
    }
    
    // Añadir eventos al log
    if (events.length > 0) {
        events.forEach(event => {
            detectionEvents.push(event);
            addEventToLog(event);
        });
    }
}

// Añadir evento al log visual
function addEventToLog(event) {
    const eventsLog = document.getElementById('eventsLog');
    
    // Si es el primer evento, limpiar el mensaje inicial
    if (eventsLog.querySelector('p') && eventsLog.querySelectorAll('.event-item').length === 0) {
        eventsLog.innerHTML = '';
    }
    
    // Crear elemento de evento
    const eventElement = document.createElement('div');
    eventElement.className = `event-item event-${event.severity}`;
    
    // Formatear hora
    const time = event.time.toLocaleTimeString();
    
    // Icono según tipo de evento
    let icon = 'fa-info-circle';
    if (event.type === 'pose') icon = 'fa-walking';
    if (event.type === 'fire') icon = 'fa-fire';
    if (event.type === 'water') icon = 'fa-water';
    if (event.type === 'face') icon = 'fa-user';
    
    eventElement.innerHTML = `
        <span class="event-time">${time}</span>
        <i class="fas ${icon}"></i>
        <span class="event-message">${event.message}</span>
    `;
    
    // Añadir al inicio del log
    eventsLog.insertBefore(eventElement, eventsLog.firstChild);
    
    // Limitar a 50 eventos
    const eventItems = eventsLog.querySelectorAll('.event-item');
    if (eventItems.length > 50) {
        eventItems[eventItems.length - 1].remove();
    }
}

// Dibujar overlays de detección
function drawDetectionOverlays(results) {
    const canvas = document.getElementById('detectionOverlay');
    const ctx = canvas.getContext('2d');
    
    // Limpiar canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Obtener dimensiones de la imagen y canvas para escalar coordenadas
    const streamImg = document.getElementById('liveStreamImg');
    const scaleX = canvas.width / streamImg.naturalWidth;
    const scaleY = canvas.height / streamImg.naturalHeight;
    
    // Dibujar personas detectadas
    if (results.pose) {
        ctx.strokeStyle = 'lime';
        ctx.lineWidth = 2;
        
        results.pose.forEach(person => {
            if (person.bbox) {
                const [x, y, w, h] = person.bbox;
                ctx.strokeRect(x * scaleX, y * scaleY, w * scaleX, h * scaleY);
                
                // Texto con confianza
                ctx.font = '12px Arial';
                ctx.fillStyle = 'lime';
                ctx.fillText(`Persona: ${(person.confidence * 100).toFixed(0)}%`, 
                             x * scaleX, (y * scaleY) - 5);
            }
        });
    }
    
    // Dibujar alerta de fuego
    if (results.fire && results.fire.detected) {
        ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';
        ctx.fillRect(0, 0, canvas.width, 30);
        
        ctx.font = 'bold 16px Arial';
        ctx.fillStyle = 'white';
        ctx.fillText(`¡ALERTA DE FUEGO! (${(results.fire.confidence * 100).toFixed(0)}%)`, 
                     10, 20);
    }
    
    // Dibujar alerta de agua
    if (results.water && results.water.detected) {
        ctx.fillStyle = 'rgba(0, 0, 255, 0.3)';
        ctx.fillRect(0, results.fire && results.fire.detected ? 35 : 0, canvas.width, 30);
        
        ctx.font = 'bold 16px Arial';
        ctx.fillStyle = 'white';
        ctx.fillText(`¡ALERTA DE AGUA! (${(results.water.confidence * 100).toFixed(0)}%)`, 
                     10, results.fire && results.fire.detected ? 55 : 20);
    }
    
    // Dibujar caras detectadas
    if (results.face) {
        ctx.strokeStyle = 'magenta';
        ctx.lineWidth = 2;
        
        results.face.forEach(face => {
            if (face.bbox) {
                const [x, y, w, h] = face.bbox;
                ctx.strokeRect(x * scaleX, y * scaleY, w * scaleX, h * scaleY);
                
                // Texto con nombre/confianza
                ctx.font = '12px Arial';
                ctx.fillStyle = 'magenta';
                ctx.fillText(`${face.name}: ${(face.confidence * 100).toFixed(0)}%`, 
                             x * scaleX, (y * scaleY) - 5);
            }
        });
    }
}

// Actualizar estadísticas de detección
function updateDetectionStats(results) {
    const statsElement = document.getElementById('liveStats');
    
    // Calcular tiempo transcurrido
    const elapsedTime = Math.floor((Date.now() - detectionStartTime) / 1000);
    const minutes = Math.floor(elapsedTime / 60);
    const seconds = elapsedTime % 60;
    
    // Calcular FPS aproximado
    const fps = frameCounter / (elapsedTime > 0 ? elapsedTime : 1);
    
    // Contar detecciones
    const personCount = results.pose ? results.pose.length : 0;
    const fireDetected = results.fire && results.fire.detected;
    const waterDetected = results.water && results.water.detected;
    const faceCount = results.face ? results.face.length : 0;
    
    // Actualizar estadísticas
    statsElement.innerHTML = `
        <div class="stat-item">
            <strong>Tiempo:</strong> ${minutes}m ${seconds}s
        </div>
        <div class="stat-item">
            <strong>Frames:</strong> ${frameCounter} (${fps.toFixed(1)} FPS)
        </div>
        <div class="stat-item">
            <strong>Personas:</strong> ${personCount}
        </div>
        <div class="stat-item">
            <strong>Fuego:</strong> ${fireDetected ? '<span class="detection-highlight">¡DETECTADO!</span>' : 'No detectado'}
        </div>
        <div class="stat-item">
            <strong>Agua:</strong> ${waterDetected ? '<span class="detection-highlight">¡DETECTADA!</span>' : 'No detectada'}
        </div>
        <div class="stat-item">
            <strong>Rostros:</strong> ${faceCount}
        </div>
    `;
}

// Detener detección en tiempo real
function stopRealTimeDetection() {
    if (!isDetecting) return;
    
    // Detener intervalos
    if (detectionInterval) {
        clearInterval(detectionInterval);
        detectionInterval = null;
    }
    
    if (streamUpdateInterval) {
        clearInterval(streamUpdateInterval);
        streamUpdateInterval = null;
    }
    
    // Restablecer UI
    document.getElementById('startLiveDetection').style.display = 'inline-block';
    document.getElementById('stopLiveDetection').style.display = 'none';
    document.getElementById('captureBtn').disabled = true;
    document.getElementById('recordBtn').disabled = true;
    
    // Detener grabación si estaba activa
    if (isRecording) {
        toggleRecording();
    }
    
    // Ocultar stream y mostrar placeholder
    document.getElementById('liveStreamImg').style.display = 'none';
    document.getElementById('detectionOverlay').style.display = 'none';
    document.querySelector('#detectionStream .placeholder-content').style.display = 'flex';
    
    // Actualizar estado
    isDetecting = false;
    
    showNotification('Detección detenida', 'info');
}

// Capturar imagen con detecciones
function captureDetectionSnapshot() {
    if (!isDetecting || !selectedCamera) return;
    
    fetch(`/api/cameras/${selectedCamera.id}/snapshot`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error al capturar imagen');
        }
        return response.json();
    })
    .then(data => {
        // Crear captura con detecciones
        const captureDetails = {
            camera: selectedCamera.name,
            timestamp: new Date().toLocaleString(),
            detections: detectionResults,
            imagePath: data.path
        };
        
        // Mostrar modal con captura
        showCaptureModal(captureDetails);
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification(`Error al capturar: ${error.message}`, 'error');
    });
}

// Mostrar modal con captura
function showCaptureModal(captureDetails) {
    const modal = document.getElementById('captureModal');
    const imageContainer = document.getElementById('captureImageContainer');
    const detailsContainer = document.getElementById('captureDetails');
    
    // Mostrar imagen
    imageContainer.innerHTML = `<img src="${captureDetails.imagePath}" alt="Captura">`;
    
    // Preparar detalles de detección
    let detailsHTML = `
        <p><strong>Cámara:</strong> ${captureDetails.camera}</p>
        <p><strong>Fecha/Hora:</strong> ${captureDetails.timestamp}</p>
        <h4>Detecciones:</h4>
    `;
    
    // Personas detectadas
    if (captureDetails.detections.pose) {
        detailsHTML += `<p><strong>Personas:</strong> ${captureDetails.detections.pose.length}</p>`;
    }
    
    // Fuego detectado
    if (captureDetails.detections.fire) {
        detailsHTML += `
            <p><strong>Fuego:</strong> 
            ${captureDetails.detections.fire.detected 
                ? `<span class="detection-highlight">¡DETECTADO! (${(captureDetails.detections.fire.confidence * 100).toFixed(1)}%)</span>` 
                : 'No detectado'}
            </p>
        `;
    }
    
    // Agua detectada
    if (captureDetails.detections.water) {
        detailsHTML += `
            <p><strong>Agua:</strong> 
            ${captureDetails.detections.water.detected 
                ? `<span class="detection-highlight">¡DETECTADA! (${(captureDetails.detections.water.confidence * 100).toFixed(1)}%)</span>` 
                : 'No detectada'}
            </p>
        `;
    }
    
    // Rostros detectados
    if (captureDetails.detections.face) {
        detailsHTML += `
            <p><strong>Rostros:</strong> ${captureDetails.detections.face.length}</p>
            ${captureDetails.detections.face.length > 0 
                ? '<ul>' + captureDetails.detections.face.map(f => 
                    `<li>${f.name} (${(f.confidence * 100).toFixed(1)}%)</li>`).join('') + '</ul>' 
                : ''}
        `;
    }
    
    detailsContainer.innerHTML = detailsHTML;
    
    // Configurar botón de descarga
    document.getElementById('downloadCaptureBtn').onclick = function() {
        // Crear enlace de descarga
        const link = document.createElement('a');
        link.href = captureDetails.imagePath;
        link.download = `capture_${Date.now()}.jpg`;
        link.click();
    };
    
    // Mostrar modal
    modal.style.display = 'block';
}

// Activar/desactivar grabación de detecciones
function toggleRecording() {
    if (!isDetecting || !selectedCamera) return;
    
    if (!isRecording) {
        // Iniciar grabación
        fetch(`/api/cameras/${selectedCamera.id}/record/start`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al iniciar grabación');
            }
            return response.json();
        })
        .then(data => {
            isRecording = true;
            document.getElementById('recordBtn').classList.add('recording');
            showNotification('Grabación iniciada', 'success');
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification(`Error: ${error.message}`, 'error');
        });
    } else {
        // Detener grabación
        fetch(`/api/cameras/${selectedCamera.id}/record/stop`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al detener grabación');
            }
            return response.json();
        })
        .then(data => {
            isRecording = false;
            document.getElementById('recordBtn').classList.remove('recording');
            showNotification(`Grabación guardada: ${data.filename}`, 'success');
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification(`Error: ${error.message}`, 'error');
        });
    }
}

// Mostrar notificación
function showNotification(message, type = 'info') {
    // Crear elemento de notificación
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = message;
    
    // Añadir al DOM
    document.body.appendChild(notification);
    
    // Mostrar con animación
    setTimeout(() => {
        notification.style.transform = 'translateY(0)';
        notification.style.opacity = '1';
    }, 10);
    
    // Auto-ocultar después de 4 segundos
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(-20px)';
        
        // Eliminar del DOM después de la animación
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 4000);
}

// Cambiar a pantalla completa
function toggleFullscreen(elementId) {
    const element = document.getElementById(elementId);
    
    if (!document.fullscreenElement) {
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
    }
} 

--------------------------------------------------------------------------------

📄 static\js\diagnostics.js
--------------------------------------------------------------------------------
/**
 * Sistema de Vigilancia IA - Diagnósticos del Sistema
 * Funcionalidad para monitorear y diagnosticar el sistema
 */

// Variables globales
let refreshIntervals = {
    resources: null,
    cameras: null,
    network: null,
    services: null,
    logs: null
};

let charts = {
    network: null
};

let lastRefreshTimes = {};
let systemStartTime = new Date().getTime();

// Inicialización
document.addEventListener('DOMContentLoaded', function() {
    // Cargar datos iniciales
    refreshAllSections();
    
    // Actualizar tiempo de actividad
    updateUptime();
    setInterval(updateUptime, 1000);
    
    // Inicializar gráficos
    initNetworkChart();
});

// Refrescar todas las secciones
function refreshAllSections() {
    refreshSection('resources');
    refreshSection('cameras');
    refreshSection('network');
    refreshSection('services');
    refreshSection('logs');
    
    // Actualizar timestamp
    const now = new Date();
    document.getElementById('lastUpdateTime').textContent = now.toLocaleTimeString();
}

// Realizar diagnóstico completo
function runSystemCheck() {
    showNotification('Ejecutando diagnóstico completo...', 'info');
    
    // Mostrar overlay de carga
    const loadingOverlay = document.createElement('div');
    loadingOverlay.className = 'loading-overlay';
    loadingOverlay.innerHTML = `
        <div class="loading-content">
            <div class="loading-spinner large"></div>
            <p>Ejecutando diagnóstico completo del sistema...</p>
            <div class="progress-bar">
                <div class="progress" id="diagnosticProgress" style="width: 0%"></div>
            </div>
        </div>
    `;
    document.body.appendChild(loadingOverlay);
    
    // Simular progreso
    let progress = 0;
    const progressBar = document.getElementById('diagnosticProgress');
    
    const progressInterval = setInterval(() => {
        progress += 5;
        if (progress > 100) {
            clearInterval(progressInterval);
            return;
        }
        progressBar.style.width = `${progress}%`;
    }, 200);
    
    // Realizar solicitud al servidor
    fetch('/api/system/diagnose', {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        // Detener simulación de progreso
        clearInterval(progressInterval);
        progressBar.style.width = '100%';
        
        // Breve retraso para completar animación
        setTimeout(() => {
            // Eliminar overlay
            loadingOverlay.remove();
            
            // Actualizar UI con resultados
            updateSystemStatus(data.status);
            refreshAllSections();
            
            // Mostrar resultados en modal
            showDiagnosticResults(data);
            
            showNotification('Diagnóstico completado', 'success');
        }, 500);
    })
    .catch(error => {
        // Eliminar overlay
        clearInterval(progressInterval);
        loadingOverlay.remove();
        
        console.error('Error en diagnóstico:', error);
        showNotification('Error al realizar diagnóstico. Intente nuevamente.', 'error');
    });
}

// Mostrar resultados de diagnóstico
function showDiagnosticResults(data) {
    // Crear modal para mostrar resultados
    const modal = document.createElement('div');
    modal.className = 'modal';
    
    // Determinar estado general
    const overallStatus = data.overall_status || 'ok';
    const statusClass = getStatusClass(overallStatus);
    const statusIcon = getStatusIcon(overallStatus);
    
    // Generar HTML para issues
    let issuesHTML = '';
    if (data.issues && data.issues.length > 0) {
        issuesHTML = `
            <div class="diagnostic-issues">
                <h4>Problemas detectados (${data.issues.length})</h4>
                <ul class="issues-list">
                    ${data.issues.map(issue => `
                        <li class="issue-item ${getStatusClass(issue.severity)}">
                            <div class="issue-icon">
                                <i class="${getStatusIcon(issue.severity)}"></i>
                            </div>
                            <div class="issue-content">
                                <div class="issue-title">${issue.title}</div>
                                <div class="issue-description">${issue.description}</div>
                                ${issue.recommendation ? `<div class="issue-recommendation"><strong>Recomendación:</strong> ${issue.recommendation}</div>` : ''}
                            </div>
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
    } else {
        issuesHTML = `
            <div class="diagnostic-success">
                <i class="fas fa-check-circle"></i>
                <p>No se encontraron problemas en el sistema</p>
            </div>
        `;
    }
    
    modal.innerHTML = `
        <div class="modal-content diagnostic-modal">
            <div class="modal-header">
                <h3>Resultado del Diagnóstico</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="diagnostic-summary ${statusClass}">
                    <div class="summary-icon">
                        <i class="${statusIcon}"></i>
                    </div>
                    <div class="summary-content">
                        <h3>${data.title || getStatusTitle(overallStatus)}</h3>
                        <p>${data.summary || getDefaultSummary(overallStatus)}</p>
                    </div>
                </div>
                
                ${issuesHTML}
                
                <div class="diagnostic-timestamp">
                    Diagnóstico completado: ${new Date().toLocaleString()}
                </div>
            </div>
            <div class="modal-footer">
                ${data.issues && data.issues.length > 0 ? `
                <button class="btn primary-btn" onclick="generateReport()">Generar Informe</button>
                ` : ''}
                <button class="btn secondary-btn modal-close">Cerrar</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Configurar cierre de modal
    const closeBtn = modal.querySelector('.modal-close');
    closeBtn.addEventListener('click', () => modal.remove());
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.remove();
    });
}

// Refrescar sección específica
function refreshSection(section) {
    // Cancelar intervalos previos
    if (refreshIntervals[section]) {
        clearInterval(refreshIntervals[section]);
        refreshIntervals[section] = null;
    }
    
    // Mostrar indicador de carga
    const sectionElement = document.getElementById(`${section}Section`);
    if (sectionElement) {
        sectionElement.innerHTML = `
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>Cargando datos...</p>
            </div>
        `;
    }
    
    // Obtener datos según la sección
    switch (section) {
        case 'resources':
            fetchResourceData();
            break;
        case 'cameras':
            fetchCamerasStatus();
            break;
        case 'network':
            fetchNetworkStatus();
            break;
        case 'services':
            fetchServicesStatus();
            break;
        case 'logs':
            fetchSystemLogs();
            break;
    }
    
    // Establecer intervalo de actualización
    const updateIntervals = {
        resources: 10000,  // 10 segundos
        cameras: 30000,    // 30 segundos
        network: 15000,    // 15 segundos
        services: 60000,   // 1 minuto
        logs: 30000        // 30 segundos
    };
    
    refreshIntervals[section] = setInterval(() => {
        refreshSection(section);
    }, updateIntervals[section] || 30000);
    
    // Actualizar último tiempo de refresco
    lastRefreshTimes[section] = new Date().getTime();
}

// Actualizar tiempo de actividad del sistema
function updateUptime() {
    const now = new Date().getTime();
    const uptime = now - systemStartTime;
    
    // Calcular horas, minutos, segundos
    const seconds = Math.floor(uptime / 1000) % 60;
    const minutes = Math.floor(uptime / (1000 * 60)) % 60;
    const hours = Math.floor(uptime / (1000 * 60 * 60));
    
    // Formatear con ceros a la izquierda
    const formattedUptime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    // Actualizar elemento
    document.getElementById('systemUptime').textContent = formattedUptime;
}

// Actualizar estado general del sistema
function updateSystemStatus(status) {
    const statusIcon = document.getElementById('systemStatusIcon');
    const statusText = document.getElementById('systemStatusText');
    const statusDetail = document.getElementById('systemStatusDetail');
    
    // Determinar clase y contenido según el estado
    const statusClass = getStatusClass(status);
    const iconClass = getStatusIcon(status);
    
    // Actualizar UI
    statusIcon.innerHTML = `<i class="${iconClass}"></i>`;
    statusIcon.className = `status-icon ${statusClass}`;
    
    statusText.textContent = getStatusTitle(status);
    statusDetail.textContent = getStatusDescription(status);
}

// Obtener datos de recursos del sistema
function fetchResourceData() {
    fetch('/api/system/resources')
        .then(response => response.json())
        .then(data => {
            updateResourcesUI(data);
        })
        .catch(error => {
            console.error('Error obteniendo datos de recursos:', error);
            document.getElementById('resourcesSection').innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <p>Error al cargar datos de recursos del sistema</p>
                    <button class="btn-sm" onclick="refreshSection('resources')">Intentar de nuevo</button>
                </div>
            `;
        });
}

// Actualizar UI de recursos
function updateResourcesUI(data) {
    // CPU
    const cpuPercent = data.cpu.percent || 0;
    document.getElementById('cpuValue').textContent = `${cpuPercent}%`;
    document.getElementById('cpuBar').style.width = `${cpuPercent}%`;
    colorizeProgressBar('cpuBar', cpuPercent);
    
    document.getElementById('cpuCores').textContent = data.cpu.cores || '-';
    document.getElementById('cpuFreq').textContent = data.cpu.frequency ? `${data.cpu.frequency.toFixed(2)} GHz` : '-';
    
    // Memoria
    const memPercent = data.memory.percent || 0;
    document.getElementById('memValue').textContent = `${memPercent}%`;
    document.getElementById('memBar').style.width = `${memPercent}%`;
    colorizeProgressBar('memBar', memPercent);
    
    document.getElementById('memUsed').textContent = data.memory.used ? formatBytes(data.memory.used) : '-';
    document.getElementById('memTotal').textContent = data.memory.total ? formatBytes(data.memory.total) : '-';
    
    // Disco
    const diskPercent = data.disk.percent || 0;
    document.getElementById('diskValue').textContent = `${diskPercent}%`;
    document.getElementById('diskBar').style.width = `${diskPercent}%`;
    colorizeProgressBar('diskBar', diskPercent);
    
    document.getElementById('diskUsed').textContent = data.disk.used ? formatBytes(data.disk.used) : '-';
    document.getElementById('diskTotal').textContent = data.disk.total ? formatBytes(data.disk.total) : '-';
    
    // Temperatura
    if (data.temperature && data.temperature.cpu) {
        const temp = data.temperature.cpu;
        document.getElementById('tempValue').textContent = `${temp}°C`;
        
        // Actualizar aguja del indicador
        const angle = mapTemperatureToRotation(temp);
        document.querySelector('.gauge-needle').style.transform = `rotate(${angle}deg)`;
    } else {
        document.getElementById('tempValue').textContent = '-°C';
    }
}

// Obtener estado de cámaras
function fetchCamerasStatus() {
    fetch('/api/cameras')
        .then(response => response.json())
        .then(data => {
            updateCamerasUI(data);
        })
        .catch(error => {
            console.error('Error obteniendo estado de cámaras:', error);
            document.getElementById('camerasSection').innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <p>Error al cargar estado de cámaras</p>
                    <button class="btn-sm" onclick="refreshSection('cameras')">Intentar de nuevo</button>
                </div>
            `;
        });
}

// Actualizar UI de cámaras
function updateCamerasUI(data) {
    if (!data || data.length === 0) {
        document.getElementById('camerasSection').innerHTML = `
            <div class="empty-state">
                <i class="fas fa-camera-slash"></i>
                <p>No hay cámaras configuradas</p>
                <a href="/cameras" class="btn-sm">Configurar Cámaras</a>
            </div>
        `;
        return;
    }
    
    let camerasHTML = '<div class="cameras-grid">';
    
    data.forEach(camera => {
        const statusClass = camera.status === 'active' ? 'active' : 'inactive';
        const statusText = camera.status === 'active' ? 'Activa' : 'Inactiva';
        
        camerasHTML += `
            <div class="camera-status-card ${statusClass}">
                <div class="camera-status-header">
                    <h4>${camera.name}</h4>
                    <div class="camera-badge ${statusClass}">${statusText}</div>
                </div>
                <div class="camera-status-details">
                    <div class="detail-item">
                        <div class="detail-label">Ubicación:</div>
                        <div class="detail-value">${camera.location || 'No especificada'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Tipo:</div>
                        <div class="detail-value">${camera.type || 'No especificado'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Resolución:</div>
                        <div class="detail-value">${camera.resolution || 'No especificada'}</div>
                    </div>
                </div>
                <div class="camera-status-actions">
                    ${camera.status === 'active' ?
                        `<button class="btn-sm warning-btn" onclick="toggleCamera(${camera.id}, false)">
                            <i class="fas fa-stop"></i> Detener
                        </button>` :
                        `<button class="btn-sm primary-btn" onclick="toggleCamera(${camera.id}, true)">
                            <i class="fas fa-play"></i> Iniciar
                        </button>`
                    }
                    <button class="btn-sm" onclick="testCamera(${camera.id})">
                        <i class="fas fa-vial"></i> Probar
                    </button>
                </div>
            </div>
        `;
    });
    
    camerasHTML += '</div>';
    document.getElementById('camerasSection').innerHTML = camerasHTML;
}

// Obtener estado de red
function fetchNetworkStatus() {
    fetch('/api/system/network')
        .then(response => response.json())
        .then(data => {
            updateNetworkUI(data);
            updateNetworkChart(data);
        })
        .catch(error => {
            console.error('Error obteniendo estado de red:', error);
            document.getElementById('networkSection').innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <p>Error al cargar estado de red</p>
                    <button class="btn-sm" onclick="refreshSection('network')">Intentar de nuevo</button>
                </div>
            `;
        });
}

// Actualizar UI de red
function updateNetworkUI(data) {
    // Información básica
    document.getElementById('networkStatus').textContent = data.connected ? 'Conectado' : 'Desconectado';
    document.getElementById('networkIp').textContent = data.ip_address || '-';
    document.getElementById('networkSpeed').textContent = data.speed ? `${data.speed} Mbps` : '-';
    
    // Métricas
    document.getElementById('downloadSpeed').textContent = formatBytes(data.download_speed || 0) + '/s';
    document.getElementById('uploadSpeed').textContent = formatBytes(data.upload_speed || 0) + '/s';
    document.getElementById('latency').textContent = data.latency ? `${data.latency.toFixed(2)} ms` : '-';
    
    // Detalles de conexión
    let interfacesHTML = '';
    
    if (data.interfaces && data.interfaces.length > 0) {
        interfacesHTML = `
            <div class="network-interfaces">
                <h4>Interfaces de Red</h4>
                <div class="interfaces-list">
                    ${data.interfaces.map(iface => `
                        <div class="interface-item">
                            <div class="interface-name">${iface.name}</div>
                            <div class="interface-details">
                                <div class="detail-item">
                                    <div class="detail-label">MAC:</div>
                                    <div class="detail-value">${iface.mac_address || '-'}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">IP:</div>
                                    <div class="detail-value">${iface.ip_address || '-'}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Estado:</div>
                                    <div class="detail-value ${iface.status === 'up' ? 'status-good' : 'status-bad'}">${iface.status === 'up' ? 'Activa' : 'Inactiva'}</div>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    // Actualizar contenedor de gráfico
    const networkContent = `
        <div class="network-stats">
            <div class="network-stat">
                <div class="stat-name">Estado:</div>
                <div class="stat-value ${data.connected ? 'status-good' : 'status-bad'}">${data.connected ? 'Conectado' : 'Desconectado'}</div>
            </div>
            <div class="network-stat">
                <div class="stat-name">IP:</div>
                <div class="stat-value">${data.ip_address || '-'}</div>
            </div>
            <div class="network-stat">
                <div class="stat-name">Velocidad:</div>
                <div class="stat-value">${data.speed ? `${data.speed} Mbps` : '-'}</div>
            </div>
        </div>
        
        <div class="network-metrics">
            <div class="metric-item">
                <div class="metric-title">
                    <i class="fas fa-arrow-down"></i> Descarga
                </div>
                <div class="metric-value" id="downloadSpeed">${formatBytes(data.download_speed || 0)}/s</div>
            </div>
            <div class="metric-item">
                <div class="metric-title">
                    <i class="fas fa-arrow-up"></i> Subida
                </div>
                <div class="metric-value" id="uploadSpeed">${formatBytes(data.upload_speed || 0)}/s</div>
            </div>
            <div class="metric-item">
                <div class="metric-title">
                    <i class="fas fa-tachometer-alt"></i> Latencia
                </div>
                <div class="metric-value" id="latency">${data.latency ? `${data.latency.toFixed(2)} ms` : '-'}</div>
            </div>
        </div>
        
        <div class="network-chart-container">
            <canvas id="networkChart"></canvas>
        </div>
        
        ${interfacesHTML}
    `;
    
    document.getElementById('networkSection').innerHTML = networkContent;
    
    // Reinicializar gráfico tras actualizar DOM
    initNetworkChart();
}

// Inicializar gráfico de red
function initNetworkChart() {
    const ctx = document.getElementById('networkChart');
    if (!ctx) return;
    
    if (charts.network) {
        charts.network.destroy();
    }
    
    const labels = Array.from({length: 10}, (_, i) => `${i * 2}s`);
    
    charts.network = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Bajada (KB/s)',
                    data: Array(10).fill(0),
                    borderColor: 'rgba(52, 152, 219, 1)',
                    backgroundColor: 'rgba(52, 152, 219, 0.1)',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: 'Subida (KB/s)',
                    data: Array(10).fill(0),
                    borderColor: 'rgba(231, 76, 60, 1)',
                    backgroundColor: 'rgba(231, 76, 60, 0.1)',
                    tension: 0.4,
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'top'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        display: true,
                        color: 'rgba(0, 0, 0, 0.05)'
                    }
                },
                x: {
                    grid: {
                        display: false
                    }
                }
            },
            animation: {
                duration: 500
            }
        }
    });
}

// Actualizar gráfico de red con nuevos datos
function updateNetworkChart(data) {
    if (!charts.network) return;
    
    // Agregar nuevos datos
    const downloadData = charts.network.data.datasets[0].data;
    const uploadData = charts.network.data.datasets[1].data;
    
    // Eliminar dato más antiguo
    downloadData.shift();
    uploadData.shift();
    
    // Convertir bytes a KB
    const downloadKB = data.download_speed ? Math.round(data.download_speed / 1024) : 0;
    const uploadKB = data.upload_speed ? Math.round(data.upload_speed / 1024) : 0;
    
    // Agregar nuevo dato
    downloadData.push(downloadKB);
    uploadData.push(uploadKB);
    
    // Actualizar gráfico
    charts.network.update();
}

// Obtener estado de servicios
function fetchServicesStatus() {
    fetch('/api/system/services')
        .then(response => response.json())
        .then(data => {
            updateServicesUI(data);
        })
        .catch(error => {
            console.error('Error obteniendo estado de servicios:', error);
            document.getElementById('servicesSection').innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <p>Error al cargar estado de servicios</p>
                    <button class="btn-sm" onclick="refreshSection('services')">Intentar de nuevo</button>
                </div>
            `;
        });
}

// Actualizar UI de servicios
function updateServicesUI(data) {
    if (!data || data.length === 0) {
        document.getElementById('servicesSection').innerHTML = `
            <div class="empty-state">
                <i class="fas fa-cogs"></i>
                <p>No hay servicios monitorizados</p>
            </div>
        `;
        return;
    }
    
    let servicesHTML = '<div class="services-list">';
    
    data.forEach(service => {
        const statusClass = service.status === 'running' ? 'running' : 'stopped';
        const statusText = service.status === 'running' ? 'Activo' : 'Detenido';
        
        servicesHTML += `
            <div class="service-item">
                <div class="service-icon ${statusClass}">
                    <i class="fas fa-${service.icon || 'cog'}"></i>
                </div>
                <div class="service-details">
                    <div class="service-name">${service.name}</div>
                    <div class="service-status ${statusClass}">${statusText}</div>
                </div>
            </div>
        `;
    });
    
    servicesHTML += '</div>';
    document.getElementById('servicesSection').innerHTML = servicesHTML;
}

// Obtener logs del sistema
function fetchSystemLogs() {
    fetch('/api/system/logs')
        .then(response => response.json())
        .then(data => {
            updateLogsUI(data);
        })
        .catch(error => {
            console.error('Error obteniendo logs del sistema:', error);
            document.getElementById('logsSection').innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <p>Error al cargar logs del sistema</p>
                    <button class="btn-sm" onclick="refreshSection('logs')">Intentar de nuevo</button>
                </div>
            `;
        });
}

// Actualizar UI de logs
function updateLogsUI(data) {
    if (!data || data.length === 0) {
        document.getElementById('logsSection').innerHTML = `
            <div class="empty-state">
                <i class="fas fa-clipboard-list"></i>
                <p>No hay logs disponibles</p>
            </div>
        `;
        return;
    }
    
    let logsHTML = `
        <div class="log-controls">
            <select id="logLevel" class="compact-select" onchange="filterLogs()">
                <option value="all">Todos los niveles</option>
                <option value="error">Errores</option>
                <option value="warning">Advertencias</option>
                <option value="info">Información</option>
                <option value="debug">Depuración</option>
            </select>
            <button class="btn-sm" onclick="refreshSection('logs')">
                <i class="fas fa-sync"></i> Actualizar
            </button>
        </div>
        <div class="logs-list">
    `;
    
    data.forEach(log => {
        const levelClass = getLevelClass(log.level);
        
        logsHTML += `
            <div class="log-item" data-level="${log.level.toLowerCase()}">
                <div class="log-level ${levelClass}">${log.level}</div>
                <div class="log-content">
                    <div class="log-timestamp">${formatDate(log.timestamp)}</div>
                    <div class="log-message">${log.message}</div>
                    ${log.component ? `<div class="log-component">${log.component}</div>` : ''}
                </div>
            </div>
        `;
    });
    
    logsHTML += '</div>';
    document.getElementById('logsSection').innerHTML = logsHTML;
}

// Filtrar logs por nivel
function filterLogs() {
    const level = document.getElementById('logLevel').value;
    const logItems = document.querySelectorAll('.log-item');
    
    logItems.forEach(item => {
        if (level === 'all' || item.dataset.level === level) {
            item.style.display = '';
        } else {
            item.style.display = 'none';
        }
    });
}

// Funciones de utilidad
function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
}

function colorizeProgressBar(elementId, value) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    if (value < 70) {
        element.style.backgroundColor = 'var(--success-color)';
    } else if (value < 90) {
        element.style.backgroundColor = 'var(--warning-color)';
    } else {
        element.style.backgroundColor = 'var(--danger-color)';
    }
}

function mapTemperatureToRotation(temp) {
    // Convertir temperatura a ángulo (30°C - 90°C => -60° - 60°)
    const minTemp = 30;
    const maxTemp = 90;
    const minAngle = -60;
    const maxAngle = 60;
    
    // Limitar temperatura al rango
    const clampedTemp = Math.min(Math.max(temp, minTemp), maxTemp);
    
    // Mapear linealmente
    return minAngle + (clampedTemp - minTemp) * (maxAngle - minAngle) / (maxTemp - minTemp);
}

function getLevelClass(level) {
    level = level.toLowerCase();
    switch(level) {
        case 'error': return 'error';
        case 'warning': return 'warning';
        case 'info': return 'info';
        case 'debug': return 'debug';
        default: return '';
    }
}

function getStatusClass(status) {
    status = status.toLowerCase();
    switch(status) {
        case 'error': case 'critical': return 'critical';
        case 'warning': return 'warning';
        case 'ok': case 'good': case 'normal': return 'good';
        default: return '';
    }
}

function getStatusIcon(status) {
    status = status.toLowerCase();
    switch(status) {
        case 'error': case 'critical': return 'fas fa-exclamation-circle';
        case 'warning': return 'fas fa-exclamation-triangle';
        case 'ok': case 'good': case 'normal': return 'fas fa-check-circle';
        default: return 'fas fa-info-circle';
    }
}

function getStatusTitle(status) {
    status = status.toLowerCase();
    switch(status) {
        case 'error': case 'critical': return 'Sistema en Estado Crítico';
        case 'warning': return 'Sistema con Advertencias';
        case 'ok': case 'good': case 'normal': return 'Sistema Operativo';
        default: return 'Estado Desconocido';
    }
}

function getStatusDescription(status) {
    status = status.toLowerCase();
    switch(status) {
        case 'error': case 'critical': return 'Se han detectado problemas críticos que requieren atención inmediata.';
        case 'warning': return 'Hay advertencias que podrían requerir atención.';
        case 'ok': case 'good': case 'normal': return 'Todos los sistemas funcionan correctamente.';
        default: return 'No se puede determinar el estado del sistema.';
    }
}

function getDefaultSummary(status) {
    status = status.toLowerCase();
    switch(status) {
        case 'error': case 'critical': return 'El sistema presenta problemas críticos que requieren atención inmediata.';
        case 'warning': return 'El sistema tiene advertencias que pueden afectar su funcionamiento.';
        case 'ok': case 'good': case 'normal': return 'Todos los componentes del sistema funcionan correctamente.';
        default: return 'No se puede determinar el estado general del sistema.';
    }
}

// Función auxiliar para testear cámaras



function testCamera(cameraId) {
    showNotification('Procesando prueba de cámara...', 'info');
    
    fetch('/api/camera/test', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ cameraId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error al procesar la prueba');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Prueba de Cámara</h3>
                        <button class="modal-close">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="test-success">
                            <i class="fas fa-check-circle"></i>
                            <h3>Prueba completada con éxito</h3>
                            <p>La cámara está funcionando correctamente.</p>
                        </div>
                        
                        <div class="camera-details">
                            <div class="detail-item">
                                <div class="detail-label">Resolución:</div>
                                <div class="detail-value">${data.resolution || 'Desconocida'}</div>
                            </div>
                            ${data.fps ? `
                            <div class="detail-item">
                                <div class="detail-label">FPS:</div>
                                <div class="detail-value">${data.fps}</div>
                            </div>
                            ` : ''}
                        </div>
                        
                        <div class="test-image">
                            <h4>Imagen de prueba</h4>
                            <img src="${data.test_image}" alt="Imagen de prueba">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn secondary-btn modal-close">Cerrar</button>
                        <button class="btn primary-btn" onclick="testCamera(${cameraId})">Probar de nuevo</button>
                    </div>
                </div>
            `;
        } else {
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Prueba de Cámara</h3>
                        <button class="modal-close">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="test-error">
                            <i class="fas fa-exclamation-circle"></i>
                            <h3>Error en la prueba</h3>
                            <p>${data.message || 'No se pudo conectar con la cámara'}</p>
                        </div>
                        
                        <div class="error-details">
                            ${data.details ? `<p class="error-message">${data.details}</p>` : ''}
                            <div class="error-help">
                                <h4>Posibles soluciones:</h4>
                                <ul>
                                    <li>Verificar que la cámara esté conectada correctamente</li>
                                    <li>Comprobar que la URL o dirección de la cámara sea correcta</li>
                                    <li>Verificar credenciales de acceso (si aplica)</li>
                                    <li>Revisar que la cámara no esté siendo utilizada por otra aplicación</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn secondary-btn modal-close">Cerrar</button>
                        <button class="btn primary-btn" onclick="testCamera(${cameraId})">Intentar nuevamente</button>
                    </div>
                </div>
            `;
        }
        
        document.body.appendChild(modal);
        
        // Configurar cierre de modal
        const closeBtn = modal.querySelector('.modal-close');
        closeBtn.addEventListener('click', () => modal.remove());
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.remove();
        });
    })
    .catch(error => {
        console.error('Error en prueba de cámara:', error);
        showNotification(`Error: ${error.message}`, 'error');
    });
}

// Función auxiliar para generar reporte
function generateReport() {
    showNotification('Generando informe completo del sistema...', 'info');
    
    fetch('/api/system/report', {
        method: 'POST'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error al generar informe');
        }
        return response.blob();
    })
    .then(blob => {
        // Crear URL de descarga
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        
        // Generar nombre de archivo con fecha
        const date = new Date();
        const timestamp = date.toISOString().replace(/[:.]/g, '-').slice(0, 19);
        a.download = `system-report-${timestamp}.pdf`;
        
        document.body.appendChild(a);
        a.click();
        
        // Limpiar
        window.URL.revokeObjectURL(url);
        a.remove();
        
        showNotification('Informe generado y descargado correctamente', 'success');
    })
    .catch(error => {
        console.error('Error generando informe:', error);
        showNotification(`Error: ${error.message}`, 'error');
    });
}

// Mostrar notificación
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = message;
    
    // Añadir al DOM
    document.body.appendChild(notification);
    
    // Animar entrada
    setTimeout(() => {
        notification.style.transform = 'translateY(0)';
        notification.style.opacity = '1';
    }, 10);
    
    // Auto-ocultar después de 5 segundos
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(-20px)';
        
        // Eliminar del DOM después de la animación
        setTimeout(() => notification.remove(), 500);
    }, 5000);
}

// Actualizar tiempo de actividad
function updateUptime() {
    const uptime = document.getElementById('systemUptime');
    if (!uptime) return;
    
    const now = new Date().getTime();
    const diff = now - systemStartTime;
    
    // Calcular horas, minutos, segundos
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);
    
    // Formatear
    const formattedHours = String(hours).padStart(2, '0');
    const formattedMinutes = String(minutes).padStart(2, '0');
    const formattedSeconds = String(seconds).padStart(2, '0');
    
    uptime.textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
}

// Actualizar el estado general del sistema
function updateSystemStatus(status) {
    const statusIcon = document.getElementById('systemStatusIcon');
    const statusText = document.getElementById('systemStatusText');
    const statusDetail = document.getElementById('systemStatusDetail');
    
    if (!statusIcon || !statusText || !statusDetail) return;
    
    const statusClass = getStatusClass(status);
    const icon = getStatusIcon(status);
    const title = getStatusTitle(status);
    const description = getStatusDescription(status);
    
    // Actualizar clases e iconos
    statusIcon.innerHTML = `<i class="${icon}"></i>`;
    statusIcon.className = 'status-icon ' + statusClass;
    
    statusText.textContent = title;
    statusDetail.textContent = description;
}

// Inicializar gráfico de red
function initNetworkChart() {
    const ctx = document.getElementById('networkChart');
    if (!ctx) return;
    
    // Crear gráfico con datos iniciales
    charts.network = new Chart(ctx, {
        type: 'line',
        data: {
            labels: Array(20).fill(''),
            datasets: [
                {
                    label: 'Descarga',
                    data: Array(20).fill(0),
                    borderColor: 'rgba(52, 152, 219, 1)',
                    backgroundColor: 'rgba(52, 152, 219, 0.1)',
                    borderWidth: 2,
                    tension: 0.4,
                    fill: true
                },
                {
                    label: 'Subida',
                    data: Array(20).fill(0),
                    borderColor: 'rgba(46, 204, 113, 1)',
                    backgroundColor: 'rgba(46, 204, 113, 0.1)',
                    borderWidth: 2,
                    tension: 0.4,
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top',
                },
                tooltip: {
                    mode: 'index',
                    intersect: false,
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + ' KB/s';
                        }
                    }
                },
                x: {
                    grid: {
                        display: false
                    }
                }
            },
            animation: {
                duration: 300
            }
        }
    });
}

// Actualizar gráfico de red con nuevos datos
function updateNetworkChart(download, upload) {
    if (!charts.network) return;
    
    // Añadir nuevo punto
    charts.network.data.datasets[0].data.push(download);
    charts.network.data.datasets[1].data.push(upload);
    
    // Eliminar el punto más antiguo si hay más de 20
    if (charts.network.data.datasets[0].data.length > 20) {
        charts.network.data.datasets[0].data.shift();
        charts.network.data.datasets[1].data.shift();
    }
    
    // Actualizar etiquetas
    const time = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit', second:'2-digit'});
    charts.network.data.labels.push(time);
    
    if (charts.network.data.labels.length > 20) {
        charts.network.data.labels.shift();
    }
    
    // Actualizar gráfico
    charts.network.update();
} 

--------------------------------------------------------------------------------

📄 static\js\main.js
--------------------------------------------------------------------------------
// Archivo JavaScript principal
console.log('Sistema de Vigilancia Inteligente cargado');

// Función para mostrar mensajes de estado
function showStatus(message, type = 'success') {
    const statusArea = document.querySelector('.status-message') || createStatusArea();
    statusArea.textContent = message;
    statusArea.className = `status-message ${type}`;
    statusArea.style.display = 'block';
    
    // Ocultar después de 3 segundos
    setTimeout(() => {
        statusArea.style.display = 'none';
    }, 3000);
}

// Crear área de estado si no existe
function createStatusArea() {
    const statusArea = document.createElement('div');
    statusArea.className = 'status-message';
    statusArea.style.position = 'fixed';
    statusArea.style.top = '10px';
    statusArea.style.right = '10px';
    statusArea.style.padding = '10px 20px';
    statusArea.style.borderRadius = '4px';
    statusArea.style.zIndex = '1000';
    document.body.appendChild(statusArea);
    return statusArea;
}

// Gestionar formularios con AJAX
document.addEventListener('DOMContentLoaded', function() {
    // Formulario para añadir cámara
    const addCameraForm = document.querySelector('form[action="/api/cameras/add"]');
    if (addCameraForm) {
        addCameraForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            fetch('/api/cameras/add', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showStatus('Cámara añadida correctamente');
                    // Recargar página para mostrar la nueva cámara
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showStatus(data.message, 'error');
                }
            })
            .catch(error => {
                showStatus('Error al añadir la cámara', 'error');
                console.error('Error:', error);
            });
        });
    }
    
    // Formulario para configuración de alertas
    const alertsForm = document.querySelector('form[action="/api/alerts/settings"]');
    if (alertsForm) {
        alertsForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            fetch('/api/alerts/settings', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showStatus('Configuración guardada');
                } else {
                    showStatus(data.message, 'error');
                }
            })
            .catch(error => {
                showStatus('Error al guardar la configuración', 'error');
                console.error('Error:', error);
            });
        });
    }
    
    // Formulario para cambiar modo
    const modeForm = document.querySelector('form[action="/api/modes/change"]');
    if (modeForm) {
        modeForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            fetch('/api/modes/change', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    showStatus(`Modo cambiado a ${formData.get('mode')}`);
                    // Actualizar el indicador de modo actual sin recargar
                    const modeDisplay = document.querySelector('.mode-display');
                    if (modeDisplay) {
                        modeDisplay.textContent = formData.get('mode');
                    }
                } else {
                    showStatus(data.message, 'error');
                }
            })
            .catch(error => {
                showStatus('Error al cambiar de modo', 'error');
                console.error('Error:', error);
            });
        });
    }
    
    // Añadir botón para eliminar cámaras
    setupCameraDeletion();
});

// Configurar funcionalidad de eliminación de cámaras
function setupCameraDeletion() {
    const cameraItems = document.querySelectorAll('.camera-item');
    
    cameraItems.forEach(item => {
        // Comprobar si ya existe el botón
        if (!item.querySelector('.delete-btn')) {
            const cameraId = item.dataset.id;
            if (cameraId) {
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Eliminar';
                deleteBtn.className = 'delete-btn';
                deleteBtn.onclick = function() {
                    if (confirm('¿Está seguro de que desea eliminar esta cámara?')) {
                        fetch(`/api/cameras/delete/${cameraId}`, {
                            method: 'POST'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === 'success') {
                                showStatus('Cámara eliminada');
                                // Eliminar elemento del DOM
                                item.parentElement.remove();
                            } else {
                                showStatus(data.message, 'error');
                            }
                        })
                        .catch(error => {
                            showStatus('Error al eliminar la cámara', 'error');
                            console.error('Error:', error);
                        });
                    }
                };
                item.appendChild(deleteBtn);
            }
        }
    });
}

// Agregar contador de notificaciones
let unreadNotifications = 0;

// Función para actualizar indicador de notificaciones
function updateNotificationBadge() {
    const badge = document.getElementById('notificationBadge');
    if (!badge) return;
    
    if (unreadNotifications > 0) {
        badge.textContent = unreadNotifications > 9 ? '9+' : unreadNotifications;
        badge.style.display = 'flex';
    } else {
        badge.style.display = 'none';
    }
}

// Función para añadir nueva notificación
function addNotification(notification) {
    unreadNotifications++;
    updateNotificationBadge();
    
    // Guardar en almacenamiento local para persistencia
    const notifications = JSON.parse(localStorage.getItem('notifications') || '[]');
    notifications.unshift({
        id: Date.now(),
        ...notification,
        read: false,
        timestamp: new Date().toISOString()
    });
    
    // Limitar a 20 notificaciones
    if (notifications.length > 20) {
        notifications.pop();
    }
    
    localStorage.setItem('notifications', JSON.stringify(notifications));
}

// Consultar notificaciones nuevas al cargar la página
document.addEventListener('DOMContentLoaded', function() {
    // Mostrar badge inicial
    const notifications = JSON.parse(localStorage.getItem('notifications') || '[]');
    unreadNotifications = notifications.filter(n => !n.read).length;
    updateNotificationBadge();
    
    // Consultar nuevas alertas cada 60 segundos
    setInterval(checkNewAlerts, 60000);
    
    // Primera ejecución
    checkNewAlerts();
});

// Función para verificar alertas nuevas
function checkNewAlerts() {
    // Obtener timestamp de la última alerta
    const notifications = JSON.parse(localStorage.getItem('notifications') || '[]');
    let lastTimestamp = 0;
    
    if (notifications.length > 0) {
        lastTimestamp = new Date(notifications[0].timestamp).getTime() / 1000;
    }
    
    // Consultar alertas nuevas
    fetch(`/api/alerts?since=${lastTimestamp}`)
        .then(response => response.json())
        .then(data => {
            if (data.length > 0) {
                // Procesar nuevas alertas
                data.forEach(alert => {
                    addNotification({
                        type: 'alert',
                        title: `Alerta: ${alert.alert_type}`,
                        message: alert.description,
                        severity: alert.severity,
                        camera_id: alert.camera_id,
                        image_path: alert.image_path
                    });
                });
                
                // Reproducir sonido si hay alertas críticas
                const hasCritical = data.some(a => a.severity === 'high' || a.severity === 'critical');
                if (hasCritical) {
                    playAlertSound();
                }
            }
        })
        .catch(error => console.error("Error consultando alertas:", error));
}

// Reproducir sonido de alerta
function playAlertSound() {
    const audio = new Audio('/static/sounds/alert.mp3');
    audio.play().catch(e => console.log("No se pudo reproducir sonido de alerta"));
}

// Actualizar la lista de enlaces en el menú móvil
function initializeMobileMenu() {
    const menuToggle = document.getElementById('menuToggle');
    const mobileMenu = document.getElementById('mobileMenu');
    
    if (menuToggle && mobileMenu) {
        menuToggle.addEventListener('click', function() {
            mobileMenu.classList.toggle('active');
        });
        
        // Cerrar al hacer clic fuera
        document.addEventListener('click', function(event) {
            if (!mobileMenu.contains(event.target) && !menuToggle.contains(event.target)) {
                mobileMenu.classList.remove('active');
            }
        });
    }
    
    // Actualizar enlaces del menú móvil para incluir prueba de detectores
    const mobileMenuList = document.querySelector('#mobileMenu ul');
    if (mobileMenuList) {
        mobileMenuList.innerHTML = `
            <li><a href="/"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
            <li><a href="/monitoring"><i class="fas fa-video"></i> Monitoreo</a></li>
            <li><a href="/alerts"><i class="fas fa-bell"></i> Alertas</a></li>
            <li><a href="/cameras"><i class="fas fa-cogs"></i> Cámaras</a></li>
            <li><a href="/camera/testing"><i class="fas fa-vial"></i> Prueba de Detectores</a></li>
            <li><a href="/config"><i class="fas fa-sliders-h"></i> Configuración</a></li>
        `;
    }
} 

--------------------------------------------------------------------------------

📄 static\js\monitoring.js
--------------------------------------------------------------------------------
// Variables globales
if (typeof cameras === 'undefined') {
    var cameras = [];
    var currentLayout = 2; // Por defecto, grid de 2x2
    var realTimeEvents = [];
    var statsUpdateInterval = null;
    var activeDetectors = {};
}

// Inicialización
document.addEventListener('DOMContentLoaded', function() {
    // Verificar elementos críticos
    const requiredElements = [
        {id: 'cameraGrid', name: 'Grid de cámaras'},
        {id: 'loadingIndicator', name: 'Indicador de carga'},
        {id: 'eventsContainer', name: 'Contenedor de eventos'}
    ];
    
    let missingElements = [];
    requiredElements.forEach(el => {
        if (!document.getElementById(el.id)) {
            missingElements.push(el.name);
            console.error(`Elemento crítico faltante: ${el.id}`);
        }
    });
    
    if (missingElements.length > 0) {
        console.error("Elementos faltantes en el DOM:", missingElements);
        // Crear un indicador de error
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-banner';
        errorDiv.innerHTML = `
            <div class="error-icon"><i class="fas fa-exclamation-triangle"></i></div>
            <div class="error-content">
                <h3>Error de inicialización</h3>
                <p>Faltan elementos críticos: ${missingElements.join(', ')}</p>
                <p>Por favor, recargue la página o contacte soporte.</p>
                <button onclick="location.reload()">Recargar página</button>
            </div>
        `;
        document.body.prepend(errorDiv);
        return;
    }
    
    document.getElementById('loadingIndicator').style.display = 'flex';
    
    // Verificar que la API esté disponible
    fetch('/api/status')
        .then(response => {
            if (!response.ok) {
                throw new Error("API no disponible");
            }
            return response.json();
        })
        .then(data => {
            // Continuar con la inicialización
            loadCameras();
            startRealtimeUpdates();
            updateAnalytics();
            
            // Actualizar estadísticas cada minuto
            statsUpdateInterval = setInterval(updateAnalytics, 60000);
        })
        .catch(error => {
            console.error("Error crítico:", error);
            document.getElementById('loadingIndicator').style.display = 'none';
            
            // Mostrar error
            const mainContent = document.querySelector('.content-container');
            if (mainContent) {
                mainContent.innerHTML = `
                    <div class="api-error">
                        <h2><i class="fas fa-exclamation-circle"></i> Error de Conexión</h2>
                        <p>No se pudo conectar a la API del sistema. Verifique que el servidor esté en funcionamiento.</p>
                        <p>Error: ${error.message}</p>
                        <button class="retry-btn" onclick="location.reload()">Reintentar</button>
                    </div>
                `;
            }
        });
});

// Cargar cámaras
function loadCameras() {
    fetch('/api/cameras')
        .then(response => response.json())
        .then(data => {
            cameras = data;
            renderCameras();
            
            // Ocultar indicador de carga
            const loadingIndicator = document.getElementById('loadingIndicator');
            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
            }
            
            // Verificar la existencia del placeholder antes de acceder
            const placeholder = document.querySelector('.camera-placeholder');
            if (placeholder) {
                placeholder.style.display = cameras.length === 0 ? 'block' : 'none';
            }
        })
        .catch(error => {
            console.error("Error cargando cámaras:", error);
            const loadingIndicator = document.getElementById('loadingIndicator');
            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
            }
            showAlert('Error al cargar cámaras', 'error');
        });
}

// Renderizar cámaras según layout seleccionado
function renderCameras() {
    const grid = document.getElementById('cameraGrid');
    if (!grid) {
        console.error("No se encontró el elemento cameraGrid");
        return;
    }
    
    grid.innerHTML = '';
    grid.className = `camera-grid layout-${currentLayout}`;
    
    if (cameras.length === 0) {
        grid.innerHTML = `
            <div class="camera-placeholder" style="display: block;">
                <div class="placeholder-content">
                    <i class="fas fa-video-slash"></i>
                    <p>No hay cámaras configuradas</p>
                    <button class="btn primary-btn" onclick="window.location.href='/cameras/advanced'">
                        Configurar Cámaras
                    </button>
                </div>
            </div>
        `;
        return;
    }
    
    for (let i = 0; i < cameras.length; i++) {
        const camera = cameras[i];
        const cameraElement = document.createElement('div');
        cameraElement.className = 'camera-cell';
        cameraElement.innerHTML = `
            <div class="camera-container">
                <div class="camera-header">
                    <h3>${camera.name}</h3>
                    <div class="camera-status ${camera.active ? 'active' : 'inactive'}">
                        <span class="status-indicator"></span>
                        <span class="status-text">${camera.active ? 'Activa' : 'Inactiva'}</span>
                    </div>
                </div>
                <div class="camera-stream">
                    ${camera.active 
                        ? `<div class="camera-stream">
                             <img src="/api/camera/${camera.id}/stream?width=640&height=480" alt="${camera.name}" 
                                  onerror="handleCameraError(this, ${camera.id})">
                             <div class="camera-fallback" id="camera-fallback-${camera.id}" style="display:none">
                               <i class="fas fa-exclamation-triangle"></i>
                               <p>Error en la cámara</p>
                               <button class="retry-btn" onclick="retryCamera(${camera.id})">Reintentar</button>
                             </div>
                           </div>`
                        : `<div class="inactive-camera"><i class="fas fa-video-slash"></i><p>Cámara inactiva</p></div>`
                    }
                </div>
                <div class="camera-controls">
                    <button class="btn-icon" onclick="toggleCamera(${camera.id}, ${!camera.active})">
                        <i class="fas fa-${camera.active ? 'stop' : 'play'}"></i>
                    </button>
                    <button class="btn-icon" onclick="openCameraDetail(${camera.id})">
                        <i class="fas fa-expand"></i>
                    </button>
                    <button class="btn-icon" onclick="testDetectors(${camera.id})">
                        <i class="fas fa-vial"></i>
                    </button>
                    <div class="detection-buttons">
                        <button class="btn-icon" onclick="toggleDetection(${camera.id}, 'pose')" id="pose-btn-${camera.id}">
                            <i class="fas fa-walking"></i>
                        </button>
                        <button class="btn-icon" onclick="toggleDetection(${camera.id}, 'fire')" id="fire-btn-${camera.id}">
                            <i class="fas fa-fire"></i>
                        </button>
                        <button class="btn-icon" onclick="toggleDetection(${camera.id}, 'water')" id="water-btn-${camera.id}">
                            <i class="fas fa-water"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
        grid.appendChild(cameraElement);
    }
}

// Cambiar layout
function setLayout(layout) {
    currentLayout = layout;
    renderCameras();
}

// Cambiar modo de operación
function changeOperationMode() {
    const modeSelect = document.getElementById('operationMode');
    if (!modeSelect) {
        console.error("Elemento operationMode no encontrado");
        return;
    }
    
    const mode = modeSelect.value;
    if (!mode) {
        console.error("Modo no seleccionado");
        return;
    }
    
    console.log(`Cambiando a modo: ${mode}`);
    showAlert(`Cambiando a modo: ${mode}...`, 'info');
    
    // Configuración de la petición
    const requestOptions = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({mode: mode})  // Enviar datos estructurados
    };
    
    // Realizar la solicitud
    fetch(`/api/modes/${mode}`, requestOptions)
        .then(response => {
            if (!response.ok) {
                return response.json().then(data => {
                    throw new Error(data.error || `Error HTTP ${response.status}`);
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showAlert(`Modo cambiado a ${data.name}`, 'success');
                // Recargar cámaras para reflejar los cambios
                loadCameras();
            } else {
                showAlert(data.message || 'Error al cambiar modo', 'error');
            }
        })
        .catch(error => {
            console.error("Error al cambiar modo:", error);
            showAlert(`Error: ${error.message}`, 'error');
        });
}

// Activar/desactivar cámara
function toggleCamera(cameraId, newState) {
    const endpoint = `/api/cameras/${cameraId}/${newState ? 'start' : 'stop'}`;
    
    console.log(`Toggling camera ${cameraId} to ${newState ? 'active' : 'inactive'}`);
    showAlert(`${newState ? 'Activando' : 'Desactivando'} cámara...`, 'info');
    
    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error HTTP ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.status === 'success') {
                // Actualizar estado local
                for (let i = 0; i < cameras.length; i++) {
                    if (cameras[i].id === cameraId) {
                        cameras[i].active = newState;
                        break;
                    }
                }
                
                // Re-renderizar
                renderCameras();
                
                // Mostrar mensaje
                showAlert(`Cámara ${newState ? 'activada' : 'desactivada'}`, 'success');
            } else {
                showAlert(`Error: ${data.message || 'No se pudo cambiar estado de cámara'}`, 'error');
            }
        })
        .catch(error => {
            console.error("Error al cambiar estado de cámara:", error);
            showAlert(`Error al cambiar estado de cámara: ${error.message}`, 'error');
        });
}

// Abrir detalle de cámara
function openCameraDetail(cameraId) {
    // Buscar cámara en el array
    const camera = cameras.find(c => c.id === cameraId);
    if (!camera) return;
    
    // Crear modal
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content camera-detail">
            <div class="modal-header">
                <h3>${camera.name}</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="camera-stream-container">
                    <div class="stream-body" id="stream-${cameraId}">
                        ${camera.active 
                            ? `<img src="/api/camera/${cameraId}/stream?width=1280&height=720" alt="${camera.name}">`
                            : `<div class="inactive-camera"><i class="fas fa-video-slash"></i><p>Cámara inactiva</p></div>`
                        }
                        <div class="stream-overlay">
                            <div class="detection-info" id="detection-info-${cameraId}"></div>
                            <div class="stream-status">
                                <span class="status-indicator"></span>
                                <span class="status-text">En vivo</span>
                            </div>
                        </div>
                    </div>
                    <div class="stream-footer">
                        <div class="detection-controls">
                            <button class="btn detect-btn ${activeDetectors[cameraId] === 'pose' ? 'active' : ''}" 
                                    onclick="toggleDetection(${cameraId}, 'pose')">
                                <i class="fas fa-walking"></i> Postura
                            </button>
                            <button class="btn detect-btn ${activeDetectors[cameraId] === 'fire' ? 'active' : ''}" 
                                    onclick="toggleDetection(${cameraId}, 'fire')">
                                <i class="fas fa-fire"></i> Fuego
                            </button>
                            <button class="btn detect-btn ${activeDetectors[cameraId] === 'water' ? 'active' : ''}" 
                                    onclick="toggleDetection(${cameraId}, 'water')">
                                <i class="fas fa-water"></i> Agua
                            </button>
                            <button class="btn detect-btn ${activeDetectors[cameraId] === 'face' ? 'active' : ''}" 
                                    onclick="toggleDetection(${cameraId}, 'face')">
                                <i class="fas fa-user"></i> Facial
                            </button>
                        </div>
                        <div class="capture-controls">
                            <button class="btn capture-btn" onclick="captureSnapshot(${cameraId})">
                                <i class="fas fa-camera"></i> Capturar
                            </button>
                            <button class="btn record-btn" id="record-btn-${cameraId}" onclick="toggleRecording(${cameraId})">
                                <i class="fas fa-video"></i> <span id="record-text-${cameraId}">Grabar</span>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="camera-info">
                    <h4>Información</h4>
                    <p><strong>Ubicación:</strong> ${camera.location || 'No especificada'}</p>
                    <p><strong>URL:</strong> ${camera.url}</p>
                    <p><strong>Estado:</strong> ${camera.active ? 'Activa' : 'Inactiva'}</p>
                </div>
            </div>
        </div>
    `;
    
    // Agregar al modal de detalles de cámara
    modal.innerHTML += `
        <button class="btn diagnostic-btn" onclick="runCameraDiagnostic(${cameraId})">
            <i class="fas fa-stethoscope"></i> Diagnosticar
        </button>
    `;
    
    // Agregar a la página
    document.body.appendChild(modal);
    
    // Configurar cierre de modal
    modal.querySelector('.modal-close').addEventListener('click', function() {
        modal.remove();
    });
    
    // También cerrar al hacer clic fuera del contenido
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// Activar/desactivar detección
function toggleDetection(cameraId, detectorType) {
    // Verificar si ya está activo
    const isActive = activeDetectors[cameraId] && activeDetectors[cameraId][detectorType];
    const endpoint = isActive ? 
                    `/api/detectors/${detectorType}/disable?camera_id=${cameraId}` : 
                    `/api/detectors/${detectorType}/enable?camera_id=${cameraId}`;
    
    console.log(`Toggling detector ${detectorType} for camera ${cameraId} to ${!isActive}`);
    
    // Mostrar estado en la UI
    const btnId = `#${detectorType}-btn-${cameraId}`;
    const btn = document.querySelector(btnId);
    if (btn) {
        btn.classList.add('loading');
    }
    
    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.status === 'success') {
                // Actualizar estado
                if (!activeDetectors[cameraId]) {
                    activeDetectors[cameraId] = {};
                }
                activeDetectors[cameraId][detectorType] = !isActive;
                
                // Actualizar UI
                if (btn) {
                    btn.classList.remove('loading');
                    if (!isActive) {
                        btn.classList.add('active');
                        // Iniciar polling de resultados
                        pollDetectionResults(cameraId, detectorType);
                    } else {
                        btn.classList.remove('active');
                    }
                }
                
                showAlert(`Detector ${!isActive ? 'activado' : 'desactivado'}`, 'success');
            } else {
                showAlert(data.error || 'Error al cambiar detector', 'error');
                if (btn) btn.classList.remove('loading');
            }
        })
        .catch(error => {
            console.error(`Error toggling detector: ${error.message}`);
            showAlert(`Error: ${error.message}`, 'error');
            if (btn) btn.classList.remove('loading');
        });
}

// Actualizar botones de detección
function updateDetectorButtons(cameraId) {
    const detectorTypes = ['pose', 'fire', 'water', 'face'];
    
    // Actualizar botones grandes en modal
    detectorTypes.forEach(type => {
        const btn = document.querySelector(`.detect-btn[onclick="toggleDetection(${cameraId}, '${type}')"]`);
        if (btn) {
            if (activeDetectors[cameraId] === type) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        }
    });
    
    // Actualizar mini-botones en grid
    detectorTypes.forEach(type => {
        const miniBtn = document.getElementById(`${type}-btn-${cameraId}`);
        if (miniBtn) {
            if (activeDetectors[cameraId] === type) {
                miniBtn.classList.add('active-detector');
            } else {
                miniBtn.classList.remove('active-detector');
            }
        }
    });
}

// Polling para resultados de detección
function pollDetectionResults(cameraId, detectorType) {
    // Solo continuar si el detector sigue activo
    if (activeDetectors[cameraId] !== detectorType) {
        return;
    }
    
    fetch(`/api/detectors/${detectorType}/results?camera_id=${cameraId}`)
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success' && data.results) {
                const infoElement = document.getElementById(`detection-info-${cameraId}`);
                if (infoElement) {
                    infoElement.innerHTML = '';
                    
                    // Procesar según tipo de detector
                    if (detectorType === 'pose' && Array.isArray(data.results)) {
                        data.results.forEach(pose => {
                            if (pose.confidence > 0.5) {
                                infoElement.innerHTML += `
                                    <div class="detection-item">
                                        ${pose.posture}: ${Math.round(pose.confidence * 100)}%
                                    </div>
                                `;
                            }
                        });
                    } else if (detectorType === 'face' && Array.isArray(data.results)) {
                        data.results.forEach(face => {
                            infoElement.innerHTML += `
                                <div class="detection-item">
                                    ${face.name || 'Desconocido'}: ${Math.round(face.confidence * 100)}%
                                </div>
                            `;
                        });
                    } else if (data.results.detected === true) {
                        // Para detectores como fuego/agua que reportan detected: true/false
                        infoElement.innerHTML = `
                            <div class="detection-item alert">
                                ¡${detectorType === 'fire' ? 'Fuego' : 'Agua'} detectado!
                            </div>
                        `;
                    }
                }
            }
            
            // Continuar polling
            setTimeout(() => pollDetectionResults(cameraId, detectorType), 1000);
        })
        .catch(error => {
            console.error("Error polling detection results:", error);
            setTimeout(() => pollDetectionResults(cameraId, detectorType), 2000);
        });
}

// Capturar instantánea
function captureSnapshot(cameraId) {
    console.log(`Capturing snapshot for camera ${cameraId}`);
    showAlert('Capturando imagen...', 'info');
    
    fetch(`/api/camera/${cameraId}/snapshot`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.status === 'success' || data.path) {
                showAlert(`Imagen guardada: ${data.filename}`, 'success');
                
                // Mostrar vista previa
                const preview = document.createElement('div');
                preview.className = 'snapshot-preview';
                preview.innerHTML = `
                    <img src="${data.path}" alt="Snapshot">
                    <div class="snapshot-actions">
                        <a href="${data.path}" download="${data.filename}" class="btn download-btn">
                            <i class="fas fa-download"></i> Descargar
                        </a>
                        <button class="btn close-btn" onclick="this.parentNode.parentNode.remove()">
                            <i class="fas fa-times"></i> Cerrar
                        </button>
                    </div>
                `;
                document.body.appendChild(preview);
                
                // Añadir a eventos
                addNewEvents([{
                    id: Date.now(),
                    timestamp: Date.now() / 1000,
                    formatted_time: new Date().toLocaleTimeString(),
                    event_type: 'snapshot',
                    camera_id: cameraId,
                    camera_name: cameras.find(c => c.id === cameraId)?.name || `Cámara ${cameraId}`,
                    details: {
                        filename: data.filename,
                        path: data.path
                    }
                }]);
            } else {
                showAlert(`Error: ${data.error || 'No se pudo capturar imagen'}`, 'error');
            }
        })
        .catch(error => {
            console.error(`Error capturing snapshot: ${error.message}`);
            showAlert(`Error al capturar imagen: ${error.message}`, 'error');
        });
}

// Iniciar/detener grabación
function toggleRecording(cameraId) {
    const recordBtn = document.getElementById(`record-btn-${cameraId}`);
    const recordText = document.getElementById(`record-text-${cameraId}`);
    
    if (!recordBtn) return;
    
    const isRecording = recordBtn.classList.contains('recording');
    
    if (!isRecording) {
        // Iniciar grabación
        fetch(`/api/camera/${cameraId}/record/start`, {
            method: 'POST'
        })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'recording') {
                    recordBtn.classList.add('recording');
                    if (recordText) recordText.textContent = 'Detener';
                    showAlert('Grabación iniciada', 'success');
                } else {
                    showAlert(`Error: ${data.error}`, 'error');
                }
            })
            .catch(error => {
                console.error("Error al iniciar grabación:", error);
                showAlert('Error al iniciar grabación', 'error');
            });
    } else {
        // Detener grabación
        fetch(`/api/camera/${cameraId}/record/stop`, {
            method: 'POST'
        })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    recordBtn.classList.remove('recording');
                    if (recordText) recordText.textContent = 'Grabar';
                    showAlert(`Grabación guardada: ${data.filename}`, 'success');
                } else {
                    showAlert(`Error: ${data.error}`, 'error');
                }
            })
            .catch(error => {
                console.error("Error al detener grabación:", error);
                showAlert('Error al detener grabación', 'error');
            });
    }
}

// Polling para actualización en tiempo real
function startRealtimeUpdates() {
    // Último timestamp conocido
    let lastEventTime = Math.floor(Date.now() / 1000);
    
    // Función de polling
    function pollUpdates() {
        // Actualizar cámaras
        fetch('/api/cameras/status')
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    // Actualizar solo si hay cambios
                    const camerasChanged = checkCamerasChanged(cameras, data.cameras);
                    if (camerasChanged) {
                        cameras = data.cameras;
                        renderCameras();
                    }
                }
            })
            .catch(error => console.error("Error actualizando cámaras:", error));
            
        // Actualizar eventos recientes
        fetch(`/api/events/recent?since=${lastEventTime}&limit=5`)
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success' && data.events.length > 0) {
                    // Actualizar timestamp
                    lastEventTime = data.server_time;
                    
                    // Agregar nuevos eventos
                    addNewEvents(data.events);
                }
            })
            .catch(error => console.error("Error actualizando eventos:", error));
            
        // Programar siguiente actualización
        setTimeout(pollUpdates, 3000);
    }
    
    // Iniciar polling
    pollUpdates();
}

// Verificar si hubo cambios en las cámaras
function checkCamerasChanged(oldList, newList) {
    if (oldList.length !== newList.length) {
        return true;
    }
    
    for (let i = 0; i < oldList.length; i++) {
        const oldCam = oldList[i];
        const newCam = newList.find(c => c.id === oldCam.id);
        
        if (!newCam) {
            return true;
        }
        
        if (oldCam.active !== newCam.active || 
            oldCam.stats?.status !== newCam.stats?.status) {
            return true;
        }
    }
    
    return false;
}

// Agregar nuevos eventos al panel
function addNewEvents(events) {
    const container = document.getElementById('eventsContainer');
    if (!container) return;
    
    // Eliminar mensaje de "no hay eventos" si existe
    const noEventsMsg = container.querySelector('.no-events');
    if (noEventsMsg) {
        noEventsMsg.remove();
    }
    
    // Agregar nuevos eventos
    events.forEach(event => {
        // Verificar si ya existe
        if (document.getElementById(`event-${event.id}`)) {
            return;
        }
        
        // Crear elemento de evento
        const eventElement = document.createElement('div');
        eventElement.id = `event-${event.id}`;
        eventElement.className = `event-item ${getEventClass(event.event_type)}`;
        
        // Determinar icono según tipo
        const icon = getEventIcon(event.event_type);
        
        // Crear mensaje según tipo
        const message = getEventMessage(event);
        
        // Montar HTML
        eventElement.innerHTML = `
            <div class="event-icon">
                <i class="${icon}"></i>
            </div>
            <div class="event-content">
                <div class="event-header">
                    <span>${event.camera_name}</span>
                    <span>${event.formatted_time}</span>
                </div>
                <div class="event-message">
                    ${message}
                </div>
                ${event.details.image_path ? `
                <div class="event-image">
                    <img src="${event.details.image_path}" alt="Captura">
                </div>` : ''}
            </div>
        `;
        
        // Insertar al inicio
        container.insertBefore(eventElement, container.firstChild);
        
        // Notificar si es un evento importante
        if (isImportantEvent(event)) {
            notifyEvent(event);
        }
        
        // Limitar número de eventos mostrados
        const events = container.querySelectorAll('.event-item');
        if (events.length > 20) {
            for (let i = 20; i < events.length; i++) {
                events[i].remove();
            }
        }
    });
}

// Determinar clase CSS según tipo de evento
function getEventClass(eventType) {
    if (eventType.includes('fire') || eventType.includes('water')) {
        return 'alert';
    } else if (eventType.includes('person') || eventType.includes('pose')) {
        return 'person';
    } else if (eventType.includes('motion')) {
        return 'motion';
    } else if (eventType.includes('snapshot')) {
        return 'snapshot';
    }
    return '';
}

// Determinar icono según tipo de evento
function getEventIcon(eventType) {
    if (eventType.includes('fire')) {
        return 'fas fa-fire';
    } else if (eventType.includes('water')) {
        return 'fas fa-water';
    } else if (eventType.includes('pose')) {
        return 'fas fa-walking';
    } else if (eventType.includes('face')) {
        return 'fas fa-user';
    } else if (eventType.includes('snapshot')) {
        return 'fas fa-camera';
    } else if (eventType.includes('recording')) {
        return 'fas fa-video';
    } else if (eventType.includes('motion')) {
        return 'fas fa-running';
    }
    return 'fas fa-bell';
}

// Crear mensaje según tipo de evento
function getEventMessage(event) {
    const type = event.event_type;
    
    if (type.includes('fire')) {
        return '🔥 <strong>Alerta:</strong> Posible fuego detectado';
    } else if (type.includes('water')) {
        return '💧 <strong>Alerta:</strong> Posible inundación detectada';
    } else if (type.includes('pose')) {
        const poses = event.details.results ? 
                     event.details.results.map(p => p.posture).join(', ') : 
                     'comportamiento sospechoso';
        return `👤 Detección de postura: ${poses}`;
    } else if (type.includes('face')) {
        const name = event.details.name || 'Persona desconocida';
        return `👤 Reconocimiento facial: ${name}`;
    } else if (type.includes('snapshot')) {
        return '📸 Captura de imagen realizada';
    } else if (type.includes('recording')) {
        const duration = event.details.duration || '';
        return `🎥 Grabación ${duration ? `(${duration}s)` : ''}`;
    } else if (type.includes('motion')) {
        return '⚠️ Movimiento detectado';
    }
    
    return `Evento: ${type}`;
}

// Determinar si un evento es importante (para notificaciones)
function isImportantEvent(event) {
    const type = event.event_type;
    return type.includes('fire') || 
           type.includes('water') || 
           (type.includes('face') && event.details.confidence > 0.8);
}

// Mostrar notificación para eventos importantes
function notifyEvent(event) {
    // Solo notificar si la API es compatible
    if (!('Notification' in window)) {
        return;
    }
    
    // Verificar permiso
    if (Notification.permission === 'granted') {
        // Crear notificación
        const notification = new Notification('Alerta de Seguridad', {
            body: getEventMessage(event).replace(/<[^>]*>/g, ''),
            icon: '/static/img/alert-icon.png'
        });
        
        // Cerrar automáticamente después de 5 segundos
        setTimeout(() => notification.close(), 5000);
    }
    // Solicitar permiso si no está concedido
    else if (Notification.permission !== 'denied') {
        Notification.requestPermission();
    }
}

// Actualizar estadísticas
function updateAnalytics() {
    fetch('/api/summary/today')
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                // Actualizar indicadores
                document.getElementById('personCount').textContent = 
                    data.detectors.pose || 0;
                document.getElementById('alertCount').textContent = 
                    data.stats.alerts || 0;
                document.getElementById('incidentCount').textContent = 
                    (data.severity.high || 0) + (data.severity.critical || 0);
                document.getElementById('uptime').textContent = 
                    data.stats.uptime || '0h';
            }
        })
        .catch(error => console.error("Error actualizando estadísticas:", error));
}

// Limpiar eventos
function clearEvents() {
    const container = document.getElementById('eventsContainer');
    if (!container) return;
    
    container.innerHTML = '<div class="no-events">No hay eventos recientes</div>';
}

// Mostrar alerta en pantalla
function showAlert(message, type = 'info') {
    const alertContainer = document.createElement('div');
    alertContainer.className = `alert alert-${type}`;
    alertContainer.innerHTML = message;
    
    document.body.appendChild(alertContainer);
    
    // Posicionar alerta
    alertContainer.style.position = 'fixed';
    alertContainer.style.top = '20px';
    alertContainer.style.right = '20px';
    alertContainer.style.zIndex = '9999';
    alertContainer.style.minWidth = '300px';
    alertContainer.style.maxWidth = '500px';
    
    // Efecto de entrada
    alertContainer.style.opacity = '0';
    alertContainer.style.transform = 'translateY(-20px)';
    alertContainer.style.transition = 'opacity 0.3s, transform 0.3s';
    
    setTimeout(() => {
        alertContainer.style.opacity = '1';
        alertContainer.style.transform = 'translateY(0)';
    }, 10);
    
    // Auto-ocultar después de 5 segundos
    setTimeout(() => {
        alertContainer.style.opacity = '0';
        alertContainer.style.transform = 'translateY(-20px)';
        
        // Eliminar del DOM después de la animación
        setTimeout(() => {
            alertContainer.remove();
        }, 300);
    }, 5000);
}

// Función para ejecutar diagnóstico
function runCameraDiagnostic(cameraId) {
    showAlert('Ejecutando diagnóstico, espere...', 'info');
    
    fetch(`/api/cameras/${cameraId}/diagnostic`, {
        method: 'POST'
    })
        .then(response => response.json())
        .then(data => {
            // Crear ventana de diagnóstico
            const diagnosticModal = document.createElement('div');
            diagnosticModal.className = 'modal diagnostic-modal';
            
            // Determinar resultados para mostrar
            const testsHtml = Object.entries(data.tests)
                .map(([test, result]) => {
                    const icon = result === 'passed' 
                        ? '<i class="fas fa-check-circle" style="color: green;"></i>' 
                        : '<i class="fas fa-times-circle" style="color: red;"></i>';
                    return `<div class="test-result"><span>${test.replace('_', ' ')}</span> ${icon}</div>`;
                })
                .join('');
                
            // Construir sugerencias
            const suggestionsHtml = data.suggestions.length > 0
                ? `<div class="diagnostic-suggestions">
                    <h4>Sugerencias:</h4>
                    <ul>
                        ${data.suggestions.map(s => `<li>${s}</li>`).join('')}
                    </ul>
                  </div>`
                : '';
                
            // Imagen de prueba
            const imageHtml = data.test_image 
                ? `<div class="test-image">
                    <h4>Imagen de prueba:</h4>
                    <img src="${data.test_image}" alt="Test image">
                  </div>`
                : '';
            
            // Construir contenido modal
            diagnosticModal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Diagnóstico: ${data.name}</h3>
                        <button class="modal-close">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="diagnostic-results">
                            <h4>Resultados:</h4>
                            ${testsHtml}
                        </div>
                        
                        ${data.camera_info ? `
                        <div class="camera-info">
                            <h4>Información:</h4>
                            <p>Resolución: ${data.camera_info.resolution}</p>
                            <p>FPS: ${data.camera_info.fps}</p>
                        </div>
                        ` : ''}
                        
                        ${suggestionsHtml}
                        ${imageHtml}
                    </div>
                    <div class="modal-footer">
                        <button class="btn primary-btn" onclick="this.closest('.modal').style.display='none'">
                            Cerrar
                        </button>
                        <button class="btn" onclick="runCameraDiagnostic(${cameraId})">
                            Ejecutar de nuevo
                        </button>
                    </div>
                </div>
            `;
            
            // Mostrar modal
            document.body.appendChild(diagnosticModal);
            
            // Cerrar modal al hacer clic en X o fuera
            const closeBtn = diagnosticModal.querySelector('.modal-close');
            closeBtn.addEventListener('click', () => {
                diagnosticModal.remove();
            });
            
            // Cerrar al hacer clic fuera
            diagnosticModal.addEventListener('click', (e) => {
                if (e.target === diagnosticModal) {
                    diagnosticModal.remove();
                }
            });
        })
        .catch(error => {
            console.error("Error en diagnóstico:", error);
            showAlert('Error al ejecutar diagnóstico', 'error');
        });
}

// Agregar función para diagnóstico rápido
function quickDiagnose() {
    showAlert('Iniciando diagnóstico rápido del sistema...', 'info');
    
    // Verificar API principal
    fetch('/api/status')
        .then(response => {
            if (!response.ok) throw new Error("API status check failed");
            return response.json();
        })
        .then(data => {
            showAlert('API principal funcionando correctamente', 'success');
            
            // Verificar interfaces
            return fetch('/api/cameras/test-interfaces');
        })
        .then(response => {
            if (!response.ok) throw new Error("Interface check failed");
            return response.json();
        })
        .then(data => {
            const summary = `
                <strong>Diagnóstico del Sistema</strong><br>
                Cámaras: ${data.cameras_count} (${data.active_cameras} activas)<br>
                Alertas: ${data.total_alerts} (${data.open_alerts} pendientes)<br>
                Sistema: ${data.server_info.system} (${data.server_info.python_version})
            `;
            showAlert(summary, 'success');
        })
        .catch(error => {
            showAlert(`Error en diagnóstico: ${error.message}`, 'error');
            console.error("Diagnóstico fallido:", error);
        });
}

// Agregar estas funciones de ayuda
function handleCameraError(imgElement, cameraId) {
    console.log(`Error en cámara ${cameraId}`);
    imgElement.style.display = 'none';
    document.getElementById(`camera-fallback-${cameraId}`).style.display = 'flex';
    // Actualizar el estado de la cámara en la interfaz
    const statusIndicator = document.querySelector(`.camera-status-${cameraId}`);
    if (statusIndicator) {
        statusIndicator.classList.remove('active');
        statusIndicator.classList.add('error');
        statusIndicator.querySelector('.status-text').textContent = 'Error';
    }
}

function retryCamera(cameraId) {
    // Intentar activar la cámara de nuevo
    toggleCamera(cameraId, true);
    // Recargar la imagen con un timestamp para evitar caché
    const img = document.querySelector(`#stream-${cameraId} img`);
    if (img) {
        img.src = `/api/camera/${cameraId}/stream?width=640&height=480&t=${Date.now()}`;
        img.style.display = 'block';
        document.getElementById(`camera-fallback-${cameraId}`).style.display = 'none';
    }
}

// Función para probar detectores
function testDetectors(cameraId) {
    showAlert(`Probando detectores en cámara ${cameraId}...`, 'info');
    
    // Iniciar solicitud
    fetch(`/api/cameras/${cameraId}/test-detectors`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            detectors: ['pose', 'fire', 'water', 'face']
        })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.message || 'Error desconocido');
            });
        }
        return response.json();
    })
    .then(data => {
        // Crear ventana modal para mostrar resultados
        const modal = document.createElement('div');
        modal.className = 'modal detector-test-modal';
        
        // Construir HTML para cada detector
        let detectorsHTML = '';
        
        // Detector de personas
        if (data.results.pose) {
            const persons = data.results.pose;
            detectorsHTML += `
                <div class="detector-result">
                    <h4>Detector de Personas</h4>
                    <p>${persons.length} persona(s) detectada(s)</p>
                    <ul>
                        ${persons.map(p => `<li>Confianza: ${(p.confidence * 100).toFixed(2)}%</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        // Detector de fuego
        if (data.results.fire) {
            const fire = data.results.fire;
            detectorsHTML += `
                <div class="detector-result ${fire.detected ? 'alert' : ''}">
                    <h4>Detector de Fuego</h4>
                    <p>${fire.detected ? '🔥 FUEGO DETECTADO!' : 'No se detectó fuego'}</p>
                    ${fire.detected ? `<p>Confianza: ${(fire.confidence * 100).toFixed(2)}%</p>` : ''}
                </div>
            `;
        }
        
        // Detector de agua
        if (data.results.water) {
            const water = data.results.water;
            detectorsHTML += `
                <div class="detector-result ${water.detected ? 'alert' : ''}">
                    <h4>Detector de Agua</h4>
                    <p>${water.detected ? '💧 AGUA DETECTADA!' : 'No se detectó agua'}</p>
                    ${water.detected ? `<p>Confianza: ${(water.confidence * 100).toFixed(2)}%</p>` : ''}
                </div>
            `;
        }
        
        // Detector facial
        if (data.results.face) {
            const faces = data.results.face;
            detectorsHTML += `
                <div class="detector-result">
                    <h4>Reconocimiento Facial</h4>
                    <p>${faces.length} rostro(s) detectado(s)</p>
                    <ul>
                        ${faces.map(f => `<li>${f.name} (Confianza: ${(f.confidence * 100).toFixed(2)}%)</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        modal.innerHTML = `
            <div class="modal-content large">
                <div class="modal-header">
                    <h3>Resultados de Detección - Cámara ${cameraId}</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="detection-images">
                        <div class="image-container">
                            <h4>Imagen Original</h4>
                            <img src="${data.original_image}" alt="Original" />
                        </div>
                        <div class="image-container">
                            <h4>Detecciones</h4>
                            <img src="${data.detection_image}" alt="Detecciones" />
                        </div>
                    </div>
                    
                    <div class="detection-results">
                        ${detectorsHTML}
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn primary-btn" onclick="this.closest('.modal').remove()">Cerrar</button>
                    <button class="btn" onclick="testDetectors(${cameraId})">Probar de nuevo</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Configurar cierre de modal
        const closeBtn = modal.querySelector('.modal-close');
        closeBtn.addEventListener('click', () => modal.remove());
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.remove();
        });
    })
    .catch(error => {
        console.error("Error en prueba de detectores:", error);
        showAlert(`Error: ${error.message}`, 'error');
    });
} 

--------------------------------------------------------------------------------

📄 templates\advanced_detectors.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Detectores Avanzados - Sistema de Vigilancia IA{% endblock %}

{% block content %}
<style>
    .detector-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .detector-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    .detector-title {
        font-size: 18px;
        font-weight: bold;
        margin: 0;
    }
    
    .detector-status {
        display: flex;
        align-items: center;
    }
    
    .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 14px;
        margin-right: 10px;
    }
    
    .status-active {
        background-color: #d4edda;
        color: #155724;
    }
    
    .status-inactive {
        background-color: #f8d7da;
        color: #721c24;
    }
    
    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }
    
    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }
    
    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }
    
    input:checked + .slider {
        background-color: #2196F3;
    }
    
    input:checked + .slider:before {
        transform: translateX(26px);
    }
    
    .stats-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
    }
    
    .stats-table th, .stats-table td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }
    
    .stats-table th {
        background-color: #f8f9fa;
    }
</style>

<h2>Detectores Avanzados de IA</h2>

<div class="detector-container">
    <div class="detector-overview">
        <h3>Visión General</h3>
        <p>El sistema cuenta con varios detectores avanzados que se ejecutan automáticamente al procesar el video de las cámaras. Cada detector está especializado en identificar comportamientos o situaciones específicas.</p>
        
        <div class="stats-overview" id="global-stats">
            <p>Cargando estadísticas globales...</p>
        </div>
    </div>
    
    <div id="detectors-list">
        <p>Cargando detectores...</p>
    </div>
</div>

{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Cargar lista de detectores
        loadDetectors();
        
        // Actualizar cada 5 segundos
        setInterval(loadDetectors, 5000);
    });
    
    function loadDetectors() {
        fetch('/api/detectors')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    showError(data.error);
                    return;
                }
                
                updateGlobalStats(data.stats);
                renderDetectors(data.detectors, data.stats);
            })
            .catch(error => {
                console.error('Error:', error);
                showError('Error al cargar detectores');
            });
    }
    
    function updateGlobalStats(stats) {
        let html = `
            <table class="stats-table">
                <tr>
                    <th>Frames Procesados</th>
                    <td>${stats.frames_processed || 0}</td>
                </tr>
                <tr>
                    <th>Tiempo Medio de Procesamiento</th>
                    <td>${(stats.avg_processing_time || 0).toFixed(2)} ms</td>
                </tr>
                <tr>
                    <th>Tamaño de Cola</th>
                    <td>${stats.queue_size || 0} frames</td>
                </tr>
            </table>
        `;
        
        document.getElementById('global-stats').innerHTML = html;
    }
    
    function renderDetectors(detectors, stats) {
        const container = document.getElementById('detectors-list');
        
        if (!detectors || detectors.length === 0) {
            container.innerHTML = '<p>No hay detectores registrados</p>';
            return;
        }
        
        let html = '';
        
        detectors.forEach(detector => {
            const detectorStats = stats.detectors && stats.detectors[detector] ? stats.detectors[detector] : {};
            const lastExecutionTime = detectorStats.last_execution ? new Date(detectorStats.last_execution * 1000).toLocaleTimeString() : 'Nunca';
            const isActive = detectorStats.active !== false;
            
            html += `
                <div class="detector-card" data-detector="${detector}">
                    <div class="detector-header">
                        <h4 class="detector-title">${formatDetectorName(detector)}</h4>
                        <div class="detector-status">
                            <span class="status-badge ${isActive ? 'status-active' : 'status-inactive'}">${isActive ? 'Activo' : 'Inactivo'}</span>
                            <label class="toggle-switch">
                                <input type="checkbox" 
                                       class="detector-toggle" 
                                       data-detector="${detector}" 
                                       ${isActive ? 'checked' : ''} 
                                       onchange="toggleDetector('${detector}', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="detector-details">
                        <p>${getDetectorDescription(detector)}</p>
                        
                        <h5>Estadísticas</h5>
                        <table class="stats-table">
                            <tr>
                                <th>Intervalo</th>
                                <td>${detectorStats.interval ? detectorStats.interval.toFixed(1) + ' s' : 'N/A'}</td>
                            </tr>
                            <tr>
                                <th>Última Ejecución</th>
                                <td>${lastExecutionTime}</td>
                            </tr>
                            <tr>
                                <th>Tiempo desde Última Ejecución</th>
                                <td>${detectorStats.time_since_last ? detectorStats.time_since_last.toFixed(1) + ' s' : 'N/A'}</td>
                            </tr>
                        </table>
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }
    
    function formatDetectorName(detector) {
        // Convertir snake_case a formato legible
        const parts = detector.split('_');
        return parts.map(part => part.charAt(0).toUpperCase() + part.slice(1)).join(' ');
    }
    
    function getDetectorDescription(detector) {
        const descriptions = {
            'pose_detection': 'Detecta posturas corporales como personas con brazos levantados o caídas al suelo.',
            'fire_smoke_detection': 'Identifica presencia de fuego o humo en la imagen.',
            'water_flood_detection': 'Detecta inundaciones o acumulación anormal de agua.',
            'face_recognition': 'Reconoce rostros de personas y los compara con una base de datos.'
        };
        
        return descriptions[detector] || 'Detector especializado';
    }
    
    function toggleDetector(detectorId, active) {
        fetch(`/api/detectors/${detectorId}/toggle`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ active: active })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                showError(data.error);
                // Revertir el toggle
                const checkbox = document.querySelector(`.detector-toggle[data-detector="${detectorId}"]`);
                if (checkbox) {
                    checkbox.checked = !active;
                }
            } else {
                showSuccess(`Detector ${formatDetectorName(detectorId)} ${active ? 'activado' : 'desactivado'}`);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showError('Error al cambiar estado del detector');
            // Revertir el toggle
            const checkbox = document.querySelector(`.detector-toggle[data-detector="${detectorId}"]`);
            if (checkbox) {
                checkbox.checked = !active;
            }
        });
    }
    
    function showError(message) {
        const alertElement = document.createElement('div');
        alertElement.className = 'alert alert-danger alert-dismissible fade show';
        alertElement.innerHTML = `
            <strong>Error:</strong> ${message}
            <button type="button" class="close" data-dismiss="alert">&times;</button>
        `;
        
        const container = document.querySelector('.detector-container');
        container.insertBefore(alertElement, container.firstChild);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            alertElement.classList.remove('show');
            setTimeout(() => alertElement.remove(), 150);
        }, 5000);
    }
    
    function showSuccess(message) {
        const alertElement = document.createElement('div');
        alertElement.className = 'alert alert-success alert-dismissible fade show';
        alertElement.innerHTML = `
            <strong>Éxito:</strong> ${message}
            <button type="button" class="close" data-dismiss="alert">&times;</button>
        `;
        
        const container = document.querySelector('.detector-container');
        container.insertBefore(alertElement, container.firstChild);
        
        // Auto-dismiss after 3 seconds
        setTimeout(() => {
            alertElement.classList.remove('show');
            setTimeout(() => alertElement.remove(), 150);
        }, 3000);
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\advanced_settings.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Configuración Avanzada - {{ config.app_name }}{% endblock %}

{% block extra_css %}
<style>
.advanced-settings-container {
    padding: 20px;
}

.settings-section {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 20px;
    overflow: hidden;
}

.settings-header {
    background: #f5f7fa;
    padding: 15px 20px;
    border-bottom: 1px solid #e6e9ed;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

...(about 67 lines omitted)...
</style>
{% endblock %}

{% block content %}
<div class="container-fluid p-4 advanced-settings-container">
    <div class="row mb-4">
        <div class="col-12">
            <h2>Configuración Avanzada</h2>
            <p class="text-muted">Personaliza el sistema según tus preferencias y necesidades específicas.</p>
        </div>
    </div>
    
    <div class="row">
        <div class="col-lg-3 col-md-4 mb-4">
            <!-- Menú lateral de configuración -->
            <div class="list-group">
                <a href="#appearance" class="list-group-item list-group-item-action active" data-bs-toggle="list">
                    <i class="fas fa-palette me-2"></i> Apariencia
                </a>
                <a href="#detection" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-eye me-2"></i> Detección
                </a>
                <a href="#alerts" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-bell me-2"></i> Alertas
                </a>
                <a href="#displays" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-desktop me-2"></i> Visualización
                </a>
                <a href="#advanced" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-cogs me-2"></i> Avanzado
                </a>
                <a href="#ai" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-brain me-2"></i> IA y Modelos
                </a>
            </div>
        </div>
        
        <div class="col-lg-9 col-md-8">
            <!-- Contenido de configuración -->
            <div class="tab-content">
                <!-- Sección: Apariencia -->
                <div class="tab-pane fade show active" id="appearance">
                    <div class="settings-section">
                        <div class="settings-header">
                            <h4>Apariencia</h4>
                            <div>
                                <button class="btn btn-sm btn-outline-secondary" id="resetAppearance">
                                    <i class="fas fa-undo me-1"></i> Restablecer
                                </button>
                            </div>
                        </div>
                        <div class="settings-content">
                            <!-- Tema de color -->
                            <div class="settings-group">
                                <h5 class="settings-group-title">Tema de color</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="colorTheme">Seleccionar tema</label>
                                            <select class="form-select" id="colorTheme">
                                                <option value="light">Claro</option>
                                                <option value="dark">Oscuro</option>
                                                <option value="blue">Azul</option>
                                                <option value="green">Verde</option>
                                                <option value="custom">Personalizado</option>
                                            </select>
                                            <p class="setting-description">Cambia el aspecto general del sistema</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label>Color de acento</label>
                                            <div class="color-picker">
                                                <div class="color-option selected" style="background-color: #3498db;" data-color="#3498db"></div>
                                                <div class="color-option" style="background-color: #2ecc71;" data-color="#2ecc71"></div>
                                                <div class="color-option" style="background-color: #e74c3c;" data-color="#e74c3c"></div>
                                                <div class="color-option" style="background-color: #f39c12;" data-color="#f39c12"></div>
                                                <div class="color-option" style="background-color: #9b59b6;" data-color="#9b59b6"></div>
                                                <div class="color-option" style="background-color: #34495e;" data-color="#34495e"></div>
                                            </div>
                                            <p class="setting-description">Color principal de resaltado</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Visualización -->
                            <div class="settings-group">
                                <h5 class="settings-group-title">Visualización</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="fontSize">Tamaño de fuente</label>
                                            <select class="form-select" id="fontSize">
                                                <option value="small">Pequeño</option>
                                                <option value="medium" selected>Medio</option>
                                                <option value="large">Grande</option>
                                                <option value="x-large">Extra grande</option>
                                            </select>
                                            <p class="setting-description">Ajusta el tamaño del texto en la interfaz</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="animationSpeed">Velocidad de animaciones</label>
                                            <select class="form-select" id="animationSpeed">
                                                <option value="none">Sin animaciones</option>
                                                <option value="slow">Lento</option>
                                                <option value="medium" selected>Normal</option>
                                                <option value="fast">Rápido</option>
                                            </select>
                                            <p class="setting-description">Velocidad de las transiciones y animaciones</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="compactMode" checked>
                                                <label class="form-check-label" for="compactMode">Modo compacto</label>
                                            </div>
                                            <p class="setting-description">Reduce el espacio para mostrar más información</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="sidebarCollapsed">
                                                <label class="form-check-label" for="sidebarCollapsed">Barra lateral contraída por defecto</label>
                                            </div>
                                            <p class="setting-description">Inicia con la barra lateral minimizada</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Vista previa del tema -->
                            <div class="settings-group">
                                <h5 class="settings-group-title">Vista previa</h5>
                                <div class="theme-preview" id="themePreview">
                                    <div class="theme-preview-header"></div>
                                    <div class="theme-preview-sidebar"></div>
                                    <div class="theme-preview-content"></div>
                                    <div class="theme-preview-box"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Sección: Detección -->
                <div class="tab-pane fade" id="detection">
                    <div class="settings-section">
                        <div class="settings-header">
                            <h4>Configuración de Detección</h4>
                            <div>
                                <button class="btn btn-sm btn-outline-secondary" id="resetDetection">
                                    <i class="fas fa-undo me-1"></i> Restablecer
                                </button>
                            </div>
                        </div>
                        <div class="settings-content">
                            <!-- Configuración de detección general -->
                            <div class="settings-group">
                                <h5 class="settings-group-title">Configuración general</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="detectionThreshold">Umbral de confianza</label>
                                            <div class="d-flex align-items-center">
                                                <input type="range" class="form-range" id="detectionThreshold" min="0" max="1" step="0.05" value="0.5">
                                                <span class="ms-2" id="thresholdValue">0.5</span>
                                            </div>
                                            <p class="setting-description">Confianza mínima para considerar una detección válida</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="detectionInterval">Intervalo de detección (ms)</label>
                                            <input type="number" class="form-control" id="detectionInterval" value="300" min="100" max="2000" step="100">
                                            <p class="setting-description">Tiempo entre detecciones consecutivas</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="frameSampling">Muestreo de frames</label>
                                            <select class="form-select" id="frameSampling">
                                                <option value="1">Todos los frames</option>
                                                <option value="2" selected>1 de cada 2 frames</option>
                                                <option value="3">1 de cada 3 frames</option>
                                                <option value="5">1 de cada 5 frames</option>
                                                <option value="10">1 de cada 10 frames</option>
                                            </select>
                                            <p class="setting-description">Frecuencia de procesamiento de frames</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="enableEnsemble" checked>
                                                <label class="form-check-label" for="enableEnsemble">Habilitar detección por ensemble</label>
                                            </div>
                                            <p class="setting-description">Utiliza múltiples modelos para mayor precisión</p>
                                            <button class="btn btn-sm btn-outline-primary mt-1" data-bs-toggle="modal" data-bs-target="#ensembleConfigModal">
                                                <i class="fas fa-cog me-1"></i> Configurar modelos
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Visualización de detecciones -->
                            <div class="settings-group">
                                <h5 class="settings-group-title">Visualización de detecciones</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="showBboxes" checked>
                                                <label class="form-check-label" for="showBboxes">Mostrar cajas delimitadoras</label>
                                            </div>
                                            <p class="setting-description">Dibujar cajas alrededor de objetos detectados</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="showLabels" checked>
                                                <label class="form-check-label" for="showLabels">Mostrar etiquetas</label>
                                            </div>
                                            <p class="setting-description">Mostrar clase y confianza de cada detección</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="showTrackingPaths">
                                                <label class="form-check-label" for="showTrackingPaths">Mostrar trayectorias</label>
                                            </div>
                                            <p class="setting-description">Mostrar el recorrido de objetos rastreados</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="bboxStyle">Estilo de cajas delimitadoras</label>
                                            <select class="form-select" id="bboxStyle">
                                                <option value="solid" selected>Sólido</option>
                                                <option value="dashed">Discontinuo</option>
                                                <option value="corners">Solo esquinas</option>
                                                <option value="fill">Relleno transparente</option>
                                            </select>
                                            <p class="setting-description">Apariencia de las cajas de detección</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Sección: Alertas -->
                <div class="tab-pane fade" id="alerts">
                    <div class="settings-section">
                        <div class="settings-header">
                            <h4>Configuración de Alertas</h4>
                            <div>
                                <button class="btn btn-sm btn-outline-secondary" id="resetAlerts">
                                    <i class="fas fa-undo me-1"></i> Restablecer
                                </button>
                            </div>
                        </div>
                        <div class="settings-content">
                            <!-- Configuración de notificaciones -->
                            <div class="settings-group">
                                <h5 class="settings-group-title">Notificaciones</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="alertSound">Sonido de alerta</label>
                                            <select class="form-select" id="alertSound">
                                                <option value="none">Sin sonido</option>
                                                <option value="standard" selected>Estándar</option>
                                                <option value="urgent">Urgente</option>
                                                <option value="soft">Suave</option>
                                                <option value="custom">Personalizado</option>
                                            </select>
                                            <p class="setting-description">Sonido para nuevas alertas</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="minAlertSeverity">Severidad mínima para notificación</label>
                                            <select class="form-select" id="minAlertSeverity">
                                                <option value="info">Información</option>
                                                <option value="warning" selected>Advertencia</option>
                                                <option value="critical">Crítica</option>
                                            </select>
                                            <p class="setting-description">Nivel mínimo para recibir notificaciones</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="desktopNotifications" checked>
                                                <label class="form-check-label" for="desktopNotifications">Notificaciones de escritorio</label>
                                            </div>
                                            <p class="setting-description">Mostrar notificaciones en el sistema operativo</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="emailNotifications">
                                                <label class="form-check-label" for="emailNotifications">Notificaciones por email</label>
                                            </div>
                                            <p class="setting-description">Enviar alertas por correo electrónico</p>
                                            <button class="btn btn-sm btn-outline-primary mt-1" data-bs-toggle="modal" data-bs-target="#emailConfigModal">
                                                <i class="fas fa-cog me-1"></i> Configurar email
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Configuración de IA generativa -->
                            <div class="settings-group">
                                <h5 class="settings-group-title">Descripción de alertas con IA</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="enableAIDescriptions" checked>
                                                <label class="form-check-label" for="enableAIDescriptions">Habilitar descripciones con IA</label>
                                            </div>
                                            <p class="setting-description">Generar descripciones detalladas de alertas usando IA</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="aiDescriptionModel">Modelo de IA</label>
                                            <select class="form-select" id="aiDescriptionModel">
                                                <option value="gpt-3.5-turbo" selected>GPT-3.5 Turbo</option>
                                                <option value="gpt-4">GPT-4</option>
                                                <option value="local">Modelo local</option>
                                            </select>
                                            <p class="setting-description">Modelo a utilizar para generar descripciones</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="aiTemperature">Creatividad del modelo (temperatura)</label>
                                            <div class="d-flex align-items-center">
                                                <input type="range" class="form-range" id="aiTemperature" min="0" max="1" step="0.1" value="0.7">
                                                <span class="ms-2" id="aiTemperatureValue">0.7</span>
                                            </div>
                                            <p class="setting-description">Mayor valor = descripciones más creativas</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="setting-item">
                                            <label for="apiKeyInput">API Key</label>
                                            <div class="input-group">
                                                <input type="password" class="form-control" id="apiKeyInput" placeholder="Ingrese su API key">
                                                <button class="btn btn-outline-secondary" type="button" id="toggleApiKey" title="Mostrar/ocultar contraseña">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </div>
                                            <p class="setting-description">API key para el servicio de IA</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Las demás secciones (Visualización, Avanzado, IA y Modelos) seguirían un patrón similar -->
            </div>
        </div>
    </div>
    
    <!-- Modal de configuración de modelos ensemble -->
    <div class="modal fade" id="ensembleConfigModal" tabindex="-1" aria-labelledby="ensembleConfigModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg modal-settings">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="ensembleConfigModalLabel">Configuración de Modelos Ensemble</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i> La detección por ensemble combina múltiples modelos para mejorar la precisión de detección.
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="ensembleStrategy">Estrategia de ensemble</label>
                            <select class="form-select" id="ensembleStrategy">
                                <option value="weighted_average" selected>Promedio ponderado</option>
                                <option value="nms">Non-Maximum Suppression</option>
                                <option value="majority_voting">Votación por mayoría</option>
                            </select>
                            <small class="text-muted">Método para combinar resultados de múltiples modelos</small>
                        </div>
                        <div class="col-md-6">
                            <label for="iouThreshold">Umbral IoU</label>
                            <input type="range" class="form-range" id="iouThreshold" min="0.1" max="0.9" step="0.05" value="0.5">
                            <div class="d-flex justify-content-between">
                                <small class="text-muted">0.1 (Permisivo)</small>
                                <small id="iouThresholdValue" class="text-muted">0.5</small>
                                <small class="text-muted">0.9 (Estricto)</small>
                            </div>
                        </div>
                    </div>
                    
                    <h6 class="mt-4 mb-3">Modelos disponibles</h6>
                    
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Activo</th>
                                    <th>Nombre</th>
                                    <th>Tipo</th>
                                    <th>Peso</th>
                                    <th>Estado</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" checked id="model1Active">
                                        </div>
                                    </td>
                                    <td>YOLOv8n</td>
                                    <td>YOLOv8</td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm" value="1.0" min="0.1" max="5" step="0.1" style="width: 70px;">
                                    </td>
                                    <td><span class="badge bg-success">Cargado</span></td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" checked id="model2Active">
                                        </div>
                                    </td>
                                    <td>SSD MobileNet</td>
                                    <td>TensorFlow</td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm" value="0.8" min="0.1" max="5" step="0.1" style="width: 70px;">
                                    </td>
                                    <td><span class="badge bg-success">Cargado</span></td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="model3Active">
                                        </div>
                                    </td>
                                    <td>EfficientDet</td>
                                    <td>TensorFlow</td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm" value="1.2" min="0.1" max="5" step="0.1" style="width: 70px;">
                                    </td>
                                    <td><span class="badge bg-warning text-dark">No cargado</span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="mt-3">
                        <button class="btn btn-sm btn-primary">
                            <i class="fas fa-plus me-1"></i> Agregar modelo
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary">Guardar configuración</button>
                </div>
            </div>
        </div>
    </div>
</div>

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Inicialización de componentes interactivos
    
    // Rangos con valores visuales
    document.getElementById('detectionThreshold').addEventListener('input', function() {
        document.getElementById('thresholdValue').textContent = this.value;
    });
    
    document.getElementById('aiTemperature').addEventListener('input', function() {
        document.getElementById('aiTemperatureValue').textContent = this.value;
    });
    
    document.getElementById('iouThreshold').addEventListener('input', function() {
        document.getElementById('iouThresholdValue').textContent = this.value;
    });
    
    // Selector de colores
    document.querySelectorAll('.color-option').forEach(function(option) {
        option.addEventListener('click', function() {
            document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('selected'));
            this.classList.add('selected');
            updateThemePreview();
        });
    });
    
    // Cambios en tema
    document.getElementById('colorTheme').addEventListener('change', updateThemePreview);
    
    // Mostrar/ocultar API key
    document.getElementById('toggleApiKey').addEventListener('click', function() {
        const apiKeyInput = document.getElementById('apiKeyInput');
        const toggleIcon = this.querySelector('i');
        
        if (apiKeyInput.type === 'password') {
            apiKeyInput.type = 'text';
            toggleIcon.classList.remove('fa-eye');
            toggleIcon.classList.add('fa-eye-slash');
        } else {
            apiKeyInput.type = 'password';
            toggleIcon.classList.remove('fa-eye-slash');
            toggleIcon.classList.add('fa-eye');
        }
    });
    
    // Función para actualizar vista previa del tema
    function updateThemePreview() {
        const theme = document.getElementById('colorTheme').value;
        const accentColor = document.querySelector('.color-option.selected').dataset.color;
        const preview = document.getElementById('themePreview');
        
        // Resetear estilos
        preview.style.setProperty('--preview-background', '#f8f9fa');
        preview.style.setProperty('--preview-sidebar', '#343a40');
        preview.style.setProperty('--preview-primary', '#f5f7fa');
        preview.style.setProperty('--preview-accent', accentColor);
        
        // Aplicar tema seleccionado
        if (theme === 'dark') {
            preview.style.setProperty('--preview-background', '#2d3035');
            preview.style.setProperty('--preview-primary', '#212529');
        } else if (theme === 'blue') {
            preview.style.setProperty('--preview-background', '#f5f9ff');
            preview.style.setProperty('--preview-sidebar', '#1a3a6c');
            preview.style.setProperty('--preview-primary', '#e8f0ff');
        } else if (theme === 'green') {
            preview.style.setProperty('--preview-background', '#f5fff5');
            preview.style.setProperty('--preview-sidebar', '#1d5a2c');
            preview.style.setProperty('--preview-primary', '#e8ffe8');
        }
    }
    
    // Inicializar vista previa
    updateThemePreview();
    
    // Función para guardar configuraciones
    function saveSettings() {
        const settings = {
            appearance: {
                theme: document.getElementById('colorTheme').value,
                accentColor: document.querySelector('.color-option.selected').dataset.color,
                fontSize: document.getElementById('fontSize').value,
                animationSpeed: document.getElementById('animationSpeed').value,
                compactMode: document.getElementById('compactMode').checked,
                sidebarCollapsed: document.getElementById('sidebarCollapsed').checked
            },
            detection: {
                threshold: parseFloat(document.getElementById('detectionThreshold').value),
                interval: parseInt(document.getElementById('detectionInterval').value),
                frameSampling: parseInt(document.getElementById('frameSampling').value),
                enableEnsemble: document.getElementById('enableEnsemble').checked,
                showBboxes: document.getElementById('showBboxes').checked,
                showLabels: document.getElementById('showLabels').checked,
                showTrackingPaths: document.getElementById('showTrackingPaths').checked,
                bboxStyle: document.getElementById('bboxStyle').value
            },
            alerts: {
                sound: document.getElementById('alertSound').value,
                minSeverity: document.getElementById('minAlertSeverity').value,
                desktopNotifications: document.getElementById('desktopNotifications').checked,
                emailNotifications: document.getElementById('emailNotifications').checked,
                enableAIDescriptions: document.getElementById('enableAIDescriptions').checked,
                aiModel: document.getElementById('aiDescriptionModel').value,
                aiTemperature: parseFloat(document.getElementById('aiTemperature').value)
            }
            // Aquí se agregarían las demás secciones
        };
        
        // Enviar configuración al servidor
        fetch('/api/settings/advanced', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(settings)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Configuración guardada correctamente', 'success');
                // Aplicar algunos cambios inmediatos
                applySettings(settings);
            } else {
                showNotification('Error al guardar la configuración: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Error de conexión al guardar configuración', 'error');
        });
    }
    
    // Función para aplicar configuraciones inmediatamente
    function applySettings(settings) {
        // Aplicar cambios visuales inmediatos
        const root = document.documentElement;
        
        // Tamaño de fuente
        const fontSizes = {
            'small': '0.875rem',
            'medium': '1rem',
            'large': '1.125rem',
            'x-large': '1.25rem'
        };
        root.style.setProperty('--font-size-base', fontSizes[settings.appearance.fontSize]);
        
        // Tema de color
        if (settings.appearance.theme === 'dark') {
            document.body.classList.add('dark-theme');
        } else {
            document.body.classList.remove('dark-theme');
        }
        
        // Color de acento
        root.style.setProperty('--accent-color', settings.appearance.accentColor);
    }
    
    // Función para mostrar notificaciones al usuario
    function showNotification(message, type = 'info') {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
        `;
        
        // Insertar la alerta al principio del contenedor
        const container = document.querySelector('.advanced-settings-container');
        container.insertBefore(alertDiv, container.firstChild);
        
        // Auto-cerrar después de 3 segundos
        setTimeout(() => {
            alertDiv.classList.remove('show');
            setTimeout(() => alertDiv.remove(), 150);
        }, 3000);
    }
    
    // Botón para guardar configuración
    const saveButton = document.createElement('button');
    saveButton.className = 'btn btn-primary position-fixed';
    saveButton.style.bottom = '20px';
    saveButton.style.right = '20px';
    saveButton.innerHTML = '<i class="fas fa-save me-1"></i> Guardar configuración';
    saveButton.addEventListener('click', saveSettings);
    document.querySelector('.advanced-settings-container').appendChild(saveButton);
});
</script>
{% endblock %}
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\agent_factory.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Fábrica de Agentes - {{ config.app_name }}{% endblock %}

{% block content %}
<div class="agent-factory-container">
    <h2>Fábrica de Agentes</h2>
    
    <div class="factory-layout">
        <div class="templates-panel">
            <h3>Plantillas Disponibles</h3>
            <div class="templates-list">
                {% for template_id, template in templates.items() %}
                <div class="template-card" data-id="{{ template_id }}">
                    <h4>{{ template.name }}</h4>
                    <p>{{ template.description }}</p>
                    <button class="btn use-template">Usar Plantilla</button>
                </div>
                {% endfor %}
            </div>
        </div>
        
        <div class="agent-creator-panel" id="agent-creator" style="display: none;">
            <h3>Crear Nuevo Agente</h3>
            <form id="create-agent-form">
                <input type="hidden" id="template-id" name="template_id">
                
                <div class="form-group">
                    <label for="agent-name">Nombre del Agente:</label>
                    <input type="text" id="agent-name" name="agent_name" required>
                </div>
                
                <div id="parameters-container">
                    <!-- Los parámetros se cargarán aquí dinámicamente -->
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn cancel">Cancelar</button>
                    <button type="submit" class="btn primary">Crear Agente</button>
                </div>
            </form>
        </div>
        
        <div class="existing-agents-panel">
            <h3>Agentes Activos</h3>
            
            {% if agents %}
                <div class="agents-list">
                    {% for agent in agents %}
                    <div class="agent-card" data-id="{{ agent.id }}">
                        <h4>{{ agent.name }}</h4>
                        <p>Tipo: {{ agent.type }}</p>
                        <div class="agent-status {{ agent.status }}">
                            {{ agent.status }}
                        </div>
                        <div class="agent-actions">
                            <button class="btn edit-agent">Editar</button>
                            <button class="btn toggle-agent">
                                {% if agent.status == 'active' %}Pausar{% else %}Activar{% endif %}
                            </button>
                            <button class="btn delete-agent">Eliminar</button>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            {% else %}
                <p class="empty-state">No hay agentes configurados. Crea uno nuevo utilizando las plantillas disponibles.</p>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Variables para almacenar datos
    let currentTemplate = null;
    
    // Eventos para los botones de plantilla
    document.querySelectorAll('.use-template').forEach(button => {
        button.addEventListener('click', function() {
            const templateId = this.closest('.template-card').dataset.id;
            loadTemplateForm(templateId);
        });
    });
    
    // Evento para cancelar creación
    document.querySelector('#agent-creator .cancel').addEventListener('click', function() {
        document.getElementById('agent-creator').style.display = 'none';
    });
    
    // Cargar formulario de plantilla
    function loadTemplateForm(templateId) {
        fetch(`/api/templates/${templateId}`)
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                currentTemplate = data.template;
                
                // Mostrar formulario
                document.getElementById('agent-creator').style.display = 'block';
                document.getElementById('template-id').value = templateId;
                
                // Cargar parámetros
                const container = document.getElementById('parameters-container');
                container.innerHTML = '';
                
                currentTemplate.parameters.forEach(param => {
                    const formGroup = document.createElement('div');
                    formGroup.className = 'form-group';
                    
                    let inputHtml = '';
                    
                    // Crear diferente input según el tipo
                    if (param.type === 'select') {
                        inputHtml = `
                            <label for="param-${param.name}">${param.description}:</label>
                            <select id="param-${param.name}" name="parameters[${param.name}]" ${param.required ? 'required' : ''}>
                                ${param.options.map(option => `
                                    <option value="${option}" ${param.default === option ? 'selected' : ''}>${option}</option>
                                `).join('')}
                            </select>
                        `;
                    } else if (param.type === 'boolean') {
                        inputHtml = `
                            <label class="checkbox-label">
                                <input type="checkbox" id="param-${param.name}" name="parameters[${param.name}]" ${param.default ? 'checked' : ''}>
                                ${param.description}
                            </label>
                        `;
                    } else {
                        inputHtml = `
                            <label for="param-${param.name}">${param.description}:</label>
                            <input type="${param.type === 'number' ? 'number' : 'text'}" 
                                   id="param-${param.name}" 
                                   name="parameters[${param.name}]" 
                                   value="${param.default || ''}" 
                                   ${param.required ? 'required' : ''}>
                        `;
                    }
                    
                    formGroup.innerHTML = inputHtml;
                    container.appendChild(formGroup);
                });
            } else {
                alert('Error al cargar plantilla: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al cargar la plantilla');
        });
    }
    
    // Enviar formulario para crear agente
    document.getElementById('create-agent-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Recopilar valores del formulario
        const templateId = document.getElementById('template-id').value;
        const parameters = {};
        
        // Recopilar parámetros
        currentTemplate.parameters.forEach(param => {
            const element = document.getElementById(`param-${param.name}`);
            
            if (param.type === 'boolean') {
                parameters[param.name] = element.checked;
            } else if (param.type === 'number') {
                parameters[param.name] = parseFloat(element.value);
            } else {
                parameters[param.name] = element.value;
            }
        });
        
        // Enviar solicitud para crear agente
        fetch('/api/agents', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                template_id: templateId,
                parameters: parameters
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                alert('Agente creado correctamente');
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al crear agente');
        });
    });
    
    // Eventos para acciones en agentes existentes
    document.querySelectorAll('.toggle-agent').forEach(button => {
        button.addEventListener('click', function() {
            const agentId = this.closest('.agent-card').dataset.id;
            const action = this.textContent.trim() === 'Activar' ? 'activate' : 'deactivate';
            
            fetch(`/api/agents/${agentId}/${action}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    window.location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            });
        });
    });
    
    document.querySelectorAll('.delete-agent').forEach(button => {
        button.addEventListener('click', function() {
            const agentId = this.closest('.agent-card').dataset.id;
            
            if (confirm('¿Estás seguro de que deseas eliminar este agente?')) {
                fetch(`/api/agents/${agentId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        this.closest('.agent-card').remove();
                    } else {
                        alert('Error: ' + data.message);
                    }
                });
            }
        });
    });
});
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\agents.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Agentes de IA - {{ config.app_name }}{% endblock %}

{% block content %}
<h2>Gestión de Agentes de IA</h2>

<div class="agents-container">
    <div class="card">
        <h3>Agentes Activos</h3>
        <div id="agents-list">
            <p>Cargando agentes...</p>
        </div>
    </div>
    
    <div class="card">
        <h3>Configuración de Agente</h3>
        <div id="agent-config-form">
            <p>Selecciona un agente para configurar</p>
        </div>
    </div>
    
    <div class="card">
        <h3>Actividad de Agentes</h3>
        <div id="agent-activity">
            <ul id="agent-messages" class="activity-list">
                <li class="empty-list">No hay actividad reciente</li>
            </ul>
        </div>
    </div>
</div>

<div id="status-message" class="status-message" style="display: none;"></div>
{% endblock %}

{% block extra_js %}
<script>
    // Obtener lista de agentes
    function loadAgents() {
        fetch('/api/agents')
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    const agentsList = document.getElementById('agents-list');
                    
                    if (data.agents.length === 0) {
                        agentsList.innerHTML = '<p>No hay agentes registrados</p>';
                        return;
                    }
                    
                    let html = '<table class="data-table"><thead><tr>' +
                               '<th>ID</th><th>Nombre</th><th>Tipo</th><th>Estado</th><th>Acciones</th>' +
                               '</tr></thead><tbody>';
                    
                    data.agents.forEach(agent => {
                        html += `
                            <tr data-agent-id="${agent.id}">
                                <td>${agent.id}</td>
                                <td>${agent.name}</td>
                                <td>${agent.type}</td>
                                <td>
                                    <span class="status-${agent.enabled ? 'online' : 'offline'}">
                                        ${agent.enabled ? 'Activo' : 'Inactivo'}
                                    </span>
                                </td>
                                <td>
                                    <button 
                                        class="button small ${agent.enabled ? 'danger' : 'success'}" 
                                        onclick="toggleAgent('${agent.id}', ${!agent.enabled})">
                                        ${agent.enabled ? 'Desactivar' : 'Activar'}
                                    </button>
                                    <button class="button small" onclick="configureAgent('${agent.id}')">
                                        Configurar
                                    </button>
                                </td>
                            </tr>
                        `;
                    });
                    
                    html += '</tbody></table>';
                    agentsList.innerHTML = html;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                const agentsList = document.getElementById('agents-list');
                agentsList.innerHTML = '<p>Error al cargar agentes</p>';
            });
    }
    
    // Activar/desactivar agente
    function toggleAgent(agentId, enable) {
        fetch('/api/agents/toggle', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                agent_id: agentId,
                enable: enable
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                loadAgents();
                showStatus(data.message);
            } else {
                showStatus(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showStatus('Error de comunicación', 'error');
        });
    }
    
    // Mostrar formulario de configuración de agente
    function configureAgent(agentId) {
        fetch(`/api/agents/${agentId}/config`)
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    const configForm = document.getElementById('agent-config-form');
                    let html = `
                        <h4>Configurar ${data.agent.name}</h4>
                        <form id="agent-config">
                    `;
                    
                    // Campos específicos según tipo de agente
                    if (data.agent.type === 'detection') {
                        html += `
                            <div class="form-group">
                                <label for="threshold">Umbral de confianza:</label>
                                <input type="range" id="threshold" name="threshold" 
                                       min="0.1" max="1" step="0.05" value="${data.config.threshold}">
                                <span id="threshold-value">${data.config.threshold}</span>
                            </div>
                            
                            <div class="form-group">
                                <label>Clases a detectar:</label>
                                <div class="checkbox-group">
                        `;
                        
                        // Opciones de clases
                        const classes = ['persona', 'coche', 'moto', 'bicicleta', 'camión', 'perro', 'gato'];
                        classes.forEach(cls => {
                            const checked = data.config.classes.includes(cls) ? 'checked' : '';
                            html += `
                                <label>
                                    <input type="checkbox" name="classes" value="${cls}" ${checked}>
                                    ${cls}
                                </label>
                            `;
                        });
                        
                        html += `
                                </div>
                            </div>
                        `;
                    } else if (data.agent.type === 'alert') {
                        html += `
                            <div class="form-group">
                                <label for="cooldown">Período de espera entre alertas (segundos):</label>
                                <input type="number" id="cooldown" name="cooldown" 
                                       min="0" step="1" value="${data.config.cooldown}">
                            </div>
                        `;
                        
                        // Reglas de alerta (simplificado)
                        html += `
                            <div class="form-group">
                                <label>Reglas activas:</label>
                                <ul class="rules-list">
                        `;
                        
                        data.config.rules.forEach(rule => {
                            html += `<li>${rule.name} (${rule.severity})</li>`;
                        });
                        
                        html += `
                                </ul>
                                <p><small>La edición avanzada de reglas se realizará en una interfaz separada.</small></p>
                            </div>
                        `;
                    } else if (data.agent.type === 'camera') {
                        html += `
                            <div class="form-group">
                                <label for="interval">Intervalo entre frames (segundos):</label>
                                <input type="number" id="interval" name="interval" 
                                       min="0.01" max="1" step="0.01" value="${data.config.interval}">
                            </div>
                            
                            <div class="form-group">
                                <label>Cámaras activas:</label>
                                <div class="checkbox-group">
                        `;
                        
                        data.available_cameras.forEach(camera => {
                            const checked = data.config.active_cameras.includes(camera.id) ? 'checked' : '';
                            html += `
                                <label>
                                    <input type="checkbox" name="cameras" value="${camera.id}" ${checked}>
                                    ${camera.name}
                                </label>
                            `;
                        });
                        
                        html += `
                                </div>
                            </div>
                        `;
                    }
                    
                    html += `
                        <div class="button-group">
                            <button type="submit" class="button">Guardar</button>
                            <button type="button" class="button secondary" onclick="cancelConfig()">
                                Cancelar
                            </button>
                        </div>
                    `;
                    
                    html += '</form>';
                    configForm.innerHTML = html;
                    
                    // Añadir evento al formulario
                    document.getElementById('agent-config').addEventListener('submit', function(e) {
                        e.preventDefault();
                        saveAgentConfig(agentId, data.agent.type);
                    });
                    
                    // Actualizar valor del slider
                    if (data.agent.type === 'detection') {
                        const thresholdInput = document.getElementById('threshold');
                        const thresholdValue = document.getElementById('threshold-value');
                        
                        thresholdInput.addEventListener('input', function() {
                            thresholdValue.textContent = this.value;
                        });
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                const configForm = document.getElementById('agent-config-form');
                configForm.innerHTML = '<p>Error al cargar configuración</p>';
            });
    }
    
    // Guardar configuración del agente
    function saveAgentConfig(agentId, agentType) {
        let config = {};
        
        if (agentType === 'detection') {
            config.threshold = parseFloat(document.getElementById('threshold').value);
            
            const classCheckboxes = document.querySelectorAll('input[name="classes"]:checked');
            config.classes = Array.from(classCheckboxes).map(cb => cb.value);
        } else if (agentType === 'alert') {
            config.cooldown = parseInt(document.getElementById('cooldown').value);
        } else if (agentType === 'camera') {
            config.interval = parseFloat(document.getElementById('interval').value);
            
            const cameraCheckboxes = document.querySelectorAll('input[name="cameras"]:checked');
            config.active_cameras = Array.from(cameraCheckboxes).map(cb => cb.value);
        }
        
        fetch(`/api/agents/${agentId}/config`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(config)
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                loadAgents();
                showStatus('Configuración guardada correctamente');
                
                // Volver a mostrar lista de agentes
                document.getElementById('agent-config-form').innerHTML = 
                    '<p>Selecciona un agente para configurar</p>';
            } else {
                showStatus('Error al guardar configuración', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showStatus('Error de comunicación', 'error');
        });
    }
    
    // Cancelar configuración
    function cancelConfig() {
        document.getElementById('agent-config-form').innerHTML = 
            '<p>Selecciona un agente para configurar</p>';
    }
    
    // Cargar actividad de agentes
    function loadAgentActivity() {
        fetch('/api/agents/activity')
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    const activityList = document.getElementById('agent-messages');
                    
                    if (data.messages.length === 0) {
                        activityList.innerHTML = '<li class="empty-list">No hay actividad reciente</li>';
                        return;
                    }
                    
                    let html = '';
                    
                    data.messages.forEach(msg => {
                        let typeClass = '';
                        switch (msg.type) {
                            case 'alert':
                                typeClass = 'alert';
                                break;
                            case 'detection':
                                typeClass = 'detection';
                                break;
                            case 'command':
                                typeClass = 'command';
                                break;
                            default:
                                typeClass = 'info';
                        }
                        
                        html += `
                            <li class="activity-item ${typeClass}">
                                <span class="timestamp">${new Date(msg.timestamp * 1000).toLocaleTimeString()}</span>
                                <span class="agent">${msg.agent}</span>: 
                                <span class="message">${msg.message}</span>
                            </li>
                        `;
                    });
                    
                    activityList.innerHTML = html;
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    
    // Mostrar mensajes de estado
    function showStatus(message, type = 'info') {
        const statusElement = document.getElementById('status-message');
        statusElement.textContent = message;
        statusElement.className = 'status-message ' + type;
        statusElement.style.display = 'block';
        
        // Ocultar después de 3 segundos
        setTimeout(() => {
            statusElement.style.display = 'none';
        }, 3000);
    }
    
    // Carga inicial y refresco periódico
    document.addEventListener('DOMContentLoaded', function() {
        loadAgents();
        loadAgentActivity();
        
        // Actualizar cada 10 segundos
        setInterval(() => {
            loadAgents();
            loadAgentActivity();
        }, 10000);
    });
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\ai_systems.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Sistemas de IA - Sistema de Vigilancia IA{% endblock %}

{% block content %}
<style>
    .ai-system-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .ai-system-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    
    .system-stats {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
        margin-top: 15px;
    }
    
    .stat-box {
        flex: 1;
        min-width: 120px;
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 5px;
        text-align: center;
    }
    
    .stat-value {
        font-size: 24px;
        font-weight: bold;
        color: #007bff;
    }
    
    .stat-label {
        font-size: 12px;
        color: #6c757d;
    }
</style>

<h2>Sistemas de Inteligencia Artificial</h2>

<div class="ai-overview">
    <p>Esta sección muestra el estado y rendimiento de los diferentes sistemas de IA integrados en la plataforma. Desde aquí puede monitorear el funcionamiento de los modelos y acceder a sus analíticas.</p>
</div>

<div class="ai-systems-container">
    <div class="ai-system-card">
        <div class="ai-system-title">Modelo de Detección de Objetos</div>
        <p>Sistema principal para identificación de personas, vehículos y objetos en las imágenes de las cámaras.</p>
        
        <div class="system-stats">
            <div class="stat-box">
                <div class="stat-value">98.2%</div>
                <div class="stat-label">Precisión</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">45ms</div>
                <div class="stat-label">Tiempo de inferencia</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">12,543</div>
                <div class="stat-label">Detecciones hoy</div>
            </div>
        </div>
    </div>
    
    <div class="ai-system-card">
        <div class="ai-system-title">Sistema de Reconocimiento Facial</div>
        <p>Identifica y compara rostros contra una base de datos para verificación de identidad y detección de personas no autorizadas.</p>
        
        <div class="system-stats">
            <div class="stat-box">
                <div class="stat-value">95.7%</div>
                <div class="stat-label">Precisión</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">127</div>
                <div class="stat-label">Personas en DB</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">532</div>
                <div class="stat-label">Reconocimientos hoy</div>
            </div>
        </div>
    </div>
    
    <div class="ai-system-card">
        <div class="ai-system-title">Análisis de Comportamiento</div>
        <p>Detecta patrones de movimiento y comportamientos anómalos que podrían indicar situaciones de riesgo.</p>
        
        <div class="system-stats">
            <div class="stat-box">
                <div class="stat-value">92.1%</div>
                <div class="stat-label">Precisión</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">76ms</div>
                <div class="stat-label">Tiempo de análisis</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">18</div>
                <div class="stat-label">Alertas generadas</div>
            </div>
        </div>
    </div>
</div>

<div class="section-footer">
    <p>Estos sistemas están en constante mejora y entrenamiento. Para más detalles sobre el rendimiento o para ajustar parámetros, contacte al administrador del sistema.</p>
</div>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\alerts.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Alertas del Sistema - Sistema de Vigilancia IA{% endblock %}

{% block content %}
<div class="alerts-dashboard">
    <div class="page-header">
        <div class="header-content">
            <h1><i class="fas fa-bell"></i> Centro de Alertas</h1>
            <p class="subtitle">Monitoreo y gestión de todas las alertas generadas por el sistema</p>
        </div>
        
        <div class="header-controls">
            <div class="filter-bar">
                <div class="filter-group">
                    <label for="severityFilter">Severidad:</label>
                    <select id="severityFilter" class="filter-select" onchange="filterAlerts()">
                        <option value="all">Todas</option>
                        <option value="low">Baja</option>
                        <option value="medium">Media</option>
                        <option value="high">Alta</option>
                        <option value="critical">Crítica</option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="statusFilter">Estado:</label>
                    <select id="statusFilter" class="filter-select" onchange="filterAlerts()">
                        <option value="all">Todos</option>
                        <option value="active">Activas</option>
                        <option value="resolved">Resueltas</option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="dateFilter">Periodo:</label>
                    <select id="dateFilter" class="filter-select" onchange="filterAlerts()">
                        <option value="today">Hoy</option>
                        <option value="week">Esta semana</option>
                        <option value="month">Este mes</option>
                        <option value="all">Todas</option>
                    </select>
                </div>
                
                <div class="search-group">
                    <input type="text" id="searchInput" class="search-input" placeholder="Buscar alertas..." oninput="filterAlerts()">
                    <button class="search-btn"><i class="fas fa-search"></i></button>
                </div>
            </div>
            
            <div class="action-buttons">
                <button class="btn primary-btn" onclick="markAllAsRead()">
                    <i class="fas fa-check-double"></i> Marcar Todo Como Leído
                </button>
                <button class="btn danger-btn" onclick="confirmClearAlerts()">
                    <i class="fas fa-trash-alt"></i> Limpiar Resueltas
                </button>
            </div>
        </div>
    </div>
    
    <div class="alerts-stats">
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-exclamation-circle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value" id="totalActiveAlerts">0</div>
                <div class="stat-label">Alertas Activas</div>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon warning">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value" id="criticalAlerts">0</div>
                <div class="stat-label">Alertas Críticas</div>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon success">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value" id="resolvedAlerts">0</div>
                <div class="stat-label">Alertas Resueltas</div>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon info">
                <i class="fas fa-chart-line"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value" id="alertsToday">0</div>
                <div class="stat-label">Alertas Hoy</div>
            </div>
        </div>
    </div>
    
    <div class="alerts-container">
        <div id="alertsList" class="alerts-list">
            <!-- Se llenará dinámicamente -->
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>Cargando alertas...</p>
            </div>
        </div>
    </div>
    
    <!-- Modal para confirmar eliminación -->
    <div id="confirmModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirmar acción</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro que desea eliminar todas las alertas resueltas? Esta acción no se puede deshacer.</p>
            </div>
            <div class="modal-footer">
                <button class="btn secondary-btn modal-close">Cancelar</button>
                <button class="btn danger-btn" onclick="clearResolvedAlerts()">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<style>
/* Estilos específicos para la página de alertas */
.alerts-dashboard {
    margin-bottom: 30px;
}

.filter-bar {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin-bottom: 20px;
}

.filter-group {
    display: flex;
    align-items: center;
    gap: 8px;
}

.filter-group label {
    font-size: 0.9rem;
    color: var(--secondary-color);
    white-space: nowrap;
}

.filter-select {
    padding: 8px 10px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background-color: white;
    font-size: 0.9rem;
}

.search-group {
    position: relative;
    flex-grow: 1;
    max-width: 300px;
}

.search-input {
    width: 100%;
    padding: 8px 35px 8px 12px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 0.9rem;
}

.search-btn {
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
    width: 35px;
    border: none;
    background: transparent;
    color: var(--primary-color);
    cursor: pointer;
}

.action-buttons {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

.alerts-stats {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 20px;
    margin-bottom: 25px;
}

.stat-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    padding: 20px;
    display: flex;
    align-items: center;
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: rgba(52, 152, 219, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 15px;
    font-size: 1.5rem;
    color: var(--primary-color);
}

.stat-icon.warning {
    background-color: rgba(243, 156, 18, 0.1);
    color: var(--warning-color);
}

.stat-icon.success {
    background-color: rgba(46, 204, 113, 0.1);
    color: var(--success-color);
}

.stat-icon.info {
    background-color: rgba(52, 152, 219, 0.1);
    color: var(--info-color);
}

.stat-value {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--secondary-color);
    line-height: 1;
}

.stat-label {
    font-size: 0.9rem;
    color: #6c757d;
    margin-top: 5px;
}

.alerts-container {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    overflow: hidden;
}

.alerts-list {
    min-height: 400px;
}

.alert-item {
    padding: 15px;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    transition: background-color 0.3s;
}

.alert-item:hover {
    background-color: #f8f9fa;
}

.alert-item:last-child {
    border-bottom: none;
}

.alert-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 15px;
    flex-shrink: 0;
}

.alert-icon.low {
    background-color: rgba(52, 152, 219, 0.1);
    color: var(--info-color);
}

.alert-icon.medium {
    background-color: rgba(243, 156, 18, 0.1);
    color: var(--warning-color);
}

.alert-icon.high, .alert-icon.critical {
    background-color: rgba(231, 76, 60, 0.1);
    color: var(--danger-color);
}

.alert-content {
    flex-grow: 1;
}

.alert-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 5px;
}

.alert-title {
    font-weight: 500;
    font-size: 1.1rem;
    color: var(--secondary-color);
}

.alert-time {
    font-size: 0.85rem;
    color: #6c757d;
}

.alert-description {
    margin-bottom: 10px;
    color: #495057;
}

.alert-details {
    display: flex;
    gap: 15px;
    font-size: 0.85rem;
}

.alert-camera, .alert-severity {
    display: flex;
    align-items: center;
    gap: 5px;
}

.alert-camera i, .alert-severity i {
    font-size: 0.9rem;
}

.alert-actions {
    display: flex;
    gap: 10px;
    margin-left: auto;
}

.alert-badge {
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
}

.alert-badge.low {
    background-color: rgba(52, 152, 219, 0.1);
    color: var(--info-color);
}

.alert-badge.medium {
    background-color: rgba(243, 156, 18, 0.1);
    color: var(--warning-color);
}

.alert-badge.high, .alert-badge.critical {
    background-color: rgba(231, 76, 60, 0.1);
    color: var(--danger-color);
}

.loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 0;
}

.no-alerts {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 0;
    color: #6c757d;
}

.no-alerts i {
    font-size: 3rem;
    margin-bottom: 15px;
    color: #dee2e6;
}

@media (max-width: 768px) {
    .filter-bar {
        flex-direction: column;
        align-items: stretch;
    }
    
    .search-group {
        max-width: none;
    }
    
    .action-buttons {
        flex-direction: column;
    }
    
    .alerts-stats {
        grid-template-columns: 1fr 1fr;
    }
    
    .alert-item {
        flex-direction: column;
    }
    
    .alert-icon {
        margin-bottom: 10px;
    }
    
    .alert-header {
        flex-direction: column;
    }
    
    .alert-details {
        flex-wrap: wrap;
    }
}
</style>

<script src="{{ url_for('static', filename='js/alerts.js') }}"></script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\assault_config.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Configuración de Detección de Asaltos - {{ config.app_name }}{% endblock %}

{% block content %}
<div class="assault-config-container">
    <h2>Configuración de Detección de Asaltos</h2>
    
    <div class="config-section">
        <h3>Estado del Detector</h3>
        <div class="form-group">
            <label class="toggle-switch">
                <input type="checkbox" id="assault-detector-toggle" {% if agent.active %}checked{% endif %}
                       aria-label="Activar detector de asaltos" title="Activar o desactivar detector de asaltos">
                <span class="toggle-slider"></span>
            </label>
            <span class="toggle-label">Detector de Asaltos Activo</span>
        </div>
    </div>
    
    <div class="config-section">
        <h3>Parámetros de Detección</h3>
        
        <div class="form-group">
            <label for="confidence-threshold">Umbral de Confianza:</label>
            <input type="range" id="confidence-threshold" min="0.5" max="0.95" step="0.05" 
                   value="{{ agent.confidence_threshold }}" class="slider">
            <span id="confidence-value">{{ agent.confidence_threshold }}</span>
        </div>
        
        <h4>Comportamientos a Detectar</h4>
        <div class="behavior-grid">
            <div class="behavior-item">
                <label class="checkbox-label">
                    <input type="checkbox" name="behavior" value="raised_hands" checked>
                    Manos Levantadas
                </label>
            </div>
            <div class="behavior-item">
                <label class="checkbox-label">
                    <input type="checkbox" name="behavior" value="people_on_floor" checked>
                    Personas en el Suelo
                </label>
            </div>
            <div class="behavior-item">
                <label class="checkbox-label">
                    <input type="checkbox" name="behavior" value="running" checked>
                    Corriendo/Movimiento Rápido
                </label>
            </div>
            <div class="behavior-item">
                <label class="checkbox-label">
                    <input type="checkbox" name="behavior" value="weapons" checked>
                    Armas Detectadas
                </label>
            </div>
            <div class="behavior-item">
                <label class="checkbox-label">
                    <input type="checkbox" name="behavior" value="face_covering" checked>
                    Rostro Cubierto
                </label>
            </div>
            <div class="behavior-item">
                <label class="checkbox-label">
                    <input type="checkbox" name="behavior" value="sudden_gathering" checked>
                    Agrupación Súbita
                </label>
            </div>
            <div class="behavior-item">
                <label class="checkbox-label">
                    <input type="checkbox" name="behavior" value="sudden_dispersal" checked>
                    Dispersión Súbita
                </label>
            </div>
        </div>
    </div>
    
    <div class="config-section">
        <h3>Configuración de Alertas</h3>
        <div class="form-group">
            <label for="alert-cooldown">Tiempo entre alertas (segundos):</label>
            <input type="number" id="alert-cooldown" min="5" max="300" value="15">
        </div>
        
        <div class="form-group">
            <label class="checkbox-label">
                <input type="checkbox" id="snapshot-alert" checked>
                Adjuntar captura en alertas
            </label>
        </div>
        
        <div class="form-group">
            <label for="alert-recipients">Destinatarios de Alertas:</label>
            <select id="alert-recipients" multiple>
                <option value="security_staff" selected>Personal de Seguridad</option>
                <option value="admin" selected>Administradores</option>
                <option value="police">Policía</option>
                <option value="emergency">Servicios de Emergencia</option>
            </select>
        </div>
    </div>
    
    <div class="form-actions">
        <button id="save-assault-config" class="btn primary">Guardar Configuración</button>
        <button id="test-assault-detector" class="btn">Probar Detector</button>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Actualizar el valor mostrado del umbral de confianza
    const confidenceSlider = document.getElementById('confidence-threshold');
    const confidenceValue = document.getElementById('confidence-value');
    
    confidenceSlider.addEventListener('input', function() {
        confidenceValue.textContent = this.value;
    });
    
    // Guardar configuración
    document.getElementById('save-assault-config').addEventListener('click', function() {
        const configData = {
            active: document.getElementById('assault-detector-toggle').checked,
            confidence_threshold: parseFloat(document.getElementById('confidence-threshold').value),
            behaviors: {}
        };
        
        // Recopilar comportamientos seleccionados
        document.querySelectorAll('input[name="behavior"]').forEach(checkbox => {
            configData.behaviors[checkbox.value] = checkbox.checked;
        });
        
        // Enviar configuración al servidor
        fetch('/api/assault-config/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(configData)
        })
        .then(response => response.json())
        .then(result => {
            if (result.status === 'success') {
                alert('Configuración guardada correctamente');
            } else {
                alert('Error: ' + result.message);
            }
        })
        .catch(error => {
            alert('Error al enviar los datos: ' + error);
        });
    });
    
    // Probar detector
    document.getElementById('test-assault-detector').addEventListener('click', function() {
        fetch('/api/assault-detector/test', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(result => {
            if (result.status === 'success') {
                alert('Prueba exitosa: ' + result.message);
            } else {
                alert('Error en la prueba: ' + result.message);
            }
        })
        .catch(error => {
            alert('Error al realizar la prueba: ' + error);
        });
    });
});
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\base.html
--------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sistema de Vigilancia IA{% endblock %}</title>
    
    <!-- Estilos CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    {% block extra_css %}{% endblock %}
    {% block head_extra %}{% endblock %}
</head>
<body>
    <header>
        <div class="header-container">
            <div class="logo">
                <a href="{{ url_for('main.index') }}">
                    <i class="fas fa-video"></i>
                    <span>Sistema de Vigilancia IA</span>
                </a>
            </div>
            <nav class="main-nav">
                <ul>
                    <li><a href="{{ url_for('main.index') }}"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                    <li><a href="{{ url_for('main.monitoring') }}"><i class="fas fa-video"></i> Monitoreo</a></li>
                    <li><a href="{{ url_for('main.alerts') }}"><i class="fas fa-bell"></i> Alertas</a></li>
                    <li><a href="{{ url_for('main.cameras') }}"><i class="fas fa-cogs"></i> Cámaras</a></li>
                    <li><a href="{{ url_for('camera_testing') }}"><i class="fas fa-vial"></i> Prueba de Detectores</a></li>
                    <li><a href="{{ url_for('main.config') }}"><i class="fas fa-sliders-h"></i> Configuración</a></li>
                </ul>
            </nav>
        </div>
    </header>
    
    <main>
        <div class="content-container">
            {% block content %}{% endblock %}
        </div>
    </main>
    
    <footer>
        <p>&copy; {{ now().year }} Sistema de Vigilancia IA - Todos los derechos reservados</p>
    </footer>
    
    <!-- JavaScript -->
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    {% block scripts %}{% endblock %}
    {% block extra_js %}{% endblock %}
</body>
</html>


--------------------------------------------------------------------------------

📄 templates\camera_debug.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Depuración de Cámaras - {{ config.app_name }}{% endblock %}

{% block content %}
<h2>Depuración de WebCam</h2>
<div class="debug-container">
    <div class="card">
        <h3>Estado de Cámaras</h3>
        <div id="camera-status">
            <p>Cargando información de cámaras...</p>
        </div>

        <h3>Probar diferentes fuentes de webcam</h3>
        <form id="test-webcam-form">
            <div class="form-group">
                <label for="webcam-source">Fuente de la webcam:</label>
                <select id="webcam-source" name="webcam_source">
                    <option value="0">0 (Default)</option>
                    <option value="1">1 (Segunda cámara)</option>
                    <option value="-1">-1 (Autodetectar)</option>
                    <option value="default">default</option>
                </select>
            </div>
            <button type="submit">Probar cámara</button>
        </form>
        
        <div class="video-container">
            <h4>Vista previa:</h4>
            <img id="test-preview" src="" alt="Vista previa de cámara" style="max-width: 100%;">
        </div>

        <div style="margin-top: 15px;">
            <a href="{{ url_for('webcam_test') }}" class="button secondary">Prueba directa de WebCam</a>
        </div>
    </div>
    
    <div class="card">
        <h3>Logs del Sistema</h3>
        <pre id="system-logs" style="max-height: 300px; overflow-y: auto; background: #f4f4f4; padding: 10px;"></pre>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    const testPreview = document.getElementById('test-preview');
    const testForm = document.getElementById('test-webcam-form');
    const cameraStatus = document.getElementById('camera-status');
    const systemLogs = document.getElementById('system-logs');
    
    // Actualizar estado de cámaras
    function updateCameraStatus() {
        fetch('/api/cameras/status')
            .then(response => response.json())
            .then(data => {
                let statusHtml = '<ul class="camera-list">';
                
                data.cameras.forEach(camera => {
                    statusHtml += `
                        <li class="camera-item">
                            <strong>ID:</strong> ${camera.id}<br>
                            <strong>Nombre:</strong> ${camera.name}<br>
                            <strong>URL:</strong> ${camera.url}<br>
                            <strong>Estado:</strong> <span class="${camera.status === 'online' ? 'status-online' : 'status-offline'}">${camera.status}</span>
                        </li>
                    `;
                });
                
                statusHtml += '</ul>';
                cameraStatus.innerHTML = statusHtml;
            })
            .catch(error => {
                console.error('Error:', error);
                cameraStatus.innerHTML = '<p class="error">Error al obtener estado de cámaras</p>';
            });
    }
    
    // Obtener logs del sistema
    function getSystemLogs() {
        fetch('/api/system/logs')
            .then(response => response.json())
            .then(data => {
                systemLogs.textContent = data.logs.join('\n');
                systemLogs.scrollTop = systemLogs.scrollHeight; // Auto-scroll al final
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    
    // Probar webcam
    testForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const source = document.getElementById('webcam-source').value;
        
        // Crear una nueva cámara de prueba
        fetch('/api/cameras/test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ source: source })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                testPreview.src = `/video_feed/${data.camera_id}?t=${new Date().getTime()}`;
                showStatus('Cámara inicializada correctamente', 'success');
            } else {
                showStatus(data.message, 'error');
            }
            
            // Actualizar estado y logs
            setTimeout(() => {
                updateCameraStatus();
                getSystemLogs();
            }, 1000);
        })
        .catch(error => {
            console.error('Error:', error);
            showStatus('Error al probar la cámara', 'error');
        });
    });
    
    // Actualizar periódicamente
    updateCameraStatus();
    getSystemLogs();
    setInterval(() => {
        updateCameraStatus();
        getSystemLogs();
    }, 5000);
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\camera_testing.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Prueba de Detectores - Sistema de Vigilancia IA{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/testing.css') }}">
{% endblock %}

{% block content %}
<div class="page-header">
    <h1>Prueba de Detectores en Tiempo Real</h1>
    <p>Visualice las detecciones de IA en tiempo real para sus cámaras</p>
</div>

<div class="detector-dashboard">
    <div class="control-panel">
        <div class="camera-selector">
            <h3>Seleccionar Cámara</h3>
            <select id="cameraSelect" onchange="changeTestCamera()">
                <option value="">Seleccione una cámara...</option>
                <!-- Las cámaras se cargarán dinámicamente -->
            </select>
            
            <div class="detection-options">
                <h4>Detectores</h4>
                <div class="checkbox-group">
                    <div>
                        <input type="checkbox" id="poseDetector" checked>
                        <label for="poseDetector">Detección de Personas</label>
                    </div>
                    <div>
                        <input type="checkbox" id="fireDetector">
                        <label for="fireDetector">Detección de Fuego</label>
                    </div>
                    <div>
                        <input type="checkbox" id="waterDetector">
                        <label for="waterDetector">Detección de Agua</label>
                    </div>
                    <div>
                        <input type="checkbox" id="faceDetector">
                        <label for="faceDetector">Reconocimiento Facial</label>
                    </div>
                </div>
                
                <div class="button-group">
                    <button id="startLiveDetection" class="primary-btn" onclick="startRealTimeDetection()">
                        <i class="fas fa-play"></i> Iniciar Detección
                    </button>
                    <button id="stopLiveDetection" class="secondary-btn" onclick="stopRealTimeDetection()" style="display:none;">
                        <i class="fas fa-stop"></i> Detener
                    </button>
                </div>
            </div>
        </div>
        
        <div class="detection-stats">
            <h3>Estadísticas en Tiempo Real</h3>
            <div id="liveStats">
                <p>Sin datos - Inicie la detección</p>
            </div>
        </div>
    </div>
    
    <div class="visualization-panel">
        <div class="stream-container">
            <div class="stream-header">
                <h3 id="streamTitle">Visualizador de Detecciones</h3>
                <div class="stream-controls">
                    <button class="btn-icon" id="captureBtn" onclick="captureDetectionSnapshot()" disabled>
                        <i class="fas fa-camera"></i>
                    </button>
                    <button class="btn-icon" id="recordBtn" onclick="toggleRecording()" disabled>
                        <i class="fas fa-record-vinyl"></i>
                    </button>
                    <button class="btn-icon" id="fullscreenBtn" onclick="toggleFullscreen('detectionStream')">
                        <i class="fas fa-expand"></i>
                    </button>
                </div>
            </div>
            
            <div id="detectionStream" class="stream-view">
                <div class="placeholder-content">
                    <i class="fas fa-camera"></i>
                    <p>Seleccione una cámara e inicie la detección</p>
                </div>
                <img id="liveStreamImg" style="display:none;" alt="Stream en vivo">
                <canvas id="detectionOverlay" style="display:none;"></canvas>
            </div>
        </div>
        
        <div class="detection-events">
            <h3>Eventos Detectados</h3>
            <div id="eventsLog" class="events-log">
                <p>No hay eventos detectados aún</p>
            </div>
        </div>
    </div>
</div>

<div id="captureModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Captura de Detección</h3>
            <button class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
            <div id="captureImageContainer" class="capture-container">
                <!-- La imagen capturada se mostrará aquí -->
            </div>
            <div id="captureDetails" class="capture-details">
                <!-- Detalles de la detección -->
            </div>
        </div>
        <div class="modal-footer">
            <button id="downloadCaptureBtn" class="primary-btn">Descargar</button>
            <button class="secondary-btn modal-close">Cerrar</button>
        </div>
    </div>
</div>

<style>
    .detector-dashboard {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }
    
    .control-panel {
        width: 300px;
        flex-shrink: 0;
    }
    
    .visualization-panel {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }
    
    .stream-container {
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        overflow: hidden;
    }
    
    .stream-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
    }
    
    .stream-view {
        position: relative;
        width: 100%;
        height: 400px;
        background-color: #000;
        overflow: hidden;
    }
    
    .stream-view img {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }
    
    .stream-view canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }
    
    .placeholder-content {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: rgba(255,255,255,0.7);
    }
    
    .placeholder-content i {
        font-size: 48px;
        margin-bottom: 10px;
    }
    
    .detection-events {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 15px;
        flex-grow: 1;
    }
    
    .events-log {
        max-height: 200px;
        overflow-y: auto;
    }
    
    .event-item {
        padding: 8px;
        border-bottom: 1px solid #eee;
        font-size: 14px;
    }
    
    .event-item:last-child {
        border-bottom: none;
    }
    
    .detection-stats {
        margin-top: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 15px;
    }
    
    .camera-selector, .detection-options {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 15px;
        margin-bottom: 20px;
    }
    
    .checkbox-group {
        margin: 15px 0;
    }
    
    .button-group {
        display: flex;
        gap: 10px;
    }
    
    #cameraSelect {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
    }
    
    /* Estilos para modal de captura */
    .capture-container {
        text-align: center;
        margin-bottom: 15px;
    }
    
    .capture-container img {
        max-width: 100%;
        border-radius: 4px;
        border: 1px solid #ddd;
    }
    
    .capture-details {
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 4px;
    }
    
    .detection-highlight {
        font-weight: bold;
        color: #dc3545;
    }
    
    @media (max-width: 768px) {
        .detector-dashboard {
            flex-direction: column;
        }
        
        .control-panel {
            width: auto;
        }
    }
</style>

<script src="{{ url_for('static', filename='js/detection_testing.js') }}"></script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\cameras.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Cámaras - Sistema de Vigilancia IA{% endblock %}

{% block content %}
    <h2>Administración de Cámaras</h2>
    
    <div class="card">
        <h3>Agregar Cámara</h3>
        <form id="camera-form">
            <div class="form-group">
                <label for="camera-name">Nombre:</label>
                <input type="text" id="camera-name" required>
            </div>
            <div class="form-group">
                <label for="camera-url">URL:</label>
                <input type="text" id="camera-url" required placeholder="rtsp://ejemplo.com/cam1">
            </div>
            <div class="form-group">
                <label for="camera-location">Ubicación:</label>
                <input type="text" id="camera-location">
            </div>
            <div class="form-check">
                <input type="checkbox" id="camera-active" checked>
                <label for="camera-active">Activa</label>
            </div>
            <button type="submit" class="btn">Agregar Cámara</button>
        </form>
    </div>
    
    <h3>Cámaras Registradas</h3>
    <div class="cameras-list">
        {% if cameras %}
            <div class="camera-grid">
                {% for camera in cameras %}
                    <div class="camera-card">
                        <h4>{{ camera.name }}</h4>
                        <p><strong>URL:</strong> {{ camera.url }}</p>
                        <p><strong>Ubicación:</strong> {{ camera.location or 'No especificada' }}</p>
                        <p><strong>Estado:</strong> 
                            <span class="{% if camera.active %}status-active{% else %}status-inactive{% endif %}">
                                {{ 'Activa' if camera.active else 'Inactiva' }}
                            </span>
                        </p>
                        <div class="camera-actions">
                            <button class="btn btn-small" onclick="editCamera('{{ camera.id }}')">Editar</button>
                            <button class="btn btn-small btn-danger" onclick="deleteCamera('{{ camera.id }}')">Eliminar</button>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <p>No hay cámaras registradas.</p>
        {% endif %}
    </div>
{% endblock %}

{% block head_extra %}
<style>
    .form-group {
        margin-bottom: 15px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
    }
    
    .form-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .form-check {
        margin-bottom: 15px;
    }
    
    .camera-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .camera-card {
        background-color: #fff;
        border-radius: 5px;
        padding: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .camera-card h4 {
        margin-top: 0;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
    }
    
    .status-active {
        color: #28a745;
    }
    
    .status-inactive {
        color: #dc3545;
    }
    
    .camera-actions {
        margin-top: 15px;
        display: flex;
        gap: 10px;
    }
    
    .btn-small {
        padding: 5px 10px;
        font-size: 0.9rem;
    }
    
    .btn-danger {
        background-color: #dc3545;
    }
    
    .btn-danger:hover {
        background-color: #c82333;
    }
</style>
{% endblock %}

{% block scripts %}
<script>
    document.getElementById('camera-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const cameraData = {
            name: document.getElementById('camera-name').value,
            url: document.getElementById('camera-url').value,
            location: document.getElementById('camera-location').value,
            active: document.getElementById('camera-active').checked
        };
        
        fetch('/api/cameras', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(cameraData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert('Error: ' + data.error);
            } else {
                alert('Cámara añadida correctamente');
                window.location.reload();
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al agregar cámara');
        });
    });
    
    function editCamera(id) {
        // Implementar edición
        alert('Función de edición no implementada para ID: ' + id);
    }
    
    function deleteCamera(id) {
        if (confirm('¿Está seguro de eliminar esta cámara?')) {
            // Implementar eliminación
            alert('Función de eliminación no implementada para ID: ' + id);
        }
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\cameras_advanced.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Gestión Avanzada de Cámaras - Sistema de Vigilancia IA{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/cameras.css') }}">
{% endblock %}

{% block content %}
<div class="cameras-dashboard">
    <div class="page-header">
        <div class="page-header-content">
            <h1><i class="fas fa-video"></i> Gestión Avanzada de Cámaras</h1>
            <p>Configure sus cámaras, descubra nuevos dispositivos y realice pruebas de conectividad</p>
        </div>
        
        <div class="cameras-actions">
            <button id="addCameraBtn" class="btn primary-btn"><i class="fas fa-plus"></i> Añadir Cámara</button>
            <button id="discoverBtn" class="btn secondary-btn"><i class="fas fa-search"></i> Descubrir Cámaras</button>
            <button id="testBtn" class="btn info-btn"><i class="fas fa-vial"></i> Probar Conexión</button>
        </div>
    </div>

    <div id="loadingIndicator" class="loading-indicator" style="display: none;">
        <div class="spinner"></div>
        <p>Procesando solicitud...</p>
    </div>

    <!-- Grid de cámaras -->
    <div class="cameras-grid" id="camerasGrid">
        <!-- Se llenará dinámicamente -->
        <div class="empty-state" id="noCamerasMessage" style="display:none;">
            <div class="empty-state-icon">
                <i class="fas fa-camera-slash"></i>
            </div>
            <h3>No hay cámaras configuradas</h3>
            <p>Añada una nueva cámara o descubra dispositivos en su red.</p>
            <button class="btn primary-btn" id="addFirstCameraBtn">
                <i class="fas fa-plus"></i> Añadir Primera Cámara
            </button>
        </div>
    </div>
    
    <!-- Sección de prueba de cámara -->
    <div class="test-camera-section">
        <h3><i class="fas fa-vial"></i> Probar Cámara</h3>
        <div class="input-group">
            <label for="cameraUrlTest">URL de Cámara:</label>
            <input type="text" id="cameraUrlTest" class="form-control" placeholder="rtsp://usuario:contraseña@192.168.1.100:554/stream1 o 0 para webcam">
        </div>
        <button class="btn primary-btn" onclick="testCamera()"><i class="fas fa-play"></i> Probar Conexión</button>
        <div id="testResults" class="test-results" style="display: none;"></div>
    </div>
</div>

<!-- Modal para añadir/editar cámara -->
<div id="cameraModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="modalTitle">Añadir Cámara</h3>
            <button class="modal-close">&times;</button>
        </div>
        <form id="cameraForm" class="form-card">
            <input type="hidden" id="cameraId">
            
            <div class="form-row">
                <div class="form-group">
                    <label for="cameraName">Nombre de la cámara</label>
                    <input type="text" id="cameraName" class="form-control" required>
                </div>
                
                <div class="form-group">
                    <label for="cameraType">Tipo de cámara</label>
                    <select id="cameraType" class="form-control">
                        <option value="ip">Cámara IP</option>
                        <option value="usb">Cámara USB</option>
                        <option value="rtsp">Cámara RTSP</option>
                        <option value="http">Cámara HTTP</option>
                    </select>
                </div>
            </div>
            
            <div class="form-group">
                <label for="cameraUrl">URL o ID de la cámara</label>
                <input type="text" id="cameraUrl" class="form-control" required>
                <div class="form-help">Use 0, 1, 2... para cámaras USB locales o URL RTSP/HTTP para cámaras IP</div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="cameraLocation">Ubicación</label>
                    <input type="text" id="cameraLocation" class="form-control">
                </div>
                
                <div class="form-group">
                    <label for="cameraResolution">Resolución</label>
                    <select id="cameraResolution" class="form-control">
                        <option value="auto">Automática</option>
                        <option value="640x480">640x480</option>
                        <option value="1280x720">1280x720 (HD)</option>
                        <option value="1920x1080">1920x1080 (Full HD)</option>
                    </select>
                </div>
            </div>
            
            <div class="form-group">
                <label>Opciones</label>
                <div class="checkbox-option">
                    <input type="checkbox" id="cameraActive" checked>
                    <label for="cameraActive">Activar cámara al guardar</label>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn secondary-btn modal-close">Cancelar</button>
                <button type="submit" class="btn primary-btn">Guardar Cámara</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal para descubrir cámaras -->
<div id="discoverModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Descubrir Cámaras</h3>
            <button class="modal-close">&times;</button>
        </div>
        <div class="discovery-settings">
            <p>Seleccione los métodos de descubrimiento a utilizar:</p>
            <div class="discovery-options">
                <div class="checkbox-option">
                    <input type="checkbox" id="discoverUsb" checked>
                    <label for="discoverUsb">Cámaras USB</label>
                </div>
                <div class="checkbox-option">
                    <input type="checkbox" id="discoverOnvif" checked>
                    <label for="discoverOnvif">Cámaras ONVIF</label>
                </div>
                <div class="checkbox-option">
                    <input type="checkbox" id="discoverRtsp" checked>
                    <label for="discoverRtsp">Cámaras RTSP</label>
                </div>
                <div class="checkbox-option">
                    <input type="checkbox" id="discoverMdns" checked>
                    <label for="discoverMdns">Cámaras mDNS</label>
                </div>
            </div>
            
            <div class="form-group">
                <label for="networkRange">Rango de red (opcional)</label>
                <input type="text" id="networkRange" class="form-control" placeholder="192.168.1.0/24">
                <div class="form-help">Deje en blanco para autodetectar</div>
            </div>
            
            <button id="startDiscoveryBtn" class="btn primary-btn">
                <i class="fas fa-search"></i> Iniciar Búsqueda
            </button>
        </div>
        
        <div id="discoveryProgress" style="display:none;">
            <div class="progress-container">
                <div class="loading-spinner"></div>
                <p>Buscando cámaras en la red...</p>
            </div>
        </div>
        
        <div id="discoveryResults" class="discovery-results" style="display:none;">
            <h3>Resultados</h3>
            <div id="discoveredCameras" class="discovered-cameras">
                <!-- Se llenará dinámicamente -->
            </div>
        </div>
    </div>
</div>

<script src="{{ url_for('static', filename='js/cameras_advanced.js') }}"></script>
{% endblock %}

--------------------------------------------------------------------------------

📄 templates\commercial.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Modo Comercial - {{ config.app_name }}{% endblock %}

{% block extra_css %}
<style>
.retail-container {
    padding: 20px;
}

.retail-stats {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
}

.stat-card {
    flex: 1;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    padding: 15px;
    text-align: center;
}

.stat-card h3 {
    margin: 0;
    font-size: 14px;
    color: #666;
}

.stat-card .value {
    font-size: 28px;
    font-weight: bold;
    margin: 10px 0;
}

.camera-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    gap: 20px;
}

.camera-container {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    background: #fff;
}

.camera-feed {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    overflow: hidden;
}

.camera-feed img {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.camera-info {
    padding: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top: 1px solid #eee;
}

.detection-boxes {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
}

.detection-overlay {
    position: absolute;
    border: 2px solid;
    border-radius: 4px;
    z-index: 10;
}

.suspicious-person {
    border-color: #ff8800;
}

.cart-abandonment {
    border-color: #44aaff;
}

.theft-risk {
    border-color: #ff4444;
}

.alert-list {
    max-height: 400px;
    overflow-y: auto;
}

.retail-alert {
    padding: 10px 15px;
    border-bottom: 1px solid rgba(0,0,0,0.1);
}

.retail-alert:last-child {
    border-bottom: none;
}

.retail-alert.warning {
    border-left: 4px solid #ff8800;
}

.retail-alert.info {
    border-left: 4px solid #44aaff;
}

.retail-alert.critical {
    border-left: 4px solid #ff4444;
}

.retail-alert h5 {
    font-size: 14px;
    margin: 0 0 5px 0;
}

.retail-alert p {
    font-size: 12px;
    margin: 0;
    color: #666;
}

.heatmap-toggle {
    margin-bottom: 20px;
}
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Monitoreo Comercial</h5>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="retailDetectionToggle" checked>
                        <label class="form-check-label" for="retailDetectionToggle">Detección activa</label>
                    </div>
                </div>
                <div class="card-body">
                    <div class="retail-stats">
                        <div class="stat-card">
                            <h3>Personas Monitoreadas</h3>
                            <div class="value" id="peopleCount">0</div>
                        </div>
                        <div class="stat-card">
                            <h3>Comportamientos Sospechosos</h3>
                            <div class="value" id="suspiciousCount">0</div>
                        </div>
                        <div class="stat-card">
                            <h3>Alertas Hoy</h3>
                            <div class="value" id="alertsCount">0</div>
                        </div>
                        <div class="stat-card">
                            <h3>Nivel de Riesgo</h3>
                            <div class="value" id="riskLevel">Bajo</div>
                        </div>
                    </div>
                    
                    <div class="heatmap-toggle mb-3">
                        <button class="btn btn-sm btn-outline-primary" id="toggleHeatmap">Mostrar Mapa de Calor</button>
                        <button class="btn btn-sm btn-outline-primary" id="toggleTracking">Mostrar Seguimiento</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-lg-9">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Cámaras en Área Comercial</h5>
                </div>
                <div class="card-body p-0">
                    <div class="camera-grid">
                        {% for camera in cameras %}
                        <div class="camera-container" data-camera-id="{{ camera.id }}">
                            <div class="camera-feed">
                                <img src="{{ url_for('video_feed', camera_id=camera.id) }}" alt="Cámara {{ camera.name }}">
                                <div class="detection-boxes"></div>
                                <div class="heatmap-overlay" style="display: none;"></div>
                            </div>
                            <div class="camera-info">
                                <h6>{{ camera.name }}</h6>
                                <span class="badge bg-success">Online</span>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Alertas de Seguridad</h5>
                </div>
                <div class="card-body p-0">
                    <div class="alert-list" id="retailAlerts">
                        <!-- Las alertas se cargarán dinámicamente aquí -->
                        <div class="text-center p-3">
                            <p class="text-muted">No hay alertas recientes</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Comportamientos Detectados</h5>
                </div>
                <div class="card-body">
                    <canvas id="behaviorChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Configuración
    const updateInterval = 3000; // 3 segundos
    let retailDetectionActive = true;
    let showHeatmap = false;
    let showTracking = false;
    
    // Referencias a elementos DOM
    const toggleSwitch = document.getElementById('retailDetectionToggle');
    const heatmapButton = document.getElementById('toggleHeatmap');
    const trackingButton = document.getElementById('toggleTracking');
    const alertsList = document.getElementById('retailAlerts');
    
    // Contador de estadísticas
    let stats = {
        people: 0,
        suspicious: 0,
        alerts: 0
    };
    
    // Gráfica de comportamientos
    const behaviorCtx = document.getElementById('behaviorChart').getContext('2d');
    const behaviorChart = new Chart(behaviorCtx, {
        type: 'doughnut',
        data: {
            labels: ['Normal', 'Sospechoso', 'Riesgo Alto'],
            datasets: [{
                data: [70, 25, 5],
                backgroundColor: ['#4CAF50', '#FF9800', '#F44336']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
    
    // Evento para activar/desactivar detección
    toggleSwitch.addEventListener('change', function() {
        retailDetectionActive = this.checked;
        
        // Enviar solicitud para activar/desactivar
        fetch('/api/retail/set_active', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ active: retailDetectionActive })
        });
        
        // Actualizar UI
        document.querySelectorAll('.detection-boxes').forEach(box => {
            box.style.display = retailDetectionActive ? 'block' : 'none';
        });
    });
    
    // Evento para mostrar/ocultar mapa de calor
    heatmapButton.addEventListener('click', function() {
        showHeatmap = !showHeatmap;
        this.innerText = showHeatmap ? 'Ocultar Mapa de Calor' : 'Mostrar Mapa de Calor';
        
        document.querySelectorAll('.heatmap-overlay').forEach(overlay => {
            overlay.style.display = showHeatmap ? 'block' : 'none';
        });
        
        if (showHeatmap) {
            // Solicitar datos de mapa de calor
            fetchHeatmapData();
        }
    });
    
    // Evento para mostrar/ocultar seguimiento
    trackingButton.addEventListener('click', function() {
        showTracking = !showTracking;
        this.innerText = showTracking ? 'Ocultar Seguimiento' : 'Mostrar Seguimiento';
        
        // Aquí se implementaría la visualización de seguimiento
    });
    
    // Función para actualizar las detecciones en tiempo real
    function updateDetections() {
        if (!retailDetectionActive) return;
        
        fetch('/api/retail/detections')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Actualizar estadísticas
                    stats.people = data.total_people || 0;
                    stats.suspicious = data.suspicious_count || 0;
                    
                    document.getElementById('peopleCount').innerText = stats.people;
                    document.getElementById('suspiciousCount').innerText = stats.suspicious;
                    
                    // Actualizar cajas de detección
                    updateDetectionBoxes(data.detections || {});
                    
                    // Actualizar gráfica
                    updateBehaviorChart(data.behavior_stats || {});
                    
                    // Actualizar nivel de riesgo
                    updateRiskLevel(data.risk_level || 'low');
                }
            })
            .catch(error => console.error('Error actualizando detecciones:', error));
    }
    
    // Función para actualizar las alertas
    function updateAlerts() {
        fetch('/api/retail/alerts')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.alerts && data.alerts.length > 0) {
                    stats.alerts = data.alerts.length;
                    document.getElementById('alertsCount').innerText = stats.alerts;
                    
                    // Actualizar lista de alertas
                    renderAlerts(data.alerts);
                }
            })
            .catch(error => console.error('Error actualizando alertas:', error));
    }
    
    // Función para renderizar alertas
    function renderAlerts(alerts) {
        if (alerts.length === 0) {
            alertsList.innerHTML = `
                <div class="text-center p-3">
                    <p class="text-muted">No hay alertas recientes</p>
                </div>
            `;
            return;
        }
        
        // Ordenar por timestamp, más reciente primero
        alerts.sort((a, b) => b.timestamp - a.timestamp);
        
        // Limpiar y generar HTML
        alertsList.innerHTML = '';
        alerts.forEach(alert => {
            const alertDiv = document.createElement('div');
            alertDiv.className = `retail-alert ${alert.severity}`;
            
            const time = new Date(alert.timestamp * 1000).toLocaleTimeString();
            
            alertDiv.innerHTML = `
                <h5>${alert.message}</h5>
                <p>Cámara: ${alert.camera_name || alert.camera_id} - ${time}</p>
            `;
            
            alertsList.appendChild(alertDiv);
        });
    }
    
    // Función para actualizar cajas de detección
    function updateDetectionBoxes(detections) {
        // Para cada cámara
        Object.keys(detections).forEach(cameraId => {
            const container = document.querySelector(`.camera-container[data-camera-id="${cameraId}"]`);
            if (!container) return;
            
            const boxesContainer = container.querySelector('.detection-boxes');
            boxesContainer.innerHTML = '';
            
            // Para cada detección en esta cámara
            detections[cameraId].forEach(detection => {
                // Crear caja de detección
                const box = document.createElement('div');
                box.className = `detection-overlay ${detection.type}`;
                
                // Calcular posición (normalizada a dimensiones del contenedor)
                const [x, y, w, h] = detection.bbox;
                
                box.style.left = `${x}%`;
                box.style.top = `${y}%`;
                box.style.width = `${w}%`;
                box.style.height = `${h}%`;
                
                // Opcional: añadir etiqueta
                if (detection.label) {
                    const label = document.createElement('span');
                    label.className = 'detection-label';
                    label.innerText = detection.label;
                    box.appendChild(label);
                }
                
                boxesContainer.appendChild(box);
            });
        });
    }
    
    // Función para actualizar gráfica de comportamientos
    function updateBehaviorChart(stats) {
        behaviorChart.data.datasets[0].data = [
            stats.normal || 70,
            stats.suspicious || 25,
            stats.high_risk || 5
        ];
        behaviorChart.update();
    }
    
    // Función para actualizar nivel de riesgo
    function updateRiskLevel(level) {
        const riskLevelEl = document.getElementById('riskLevel');
        
        switch (level) {
            case 'high':
                riskLevelEl.innerText = 'Alto';
                riskLevelEl.style.color = '#F44336';
                break;
            case 'medium':
                riskLevelEl.innerText = 'Medio';
                riskLevelEl.style.color = '#FF9800';
                break;
            case 'low':
            default:
                riskLevelEl.innerText = 'Bajo';
                riskLevelEl.style.color = '#4CAF50';
        }
    }
    
    // Función para obtener datos del mapa de calor
    function fetchHeatmapData() {
        fetch('/api/retail/heatmap')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Renderizar mapas de calor
                    renderHeatmaps(data.heatmap_data || {});
                }
            })
            .catch(error => console.error('Error obteniendo datos de mapa de calor:', error));
    }
    
    // Función para renderizar mapas de calor
    function renderHeatmaps(heatmapData) {
        // Para cada cámara con datos de mapa de calor
        Object.keys(heatmapData).forEach(cameraId => {
            const container = document.querySelector(`.camera-container[data-camera-id="${cameraId}"]`);
            if (!container) return;
            
            const heatmapOverlay = container.querySelector('.heatmap-overlay');
            
            // Aquí iría la lógica para renderizar el mapa de calor
            // Normalmente se usaría una librería como heatmap.js
            
            // Ejemplo simulado:
            heatmapOverlay.innerHTML = `<div class="simulated-heatmap"></div>`;
        });
    }
    
    // Iniciar actualizaciones periódicas
    setInterval(updateDetections, updateInterval);
    setInterval(updateAlerts, updateInterval * 2);
    
    // Actualización inicial
    updateDetections();
    updateAlerts();
});
</script>
{% endblock %}
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\config.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Configuración - Sistema de Vigilancia IA{% endblock %}

{% block content %}
    <h2>Configuración del Sistema</h2>
    
    <div class="config-sections">
        <div class="card">
            <h3>Configuración General</h3>
            <form id="general-config">
                <div class="form-group">
                    <label for="system-name">Nombre del Sistema:</label>
                    <input type="text" id="system-name" value="Sistema de Vigilancia IA">
                </div>
                <div class="form-group">
                    <label for="storage-path">Ruta de Almacenamiento:</label>
                    <input type="text" id="storage-path" value="/data/surveillance">
                </div>
                <div class="form-check">
                    <input type="checkbox" id="debug-mode" checked>
                    <label for="debug-mode">Modo de Depuración</label>
                </div>
                <button type="submit" class="btn">Guardar Cambios</button>
            </form>
        </div>
        
        <div class="card">
            <h3>Configuración de Detección</h3>
            <form id="detection-config">
                <div class="form-group">
                    <label for="detection-threshold">Umbral de Confianza:</label>
                    <input type="range" id="detection-threshold" min="0" max="100" value="70">
                    <span id="threshold-value">70%</span>
                </div>
                <div class="form-group">
                    <label>Clases a Detectar:</label>
                    <div class="checkbox-group">
                        <div class="form-check">
                            <input type="checkbox" id="detect-person" checked>
                            <label for="detect-person">Personas</label>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" id="detect-vehicle" checked>
                            <label for="detect-vehicle">Vehículos</label>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" id="detect-animal">
                            <label for="detect-animal">Animales</label>
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn">Guardar Cambios</button>
            </form>
        </div>
        
        <div class="card">
            <h3>Configuración de Notificaciones</h3>
            <form id="notification-config">
                <div class="form-check">
                    <input type="checkbox" id="email-notifications" checked>
                    <label for="email-notifications">Notificaciones por Email</label>
                </div>
                <div class="form-group">
                    <label for="email-recipient">Destinatario:</label>
                    <input type="email" id="email-recipient" value="admin@ejemplo.com">
                </div>
                <div class="form-check">
                    <input type="checkbox" id="sms-notifications">
                    <label for="sms-notifications">Notificaciones SMS</label>
                </div>
                <div class="form-group">
                    <label for="sms-number">Número de Teléfono:</label>
                    <input type="text" id="sms-number" placeholder="+XX XXXXXXXXXX">
                </div>
                <button type="submit" class="btn">Guardar Cambios</button>
            </form>
        </div>
    </div>
{% endblock %}

{% block head_extra %}
<style>
    .config-sections {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        gap: 20px;
    }
    
    .form-group {
        margin-bottom: 15px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
    }
    
    .form-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .form-check {
        margin-bottom: 10px;
    }
    
    .checkbox-group {
        margin-top: 5px;
    }
</style>
{% endblock %}

{% block scripts %}
<script>
    // Actualizar valor del umbral
    const thresholdSlider = document.getElementById('detection-threshold');
    const thresholdValue = document.getElementById('threshold-value');
    
    thresholdSlider.addEventListener('input', function() {
        thresholdValue.textContent = this.value + '%';
    });
    
    // Simulación de envío de formularios
    document.getElementById('general-config').addEventListener('submit', function(e) {
        e.preventDefault();
        alert('Configuración general guardada (simulación)');
    });
    
    document.getElementById('detection-config').addEventListener('submit', function(e) {
        e.preventDefault();
        alert('Configuración de detección guardada (simulación)');
    });
    
    document.getElementById('notification-config').addEventListener('submit', function(e) {
        e.preventDefault();
        alert('Configuración de notificaciones guardada (simulación)');
    });
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\dashboard.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Dashboard - Sistema de Vigilancia IA{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
{% endblock %}

{% block content %}
<div class="dashboard">
    <!-- Estado del sistema -->
    <div class="section-header">
        <h1>Dashboard de Vigilancia</h1>
        <div class="actions">
            <button class="btn info-btn" id="refreshBtn"><i class="fas fa-sync"></i> Actualizar</button>
        </div>
    </div>
    
    <!-- Resumen estadístico -->
    <div class="grid-container animate-in">
        <div class="grid-item stat-card">
            <div class="stat-icon">
                <i class="fas fa-video"></i>
            </div>
            <div class="stat-content">
                <h3 id="totalCameras">0</h3>
                <p>Cámaras Conectadas</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon warning">
                <i class="fas fa-bell"></i>
            </div>
            <div class="stat-content">
                <h3 id="totalAlerts">0</h3>
                <p>Alertas Hoy</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon success">
                <i class="fas fa-user-shield"></i>
            </div>
            <div class="stat-content">
                <h3 id="peopleDetected">0</h3>
                <p>Personas Detectadas</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon danger">
                <i class="fas fa-exclamation-circle"></i>
            </div>
            <div class="stat-content">
                <h3 id="criticalEvents">0</h3>
                <p>Eventos Críticos</p>
            </div>
        </div>
    </div>
    
    <!-- Estado de cámaras -->
    <div class="dual-column">
        <div class="column">
            <div class="card animate-in" style="animation-delay: 0.1s;">
                <div class="card-header">
                    <h2><i class="fas fa-video"></i> Estado de Cámaras</h2>
                    <div class="card-actions">
                        <button class="btn-icon" id="monitoringBtn"><i class="fas fa-external-link-alt"></i></button>
                    </div>
                </div>
                <div class="card-body" id="camerasStatus">
                    <div class="loader-container">
                        <div class="loader"></div>
                        <p>Cargando cámaras...</p>
                    </div>
                </div>
            </div>
            
            <!-- Recursos del sistema -->
            <div class="card animate-in" style="animation-delay: 0.2s;">
                <div class="card-header">
                    <h2><i class="fas fa-microchip"></i> Recursos del Sistema</h2>
                </div>
                <div class="card-body">
                    <div class="resource-meters">
                        <div class="resource-meter">
                            <div class="resource-label">CPU</div>
                            <div class="progress-bar">
                                <div class="progress" id="cpuUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                        <div class="resource-meter">
                            <div class="resource-label">RAM</div>
                            <div class="progress-bar">
                                <div class="progress" id="ramUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                        <div class="resource-meter">
                            <div class="resource-label">Disco</div>
                            <div class="progress-bar">
                                <div class="progress" id="diskUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="column">
            <!-- Alertas recientes -->
            <div class="card animate-in" style="animation-delay: 0.3s;">
                <div class="card-header">
                    <h2><i class="fas fa-bell"></i> Alertas Recientes</h2>
                    <div class="card-actions">
                        <button class="btn-icon" id="alertsBtn"><i class="fas fa-external-link-alt"></i></button>
                    </div>
                </div>
                <div class="card-body" id="recentAlerts">
                    <div class="loader-container">
                        <div class="loader"></div>
                        <p>Cargando alertas...</p>
            </div>
        </div>
    </div>
    
            <!-- Actividad -->
            <div class="card animate-in" style="animation-delay: 0.4s;">
                <div class="card-header">
                    <h2><i class="fas fa-chart-line"></i> Actividad Reciente</h2>
                </div>
                <div class="card-body">
                    <div class="activity-chart-container">
                        <canvas id="activityChart"></canvas>
            </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .dashboard {
        margin-top: 20px;
    }
    
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .section-header h1 {
        margin: 0;
        font-size: 1.8rem;
        color: var(--secondary-color);
    }
    
    .dual-column {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-top: 20px;
    }
    
    .resource-meters {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .resource-meter {
        margin-bottom: 10px;
    }
    
    .resource-label {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        font-weight: 500;
    }
    
    .progress-bar {
        height: 10px;
        background-color: #e9ecef;
        border-radius: 5px;
        overflow: hidden;
    }
    
    .progress {
        height: 100%;
        background-color: var(--primary-color);
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        color: white;
        transition: width 0.5s ease;
    }
    
    .camera-status-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
    }
    
    .camera-status-item {
        background-color: #f8f9fa;
        border-radius: 6px;
        padding: 12px;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }
    
    .camera-status-icon {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        margin-bottom: 5px;
    }
    
    .camera-status-icon.active {
        background-color: var(--success-color);
    }
    
    .camera-status-icon.inactive {
        background-color: var(--secondary-color);
    }
    
    .camera-status-icon.error {
        background-color: var(--danger-color);
    }
    
    .camera-status-name {
        font-weight: 500;
        margin-bottom: 2px;
        font-size: 0.9rem;
    }
    
    .camera-status-info {
        font-size: 0.8rem;
        color: #6c757d;
    }
    
    .alert-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }
    
    .alert-item {
        padding: 10px;
        border-radius: 6px;
        display: flex;
        align-items: center;
    }
    
    .alert-item.low {
        background-color: rgba(52, 152, 219, 0.1);
        border-left: 3px solid var(--info-color);
    }
    
    .alert-item.medium {
        background-color: rgba(243, 156, 18, 0.1);
        border-left: 3px solid var(--warning-color);
    }
    
    .alert-item.high {
        background-color: rgba(231, 76, 60, 0.1);
        border-left: 3px solid var(--danger-color);
    }
    
    .alert-icon {
        margin-right: 15px;
        font-size: 1.2rem;
    }
    
    .alert-item.low .alert-icon {
        color: var(--info-color);
    }
    
    .alert-item.medium .alert-icon {
        color: var(--warning-color);
    }
    
    .alert-item.high .alert-icon {
        color: var(--danger-color);
    }
    
    .alert-content {
        flex: 1;
    }
    
    .alert-title {
        font-weight: 500;
        margin: 0 0 5px 0;
    }
    
    .alert-info {
        display: flex;
        font-size: 0.8rem;
        color: #6c757d;
    }
    
    .alert-camera {
        margin-right: 10px;
    }
    
    .alert-time {
        flex: 1;
        text-align: right;
    }
    
    .loader-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px;
    }
    
    .loader {
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--primary-color);
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .activity-chart-container {
        width: 100%;
        height: 200px;
    }
    
    @media (max-width: 768px) {
        .dual-column {
            grid-template-columns: 1fr;
        }
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// JavaScript necesario para el dashboard
document.addEventListener('DOMContentLoaded', function() {
    loadDashboardData();
    setupActivityChart();
    
    // Actualizar datos cada 30 segundos
    setInterval(loadDashboardData, 30000);
    
    // Botón de actualización manual
    document.getElementById('refreshBtn').addEventListener('click', loadDashboardData);
    
    // Botones de navegación
    document.getElementById('monitoringBtn').addEventListener('click', function() {
        window.location.href = '/monitoring';
    });
    
    document.getElementById('alertsBtn').addEventListener('click', function() {
        window.location.href = '/alerts';
    });
});

// Cargar datos del dashboard
function loadDashboardData() {
    // Actualizar estadísticas
    fetch('/api/dashboard/stats')
            .then(response => response.json())
            .then(data => {
            document.getElementById('totalCameras').textContent = data.cameras_active;
            document.getElementById('totalAlerts').textContent = data.alerts_today;
            document.getElementById('peopleDetected').textContent = data.people_detected;
            document.getElementById('criticalEvents').textContent = data.critical_events;
            
            // Actualizar recursos del sistema
            document.getElementById('cpuUsage').style.width = data.system.cpu_usage + '%';
            document.getElementById('cpuUsage').textContent = data.system.cpu_usage + '%';
            
            document.getElementById('ramUsage').style.width = data.system.memory_usage + '%';
            document.getElementById('ramUsage').textContent = data.system.memory_usage + '%';
            
            document.getElementById('diskUsage').style.width = data.system.disk_usage + '%';
            document.getElementById('diskUsage').textContent = data.system.disk_usage + '%';
            
            // Color de la barra según nivel
            colorizeProgressBar('cpuUsage', data.system.cpu_usage);
            colorizeProgressBar('ramUsage', data.system.memory_usage);
            colorizeProgressBar('diskUsage', data.system.disk_usage);
        })
        .catch(error => console.error('Error cargando estadísticas:', error));
        
    // Actualizar estado de cámaras
    fetch('/api/cameras')
        .then(response => response.json())
        .then(cameras => {
            const camerasContainer = document.getElementById('camerasStatus');
            
            if (cameras.length === 0) {
                camerasContainer.innerHTML = '<p class="no-data">No hay cámaras configuradas</p>';
                return;
            }
            
            let cameraHTML = '<div class="camera-status-list">';
            
            cameras.forEach(camera => {
                const statusClass = camera.active ? 'active' : 'inactive';
                cameraHTML += `
                    <div class="camera-status-item">
                        <div class="camera-status-icon ${statusClass}"></div>
                        <div class="camera-status-name">${camera.name}</div>
                        <div class="camera-status-info">${camera.active ? 'Activa' : 'Inactiva'}</div>
                    </div>
                `;
            });
            
            cameraHTML += '</div>';
            camerasContainer.innerHTML = cameraHTML;
        })
        .catch(error => console.error('Error cargando cámaras:', error));
        
    // Actualizar alertas recientes
    fetch('/api/alerts?limit=5')
        .then(response => response.json())
        .then(alerts => {
            const alertsContainer = document.getElementById('recentAlerts');
            
            if (alerts.length === 0) {
                alertsContainer.innerHTML = '<p class="no-data">No hay alertas recientes</p>';
                return;
            }
            
            let alertsHTML = '<div class="alert-list">';
            
            alerts.forEach(alert => {
                const severityClass = getSeverityClass(alert.severity);
                const icon = getSeverityIcon(alert.severity);
                
                alertsHTML += `
                    <div class="alert-item ${severityClass}">
                        <div class="alert-icon">
                            <i class="${icon}"></i>
                        </div>
                        <div class="alert-content">
                            <div class="alert-title">${alert.alert_type}</div>
                            <div class="alert-info">
                                <span class="alert-camera">Cámara ${alert.camera_id}</span>
                                <span class="alert-time">${formatDate(alert.timestamp)}</span>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            alertsHTML += '</div>';
            alertsContainer.innerHTML = alertsHTML;
        })
        .catch(error => console.error('Error cargando alertas:', error));
}

// Inicializar gráfico de actividad
function setupActivityChart() {
    const ctx = document.getElementById('activityChart').getContext('2d');
    
    // Datos de ejemplo
    const labels = Array.from({length: 12}, (_, i) => {
        const hour = new Date().getHours() - 11 + i;
        return (hour < 0 ? hour + 24 : hour) + ':00';
    });
    
    // Gráfico
    const activityChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                label: 'Eventos',
                data: [5, 8, 12, 7, 10, 15, 18, 14, 9, 12, 13, 10],
                borderColor: '#3498db',
                backgroundColor: 'rgba(52, 152, 219, 0.1)',
                tension: 0.4,
                fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                    grid: {
                        display: true,
                        color: 'rgba(0, 0, 0, 0.05)'
                        }
                    },
                    x: {
                    grid: {
                        display: false
                    }
                }
            }
        }
    });
    
    // Actualizar con datos reales
    fetch('/api/events/hourly')
            .then(response => response.json())
            .then(data => {
            // Actualizar datos
            activityChart.data.datasets[0].data = data.counts;
            activityChart.update();
        })
        .catch(error => console.error('Error cargando datos de actividad:', error));
}

// Funciones auxiliares
function getSeverityClass(severity) {
    switch(severity) {
        case 'high': case 'critical': return 'high';
        case 'medium': return 'medium';
        default: return 'low';
    }
}

function getSeverityIcon(severity) {
    switch(severity) {
        case 'high': case 'critical': return 'fas fa-exclamation-circle';
        case 'medium': return 'fas fa-exclamation-triangle';
        default: return 'fas fa-info-circle';
    }
}

function formatDate(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
}

function colorizeProgressBar(id, value) {
    const element = document.getElementById(id);
    if (value < 70) {
        element.style.backgroundColor = 'var(--success-color)';
    } else if (value < 90) {
        element.style.backgroundColor = 'var(--warning-color)';
    } else {
        element.style.backgroundColor = 'var(--danger-color)';
    }
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\dataset_details.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}{{ dataset.name }} - {{ config.app_name }}{% endblock %}

{% block extra_css %}
<style>
.dataset-details-container {
    padding: 20px;
}

.dataset-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.dataset-stats {
    background: #f5f5f5;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
}

.dataset-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
}

.stat-card {
    background: white;
    border-radius: 6px;
    padding: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    text-align: center;
}

.stat-value {
    font-size: 2rem;
    font-weight: bold;
    color: #2874A6;
}

.stat-label {
    color: #7B7D7D;
}

.category-tabs {
    display: flex;
    border-bottom: 1px solid #ddd;
    margin-bottom: 20px;
    overflow-x: auto;
}

.category-tab {
    padding: 10px 20px;
    cursor: pointer;
    border-bottom: 3px solid transparent;
}

.category-tab.active {
    border-bottom-color: #3498DB;
    font-weight: bold;
}

.category-content {
    display: none;
}

.category-content.active {
    display: block;
}

.images-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 10px;
}

.image-card {
    position: relative;
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.image-card img {
    width: 100%;
    height: 150px;
    object-fit: cover;
}

.image-card .delete-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    background: rgba(255, 255, 255, 0.7);
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-weight: bold;
    color: #E74C3C;
}

.upload-section {
    background: #f5f5f5;
    border-radius: 8px;
    padding: 15px;
    margin-top: 30px;
}

.dropzone {
    border: 2px dashed #ccc;
    border-radius: 8px;
    padding: 40px 20px;
    text-align: center;
    cursor: pointer;
    transition: background 0.3s;
}

.dropzone:hover, .dropzone.dragover {
    background: #e9e9e9;
}

.dropzone p {
    margin: 0;
    color: #777;
}
</style>
{% endblock %}

{% block content %}
<div class="dataset-details-container">
    <div class="dataset-header">
        <div>
            <h2>{{ dataset.name }}</h2>
            <p>{{ dataset.description }}</p>
        </div>
        <div>
            <button class="btn primary" id="train-model-btn">Entrenar Modelo</button>
            <button class="btn" id="export-dataset-btn">Exportar Dataset</button>
        </div>
    </div>
    
    <div class="dataset-stats">
        <h3>Estadísticas</h3>
        <div class="dataset-stats-grid">
            <div class="stat-card">
                <div class="stat-value">{{ dataset.images_count }}</div>
                <div class="stat-label">Imágenes Totales</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-value">{{ dataset.categories|length }}</div>
                <div class="stat-label">Categorías</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-value">{{ dataset.created_at|date }}</div>
                <div class="stat-label">Fecha de Creación</div>
            </div>
        </div>
    </div>
    
    <h3>Categorías e Imágenes</h3>
    
    <div class="category-tabs">
        {% for category in dataset.categories %}
        <div class="category-tab {% if loop.first %}active{% endif %}" data-category="{{ category }}">
            {{ category }} ({{ dataset.categories_info[category].count }})
        </div>
        {% endfor %}
    </div>
    
    {% for category in dataset.categories %}
    <div class="category-content {% if loop.first %}active{% endif %}" id="category-{{ category }}">
        <h4>Imágenes en categoría: {{ category }}</h4>
        
        {% if dataset.categories_info[category].count > 0 %}
        <div class="images-grid">
            {% for image in dataset.categories_info[category].images %}
            <div class="image-card" data-image="{{ image }}">
                <img src="{{ url_for('dataset_image', dataset_id=dataset.id, category=category, filename=image) }}" alt="{{ image }}">
                <button class="delete-btn" data-image="{{ image }}" data-category="{{ category }}">×</button>
            </div>
            {% endfor %}
        </div>
        {% else %}
        <p class="empty-state">No hay imágenes en esta categoría. Sube algunas para comenzar.</p>
        {% endif %}
        
        <div class="upload-section">
            <h4>Subir imágenes para: {{ category }}</h4>
            <div class="dropzone" id="dropzone-{{ category }}">
                <p>Arrastra imágenes aquí o haz clic para seleccionar archivos</p>
                <input type="file" class="file-input" id="file-input-{{ category }}" multiple accept="image/*" style="display: none;">
            </div>
            <div class="upload-progress" style="display: none;">
                <div class="progress-bar"></div>
                <p class="progress-text">Subiendo... 0%</p>
            </div>
        </div>
    </div>
    {% endfor %}
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Cambio de pestañas de categoría
    document.querySelectorAll('.category-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const category = this.dataset.category;
            
            // Activar pestaña
            document.querySelectorAll('.category-tab').forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            
            // Mostrar contenido
            document.querySelectorAll('.category-content').forEach(c => c.classList.remove('active'));
            document.getElementById(`category-${category}`).classList.add('active');
        });
    });
    
    // Configurar zonas de carga
    document.querySelectorAll('.dropzone').forEach(dropzone => {
        const category = dropzone.id.replace('dropzone-', '');
        const fileInput = document.getElementById(`file-input-${category}`);
        
        // Evento de clic en la zona
        dropzone.addEventListener('click', function() {
            fileInput.click();
        });
        
        // Eventos de arrastrar y soltar
        dropzone.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('dragover');
        });
        
        dropzone.addEventListener('dragleave', function() {
            this.classList.remove('dragover');
        });
        
        dropzone.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('dragover');
            
            if (e.dataTransfer.files.length > 0) {
                handleFiles(e.dataTransfer.files, category);
            }
        });
        
        // Evento de selección de archivo
        fileInput.addEventListener('change', function() {
            if (this.files.length > 0) {
                handleFiles(this.files, category);
            }
        });
    });
    
    // Función para manejar la carga de archivos
    function handleFiles(files, category) {
        Array.from(files).forEach(file => {
            uploadFile(file, category);
        });
    }
    
    // Función para subir un archivo
    function uploadFile(file, category) {
        const formData = new FormData();
        formData.append('image', file);
        formData.append('category', category);
        
        fetch(`/api/datasets/{{ dataset.id }}/images`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                // Actualizar la interfaz
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al subir la imagen');
        });
    }
    
    // Eventos de eliminación de imágenes
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function() {
            const image = this.dataset.image;
            const category = this.dataset.category;
            
            if (confirm(`¿Estás seguro de que deseas eliminar esta imagen?`)) {
                fetch(`/api/datasets/{{ dataset.id }}/images/${category}/${image}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        this.closest('.image-card').remove();
                    } else {
                        alert('Error: ' + data.message);
                    }
                });
            }
        });
    });
    
    // Entrenar modelo
    document.getElementById('train-model-btn').addEventListener('click', function() {
        fetch(`/api/datasets/{{ dataset.id }}/train`, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                alert('Entrenamiento iniciado correctamente. ID: ' + data.training_id);
            } else {
                alert('Error: ' + data.message);
            }
        });
    });
    
    // Exportar dataset
    document.getElementById('export-dataset-btn').addEventListener('click', function() {
        window.location.href = `/api/datasets/{{ dataset.id }}/export`;
    });
});
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\datasets.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Datasets - {{ config.app_name }}{% endblock %}

{% block content %}
<div class="datasets-container">
    <h2>Gestión de Datasets</h2>
    
    <div class="card">
        <h3>Crear Nuevo Dataset</h3>
        <form id="create-dataset-form">
            <div class="form-group">
                <label for="dataset-name">Nombre:</label>
                <input type="text" id="dataset-name" required>
            </div>
            
            <div class="form-group">
                <label for="dataset-description">Descripción:</label>
                <textarea id="dataset-description"></textarea>
            </div>
            
            <div class="form-group">
                <label>Categorías:</label>
                <div id="categories-container">
                    <div class="category-input">
                        <input type="text" name="category" placeholder="Ej: sospechoso" required>
                        <button type="button" class="add-category">+</button>
                    </div>
                </div>
            </div>
            
            <button type="submit" class="btn primary">Crear Dataset</button>
        </form>
    </div>
    
    <div class="datasets-list">
        <h3>Datasets Existentes</h3>
        
        {% if datasets %}
            {% for dataset in datasets %}
            <div class="dataset-card" data-id="{{ dataset.id }}">
                <h4>{{ dataset.name }}</h4>
                <p>{{ dataset.description }}</p>
                <div class="dataset-stats">
                    <span>Imágenes: {{ dataset.images_count }}</span>
                    <span>Categorías: {{ dataset.categories|length }}</span>
                </div>
                <div class="dataset-actions">
                    <a href="{{ url_for('view_dataset', dataset_id=dataset.id) }}" class="btn view-dataset">Ver</a>
                    <button class="btn train-model">Entrenar Modelo</button>
                </div>
            </div>
            {% endfor %}
        {% else %}
            <p class="empty-state">No hay datasets disponibles. Crea uno nuevo para comenzar.</p>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Añadir categoría
    document.querySelector('.add-category').addEventListener('click', function() {
        const container = document.getElementById('categories-container');
        const newInput = document.createElement('div');
        newInput.className = 'category-input';
        newInput.innerHTML = `
            <input type="text" name="category" placeholder="Ej: normal" required>
            <button type="button" class="remove-category">-</button>
        `;
        container.appendChild(newInput);
        
        // Agregar evento para eliminar
        newInput.querySelector('.remove-category').addEventListener('click', function() {
            container.removeChild(newInput);
        });
    });
    
    // Crear dataset
    document.getElementById('create-dataset-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const name = document.getElementById('dataset-name').value;
        const description = document.getElementById('dataset-description').value;
        const categoryInputs = document.querySelectorAll('input[name="category"]');
        const categories = Array.from(categoryInputs).map(input => input.value);
        
        fetch('/api/datasets', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: name,
                description: description,
                categories: categories
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                alert('Dataset creado correctamente');
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al crear dataset');
        });
    });
});
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\error.html
--------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error - Sistema de Vigilancia IA</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f8f9fa;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 50px auto;
            padding: 30px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #dc3545;
            margin-top: 0;
        }
        .error-details {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            margin: 20px 0;
            overflow-x: auto;
        }
        .btn {
            display: inline-block;
            background-color: #007bff;
            color: #fff;
            padding: 10px 15px;
            text-decoration: none;
            border-radius: 4px;
            margin-top: 20px;
        }
        .btn:hover {
            background-color: #0069d9;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Error</h1>
        <p>Se ha producido un error en el sistema de vigilancia.</p>
        
        <div class="error-details">
            {{ error }}
        </div>
        
        <p>Por favor, intente de nuevo o contacte con el administrador del sistema si el problema persiste.</p>
        
        <a href="/" class="btn">Volver al inicio</a>
    </div>
</body>
</html> 

--------------------------------------------------------------------------------

📄 templates\faces.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Reconocimiento Facial - {{ config.app_name }}{% endblock %}

{% block content %}
<h2>Gestión de Reconocimiento Facial</h2>
<div class="faces-container">
    <div class="card register-face-card">
        <h3>Registrar Nuevo Rostro</h3>
        <div class="video-container">
            <img id="registration-preview" src="" alt="Previsualización para registro" style="width: 100%; max-width: 640px;">
        </div>
        <form id="register-face-form">
            <div class="form-group">
                <label for="camera-select">Seleccionar cámara:</label>
                <select id="camera-select" name="camera_id" required>
                    {% for camera in config.cameras %}
                        <option value="{{ camera.id }}">{{ camera.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="form-group">
                <label for="person-name">Nombre de la persona:</label>
                <input type="text" id="person-name" name="person_name" required>
            </div>
            <button type="submit" id="register-button">Registrar Rostro</button>
        </form>
        <div id="registration-status" class="status-message"></div>
    </div>
    
    <div class="card known-faces-card">
        <h3>Personas Conocidas</h3>
        <div id="known-faces-list" class="known-faces-container">
            <p>Cargando personas conocidas...</p>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    let streamActive = false;
    const previewImage = document.getElementById('registration-preview');
    const cameraSelect = document.getElementById('camera-select');
    const registrationForm = document.getElementById('register-face-form');
    const statusMessage = document.getElementById('registration-status');
    let currentCameraId = null;
    
    // Iniciar stream de video cuando se selecciona una cámara
    cameraSelect.addEventListener('change', startVideoStream);
    
    function startVideoStream() {
        const cameraId = cameraSelect.value;
        if (!cameraId) return;
        
        // Si ya hay un stream activo, detenerlo primero
        if (streamActive && currentCameraId) {
            stopVideoStream(currentCameraId);
        }
        
        currentCameraId = cameraId;
        
        // Iniciar cámara si no está activa
        fetch(`/api/cameras/toggle/${cameraId}`, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                // Usar streaming directo en lugar de actualizar periódicamente
                previewImage.src = `/video_feed/${cameraId}?t=${new Date().getTime()}`;
                streamActive = true;
                statusMessage.textContent = 'Cámara activada. Coloca tu rostro en el cuadro.';
                statusMessage.className = 'status-message info';
            } else {
                statusMessage.textContent = 'Error al activar la cámara. Intente de nuevo.';
                statusMessage.className = 'status-message error';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            statusMessage.textContent = 'Error al comunicarse con el servidor';
            statusMessage.className = 'status-message error';
        });
    }
    
    function stopVideoStream(cameraId) {
        if (!cameraId) return;
        
        fetch(`/api/cameras/toggle/${cameraId}`, {
            method: 'POST'
        })
        .then(() => {
            streamActive = false;
            previewImage.src = '';
        })
        .catch(error => console.error('Error al detener cámara:', error));
    }
    
    // Manejar envío del formulario de registro
    registrationForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        fetch('/api/faces/register', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                statusMessage.textContent = data.message;
                statusMessage.className = 'status-message success';
                
                // Actualizar lista de personas conocidas
                loadKnownFaces();
            } else {
                statusMessage.textContent = data.message;
                statusMessage.className = 'status-message error';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            statusMessage.textContent = 'Error al registrar rostro';
            statusMessage.className = 'status-message error';
        });
    });
    
    // Cargar lista de personas conocidas
    function loadKnownFaces() {
        const knownFacesList = document.getElementById('known-faces-list');
        
        fetch('/api/faces/known')
            .then(response => response.json())
            .then(data => {
                if (data.faces && data.faces.length > 0) {
                    knownFacesList.innerHTML = '';
                    
                    data.faces.forEach(face => {
                        const faceItem = document.createElement('div');
                        faceItem.className = 'face-item';
                        
                        faceItem.innerHTML = `
                            <img src="/api/faces/image/${face.id}" alt="${face.name}">
                            <div class="face-info">
                                <h4>${face.name}</h4>
                                <p>ID: ${face.id}</p>
                            </div>
                        `;
                        
                        knownFacesList.appendChild(faceItem);
                    });
                } else {
                    knownFacesList.innerHTML = '<p>No hay personas registradas</p>';
                }
            })
            .catch(error => {
                console.error('Error al cargar personas conocidas:', error);
                knownFacesList.innerHTML = '<p>Error al cargar personas conocidas</p>';
            });
    }
    
    // Iniciar al cargar la página
    document.addEventListener('DOMContentLoaded', function() {
        if (cameraSelect.value) {
            startVideoStream();
        }
        loadKnownFaces();
    });
    
    // Detener stream cuando se abandona la página
    window.addEventListener('beforeunload', function() {
        if (currentCameraId) {
            stopVideoStream(currentCameraId);
        }
    });
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\forensic.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Análisis Forense - {{ config.app_name }}{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<style>
.forensic-container {
    padding: 20px;
}

.search-panel {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    padding: 20px;
    margin-bottom: 20px;
}

.results-table {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden;
}

.incident-list {
    max-height: 600px;
    overflow-y: auto;
}

.incident-list table {
    margin-bottom: 0;
}

.incident-list tr {
    cursor: pointer;
}

.incident-list tr:hover {
    background-color: rgba(0,0,0,0.04);
}

.incident-details {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    padding: 20px;
    margin-bottom: 20px;
    display: flex;
    flex-direction: column;
    height: 100%;
}

.timeline {
    position: relative;
    padding: 20px 0;
}

.timeline-item {
    position: relative;
    padding-left: 45px;
    padding-bottom: 20px;
}

.timeline-item:before {
    content: "";
    position: absolute;
    left: 15px;
    top: 0;
    bottom: 0;
    width: 2px;
    background: #e0e0e0;
}

.timeline-item:last-child:before {
    bottom: 50%;
}

.timeline-icon {
    position: absolute;
    left: 5px;
    top: 0;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    background: #3498db;
    text-align: center;
    line-height: 22px;
    color: #fff;
    font-size: 12px;
}

.timeline-content {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 15px;
    position: relative;
}

.timeline-content:before {
    content: "";
    position: absolute;
    left: -10px;
    top: 10px;
    border-width: 10px 10px 10px 0;
    border-style: solid;
    border-color: transparent #f8f9fa transparent transparent;
}

.timeline-time {
    position: absolute;
    left: -140px;
    width: 120px;
    text-align: right;
    font-size: 12px;
    color: #6c757d;
}

.evidence-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    grid-gap: 15px;
    margin-top: 15px;
}

.evidence-item {
    background: #f8f9fa;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 1px 5px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: transform 0.2s;
}

.evidence-item:hover {
    transform: scale(1.03);
}

.evidence-img {
    width: 100%;
    height: 150px;
    object-fit: cover;
}

.evidence-info {
    padding: 10px;
}

.evidence-title {
    font-size: 14px;
    font-weight: 500;
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.evidence-meta {
    font-size: 12px;
    color: #6c757d;
    margin: 5px 0 0;
}

.tabs-container {
    margin-top: 20px;
}

.nav-tabs .nav-link {
    color: #495057;
}

.nav-tabs .nav-link.active {
    font-weight: 500;
}

.tab-content {
    background: #fff;
    border: 1px solid #dee2e6;
    border-top: 0;
    padding: 20px;
    border-radius: 0 0 8px 8px;
}

.video-player-container {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    background: #000;
    border-radius: 8px;
    overflow: hidden;
}

.video-player {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.video-controls {
    margin-top: 15px;
    display: flex;
    gap: 10px;
}

.annotation-panel {
    margin-top: 20px;
    border-top: 1px solid #e0e0e0;
    padding-top: 20px;
}

.status-pill {
    padding: 3px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: 500;
    text-transform: uppercase;
}

.status-open {
    background-color: #e1f5fe;
    color: #0288d1;
}

.status-investigating {
    background-color: #fff8e1;
    color: #ffa000;
}

.status-closed {
    background-color: #e8f5e9;
    color: #388e3c;
}

.severity-info {
    color: #0288d1;
}

.severity-warning {
    color: #ffa000;
}

.severity-critical {
    color: #d32f2f;
}

@media (max-width: 992px) {
    .timeline-time {
        position: static;
        width: auto;
        text-align: left;
        margin-bottom: 5px;
        display: block;
    }
    
    .timeline-item {
        padding-left: 30px;
    }
}
</style>
{% endblock %}

{% block content %}
<div class="container-fluid forensic-container">
    <div class="row mb-4">
        <div class="col-12">
            <h2>Análisis Forense</h2>
            <p class="text-muted">Investigue y analice incidentes de seguridad registrados por el sistema.</p>
        </div>
    </div>
    
    <div class="row">
        <!-- Panel de búsqueda -->
        <div class="col-12 mb-4">
            <div class="search-panel">
                <form id="searchForm">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="startDate" class="form-label">Fecha inicio</label>
                            <input type="text" class="form-control date-picker" id="startDate" placeholder="Desde...">
                        </div>
                        <div class="col-md-4">
                            <label for="endDate" class="form-label">Fecha fin</label>
                            <input type="text" class="form-control date-picker" id="endDate" placeholder="Hasta...">
                        </div>
                        <div class="col-md-4">
                            <label for="severityFilter" class="form-label">Severidad</label>
                            <select class="form-select" id="severityFilter">
                                <option value="">Todas</option>
                                <option value="info">Información</option>
                                <option value="warning">Advertencia</option>
                                <option value="critical">Crítica</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="incidentType" class="form-label">Tipo de incidente</label>
                            <select class="form-select" id="incidentType">
                                <option value="">Todos</option>
                                <option value="intrusion">Intrusión</option>
                                <option value="theft">Hurto</option>
                                <option value="suspicious">Comportamiento sospechoso</option>
                                <option value="safety">Violación de seguridad</option>
                                <option value="ppe">Falta de EPP</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="searchKeywords" class="form-label">Palabras clave</label>
                            <input type="text" class="form-control" id="searchKeywords" placeholder="Buscar...">
                        </div>
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary mt-3">
                                <i class="fas fa-search me-2"></i> Buscar
                            </button>
                            <button type="button" class="btn btn-outline-secondary mt-3 ms-2" id="clearSearch">
                                <i class="fas fa-times me-2"></i> Limpiar
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Panel de resultados -->
        <div class="col-lg-4 mb-4">
            <div class="results-table">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Incidentes encontrados</h5>
                    <span class="badge bg-primary" id="resultCount">0</span>
                </div>
                <div class="incident-list">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th scope="col">Fecha</th>
                                <th scope="col">Tipo</th>
                                <th scope="col">Sev.</th>
                                <th scope="col">Estado</th>
                            </tr>
                        </thead>
                        <tbody id="incidentResults">
                            <!-- Los resultados se cargarán dinámicamente aquí -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Panel de detalles de incidente -->
        <div class="col-lg-8">
            <div class="incident-details" id="incidentDetailsPanel">
                <div id="noIncidentSelected" class="text-center py-5">
                    <i class="fas fa-search fa-4x text-muted mb-3"></i>
                    <h5 class="text-muted">Seleccione un incidente para ver detalles</h5>
                </div>
                
                <div id="incidentDetails" class="d-none">
                    <div class="d-flex justify-content-between align-items-start mb-4">
                        <div>
                            <h3 id="incidentTitle">Título del incidente</h3>
                            <div class="d-flex align-items-center mt-2">
                                <span id="incidentDate" class="me-3 text-muted"></span>
                                <span id="incidentLocation" class="me-3"></span>
                                <span id="incidentStatus" class="status-pill status-open">Abierto</span>
                            </div>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="actionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Acciones
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionDropdown">
                                <li><a class="dropdown-item" href="#" id="btnExportReport"><i class="fas fa-file-export me-2"></i> Exportar reporte</a></li>
                                <li><a class="dropdown-item" href="#" id="btnChangeStatus"><i class="fas fa-exchange-alt me-2"></i> Cambiar estado</a></li>
                                <li><a class="dropdown-item" href="#" id="btnAddEvidence"><i class="fas fa-plus-circle me-2"></i> Añadir evidencia</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-danger" href="#" id="btnDeleteIncident"><i class="fas fa-trash-alt me-2"></i> Eliminar</a></li>
                            </ul>
                        </div>
                    </div>
                    
                    <p id="incidentDescription" class="lead mb-4">Descripción del incidente</p>
                    
                    <!-- Pestañas para los diferentes aspectos del incidente -->
                    <ul class="nav nav-tabs" id="incidentTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="timeline-tab" data-bs-toggle="tab" data-bs-target="#timeline" type="button" role="tab" aria-controls="timeline" aria-selected="true">
                                <i class="fas fa-history me-2"></i> Línea de tiempo
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="evidence-tab" data-bs-toggle="tab" data-bs-target="#evidence" type="button" role="tab" aria-controls="evidence" aria-selected="false">
                                <i class="fas fa-photo-video me-2"></i> Evidencias
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="analysis-tab" data-bs-toggle="tab" data-bs-target="#analysis" type="button" role="tab" aria-controls="analysis" aria-selected="false">
                                <i class="fas fa-chart-line me-2"></i> Análisis
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="notes-tab" data-bs-toggle="tab" data-bs-target="#notes" type="button" role="tab" aria-controls="notes" aria-selected="false">
                                <i class="fas fa-sticky-note me-2"></i> Notas
                            </button>
                        </li>
                    </ul>
                    
                    <div class="tab-content py-3" id="incidentTabContent">
                        <!-- Pestaña: Línea de tiempo -->
                        <div class="tab-pane fade show active" id="timeline" role="tabpanel" aria-labelledby="timeline-tab">
                            <div class="timeline" id="incidentTimeline">
                                <!-- La línea de tiempo se cargará dinámicamente aquí -->
                            </div>
                        </div>
                        
                        <!-- Pestaña: Evidencias -->
                        <div class="tab-pane fade" id="evidence" role="tabpanel" aria-labelledby="evidence-tab">
                            <div class="mb-3">
                                <button class="btn btn-sm btn-success" id="btnAddNewEvidence">
                                    <i class="fas fa-plus me-1"></i> Añadir nueva evidencia
                                </button>
                            </div>
                            <div class="evidence-list" id="evidenceList">
                                <!-- La lista de evidencias se cargará dinámicamente aquí -->
                            </div>
                        </div>
                        
                        <!-- Pestaña: Análisis -->
                        <div class="tab-pane fade" id="analysis" role="tabpanel" aria-labelledby="analysis-tab">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <div class="card">
                                        <div class="card-header">
                                            <h6 class="mb-0">Resumen de detecciones</h6>
                                        </div>
                                        <div class="card-body">
                                            <canvas id="detectionsChart" height="200"></canvas>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <div class="card">
                                        <div class="card-header">
                                            <h6 class="mb-0">Distribución de objetos</h6>
                                        </div>
                                        <div class="card-body">
                                            <canvas id="objectsChart" height="200"></canvas>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 mt-3">
                                    <h6>Análisis de IA</h6>
                                    <div class="card">
                                        <div class="card-body">
                                            <div id="aiAnalysis" class="mb-3">
                                                <p class="text-muted">No hay análisis disponible para este incidente.</p>
                                            </div>
                                            <button class="btn btn-primary btn-sm" id="btnGenerateAnalysis">
                                                <i class="fas fa-robot me-1"></i> Generar análisis con IA
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Pestaña: Notas -->
                        <div class="tab-pane fade" id="notes" role="tabpanel" aria-labelledby="notes-tab">
                            <div class="mb-3">
                                <label for="incidentNotes" class="form-label">Notas del analista</label>
                                <textarea class="form-control" id="incidentNotes" rows="8" placeholder="Escriba sus observaciones sobre este incidente..."></textarea>
                            </div>
                            <button class="btn btn-primary" id="btnSaveNotes">
                                <i class="fas fa-save me-1"></i> Guardar notas
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para visualizar evidencia -->
<div class="modal fade" id="evidenceModal" tabindex="-1" aria-labelledby="evidenceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="evidenceModalLabel">Evidencia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <div id="evidencePreview" class="text-center mb-3">
                    <!-- Contenido de la evidencia (imagen o video) -->
                </div>
                <div id="evidenceMetadata">
                    <!-- Metadatos de la evidencia -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" id="btnDownloadEvidence">
                    <i class="fas fa-download me-1"></i> Descargar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para añadir evidencia -->
<div class="modal fade" id="addEvidenceModal" tabindex="-1" aria-labelledby="addEvidenceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEvidenceModalLabel">Añadir nueva evidencia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <form id="addEvidenceForm">
                    <div class="mb-3">
                        <label for="evidenceType" class="form-label">Tipo de evidencia</label>
                        <select class="form-select" id="evidenceType" required>
                            <option value="image">Imagen</option>
                            <option value="video">Video</option>
                            <option value="document">Documento</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="evidenceFile" class="form-label">Archivo</label>
                        <input type="file" class="form-control" id="evidenceFile" required>
                    </div>
                    <div class="mb-3">
                        <label for="evidenceDescription" class="form-label">Descripción</label>
                        <textarea class="form-control" id="evidenceDescription" rows="3" placeholder="Descripción de la evidencia..."></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="evidenceTimestamp" class="form-label">Marca de tiempo</label>
                        <input type="text" class="form-control date-picker" id="evidenceTimestamp" placeholder="Seleccione fecha y hora...">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnSubmitEvidence">Guardar</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/es.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Inicializar selectores de fecha
    const dateConfig = {
        enableTime: true,
        dateFormat: "Y-m-d H:i",
        locale: "es",
        time_24hr: true
    };
    
    flatpickr(".date-picker", dateConfig);
    
    // Variables para seguimiento del estado
    let currentIncidentId = null;
    
    // Cargar incidentes iniciales
    loadIncidents();
    
    // Event listeners
    document.getElementById('searchForm').addEventListener('submit', function(e) {
        e.preventDefault();
        loadIncidents();
    });
    
    document.getElementById('clearSearch').addEventListener('click', function() {
        // Limpiar formulario
        document.getElementById('searchForm').reset();
        
        // Restablecer los date pickers
        const datePickers = document.querySelectorAll('.date-picker');
        datePickers.forEach(picker => {
            const fp = picker._flatpickr;
            if (fp) fp.clear();
        });
        
        // Recargar los incidentes
        loadIncidents();
    });
    
    // Cargar incidentes
    function loadIncidents() {
        // Obtener filtros
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const severity = document.getElementById('severityFilter').value;
        const incidentType = document.getElementById('incidentType').value;
        const keywords = document.getElementById('searchKeywords').value;
        
        // Construir filtros para la API
        const filters = {};
        if (startDate) filters.start_date = startDate;
        if (endDate) filters.end_date = endDate;
        if (severity) filters.severity = severity;
        if (incidentType) filters.incident_type = incidentType;
        if (keywords) filters.keywords = keywords;
        
        // Llamar a la API
        fetch('/api/forensic/incidents?' + new URLSearchParams(filters))
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    renderIncidents(data.incidents || []);
                } else {
                    showAlert('Error al cargar incidentes: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error de conexión al cargar incidentes', 'danger');
            });
    }
    
    // Renderizar incidentes en la tabla
    function renderIncidents(incidents) {
        const tableBody = document.getElementById('incidentResults');
        tableBody.innerHTML = '';
        
        document.getElementById('resultCount').textContent = incidents.length;
        
        if (incidents.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="4" class="text-center py-4">
                        <i class="fas fa-search fa-2x text-muted mb-2"></i>
                        <p class="text-muted mb-0">No se encontraron incidentes</p>
                    </td>
                </tr>
            `;
            return;
        }
        
        incidents.forEach(incident => {
            const row = document.createElement('tr');
            row.setAttribute('data-incident-id', incident.id);
            
            // Formatear fecha
            const date = new Date(incident.timestamp);
            const formattedDate = date.toLocaleDateString('es-ES', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            
            // Severidad con icono
            let severityIcon = '';
            if (incident.severity === 'critical') {
                severityIcon = '<i class="fas fa-exclamation-circle text-danger"></i>';
            } else if (incident.severity === 'warning') {
                severityIcon = '<i class="fas fa-exclamation-triangle text-warning"></i>';
            } else {
                severityIcon = '<i class="fas fa-info-circle text-info"></i>';
            }
            
            // Crear celdas
            row.innerHTML = `
                <td>${formattedDate}</td>
                <td>${incident.incident_type}</td>
                <td>${severityIcon}</td>
                <td><span class="status-pill status-${incident.status}">${incident.status}</span></td>
            `;
            
            // Agregar evento de clic
            row.addEventListener('click', function() {
                // Remover selección previa
                const previousSelected = document.querySelector('tr.table-active');
                if (previousSelected) previousSelected.classList.remove('table-active');
                
                // Marcar como seleccionada
                row.classList.add('table-active');
                
                // Cargar detalles
                loadIncidentDetails(incident.id);
            });
            
            tableBody.appendChild(row);
        });
    }
    
    // Cargar detalles de un incidente
    function loadIncidentDetails(incidentId) {
        currentIncidentId = incidentId;
        
        // Mostrar panel de detalles
        document.getElementById('noIncidentSelected').classList.add('d-none');
        document.getElementById('incidentDetails').classList.remove('d-none');
        
        // Mostrar spinner mientras carga
        document.getElementById('incidentDetails').innerHTML = `
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-3">Cargando detalles del incidente...</p>
            </div>
        `;
        
        // Llamar a la API para obtener detalles
        fetch(`/api/forensic/incidents/${incidentId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    renderIncidentDetails(data.incident);
                    loadIncidentTimeline(incidentId);
                    loadIncidentEvidence(incidentId);
                    loadIncidentAnalysis(incidentId);
                } else {
                    showAlert('Error al cargar detalles: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error de conexión al cargar detalles', 'danger');
            });
    }
    
    // Renderizar detalles del incidente
    function renderIncidentDetails(incident) {
        // Implementar la lógica para mostrar los detalles del incidente
    }
    
    // Cargar línea de tiempo
    function loadIncidentTimeline(incidentId) {
        // Implementar la lógica para cargar la línea de tiempo
    }
    
    // Cargar evidencias
    function loadIncidentEvidence(incidentId) {
        // Implementar la lógica para cargar las evidencias
    }
    
    // Cargar análisis
    function loadIncidentAnalysis(incidentId) {
        // Implementar la lógica para cargar el análisis
    }
    
    // Función auxiliar para mostrar alertas
    function showAlert(message, type = 'info') {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
        `;
        
        const container = document.querySelector('.forensic-container');
        container.insertBefore(alertDiv, container.firstChild);
        
        // Auto-cerrar después de 5 segundos
        setTimeout(() => {
            alertDiv.classList.remove('show');
            setTimeout(() => alertDiv.remove(), 150);
        }, 5000);
    }
});
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\hardware_monitor.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Monitor de Hardware - Sistema de Vigilancia IA{% endblock %}

{% block content %}
<style>
    .hardware-dashboard {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-top: 20px;
    }
    
    @media (max-width: 768px) {
        .hardware-dashboard {
            grid-template-columns: 1fr;
        }
    }
    
    .hardware-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        overflow: hidden;
    }
    
    .hardware-header {
        padding: 15px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .hardware-title {
        font-size: 18px;
        font-weight: bold;
        margin: 0;
    }
    
    .hardware-body {
        padding: 20px;
    }
    
    .hardware-stat {
        margin-bottom: 15px;
        display: flex;
        justify-content: space-between;
    }
    
    .hardware-stat:last-child {
        margin-bottom: 0;
    }
    
    .hardware-label {
        font-weight: bold;
        color: #495057;
    }
    
    .hardware-value {
        font-family: monospace;
        color: #212529;
    }
    
    .hardware-footer {
        padding: 15px;
        background-color: #f8f9fa;
        border-top: 1px solid #e9ecef;
        text-align: right;
    }
    
    .framework-section {
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid #e9ecef;
    }
    
    .framework-title {
        font-weight: bold;
        margin-bottom: 10px;
    }
    
    .optimize-btn {
        padding: 8px 15px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .optimize-btn:hover {
        background-color: #0069d9;
    }
    
    .progress-container {
        height: 5px;
        background-color: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
        margin-top: 5px;
    }
    
    .progress-bar {
        height: 100%;
        background-color: #28a745;
        transition: width 0.3s;
    }
    
    .progress-bar.high {
        background-color: #dc3545;
    }
    
    .progress-bar.medium {
        background-color: #ffc107;
    }
</style>

<div class="page-header">
    <h1>Monitor de Hardware</h1>
    <p>Información sobre el hardware del sistema y optimización de rendimiento</p>
</div>

<div id="loadingIndicator" class="loading-indicator">
    <div class="spinner"></div>
    <p>Cargando información de hardware...</p>
</div>

<div class="hardware-dashboard">
    <div class="hardware-card">
        <div class="hardware-header">
            <h2 class="hardware-title">CPU</h2>
            <span id="cpuRefreshBtn" class="refresh-btn"><i class="fas fa-sync-alt"></i></span>
        </div>
        <div class="hardware-body" id="cpuInfo">
            <div class="hardware-stat">
                <span class="hardware-label">Modelo:</span>
                <span class="hardware-value" id="cpuModel">Cargando...</span>
            </div>
            <div class="hardware-stat">
                <span class="hardware-label">Núcleos:</span>
                <span class="hardware-value" id="cpuCores">Cargando...</span>
            </div>
            <div class="hardware-stat">
                <span class="hardware-label">Arquitectura:</span>
                <span class="hardware-value" id="cpuArch">Cargando...</span>
            </div>
            <div class="hardware-stat">
                <span class="hardware-label">Soporte AVX:</span>
                <span class="hardware-value" id="cpuAvx">Cargando...</span>
            </div>
        </div>
    </div>
    
    <div class="hardware-card">
        <div class="hardware-header">
            <h2 class="hardware-title">GPU</h2>
            <span id="gpuRefreshBtn" class="refresh-btn"><i class="fas fa-sync-alt"></i></span>
        </div>
        <div class="hardware-body" id="gpuInfo">
            <!-- Se llenará dinámicamente -->
        </div>
    </div>
    
    <div class="hardware-card">
        <div class="hardware-header">
            <h2 class="hardware-title">Frameworks de IA</h2>
            <span id="fwRefreshBtn" class="refresh-btn"><i class="fas fa-sync-alt"></i></span>
        </div>
        <div class="hardware-body" id="frameworkInfo">
            <!-- Se llenará dinámicamente -->
        </div>
        <div class="hardware-footer">
            <button id="optimizeAllBtn" class="optimize-btn">Optimizar Todo</button>
        </div>
    </div>
    
    <div class="hardware-card">
        <div class="hardware-header">
            <h2 class="hardware-title">Rendimiento</h2>
            <span id="perfRefreshBtn" class="refresh-btn"><i class="fas fa-sync-alt"></i></span>
        </div>
        <div class="hardware-body" id="performanceInfo">
            <div class="hardware-stat">
                <span class="hardware-label">Uso CPU:</span>
                <div class="performance-value">
                    <span id="cpuUsage">-</span>
                    <div class="progress-container">
                        <div id="cpuUsageBar" class="progress-bar" style="width: 0%"></div>
                    </div>
                </div>
            </div>
            <div class="hardware-stat">
                <span class="hardware-label">Memoria:</span>
                <div class="performance-value">
                    <span id="memoryUsage">-</span>
                    <div class="progress-container">
                        <div id="memoryUsageBar" class="progress-bar" style="width: 0%"></div>
                    </div>
                </div>
            </div>
            <div class="hardware-stat">
                <span class="hardware-label">Uso GPU:</span>
                <div class="performance-value">
                    <span id="gpuUsage">-</span>
                    <div class="progress-container">
                        <div id="gpuUsageBar" class="progress-bar" style="width: 0%"></div>
                    </div>
                </div>
            </div>
            <div class="hardware-stat">
                <span class="hardware-label">Memoria GPU:</span>
                <div class="performance-value">
                    <span id="gpuMemoryUsage">-</span>
                    <div class="progress-container">
                        <div id="gpuMemoryUsageBar" class="progress-bar" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="hardware-card">
        <div class="hardware-header">
            <h2 class="hardware-title">Hardware Específico</h2>
        </div>
        <div class="hardware-body">
            <h3>GPUs NVIDIA</h3>
            <div id="nvidiaInfo">
                <p>Detecte y configure GPUs NVIDIA para mejor rendimiento</p>
            </div>
            <div class="hardware-footer">
                <button onclick="detectNvidia()" class="optimize-btn">Detectar NVIDIA</button>
                <button onclick="optimizeForNvidia()" class="optimize-btn">Optimizar para GeForce</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Variables globales
    let hardwareInfo = null;
    let updateInterval = null;
    
    // Funciones de inicialización
    document.addEventListener('DOMContentLoaded', function() {
        loadHardwareInfo();
        
        // Configurar botones de actualización
        document.getElementById('cpuRefreshBtn').addEventListener('click', loadHardwareInfo);
        document.getElementById('gpuRefreshBtn').addEventListener('click', loadHardwareInfo);
        document.getElementById('fwRefreshBtn').addEventListener('click', loadHardwareInfo);
        document.getElementById('perfRefreshBtn').addEventListener('click', startPerformanceMonitoring);
        
        // Configurar botón de optimización
        document.getElementById('optimizeAllBtn').addEventListener('click', optimizeHardware);
        
        // Iniciar monitoreo de rendimiento
        startPerformanceMonitoring();
    });
    
    // Cargar información de hardware
    function loadHardwareInfo() {
        document.getElementById('loadingIndicator').style.display = 'flex';
        
        fetch('/api/system/hardware')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al obtener información de hardware');
                }
                return response.json();
            })
            .then(data => {
                hardwareInfo = data;
                updateHardwareDisplay(data);
                document.getElementById('loadingIndicator').style.display = 'none';
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('loadingIndicator').style.display = 'none';
                showAlert('Error al cargar información de hardware: ' + error.message, 'danger');
            });
    }
    
    // Actualizar pantalla con información de hardware
    function updateHardwareDisplay(data) {
        // Actualizar información de CPU
        if (data.cpu) {
            document.getElementById('cpuModel').textContent = data.cpu.model || 'Desconocido';
            document.getElementById('cpuCores').textContent = data.cpu.cores || 'Desconocido';
            document.getElementById('cpuArch').textContent = data.cpu.architecture || 'Desconocido';
            document.getElementById('cpuAvx').textContent = data.cpu.avx_support ? 'Sí' : 'No';
        }
        
        // Actualizar información de GPU
        const gpuContainer = document.getElementById('gpuInfo');
        if (data.gpu && data.gpu.length > 0) {
            let gpuHtml = '';
            data.gpu.forEach((gpu, index) => {
                gpuHtml += `
                    <div class="hardware-stat">
                        <span class="hardware-label">GPU ${index+1}:</span>
                        <span class="hardware-value">${gpu.name || 'Desconocida'}</span>
                    </div>
                    <div class="hardware-stat">
                        <span class="hardware-label">Memoria:</span>
                        <span class="hardware-value">${gpu.memory_mb || 0} MB</span>
                    </div>
                    <div class="hardware-stat">
                        <span class="hardware-label">Tipo:</span>
                        <span class="hardware-value">${gpu.type || 'Desconocido'}</span>
                    </div>
                `;
                
                // Añadir separador si no es la última GPU
                if (index < data.gpu.length - 1) {
                    gpuHtml += '<hr>';
                }
            });
            gpuContainer.innerHTML = gpuHtml;
        } else {
            gpuContainer.innerHTML = '<div class="alert alert-warning">No se detectaron GPUs compatibles con el sistema</div>';
        }
        
        // Actualizar información de frameworks
        const frameworkContainer = document.getElementById('frameworkInfo');
        if (data.frameworks) {
            let fwHtml = '';
            
            // TensorFlow
            fwHtml += `
                <div class="hardware-stat">
                    <span class="hardware-label">TensorFlow:</span>
                    <span class="hardware-value">${data.frameworks.tensorflow ? 'Disponible' : 'No disponible'}</span>
                </div>
            `;
            
            // PyTorch
            fwHtml += `
                <div class="hardware-stat">
                    <span class="hardware-label">PyTorch:</span>
                    <span class="hardware-value">${data.frameworks.pytorch ? 'Disponible' : 'No disponible'}</span>
                </div>
            `;
            
            // ONNX Runtime
            fwHtml += `
                <div class="hardware-stat">
                    <span class="hardware-label">ONNX Runtime:</span>
                    <span class="hardware-value">${data.frameworks.onnx ? 'Disponible' : 'No disponible'}</span>
                </div>
            `;
            
            // Sección de optimización por framework
            if (data.frameworks.tensorflow || data.frameworks.pytorch || data.frameworks.onnx) {
                fwHtml += `
                    <div class="framework-section">
                        <div class="framework-title">Optimización por Framework</div>
                `;
                
                if (data.frameworks.tensorflow) {
                    fwHtml += `
                        <div class="hardware-stat">
                            <span class="hardware-label">TensorFlow:</span>
                            <button class="optimize-btn" onclick="optimizeHardware('tensorflow')">Optimizar</button>
                        </div>
                    `;
                }
                
                if (data.frameworks.pytorch) {
                    fwHtml += `
                        <div class="hardware-stat">
                            <span class="hardware-label">PyTorch:</span>
                            <button class="optimize-btn" onclick="optimizeHardware('torch')">Optimizar</button>
                        </div>
                    `;
                }
                
                if (data.frameworks.onnx) {
                    fwHtml += `
                        <div class="hardware-stat">
                            <span class="hardware-label">ONNX Runtime:</span>
                            <button class="optimize-btn" onclick="optimizeHardware('onnx')">Optimizar</button>
                        </div>
                    `;
                }
                
                fwHtml += `</div>`;
            }
            
            frameworkContainer.innerHTML = fwHtml;
        } else {
            frameworkContainer.innerHTML = '<div class="alert alert-warning">No se pudo determinar los frameworks disponibles</div>';
        }
    }
    
    // Iniciar monitoreo de rendimiento
    function startPerformanceMonitoring() {
        // Detener intervalo previo si existe
        if (updateInterval) {
            clearInterval(updateInterval);
        }
        
        // Actualizar inmediatamente
        updatePerformanceMetrics();
        
        // Configurar intervalo de actualización (cada 3 segundos)
        updateInterval = setInterval(updatePerformanceMetrics, 3000);
    }
    
    // Actualizar métricas de rendimiento
    function updatePerformanceMetrics() {
        // En una aplicación real, esto se obtendría de un endpoint específico
        // Por ahora, generamos datos simulados
        simulatePerformanceMetrics();
    }
    
    // Simular métricas de rendimiento (para demostración)
    function simulatePerformanceMetrics() {
        // CPU
        const cpuUsage = Math.floor(Math.random() * 90) + 10; // 10-100%
        document.getElementById('cpuUsage').textContent = `${cpuUsage}%`;
        const cpuBar = document.getElementById('cpuUsageBar');
        cpuBar.style.width = `${cpuUsage}%`;
        
        // Cambiar color según uso
        if (cpuUsage > 80) {
            cpuBar.className = 'progress-bar high';
        } else if (cpuUsage > 60) {
            cpuBar.className = 'progress-bar medium';
        } else {
            cpuBar.className = 'progress-bar';
        }
        
        // Memoria
        const memoryUsage = Math.floor(Math.random() * 70) + 20; // 20-90%
        const totalMemory = 8; // GB (simulado)
        const usedMemory = (memoryUsage / 100 * totalMemory).toFixed(1);
        document.getElementById('memoryUsage').textContent = `${usedMemory}GB / ${totalMemory}GB (${memoryUsage}%)`;
        const memoryBar = document.getElementById('memoryUsageBar');
        memoryBar.style.width = `${memoryUsage}%`;
        
        // Cambiar color según uso
        if (memoryUsage > 80) {
            memoryBar.className = 'progress-bar high';
        } else if (memoryUsage > 60) {
            memoryBar.className = 'progress-bar medium';
        } else {
            memoryBar.className = 'progress-bar';
        }
        
        // GPU (solo si hay GPU)
        if (hardwareInfo && hardwareInfo.gpu && hardwareInfo.gpu.length > 0) {
            const gpuUsage = Math.floor(Math.random() * 80) + 10; // 10-90%
            document.getElementById('gpuUsage').textContent = `${gpuUsage}%`;
            const gpuBar = document.getElementById('gpuUsageBar');
            gpuBar.style.width = `${gpuUsage}%`;
            
            // Cambiar color según uso
            if (gpuUsage > 80) {
                gpuBar.className = 'progress-bar high';
            } else if (gpuUsage > 60) {
                gpuBar.className = 'progress-bar medium';
            } else {
                gpuBar.className = 'progress-bar';
            }
            
            // Memoria GPU
            const gpuMemoryUsage = Math.floor(Math.random() * 70) + 10; // 10-80%
            const totalGpuMemory = hardwareInfo.gpu[0].memory_mb / 1024; // Convertir a GB
            const usedGpuMemory = (gpuMemoryUsage / 100 * totalGpuMemory).toFixed(1);
            document.getElementById('gpuMemoryUsage').textContent = 
                `${usedGpuMemory}GB / ${totalGpuMemory.toFixed(1)}GB (${gpuMemoryUsage}%)`;
            const gpuMemoryBar = document.getElementById('gpuMemoryUsageBar');
            gpuMemoryBar.style.width = `${gpuMemoryUsage}%`;
            
            // Cambiar color según uso
            if (gpuMemoryUsage > 80) {
                gpuMemoryBar.className = 'progress-bar high';
            } else if (gpuMemoryUsage > 60) {
                gpuMemoryBar.className = 'progress-bar medium';
            } else {
                gpuMemoryBar.className = 'progress-bar';
            }
        } else {
            document.getElementById('gpuUsage').textContent = 'N/A';
            document.getElementById('gpuUsageBar').style.width = '0%';
            document.getElementById('gpuMemoryUsage').textContent = 'N/A';
            document.getElementById('gpuMemoryUsageBar').style.width = '0%';
        }
    }
    
    // Optimizar hardware
    function optimizeHardware(framework) {
        document.getElementById('loadingIndicator').style.display = 'flex';
        
        fetch('/api/system/hardware/optimize', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                framework: framework || undefined
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al optimizar hardware');
            }
            return response.json();
        })
        .then(data => {
            document.getElementById('loadingIndicator').style.display = 'none';
            
            // Mostrar resultados
            let message = `Optimización ${framework ? 'de ' + framework : ''} completada correctamente.`;
            
            // Detalles específicos
            if (data.configuration) {
                let details = [];
                
                if (data.configuration.tensorflow && data.configuration.tensorflow.status === 'configured') {
                    details.push(`TensorFlow: ${data.configuration.tensorflow.gpu_enabled ? 'GPU activada' : 'Modo CPU'}`);
                }
                
                if (data.configuration.torch && data.configuration.torch.status === 'configured') {
                    details.push(`PyTorch: ${data.configuration.torch.gpu_enabled ? 'CUDA activado' : 'Modo CPU'}`);
                }
                
                if (data.configuration.onnx && data.configuration.onnx.status === 'configured') {
                    details.push(`ONNX Runtime: ${data.configuration.onnx.enabled_providers[0] || 'CPU'}`);
                }
                
                if (details.length > 0) {
                    message += '<br><br>Detalles:<ul>' + details.map(d => `<li>${d}</li>`).join('') + '</ul>';
                }
            }
            
            showAlert(message, 'success');
            
            // Recargar información de hardware para mostrar cambios
            loadHardwareInfo();
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('loadingIndicator').style.display = 'none';
            showAlert('Error al optimizar hardware: ' + error.message, 'danger');
        });
    }
    
    // Mostrar alerta
    function showAlert(message, type = 'info') {
        const alertBox = document.createElement('div');
        alertBox.className = `alert alert-${type}`;
        alertBox.innerHTML = message;
        
        const container = document.querySelector('.page-container');
        container.insertBefore(alertBox, container.firstChild);
        
        // Auto-ocultar después de 5 segundos
        setTimeout(() => {
            alertBox.style.opacity = '0';
            setTimeout(() => alertBox.remove(), 500);
        }, 5000);
    }

    function detectNvidia() {
        document.getElementById('loadingIndicator').style.display = 'flex';
        
        fetch('/api/system/hardware/nvidia')
            .then(response => response.json())
            .then(data => {
                document.getElementById('loadingIndicator').style.display = 'none';
                
                const infoDiv = document.getElementById('nvidiaInfo');
                
                if (data.status === 'not_available') {
                    infoDiv.innerHTML = '<div class="alert alert-warning">No se detectaron GPUs NVIDIA</div>';
                    return;
                }
                
                let html = '<div class="hardware-stat-group">';
                html += `<h4>GPUs NVIDIA Detectadas: ${data.count}</h4>`;
                html += '<ul class="hardware-details-list">';
                
                data.nvidia_gpus.forEach(gpu => {
                    html += '<li class="hardware-detail-item">';
                    html += `<div class="hardware-detail-title">${gpu.name}</div>`;
                    if (gpu.memory_mb > 0) {
                        html += `<div class="hardware-detail-value">Memoria: ${gpu.memory_mb} MB</div>`;
                    }
                    html += `<div class="hardware-detail-value">Driver: ${gpu.driver_version}</div>`;
                    if (gpu.is_geforce) {
                        html += '<div class="hardware-detail-badge geforce">GeForce</div>';
                    }
                    html += '</li>';
                });
                
                html += '</ul></div>';
                infoDiv.innerHTML = html;
            })
            .catch(error => {
                document.getElementById('loadingIndicator').style.display = 'none';
                showAlert('Error al detectar GPUs NVIDIA: ' + error.message, 'danger');
            });
    }

    function optimizeForNvidia() {
        document.getElementById('loadingIndicator').style.display = 'flex';
        
        fetch('/api/system/hardware/optimize/nvidia', {
            method: 'POST'
        })
            .then(response => response.json())
            .then(data => {
                document.getElementById('loadingIndicator').style.display = 'none';
                
                if (data.status === 'not_available') {
                    showAlert(data.message, 'warning');
                    return;
                }
                
                let message = 'Sistema optimizado para NVIDIA GeForce<br><br>';
                message += '<strong>Optimizaciones:</strong><ul>';
                
                if (data.configuration && data.configuration.optimizations) {
                    data.configuration.optimizations.forEach(opt => {
                        message += `<li>${opt.framework}: ${opt.action}</li>`;
                    });
                } else {
                    message += '<li>No se aplicaron optimizaciones específicas</li>';
                }
                
                message += '</ul>';
                
                showAlert(message, 'success');
                
                // Actualizar información
                detectNvidia();
            })
            .catch(error => {
                document.getElementById('loadingIndicator').style.display = 'none';
                showAlert('Error al optimizar para NVIDIA: ' + error.message, 'danger');
            });
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\index.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Inicio - Sistema de Vigilancia IA{% endblock %}

{% block content %}
    <h2>Panel de Control</h2>
    
    <div class="dashboard">
        <div class="card">
            <h3>Cámaras Activas</h3>
            <p class="metric">{{ cameras|default(0) }}</p>
        </div>
        
        <div class="card">
            <h3>Alertas Recientes</h3>
            <p class="metric">{{ alerts|default(0) }}</p>
        </div>
        
        <div class="card">
            <h3>Detecciones Hoy</h3>
            <p class="metric">{{ detections|default(0) }}</p>
        </div>
    </div>
    
    <h3>Actividad Reciente</h3>
    <div class="activity-feed">
        {% if recent_activity %}
            <ul>
                {% for activity in recent_activity %}
                    <li>
                        <span class="time">{{ activity.timestamp|string }}</span>
                        <span class="event">{{ activity.description }}</span>
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No hay actividad reciente para mostrar.</p>
        {% endif %}
    </div>
{% endblock %}

{% block head_extra %}
<style>
    .dashboard {
        display: flex;
        flex-wrap: wrap;
        margin: 0 -10px;
    }
    .card {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 20px;
        margin: 10px;
        flex: 1 0 200px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .metric {
        font-size: 2em;
        font-weight: bold;
        color: #007bff;
    }
    .activity-feed {
        margin-top: 20px;
    }
    .activity-feed ul {
        list-style: none;
        padding: 0;
    }
    .activity-feed li {
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
    .time {
        color: #6c757d;
        margin-right: 10px;
    }
</style>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\industrial.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Modo Industrial - Sistema de Vigilancia IA{% endblock %}

{% block content %}
    <h2>Modo Industrial</h2>
    
    <div class="dashboard">
        <div class="card">
            <h3>Cámaras Industriales</h3>
            <p>Configure las cámaras de seguridad industrial.</p>
        </div>
        
        <div class="card">
            <h3>Reglas de Seguridad</h3>
            <p>Configure las reglas de detección de equipos de protección y zonas de seguridad.</p>
        </div>
    </div>
    
    <div class="card">
        <h3>Vista en tiempo real</h3>
        <div class="camera-container">
            <p>No hay cámaras configuradas.</p>
        </div>
    </div>
{% endblock %}

{% block head_extra %}
<style>
    .safety-dashboard {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .dashboard-section {
        flex: 1;
        min-width: 300px;
    }
    
    .status-cards {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }
    
    .status-card {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        min-width: 150px;
        flex: 1;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .status-card h4 {
        margin-top: 0;
        margin-bottom: 10px;
        font-size: 1rem;
        color: #495057;
    }
    
    .metric {
        font-size: 2rem;
        font-weight: bold;
        color: #007bff;
        margin: 0;
    }
    
    .metric.alert {
        color: #dc3545;
    }
    
    .safety-zones {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .zone {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .zone h4 {
        margin-top: 0;
        margin-bottom: 10px;
    }
    
    .zone-status {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        font-weight: bold;
    }
    
    .zone-status.safe {
        color: #28a745;
    }
    
    .zone-status.warning {
        color: #ffc107;
    }
    
    .zone-status.danger {
        color: #dc3545;
    }
    
    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
    }
    
    .safe .status-indicator {
        background-color: #28a745;
    }
    
    .warning .status-indicator {
        background-color: #ffc107;
    }
    
    .danger .status-indicator {
        background-color: #dc3545;
    }
    
    .warning-message {
        color: #856404;
        background-color: #fff3cd;
        padding: 8px;
        border-radius: 4px;
        font-size: 0.9rem;
    }
    
    .protocols-list {
        list-style: none;
        padding: 0;
    }
    
    .protocol-item {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
    
    .protocol-status {
        font-weight: bold;
    }
    
    .protocol-status.active {
        color: #28a745;
    }
    
    .protocol-status.inactive {
        color: #6c757d;
    }
    
    .mode-description {
        background-color: #e9ecef;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }
</style>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\maps.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Mapas y Posiciones - {{ config.app_name }}{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<style>
    #map {
        height: 600px;
        width: 100%;
    }
    .map-controls {
        margin-bottom: 20px;
    }
    .location-list {
        height: 400px;
        overflow-y: auto;
    }
    .guard-item {
        padding: 10px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
    }
    .guard-item:hover {
        background-color: #f5f5f5;
    }
    .tab-content {
        display: none;
    }
    .tab-content.active {
        display: block;
    }
    .route-item {
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    .fence-item {
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
</style>
{% endblock %}

{% block content %}
<h2>Mapas y Posiciones</h2>

<div class="map-container">
    <div class="row">
        <div class="col-8">
            <div class="card">
                <div class="map-controls">
                    <div class="button-group">
                        <button id="add-location-btn" class="button">Añadir Ubicación</button>
                        <button id="add-route-btn" class="button">Crear Ruta</button>
                        <button id="add-fence-btn" class="button">Crear Geocerca</button>
                        <button id="clear-map-btn" class="button">Limpiar Selección</button>
                    </div>
                </div>
                <div id="map"></div>
            </div>
        </div>
        
        <div class="col-4">
            <div class="card">
                <div class="tabs">
                    <button class="tab-button active" data-tab="guards-tab">Guardias</button>
                    <button class="tab-button" data-tab="locations-tab">Ubicaciones</button>
                    <button class="tab-button" data-tab="routes-tab">Rutas</button>
                    <button class="tab-button" data-tab="fences-tab">Geocercas</button>
                </div>
                
                <div id="guards-tab" class="tab-content active">
                    <h3>Guardias Activos</h3>
                    <div class="location-list" id="guards-list">
                        <p class="empty-list">No hay guardias activos</p>
                    </div>
                </div>
                
                <div id="locations-tab" class="tab-content">
                    <h3>Ubicaciones</h3>
                    <div class="location-list" id="locations-list">
                        <p class="empty-list">No hay ubicaciones definidas</p>
                    </div>
                </div>
                
                <div id="routes-tab" class="tab-content">
                    <h3>Rutas</h3>
                    <div class="location-list" id="routes-list">
                        <p class="empty-list">No hay rutas definidas</p>
                    </div>
                </div>
                
                <div id="fences-tab" class="tab-content">
                    <h3>Geocercas</h3>
                    <div class="location-list" id="fences-list">
                        <p class="empty-list">No hay geocercas definidas</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para añadir ubicación -->
<div id="add-location-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Añadir Ubicación</h3>
        
        <form id="location-form">
            <div class="form-group">
                <label for="location-name">Nombre:</label>
                <input type="text" id="location-name" required>
            </div>
            
            <div class="form-group">
                <label for="location-type">Tipo:</label>
                <select id="location-type">
                    <option value="checkpoint">Punto de control</option>
                    <option value="camera">Cámara</option>
                    <option value="entrance">Entrada/Salida</option>
                    <option value="generic">Genérico</option>
                </select>
            </div>
            
            <div class="form-group">
                <label>Coordenadas:</label>
                <div class="coords-display">
                    <span id="location-coords">Haz clic en el mapa para seleccionar ubicación</span>
                </div>
            </div>
            
            <div class="form-group">
                <label for="location-description">Descripción:</label>
                <textarea id="location-description" rows="3"></textarea>
            </div>
            
            <div class="button-group">
                <button type="submit" class="button">Guardar</button>
                <button type="button" class="button cancel-button">Cancelar</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal para añadir ruta -->
<div id="add-route-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Crear Ruta</h3>
        
        <form id="route-form">
            <div class="form-group">
                <label for="route-name">Nombre:</label>
                <input type="text" id="route-name" required>
            </div>
            
            <div class="form-group">
                <label>Puntos de ruta:</label>
                <div class="route-points-list" id="route-points-list">
                    <p>Haz clic en el mapa para añadir puntos a la ruta</p>
                </div>
            </div>
            
            <div class="form-group">
                <label for="route-description">Descripción:</label>
                <textarea id="route-description" rows="3"></textarea>
            </div>
            
            <div class="button-group">
                <button type="submit" class="button">Guardar</button>
                <button type="button" class="button cancel-button">Cancelar</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal para añadir geocerca -->
<div id="add-fence-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Crear Geocerca</h3>
        
        <form id="fence-form">
            <div class="form-group">
                <label for="fence-name">Nombre:</label>
                <input type="text" id="fence-name" required>
            </div>
            
            <div class="form-group">
                <label for="fence-type">Tipo:</label>
                <select id="fence-type">
                    <option value="restricted">Zona restringida</option>
                    <option value="perimeter">Perímetro</option>
                    <option value="alert">Zona de alerta</option>
                </select>
            </div>
            
            <div class="form-group">
                <label>Puntos de geocerca:</label>
                <div class="fence-points-list" id="fence-points-list">
                    <p>Haz clic en el mapa para añadir puntos a la geocerca</p>
                </div>
            </div>
            
            <div class="form-group">
                <label for="fence-description">Descripción:</label>
                <textarea id="fence-description" rows="3"></textarea>
            </div>
            
            <div class="button-group">
                <button type="submit" class="button">Guardar</button>
                <button type="button" class="button cancel-button">Cancelar</button>
            </div>
        </form>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script>
    // Variables globales
    let map;
    let editMode = null;  // location, route, fence
    let selectedLocation = null;
    let routePoints = [];
    let fencePoints = [];
    let routeLayer = null;
    let fenceLayer = null;
    let guardMarkers = {};
    
    // Configurar mapa al cargar la página
    document.addEventListener('DOMContentLoaded', function() {
        // Inicializar mapa
        map = L.map('map').setView([-34.6037, -58.3816], 13);  // Buenos Aires como ejemplo
        
        // Añadir capa de OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        // Configurar interfaz
        setupMapEvents();
        setupTabs();
        setupUI();
        
        // Cargar datos iniciales
        loadGuards();
        loadLocations();
        loadRoutes();
        loadFences();
        
        // Actualizar guardias cada 10 segundos
        setInterval(loadGuards, 10000);
    });
    
    // Configurar eventos del mapa
    function setupMapEvents() {
        map.on('click', function(e) {
            const lat = e.latlng.lat;
            const lng = e.latlng.lng;
            
            if (editMode === 'location') {
                // Actualizar coordenadas en el formulario
                document.getElementById('location-coords').textContent = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                selectedLocation = { lat, lng };
            }
            else if (editMode === 'route') {
                // Añadir punto a la ruta
                routePoints.push([lat, lng]);
                updateRoutePointsList();
                
                // Actualizar línea en el mapa
                if (routeLayer) {
                    routeLayer.remove();
                }
                
                if (routePoints.length > 1) {
                    routeLayer = L.polyline(routePoints, { color: 'blue' }).addTo(map);
                }
            }
            else if (editMode === 'fence') {
                // Añadir punto a la geocerca
                fencePoints.push([lat, lng]);
                updateFencePointsList();
                
                // Actualizar polígono en el mapa
                if (fenceLayer) {
                    fenceLayer.remove();
                }
                
                if (fencePoints.length > 2) {
                    fenceLayer = L.polygon(fencePoints, { color: 'red' }).addTo(map);
                }
            }
        });
    }
    
    // Cargar guardias activos
    function loadGuards() {
        fetch('/api/geo/guards')
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    updateGuardsListUI(data.guards);
                    updateGuardMarkers(data.guards);
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
    
    // Actualizar lista de guardias en UI
    function updateGuardsListUI(guards) {
        const guardsList = document.getElementById('guards-list');
        
        if (guards.length === 0) {
            guardsList.innerHTML = '<p class="empty-list">No hay guardias activos</p>';
            return;
        }
        
        let html = '';
        
        guards.forEach(guard => {
            const lastUpdate = new Date(guard.last_update * 1000).toLocaleTimeString();
            const routeInfo = guard.route ? `<div class="route-info">Ruta: ${guard.route.name}</div>` : '';
            
            html += `
                <div class="guard-item" data-id="${guard.id}">
                    <div class="name">${guard.name}</div>
                    <div class="status">Estado: ${guard.status || 'Activo'}</div>
                    <div class="last-update">Última actualización: ${lastUpdate}</div>
                    ${routeInfo}
                </div>
            `;
        });
        
        guardsList.innerHTML = html;
        
        // Añadir evento para centrar en guardia seleccionado
        const guardItems = document.querySelectorAll('.guard-item');
        guardItems.forEach(item => {
            item.addEventListener('click', function() {
                const guardId = this.getAttribute('data-id');
                const marker = guardMarkers[guardId];
                
                if (marker) {
                    map.setView(marker.getLatLng(), 16);
                    marker.openPopup();
                }
            });
        });
    }
    
    // Actualizar marcadores de guardias en el mapa
    function updateGuardMarkers(guards) {
        // Eliminar marcadores antiguos
        Object.values(guardMarkers).forEach(marker => {
            marker.remove();
        });
        
        guardMarkers = {};
        
        // Añadir nuevos marcadores
        guards.forEach(guard => {
            const guardIcon = L.icon({
                iconUrl: '/static/img/guard-icon.png',
                iconSize: [32, 32],
                iconAnchor: [16, 32],
                popupAnchor: [0, -32]
            });
            
            const marker = L.marker([guard.lat, guard.lng], {
                icon: guardIcon
            }).addTo(map);
            
            marker.bindPopup(`
                <b>${guard.name}</b><br>
                Estado: ${guard.status || 'Activo'}<br>
                Última actualización: ${new Date(guard.last_update * 1000).toLocaleTimeString()}
            `);
            
            guardMarkers[guard.id] = marker;
        });
    }
    
    // Configurar pestañas
    function setupTabs() {
        const tabButtons = document.querySelectorAll('.tab-button');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Deseleccionar todos los botones
                tabButtons.forEach(btn => {
                    btn.classList.remove('active');
                });
                
                // Ocultar todos los contenidos
                const tabContents = document.querySelectorAll('.tab-content');
                tabContents.forEach(content => {
                    content.classList.remove('active');
                });
                
                // Activar pestaña seleccionada
                this.classList.add('active');
                const tabId = this.getAttribute('data-tab');
                document.getElementById(tabId).classList.add('active');
            });
        });
    }
    
    // Configurar UI (botones y modales)
    function setupUI() {
        // Configuración de modales
        const modals = document.querySelectorAll('.modal');
        const closeBtns = document.querySelectorAll('.close, .cancel-button');
        
        // Botones para abrir modales
        document.getElementById('add-location-btn').addEventListener('click', function() {
            document.getElementById('add-location-modal').style.display = 'block';
            editMode = 'location';
        });
        
        document.getElementById('add-route-btn').addEventListener('click', function() {
            document.getElementById('add-route-modal').style.display = 'block';
            editMode = 'route';
            routePoints = [];
            updateRoutePointsList();
        });
        
        document.getElementById('add-fence-btn').addEventListener('click', function() {
            document.getElementById('add-fence-modal').style.display = 'block';
            editMode = 'fence';
            fencePoints = [];
            updateFencePointsList();
        });
        
        // Botón para limpiar selección
        document.getElementById('clear-map-btn').addEventListener('click', function() {
            clearSelection();
        });
        
        // Cerrar modales
        closeBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                modals.forEach(modal => {
                    modal.style.display = 'none';
                });
                editMode = null;
            });
        });
        
        // Envío de formularios
        document.getElementById('location-form').addEventListener('submit', function(e) {
            e.preventDefault();
            saveLocation();
        });
        
        document.getElementById('route-form').addEventListener('submit', function(e) {
            e.preventDefault();
            saveRoute();
        });
        
        document.getElementById('fence-form').addEventListener('submit', function(e) {
            e.preventDefault();
            saveFence();
        });
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\modes.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Modos de Operación - {{ config.app_name }}{% endblock %}

{% block content %}
<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Configuración de Modos de Operación</h5>
                </div>
                <div class="card-body">
                    <p class="mb-4">El sistema puede operar en diferentes modos, cada uno optimizado para escenarios específicos. 
                       Seleccione el modo que mejor se adapte a sus necesidades actuales.</p>
                    
                    <div class="alert alert-info" id="currentModeInfo">
                        <strong>Modo Actual: </strong><span id="currentModeName">Cargando...</span>
                    </div>
                    
                    <div id="modesContainer" class="row mt-4">
                        <!-- Los modos se cargarán dinámicamente aquí -->
                        <div class="col-12 text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Configuraciones Específicas de Modo</h5>
                </div>
                <div class="card-body">
                    <div id="modeConfigContainer">
                        <!-- Configuración del modo actual se cargará aquí -->
                        <div class="text-center py-4" id="configLoading">
                            <p>Seleccione un modo para ver su configuración específica</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Cargar modos disponibles
    fetch('/api/modes')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                loadModes(data);
            } else {
                showError(data.message);
            }
        })
        .catch(error => {
            showError('Error al cargar los modos: ' + error);
        });
        
    // Función para cargar los modos
    function loadModes(data) {
        const modesContainer = document.getElementById('modesContainer');
        modesContainer.innerHTML = '';
        
        // Actualizar modo actual
        document.getElementById('currentModeName').textContent = 
            capitalizeFirstLetter(data.current_mode);
        
        // Estilo para el indicador del modo actual
        document.getElementById('currentModeInfo').className = 
            `alert alert-${getModeColor(data.current_mode)}`;
        
        // Crear tarjetas para cada modo
        data.available_modes.forEach(mode => {
            const isActive = mode === data.current_mode;
            const modeCard = document.createElement('div');
            modeCard.className = 'col-md-4 mb-4';
            
            modeCard.innerHTML = `
                <div class="card ${isActive ? 'border-primary' : ''}">
                    <div class="card-header bg-${getModeColor(mode)} text-white">
                        <h5 class="mb-0">${capitalizeFirstLetter(mode)}</h5>
                    </div>
                    <div class="card-body">
                        <p>${data.mode_descriptions[mode] || 'Modo de operación especializado'}</p>
                        <button class="btn btn-${isActive ? 'primary' : 'outline-primary'} w-100 ${isActive ? 'disabled' : ''}" 
                                data-mode="${mode}" 
                                ${isActive ? 'disabled' : ''}>
                            ${isActive ? 'Modo Activo' : 'Activar Modo'}
                        </button>
                    </div>
                </div>
            `;
            
            modesContainer.appendChild(modeCard);
            
            // Si es el modo activo, cargar su configuración
            if (isActive) {
                loadModeConfig(mode);
            }
        });
        
        // Agregar listeners a los botones
        document.querySelectorAll('[data-mode]').forEach(button => {
            button.addEventListener('click', function() {
                const mode = this.getAttribute('data-mode');
                setMode(mode);
            });
        });
    }
    
    // Función para establecer un nuevo modo
    function setMode(mode) {
        // Mostrar spinner o indicador de carga
        document.getElementById('modesContainer').innerHTML = `
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cambiando modo...</span>
                </div>
                <p class="mt-2">Cambiando al modo ${capitalizeFirstLetter(mode)}...</p>
            </div>
        `;
        
        // Enviar solicitud para cambiar modo
        fetch('/api/modes/set', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ mode: mode })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Recargar la información de modos
                fetch('/api/modes')
                    .then(response => response.json())
                    .then(modesData => {
                        if (modesData.success) {
                            loadModes(modesData);
                            showSuccess(`Modo cambiado a ${capitalizeFirstLetter(mode)}`);
                            loadModeConfig(mode);
                        } else {
                            showError(modesData.message);
                        }
                    })
                    .catch(error => {
                        showError('Error al recargar datos de modos: ' + error);
                    });
            } else {
                showError(data.message);
                // Recargar la información de modos actual
                fetch('/api/modes')
                    .then(response => response.json())
                    .then(modesData => {
                        if (modesData.success) {
                            loadModes(modesData);
                        }
                    });
            }
        })
        .catch(error => {
            showError('Error al cambiar modo: ' + error);
            // Recargar la interfaz
            fetch('/api/modes')
                .then(response => response.json())
                .then(modesData => {
                    if (modesData.success) {
                        loadModes(modesData);
                    }
                });
        });
    }
    
    // Cargar configuración de un modo específico
    function loadModeConfig(mode) {
        const configContainer = document.getElementById('modeConfigContainer');
        
        configContainer.innerHTML = `
            <h5 class="mb-3">Configuración de Modo: ${capitalizeFirstLetter(mode)}</h5>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Parámetro</th>
                            <th>Valor</th>
                            <th>Descripción</th>
                        </tr>
                    </thead>
                    <tbody id="configTableBody">
                        <tr>
                            <td colspan="3" class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                                Cargando configuración...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        `;
        
        // Aquí podríamos hacer otra petición para obtener la configuración específica
        // de cada modo, pero por simplicidad usaremos datos predefinidos
        
        const configTableBody = document.getElementById('configTableBody');
        
        // Simular carga
        setTimeout(() => {
            configTableBody.innerHTML = '';
            
            // Configuración específica por modo (podría venir de una API)
            const modeConfigs = {
                'normal': [
                    {param: 'detection_threshold', value: '0.5', desc: 'Umbral de detección general'},
                    {param: 'alert_level', value: 'info', desc: 'Nivel de alerta por defecto'}
                ],
                'industrial': [
                    {param: 'detection_threshold', value: '0.6', desc: 'Umbral de detección general'},
                    {param: 'alert_level', value: 'warning', desc: 'Nivel de alerta por defecto'},
                    {param: 'ppe_required', value: 'true', desc: 'Requiere equipo de protección personal'}
                ],
                'commercial': [
                    {param: 'detection_threshold', value: '0.6', desc: 'Umbral de detección general'},
                    {param: 'alert_level', value: 'warning', desc: 'Nivel de alerta por defecto'},
                    {param: 'retail_monitoring', value: 'true', desc: 'Monitoreo de actividad en tienda'}
                ],
                'residential': [
                    {param: 'detection_threshold', value: '0.7', desc: 'Umbral de detección general'},
                    {param: 'alert_level', value: 'warning', desc: 'Nivel de alerta por defecto'},
                    {param: 'perimeter_strict', value: 'true', desc: 'Control estricto de perímetro'}
                ],
                'airport': [
                    {param: 'detection_threshold', value: '0.7', desc: 'Umbral de detección general'},
                    {param: 'alert_level', value: 'critical', desc: 'Nivel de alerta por defecto'},
                    {param: 'face_matching_threshold', value: '0.8', desc: 'Umbral para coincidencia facial'}
                ]
            };
            
            const config = modeConfigs[mode] || [];
            
            if (config.length === 0) {
                configTableBody.innerHTML = `
                    <tr>
                        <td colspan="3" class="text-center">
                            No hay configuración específica disponible para este modo
                        </td>
                    </tr>
                `;
                return;
            }
            
            // Generar filas de la tabla
            config.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><code>${item.param}</code></td>
                    <td><span class="badge bg-secondary">${item.value}</span></td>
                    <td>${item.desc}</td>
                `;
                configTableBody.appendChild(row);
            });
        }, 500); // Simular tiempo de carga
    }
    
    // Funciones auxiliares
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    function getModeColor(mode) {
        const colors = {
            'normal': 'info',
            'industrial': 'warning',
            'commercial': 'success',
            'residential': 'primary',
            'airport': 'danger'
        };
        return colors[mode] || 'secondary';
    }
    
    function showError(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger alert-dismissible fade show';
        alertDiv.innerHTML = `
            <strong>Error:</strong> ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
        `;
        
        // Insertar al inicio de la página
        document.querySelector('.container-fluid').prepend(alertDiv);
        
        // Auto-cerrar después de 5 segundos
        setTimeout(() => {
            alertDiv.classList.remove('show');
            setTimeout(() => alertDiv.remove(), 150);
        }, 5000);
    }
    
    function showSuccess(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success alert-dismissible fade show';
        alertDiv.innerHTML = `
            <strong>¡Éxito!</strong> ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
        `;
        
        // Insertar al inicio de la página
        document.querySelector('.container-fluid').prepend(alertDiv);
        
        // Auto-cerrar después de 3 segundos
        setTimeout(() => {
            alertDiv.classList.remove('show');
            setTimeout(() => alertDiv.remove(), 150);
        }, 3000);
    }
});
</script>
{% endblock %}
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\monitoring.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Monitoreo en Tiempo Real - Sistema de Vigilancia IA{% endblock %}

{% block content %}
<div class="monitoring-dashboard">
    <div class="page-header">
        <div class="header-content">
            <h1><i class="fas fa-video"></i> Monitoreo en Tiempo Real</h1>
            <p class="subtitle">Visualización inteligente de todas las cámaras y detecciones activas</p>
        </div>
        
        <div class="header-controls">
            <div class="control-group">
                <span class="control-label">Vista:</span>
                <div class="layout-selector">
                    <button class="btn-icon layout-btn" onclick="setLayout(1)" title="Vista única">
                        <i class="fas fa-square"></i>
                    </button>
                    <button class="btn-icon layout-btn active" onclick="setLayout(2)" title="Vista 2x2">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button class="btn-icon layout-btn" onclick="setLayout(4)" title="Vista cuadrícula">
                        <i class="fas fa-th"></i>
                    </button>
                </div>
            </div>
            
            <div class="control-group">
                <span class="control-label">Modo:</span>
                <select id="operationMode" onchange="changeOperationMode()" class="styled-select">
                    <option value="normal">Modo Normal</option>
                    <option value="enhanced">Modo Mejorado</option>
                    <option value="low_power">Bajo Consumo</option>
                    <option value="critical">Modo Crítico</option>
                </select>
            </div>
            
            <div class="control-group diagnostic-tools">
                <button class="btn primary-btn" onclick="quickDiagnose()">
                    <i class="fas fa-stethoscope"></i> Diagnóstico
                </button>
            </div>
        </div>
    </div>

    <div id="loadingIndicator" class="loading-indicator">
        <div class="spinner"></div>
        <p>Cargando las cámaras...</p>
    </div>

    <div class="monitoring-container">
        <!-- Panel de Cámaras -->
        <div class="cameras-panel">
            <div class="camera-grid layout-2" id="cameraGrid">
                <!-- Se llenará dinámicamente con JavaScript -->
            </div>
        </div>

        <!-- Panel lateral -->
        <div class="side-panel">
            <!-- Eventos en tiempo real -->
            <div class="panel-card">
                <div class="panel-header">
                    <h3><i class="fas fa-bolt"></i> Eventos en Tiempo Real</h3>
                    <div class="panel-actions">
                        <button class="btn-icon" onclick="clearEvents()" title="Limpiar eventos">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </div>
                </div>
                <div class="panel-body">
                    <div id="eventsContainer" class="events-container">
                        <div class="no-events">
                            <i class="fas fa-stream"></i>
                            <p>No hay eventos recientes</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Estadísticas -->
            <div class="panel-card">
                <div class="panel-header">
                    <h3><i class="fas fa-chart-pie"></i> Estadísticas</h3>
                    <div class="panel-actions">
                        <select id="timeRange" onchange="updateAnalytics()" class="compact-select">
                            <option value="hour">Última Hora</option>
                            <option value="day" selected>Hoy</option>
                            <option value="week">Esta Semana</option>
                        </select>
                    </div>
                </div>
                <div class="panel-body">
                    <div id="analyticsContainer" class="analytics-container">
                        <div class="stats-grid">
                            <div class="stat-box">
                                <div class="stat-value" id="totalEvents">0</div>
                                <div class="stat-label">Eventos</div>
                            </div>
                            <div class="stat-box">
                                <div class="stat-value" id="totalPeople">0</div>
                                <div class="stat-label">Personas</div>
                            </div>
                            <div class="stat-box warning">
                                <div class="stat-value" id="totalAlerts">0</div>
                                <div class="stat-label">Alertas</div>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="eventsChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Estado del Sistema -->
            <div class="panel-card system-status">
                <div class="panel-header">
                    <h3><i class="fas fa-server"></i> Estado del Sistema</h3>
                </div>
                <div class="panel-body">
                    <div class="resource-meter">
                        <div class="resource-label">
                            <span>CPU</span>
                            <span id="cpuValue">0%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress" id="cpuBar" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="resource-meter">
                        <div class="resource-label">
                            <span>Memoria</span>
                            <span id="memValue">0%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress" id="memBar" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="system-info">
                        <div class="info-item">
                            <i class="fas fa-clock"></i>
                            <span id="uptimeValue">00:00:00</span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-thermometer-half"></i>
                            <span id="tempValue">--°C</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Estilos específicos para la página de monitoreo */
.monitoring-dashboard {
    margin-bottom: 30px;
}

.header-content {
    margin-bottom: 15px;
}

.header-content h1 {
    display: flex;
    align-items: center;
    margin: 0;
    font-size: 1.8rem;
    color: var(--secondary-color);
}

.header-content h1 i {
    margin-right: 10px;
    color: var(--primary-color);
}

.subtitle {
    margin: 5px 0 0 0;
    color: #6c757d;
    font-size: 1rem;
}

.header-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin-bottom: 20px;
    align-items: center;
}

.control-group {
    display: flex;
    align-items: center;
    gap: 8px;
}

.control-label {
    font-size: 0.9rem;
    color: var(--secondary-color);
    font-weight: 500;
}

.layout-selector {
    display: flex;
    gap: 5px;
    background-color: var(--background-light);
    border-radius: 6px;
    padding: 3px;
}

.layout-btn {
    background: none;
    border: none;
    border-radius: 4px;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: #6c757d;
    transition: all 0.2s;
}

.layout-btn:hover {
    background-color: rgba(0,0,0,0.05);
}

.layout-btn.active {
    background-color: white;
    color: var(--primary-color);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.styled-select {
    padding: 7px 10px;
    border-radius: 6px;
    border: 1px solid var(--border-color);
    background-color: white;
    font-size: 0.9rem;
    min-width: 150px;
}

.compact-select {
    padding: 5px 10px;
    border-radius: 4px;
    border: 1px solid var(--border-color);
    background-color: white;
    font-size: 0.85rem;
}

.monitoring-container {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 20px;
}

.cameras-panel {
    background-color: var(--background-light);
    border-radius: 10px;
    padding: 15px;
    box-shadow: var(--card-shadow);
}

.side-panel {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.panel-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    overflow: hidden;
}

.panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: var(--background-light);
    border-bottom: 1px solid var(--border-color);
}

.panel-header h3 {
    margin: 0;
    font-size: 1rem;
    color: var(--secondary-color);
    display: flex;
    align-items: center;
}

.panel-header h3 i {
    margin-right: 8px;
    color: var(--primary-color);
}

.panel-actions {
    display: flex;
    gap: 5px;
}

.panel-body {
    padding: 15px;
}

.events-container {
    max-height: 300px;
    overflow-y: auto;
}

.no-events {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    color: #adb5bd;
}

.no-events i {
    font-size: 2rem;
    margin-bottom: 10px;
}

.event-item {
    padding: 10px;
    border-radius: 6px;
    background-color: #f8f9fa;
    margin-bottom: 8px;
    border-left: 3px solid var(--primary-color);
}

.event-item:last-child {
    margin-bottom: 0;
}

.event-item.alert {
    border-left-color: var(--danger-color);
    background-color: rgba(231, 76, 60, 0.05);
}

.event-time {
    font-size: 0.8rem;
    color: #6c757d;
}

.event-title {
    font-weight: 500;
    margin: 3px 0;
}

.event-details {
    font-size: 0.85rem;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
    margin-bottom: 15px;
}

.stat-box {
    background-color: #f8f9fa;
    border-radius: 6px;
    padding: 10px;
    text-align: center;
}

.stat-box.warning .stat-value {
    color: var(--warning-color);
}

.stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--secondary-color);
}

.stat-label {
    font-size: 0.8rem;
    color: #6c757d;
}

.chart-container {
    height: 180px;
}

.system-info {
    display: flex;
    justify-content: space-between;
    margin-top: 15px;
}

.info-item {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 0.9rem;
    color: var(--secondary-color);
}

.resource-meter {
    margin-bottom: 10px;
}

.resource-label {
    display: flex;
    justify-content: space-between;
    font-size: 0.85rem;
    margin-bottom: 5px;
    color: var(--secondary-color);
}

.progress-bar {
    height: 8px;
    background-color: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
}

.progress {
    height: 100%;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
}

@media (max-width: 992px) {
    .monitoring-container {
        grid-template-columns: 1fr;
    }
    
    .header-controls {
        flex-direction: column;
        align-items: flex-start;
    }
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="{{ url_for('static', filename='js/monitoring.js') }}"></script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\placeholder.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}{{ title }} - {{ config.app_name }}{% endblock %}

{% block content %}
<h2>{{ title }}</h2>
<div class="placeholder-content">
    <p>Esta funcionalidad está en desarrollo.</p>
    <p>Próximamente disponible.</p>
</div>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\roi_config.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Configuración de Zonas - {{ config.app_name }}{% endblock %}

{% block content %}
<h2>Configuración de Zonas de Interés (ROI)</h2>

<div class="roi-container">
    <div class="card">
        <h3>Seleccionar Cámara</h3>
        <div class="form-group">
            <label for="camera-select">Cámara:</label>
            <select id="camera-select">
                {% for camera in config.cameras %}
                    <option value="{{ camera.id }}">{{ camera.name }}</option>
                {% endfor %}
            </select>
        </div>
        <button id="load-camera" class="button">Cargar Cámara</button>
    </div>
    
    <div class="card editor-card">
        <h3>Editor de Zonas</h3>
        <div class="video-container">
            <div id="roi-editor-container" style="position: relative;">
                <img id="camera-feed" src="" alt="Feed de cámara" style="width: 100%">
                <canvas id="roi-editor" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%"></canvas>
            </div>
        </div>
        
        <div class="zone-controls">
            <div class="form-group">
                <label for="zone-type">Tipo de Zona:</label>
                <select id="zone-type">
                    <option value="motion">Detección de Movimiento</option>
                    <option value="perimeter">Perímetro</option>
                    <option value="entry">Entrada/Salida</option>
                    <option value="exclusion">Zona de Exclusión</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="zone-name">Nombre de Zona:</label>
                <input type="text" id="zone-name" placeholder="Zona 1">
            </div>
            
            <div class="form-group">
                <label>Clases a detectar:</label>
                <div class="checkbox-group">
                    <label><input type="checkbox" name="zone-class" value="persona" checked> Personas</label>
                    <label><input type="checkbox" name="zone-class" value="coche" checked> Coches</label>
                    <label><input type="checkbox" name="zone-class" value="bicicleta"> Bicicletas</label>
                    <label><input type="checkbox" name="zone-class" value="moto"> Motos</label>
                </div>
            </div>
            
            <div class="button-group">
                <button id="add-zone" class="button">Añadir Zona</button>
                <button id="clear-zone" class="button secondary">Limpiar</button>
                <button id="delete-zone" class="button danger">Eliminar Zona</button>
            </div>
        </div>
    </div>
    
    <div class="card zones-list-card">
        <h3>Zonas Configuradas</h3>
        <ul id="zones-list" class="zones-list">
            <li class="empty-list">No hay zonas configuradas</li>
        </ul>
        
        <div class="button-group">
            <button id="save-all-zones" class="button">Guardar Configuración</button>
            <button id="reset-zones" class="button danger">Resetear Todo</button>
        </div>
    </div>
</div>

<div id="status-message" class="status-message" style="display: none;"></div>
{% endblock %}

{% block extra_js %}
<script>
    // Variables globales
    let currentCameraId = null;
    let zones = [];
    let currentPoints = [];
    let selectedZoneIndex = -1;
    
    const canvas = document.getElementById('roi-editor');
    const ctx = canvas.getContext('2d');
    const cameraFeed = document.getElementById('camera-feed');
    const container = document.getElementById('roi-editor-container');
    
    // Inicializar canvas cuando la imagen se cargue
    cameraFeed.onload = function() {
        resizeCanvas();
    };
    
    // Redimensionar canvas para coincidir con la imagen
    function resizeCanvas() {
        canvas.width = cameraFeed.clientWidth;
        canvas.height = cameraFeed.clientHeight;
        drawZones();
    }
    
    // Ajustar canvas cuando cambia el tamaño de la ventana
    window.addEventListener('resize', resizeCanvas);
    
    // Seleccionar cámara
    document.getElementById('load-camera').addEventListener('click', function() {
        currentCameraId = document.getElementById('camera-select').value;
        
        if (!currentCameraId) return;
        
        // Iniciar stream de la cámara
        fetch(`/api/cameras/toggle/${currentCameraId}`, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                cameraFeed.src = `/video_feed/${currentCameraId}?t=${new Date().getTime()}`;
                showStatus('Cámara cargada correctamente', 'success');
                
                // Cargar configuración existente
                loadROIConfig(currentCameraId);
            } else {
                showStatus('Error al activar la cámara', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showStatus('Error de comunicación con el servidor', 'error');
        });
    });
    
    // Cargar configuración de ROI
    function loadROIConfig(cameraId) {
        fetch(`/api/roi/${cameraId}`)
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success' && data.config && data.config.zones) {
                    zones = data.config.zones;
                    updateZonesList();
                    drawZones();
                    showStatus('Configuración de zonas cargada', 'info');
                } else {
                    zones = [];
                    updateZonesList();
                    drawZones();
                    showStatus('No hay zonas configuradas para esta cámara', 'info');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showStatus('Error al cargar configuración de zonas', 'error');
            });
    }
    
    // Guardar configuración de ROI
    document.getElementById('save-all-zones').addEventListener('click', function() {
        if (!currentCameraId) {
            showStatus('Seleccione una cámara primero', 'error');
            return;
        }
        
        const config = {
            zones: zones
        };
        
        fetch(`/api/roi/${currentCameraId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(config)
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                showStatus('Configuración guardada correctamente', 'success');
            } else {
                showStatus('Error al guardar configuración', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showStatus('Error de comunicación con el servidor', 'error');
        });
    });
    
    // Resetear todas las zonas
    document.getElementById('reset-zones').addEventListener('click', function() {
        if (confirm('¿Está seguro de eliminar todas las zonas?')) {
            zones = [];
            currentPoints = [];
            selectedZoneIndex = -1;
            updateZonesList();
            drawZones();
            showStatus('Todas las zonas han sido eliminadas', 'info');
        }
    });
    
    // Añadir nueva zona
    document.getElementById('add-zone').addEventListener('click', function() {
        if (currentPoints.length < 3) {
            showStatus('Dibuje al menos 3 puntos para crear una zona', 'error');
            return;
        }
        
        const zoneName = document.getElementById('zone-name').value || 'Zona ' + (zones.length + 1);
        const zoneType = document.getElementById('zone-type').value;
        
        // Obtener clases seleccionadas
        const detectClasses = [];
        document.querySelectorAll('input[name="zone-class"]:checked').forEach(checkbox => {
            detectClasses.push(checkbox.value);
        });
        
        // Crear nueva zona
        const newZone = {
            name: zoneName,
            type: zoneType,
            points: [...currentPoints],
            detect_classes: detectClasses
        };
        
        zones.push(newZone);
        currentPoints = [];
        updateZonesList();
        drawZones();
        showStatus('Zona añadida correctamente', 'success');
    });
    
    // Limpiar puntos actuales
    document.getElementById('clear-zone').addEventListener('click', function() {
        currentPoints = [];
        drawZones();
        showStatus('Puntos actuales eliminados', 'info');
    });
    
    // Eliminar zona seleccionada
    document.getElementById('delete-zone').addEventListener('click', function() {
        if (selectedZoneIndex >= 0 && selectedZoneIndex < zones.length) {
            zones.splice(selectedZoneIndex, 1);
            selectedZoneIndex = -1;
            updateZonesList();
            drawZones();
            showStatus('Zona eliminada', 'info');
        } else {
            showStatus('Seleccione una zona para eliminar', 'error');
        }
    });
    
    // Actualizar lista de zonas
    function updateZonesList() {
        const zonesList = document.getElementById('zones-list');
        
        if (zones.length === 0) {
            zonesList.innerHTML = '<li class="empty-list">No hay zonas configuradas</li>';
            return;
        }
        
        zonesList.innerHTML = '';
        
        zones.forEach((zone, index) => {
            const zoneItem = document.createElement('li');
            zoneItem.className = 'zone-item' + (index === selectedZoneIndex ? ' selected' : '');
            zoneItem.innerHTML = `
                <div class="zone-color" style="background-color: ${getZoneColor(zone.type)}"></div>
                <div class="zone-info">
                    <h4>${zone.name}</h4>
                    <p>Tipo: ${getZoneTypeName(zone.type)}</p>
                    <p>Puntos: ${zone.points.length}</p>
                </div>
            `;
            
            zoneItem.addEventListener('click', function() {
                selectedZoneIndex = index;
                updateZonesList();
                drawZones();
            });
            
            zonesList.appendChild(zoneItem);
        });
    }
    
    // Obtener nombre descriptivo del tipo de zona
    function getZoneTypeName(type) {
        const types = {
            'motion': 'Detección de Movimiento',
            'perimeter': 'Perímetro',
            'entry': 'Entrada/Salida',
            'exclusion': 'Zona de Exclusión'
        };
        
        return types[type] || type;
    }
    
    // Obtener color según tipo de zona
    function getZoneColor(type) {
        const colors = {
            'motion': 'rgba(0, 255, 0, 0.7)',
            'perimeter': 'rgba(0, 0, 255, 0.7)',
            'entry': 'rgba(255, 0, 0, 0.7)',
            'exclusion': 'rgba(128, 128, 128, 0.7)'
        };
        
        return colors[type] || 'rgba(255, 255, 0, 0.7)';
    }
    
    // Dibujar todas las zonas en el canvas
    function drawZones() {
        if (!ctx) return;
        
        // Limpiar canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Dibujar zonas existentes
        zones.forEach((zone, index) => {
            if (zone.points.length < 3) return;
            
            const isSelected = index === selectedZoneIndex;
            const color = getZoneColor(zone.type);
            
            // Comenzar path
            ctx.beginPath();
            ctx.moveTo(zone.points[0][0], zone.points[0][1]);
            
            // Dibujar líneas entre puntos
            for (let i = 1; i < zone.points.length; i++) {
                ctx.lineTo(zone.points[i][0], zone.points[i][1]);
            }
            
            // Cerrar polígono
            ctx.closePath();
            
            // Estilo
            ctx.fillStyle = color;
            ctx.strokeStyle = isSelected ? '#ffffff' : '#000000';
            ctx.lineWidth = isSelected ? 3 : 2;
            
            // Rellenar y trazar
            ctx.fill();
            ctx.stroke();
            
            // Dibujar nombre de la zona
            ctx.fillStyle = '#ffffff';
            ctx.font = '14px Arial';
            ctx.fillText(zone.name, zone.points[0][0], zone.points[0][1] - 5);
        });
        
        // Dibujar puntos actuales (para nueva zona)
        if (currentPoints.length > 0) {
            // Dibujar líneas entre puntos
            ctx.beginPath();
            ctx.moveTo(currentPoints[0][0], currentPoints[0][1]);
            
            for (let i = 1; i < currentPoints.length; i++) {
                ctx.lineTo(currentPoints[i][0], currentPoints[i][1]);
            }
            
            // Si hay más de 2 puntos, conectar con el primero para previsualizar el polígono
            if (currentPoints.length > 2) {
                ctx.lineTo(currentPoints[0][0], currentPoints[0][1]);
            }
            
            ctx.strokeStyle = '#ffff00';
            ctx.lineWidth = 2;
            ctx.stroke();
            
            // Dibujar puntos
            currentPoints.forEach(point => {
                ctx.beginPath();
                ctx.arc(point[0], point[1], 5, 0, Math.PI * 2);
                ctx.fillStyle = '#ffff00';
                ctx.fill();
            });
        }
    }
    
    // Manejar clics en el canvas para añadir puntos
    canvas.addEventListener('click', function(event) {
        if (!currentCameraId) return;
        
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        // Si hay una zona seleccionada, deseleccionarla
        if (selectedZoneIndex !== -1) {
            selectedZoneIndex = -1;
            updateZonesList();
            drawZones();
            return;
        }
        
        // Añadir punto
        currentPoints.push([x, y]);
        drawZones();
    });
    
    // Mostrar mensajes de estado
    function showStatus(message, type = 'info') {
        const statusElement = document.getElementById('status-message');
        statusElement.textContent = message;
        statusElement.className = 'status-message ' + type;
        statusElement.style.display = 'block';
        
        // Ocultar después de 3 segundos
        setTimeout(() => {
            statusElement.style.display = 'none';
        }, 3000);
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\settings.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Configuraciones del Sistema - {{ config.app_name }}{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/settings.css') }}">
<style>
    .settings-container {
        padding: 20px;
    }
    .settings-section {
        background-color: #fff;
        border-radius: 5px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .tab-content {
        padding-top: 20px;
    }
    .theme-preview {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        margin-top: 10px;
    }
</style>
{% endblock %}

{% block content %}
<div class="settings-container">
    <h2>Configuraciones del Sistema</h2>
    
    <div class="settings-nav">
        <ul class="nav nav-tabs" id="settingsTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab" aria-controls="general" aria-selected="true">General</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="notifications-tab" data-bs-toggle="tab" data-bs-target="#notifications" type="button" role="tab" aria-controls="notifications" aria-selected="false">Notificaciones</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="api-keys-tab" data-bs-toggle="tab" data-bs-target="#api-keys" type="button" role="tab" aria-controls="api-keys" aria-selected="false">API Keys</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="advanced-tab" data-bs-toggle="tab" data-bs-target="#advanced" type="button" role="tab" aria-controls="advanced" aria-selected="false">Avanzado</button>
            </li>
        </ul>
    </div>
    
    <div class="tab-content" id="settingsTabContent">
        <!-- Configuración General -->
        <div class="tab-pane fade show active" id="general" role="tabpanel" aria-labelledby="general-tab">
            <div class="settings-section">
                <h3>Información de la Empresa</h3>
                <form id="companyForm">
                    <div class="mb-3">
                        <label for="companyName" class="form-label">Nombre de la Empresa</label>
                        <input type="text" class="form-control" id="companyName" value="{{ system_settings.company_name }}">
                    </div>
                    <div class="mb-3">
                        <label for="companyLogo" class="form-label">Logo de la Empresa</label>
                        <input type="file" class="form-control" id="companyLogo">
                        {% if system_settings.company_logo %}
                        <div class="current-logo mt-2">
                            <img src="{{ system_settings.company_logo }}" alt="Logo actual" class="img-thumbnail" style="max-height: 100px;">
                        </div>
                        {% endif %}
                    </div>
                    <div class="mb-3">
                        <label for="systemName" class="form-label">Nombre del Sistema</label>
                        <input type="text" class="form-control" id="systemName" value="{{ system_settings.app_name }}">
                    </div>
                    <button type="button" class="btn btn-primary" onclick="saveCompanySettings()">Guardar Cambios</button>
                </form>
            </div>
            
            <div class="settings-section">
                <h3>Configuración Regional</h3>
                <form id="regionForm">
                    <div class="mb-3">
                        <label for="timezone" class="form-label">Zona Horaria</label>
                        <select class="form-select" id="timezone">
                            <option value="America/Argentina/Buenos_Aires" {% if system_settings.timezone == "America/Argentina/Buenos_Aires" %}selected{% endif %}>Argentina</option>
                            <option value="America/Santiago" {% if system_settings.timezone == "America/Santiago" %}selected{% endif %}>Chile</option>
                            <option value="America/Bogota" {% if system_settings.timezone == "America/Bogota" %}selected{% endif %}>Colombia</option>
                            <option value="America/Mexico_City" {% if system_settings.timezone == "America/Mexico_City" %}selected{% endif %}>México</option>
                            <option value="Europe/Madrid" {% if system_settings.timezone == "Europe/Madrid" %}selected{% endif %}>España</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="dateFormat" class="form-label">Formato de Fecha</label>
                        <select class="form-select" id="dateFormat">
                            <option value="DD/MM/YYYY" {% if system_settings.date_format == "DD/MM/YYYY" %}selected{% endif %}>DD/MM/AAAA</option>
                            <option value="MM/DD/YYYY" {% if system_settings.date_format == "MM/DD/YYYY" %}selected{% endif %}>MM/DD/AAAA</option>
                            <option value="YYYY-MM-DD" {% if system_settings.date_format == "YYYY-MM-DD" %}selected{% endif %}>AAAA-MM-DD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="language" class="form-label">Idioma</label>
                        <select class="form-select" id="language">
                            <option value="es" {% if system_settings.language == "es" %}selected{% endif %}>Español</option>
                            <option value="en" {% if system_settings.language == "en" %}selected{% endif %}>Inglés</option>
                            <option value="pt" {% if system_settings.language == "pt" %}selected{% endif %}>Portugués</option>
                        </select>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="saveRegionalSettings()">Guardar Cambios</button>
                </form>
            </div>
        </div>
        
        <!-- API Keys -->
        <div class="tab-pane fade" id="api-keys" role="tabpanel" aria-labelledby="api-keys-tab">
            <div class="settings-section">
                <h3>WhatsApp Business API</h3>
                <form id="whatsappApiForm">
                    <div class="mb-3">
                        <label for="whatsappApiKey" class="form-label">API Key</label>
                        <input type="password" class="form-control" id="whatsappApiKey" value="{{ system_settings.apis.whatsapp.api_key }}">
                    </div>
                    <div class="mb-3">
                        <label for="whatsappPhoneId" class="form-label">ID de Teléfono</label>
                        <input type="text" class="form-control" id="whatsappPhoneId" value="{{ system_settings.apis.whatsapp.phone_id }}">
                    </div>
                    <div class="mb-3">
                        <label for="whatsappBusinessId" class="form-label">ID de Cuenta de Negocio</label>
                        <input type="text" class="form-control" id="whatsappBusinessId" value="{{ system_settings.apis.whatsapp.business_account_id }}">
                    </div>
                    <button type="button" class="btn btn-primary" onclick="saveWhatsAppApiSettings()">Guardar Cambios</button>
                    <button type="button" class="btn btn-secondary" onclick="testWhatsAppConnection()">Probar Conexión</button>
                </form>
            </div>
            
            <div class="settings-section">
                <h3>OpenAI API (para análisis avanzado)</h3>
                <form id="openaiApiForm">
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="openaiEnabled" {% if system_settings.apis.openai.enabled %}checked{% endif %}>
                        <label class="form-check-label" for="openaiEnabled">Habilitar integración con OpenAI</label>
                    </div>
                    <div class="mb-3">
                        <label for="openaiApiKey" class="form-label">API Key</label>
                        <input type="password" class="form-control" id="openaiApiKey" value="{{ system_settings.apis.openai.api_key }}">
                    </div>
                    <div class="mb-3">
                        <label for="openaiModel" class="form-label">Modelo</label>
                        <select class="form-select" id="openaiModel">
                            <option value="gpt-3.5-turbo" {% if system_settings.apis.openai.model == "gpt-3.5-turbo" %}selected{% endif %}>GPT-3.5 Turbo</option>
                            <option value="gpt-4" {% if system_settings.apis.openai.model == "gpt-4" %}selected{% endif %}>GPT-4</option>
                        </select>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="saveOpenAISettings()">Guardar Cambios</button>
                </form>
            </div>
        </div>
        
        <!-- Avanzado -->
        <div class="tab-pane fade" id="advanced" role="tabpanel" aria-labelledby="advanced-tab">
            <div class="settings-section">
                <h3>Configuración de Rendimiento</h3>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i> Estos ajustes pueden afectar el rendimiento del sistema. Modifique solo si sabe lo que está haciendo.
                </div>
                <form id="advancedForm">
                    <div class="mb-3">
                        <label for="maxThreads" class="form-label">Máximo de Hilos de Procesamiento</label>
                        <input type="number" class="form-control" id="maxThreads" min="1" max="32" value="{{ system_settings.advanced.max_threads }}">
                        <div class="form-text">Número máximo de hilos para procesamiento paralelo.</div>
                    </div>
                    <div class="mb-3">
                        <label for="frameBufferSize" class="form-label">Tamaño de Buffer de Frames</label>
                        <input type="number" class="form-control" id="frameBufferSize" min="5" max="100" value="{{ system_settings.advanced.frame_buffer_size }}">
                        <div class="form-text">Número de frames almacenados en buffer para procesamiento.</div>
                    </div>
                    <div class="mb-3">
                        <label for="maxStorageDays" class="form-label">Retención de Almacenamiento (días)</label>
                        <input type="number" class="form-control" id="maxStorageDays" min="1" value="{{ system_settings.advanced.storage_retention_days }}">
                        <div class="form-text">Días que se conservarán las grabaciones antes de ser eliminadas automáticamente.</div>
                    </div>
                    <div class="mb-3">
                        <label for="maxStorageGB" class="form-label">Límite de Almacenamiento (GB)</label>
                        <input type="number" class="form-control" id="maxStorageGB" min="1" value="{{ system_settings.advanced.storage_limit_gb }}">
                        <div class="form-text">Límite de almacenamiento en GB. Se eliminarán grabaciones antiguas si se supera este límite.</div>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="debugMode" {% if system_settings.advanced.debug_mode %}checked{% endif %}>
                        <label class="form-check-label" for="debugMode">Modo Debug</label>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="verboseLogging" {% if system_settings.advanced.verbose_logging %}checked{% endif %}>
                        <label class="form-check-label" for="verboseLogging">Logging Detallado</label>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="saveAdvancedSettings()">Guardar Cambios</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Función para mostrar alertas
    function showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.role = 'alert';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        document.querySelector('.settings-container').prepend(alertDiv);
        
        // Auto-cerrar después de 5 segundos
        setTimeout(() => {
            alertDiv.classList.remove('show');
            setTimeout(() => alertDiv.remove(), 300);
        }, 5000);
    }

    // Función para guardar configuración de la empresa
    function saveCompanySettings() {
        const data = {
            company_name: document.getElementById('companyName').value,
            system_name: document.getElementById('systemName').value
        };
        
        // Verificar si hay un logo nuevo para subir
        const logoInput = document.getElementById('companyLogo');
        if (logoInput.files && logoInput.files[0]) {
            const formData = new FormData();
            formData.append('logo', logoInput.files[0]);
            
            fetch('/api/settings/upload-logo', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(result => {
                if (result.status === 'success') {
                    data.company_logo = result.logo_url;
                    sendSettingsUpdate('company', data);
                } else {
                    showAlert('Error al subir el logo: ' + result.message, 'danger');
                }
            })
            .catch(error => {
                showAlert('Error al subir el logo: ' + error, 'danger');
            });
        } else {
            // No hay logo nuevo, actualizar solo los otros campos
            sendSettingsUpdate('company', data);
        }
    }
    
    // Función para guardar configuración regional
    function saveRegionalSettings() {
        const data = {
            timezone: document.getElementById('timezone').value,
            date_format: document.getElementById('dateFormat').value,
            language: document.getElementById('language').value
        };
        
        sendSettingsUpdate('regional', data);
    }
    
    // Función para guardar configuración de WhatsApp API
    function saveWhatsAppApiSettings() {
        const data = {
            apis: {
                whatsapp: {
                    api_key: document.getElementById('whatsappApiKey').value,
                    phone_id: document.getElementById('whatsappPhoneId').value,
                    business_account_id: document.getElementById('whatsappBusinessId').value
                }
            }
        };
        
        sendSettingsUpdate('api_keys', data);
    }
    
    // Función para guardar configuración de OpenAI
    function saveOpenAISettings() {
        const data = {
            apis: {
                openai: {
                    enabled: document.getElementById('openaiEnabled').checked,
                    api_key: document.getElementById('openaiApiKey').value,
                    model: document.getElementById('openaiModel').value
                }
            }
        };
        
        sendSettingsUpdate('api_keys', data);
    }
    
    // Función para guardar configuración avanzada
    function saveAdvancedSettings() {
        const data = {
            advanced: {
                max_threads: parseInt(document.getElementById('maxThreads').value),
                frame_buffer_size: parseInt(document.getElementById('frameBufferSize').value),
                storage_retention_days: parseInt(document.getElementById('maxStorageDays').value),
                storage_limit_gb: parseInt(document.getElementById('maxStorageGB').value),
                debug_mode: document.getElementById('debugMode').checked,
                verbose_logging: document.getElementById('verboseLogging').checked
            }
        };
        
        sendSettingsUpdate('advanced', data);
    }
    
    // Función para enviar datos de configuración al servidor
    function sendSettingsUpdate(section, data) {
        fetch('/api/settings/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                section: section,
                data: data
            })
        })
        .then(response => response.json())
        .then(result => {
            if (result.status === 'success') {
                showAlert('Configuración guardada correctamente', 'success');
            } else {
                showAlert('Error al guardar: ' + result.message, 'danger');
            }
        })
        .catch(error => {
            showAlert('Error al enviar los datos: ' + error, 'danger');
        });
    }
    
    // Función para probar conexión con WhatsApp
    function testWhatsAppConnection() {
        fetch('/api/whatsapp/test', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(result => {
            if (result.status === 'success') {
                showAlert('Conexión exitosa con la API de WhatsApp', 'success');
            } else {
                showAlert('Error de conexión: ' + result.message, 'danger');
            }
        })
        .catch(error => {
            showAlert('Error al probar conexión: ' + error, 'danger');
        });
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\system_diagnostics.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Diagnósticos del Sistema - Sistema de Vigilancia IA{% endblock %}

{% block content %}
<div class="diagnostics-dashboard">
    <div class="page-header">
        <div class="header-content">
            <h1><i class="fas fa-stethoscope"></i> Diagnósticos del Sistema</h1>
            <p class="subtitle">Monitorización y diagnóstico del estado del sistema</p>
        </div>
        
        <div class="header-actions">
            <button class="btn primary-btn" onclick="runSystemCheck()">
                <i class="fas fa-sync"></i> Ejecutar Diagnóstico Completo
            </button>
            <button class="btn" onclick="generateReport()">
                <i class="fas fa-file-export"></i> Generar Informe
            </button>
        </div>
    </div>

    <div class="system-overview">
        <div class="system-card">
            <div class="system-status">
                <div class="status-icon" id="systemStatusIcon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="status-info">
                    <h2 id="systemStatusText">Sistema Operativo</h2>
                    <p id="systemStatusDetail">Todos los sistemas funcionan correctamente</p>
                </div>
            </div>
            <div class="system-uptime">
                <div class="uptime-label">Tiempo activo:</div>
                <div class="uptime-value" id="systemUptime">00:00:00</div>
            </div>
            <div class="system-timestamp">
                Última actualización: <span id="lastUpdateTime">-</span>
            </div>
        </div>
    </div>

    <div class="diagnostics-grid">
        <!-- Recursos del Sistema -->
        <div class="diagnostic-card">
            <div class="card-header">
                <h3><i class="fas fa-microchip"></i> Recursos del Sistema</h3>
                <button class="btn-icon refresh-btn" onclick="refreshSection('resources')">
                    <i class="fas fa-sync"></i>
                </button>
            </div>
            <div class="card-body" id="resourcesSection">
                <div class="resources-grid">
                    <div class="resource-meter">
                        <div class="resource-header">
                            <div class="resource-title">CPU</div>
                            <div class="resource-value" id="cpuValue">0%</div>
                        </div>
                        <div class="progress-bar">
                            <div class="progress" id="cpuBar" style="width: 0%"></div>
                        </div>
                        <div class="resource-details" id="cpuDetails">
                            <div>Núcleos: <span id="cpuCores">-</span></div>
                            <div>Frecuencia: <span id="cpuFreq">-</span></div>
                        </div>
                    </div>
                    
                    <div class="resource-meter">
                        <div class="resource-header">
                            <div class="resource-title">Memoria</div>
                            <div class="resource-value" id="memValue">0%</div>
                        </div>
                        <div class="progress-bar">
                            <div class="progress" id="memBar" style="width: 0%"></div>
                        </div>
                        <div class="resource-details">
                            <div>Usada: <span id="memUsed">-</span></div>
                            <div>Total: <span id="memTotal">-</span></div>
                        </div>
                    </div>
                    
                    <div class="resource-meter">
                        <div class="resource-header">
                            <div class="resource-title">Disco</div>
                            <div class="resource-value" id="diskValue">0%</div>
                        </div>
                        <div class="progress-bar">
                            <div class="progress" id="diskBar" style="width: 0%"></div>
                        </div>
                        <div class="resource-details">
                            <div>Usado: <span id="diskUsed">-</span></div>
                            <div>Total: <span id="diskTotal">-</span></div>
                        </div>
                    </div>
                    
                    <div class="resource-meter">
                        <div class="resource-header">
                            <div class="resource-title">Temperatura</div>
                            <div class="resource-value" id="tempValue">-°C</div>
                        </div>
                        <div class="temperature-gauge" id="tempGauge">
                            <div class="gauge-segments">
                                <div class="gauge-segment normal"></div>
                                <div class="gauge-segment warning"></div>
                                <div class="gauge-segment critical"></div>
                            </div>
                            <div class="gauge-needle" style="transform: rotate(0deg)"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Cámaras -->
        <div class="diagnostic-card">
            <div class="card-header">
                <h3><i class="fas fa-video"></i> Estado de Cámaras</h3>
                <button class="btn-icon refresh-btn" onclick="refreshSection('cameras')">
                    <i class="fas fa-sync"></i>
                </button>
            </div>
            <div class="card-body" id="camerasSection">
                <div class="loading-container">
                    <div class="loading-spinner"></div>
                    <p>Cargando estado de cámaras...</p>
                </div>
            </div>
        </div>
        
        <!-- Red -->
        <div class="diagnostic-card">
            <div class="card-header">
                <h3><i class="fas fa-network-wired"></i> Conectividad de Red</h3>
                <button class="btn-icon refresh-btn" onclick="refreshSection('network')">
                    <i class="fas fa-sync"></i>
                </button>
            </div>
            <div class="card-body" id="networkSection">
                <div class="network-stats">
                    <div class="network-stat">
                        <div class="stat-name">Estado:</div>
                        <div class="stat-value" id="networkStatus">Conectado</div>
                    </div>
                    <div class="network-stat">
                        <div class="stat-name">IP:</div>
                        <div class="stat-value" id="networkIp">-</div>
                    </div>
                    <div class="network-stat">
                        <div class="stat-name">Velocidad:</div>
                        <div class="stat-value" id="networkSpeed">-</div>
                    </div>
                </div>
                
                <div class="network-metrics">
                    <div class="metric-item">
                        <div class="metric-title">
                            <i class="fas fa-arrow-down"></i> Descarga
                        </div>
                        <div class="metric-value" id="downloadSpeed">0 KB/s</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-title">
                            <i class="fas fa-arrow-up"></i> Subida
                        </div>
                        <div class="metric-value" id="uploadSpeed">0 KB/s</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-title">
                            <i class="fas fa-hourglass-half"></i> Latencia
                        </div>
                        <div class="metric-value" id="networkLatency">0 ms</div>
                    </div>
                </div>
                
                <div class="network-chart-container">
                    <canvas id="networkChart"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Servicios -->
        <div class="diagnostic-card">
            <div class="card-header">
                <h3><i class="fas fa-cogs"></i> Servicios del Sistema</h3>
                <button class="btn-icon refresh-btn" onclick="refreshSection('services')">
                    <i class="fas fa-sync"></i>
                </button>
            </div>
            <div class="card-body" id="servicesSection">
                <div class="services-list">
                    <div class="service-item">
                        <div class="service-icon running">
                            <i class="fas fa-database"></i>
                        </div>
                        <div class="service-details">
                            <div class="service-name">Base de Datos</div>
                            <div class="service-status running">Activo</div>
                        </div>
                    </div>
                    
                    <div class="service-item">
                        <div class="service-icon running">
                            <i class="fas fa-brain"></i>
                        </div>
                        <div class="service-details">
                            <div class="service-name">Motor de IA</div>
                            <div class="service-status running">Activo</div>
                        </div>
                    </div>
                    
                    <div class="service-item">
                        <div class="service-icon running">
                            <i class="fas fa-video"></i>
                        </div>
                        <div class="service-details">
                            <div class="service-name">Gestor de Cámaras</div>
                            <div class="service-status running">Activo</div>
                        </div>
                    </div>
                    
                    <div class="service-item">
                        <div class="service-icon running">
                            <i class="fas fa-bell"></i>
                        </div>
                        <div class="service-details">
                            <div class="service-name">Sistema de Alertas</div>
                            <div class="service-status running">Activo</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Registros del Sistema -->
        <div class="diagnostic-card full-width">
            <div class="card-header">
                <h3><i class="fas fa-clipboard-list"></i> Registros del Sistema</h3>
                <div class="log-controls">
                    <select id="logLevel" class="compact-select" onchange="filterLogs()">
                        <option value="all">Todos los niveles</option>
                        <option value="error">Errores</option>
                        <option value="warning">Advertencias</option>
                        <option value="info">Información</option>
                        <option value="debug">Depuración</option>
                    </select>
                    <button class="btn-icon refresh-btn" onclick="refreshSection('logs')">
                        <i class="fas fa-sync"></i>
                    </button>
                </div>
            </div>
            <div class="card-body" id="logsSection">
                <div class="logs-container">
                    <div class="log-entries" id="logEntries">
                        <!-- Se llenará dinámicamente -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Estilos específicos para diagnósticos del sistema */
.diagnostics-dashboard {
    margin-bottom: 30px;
}

.system-overview {
    margin-bottom: 20px;
}

.system-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    padding: 20px;
}

.system-status {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.status-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: rgba(46, 204, 113, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 20px;
}

.status-icon i {
    font-size: 30px;
    color: var(--success-color);
}

.status-icon.warning i {
    color: var(--warning-color);
}

.status-icon.error i {
    color: var(--danger-color);
}

.status-info h2 {
    margin: 0;
    font-size: 1.5rem;
    color: var(--secondary-color);
}

.status-info p {
    margin: 5px 0 0 0;
    color: #6c757d;
}

.system-uptime {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.uptime-label {
    font-weight: 500;
    margin-right: 10px;
    color: var(--secondary-color);
}

.uptime-value {
    font-family: monospace;
    font-size: 1.1rem;
}

.system-timestamp {
    font-size: 0.9rem;
    color: #6c757d;
}

.diagnostics-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
}

.diagnostic-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--card-shadow);
    overflow: hidden;
}

.diagnostic-card.full-width {
    grid-column: 1 / -1;
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
}

.card-header h3 {
    margin: 0;
    font-size: 1.1rem;
    color: var(--secondary-color);
    display: flex;
    align-items: center;
}

.card-header h3 i {
    margin-right: 8px;
    color: var(--primary-color);
}

.card-body {
    padding: 15px;
}

.resources-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
}

.resource-meter {
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 12px;
}

.resource-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.resource-title {
    font-weight: 500;
    color: var(--secondary-color);
}

.resource-value {
    font-weight: 600;
}

.progress-bar {
    height: 8px;
    background-color: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 10px;
}

.progress {
    height: 100%;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
}

.progress.warning {
    background-color: var(--warning-color);
}

.progress.danger {
    background-color: var(--danger-color);
}

.resource-details {
    display: flex;
    justify-content: space-between;
    font-size: 0.85rem;
    color: #6c757d;
}

.temperature-gauge {
    height: 15px;
    position: relative;
    margin: 5px 0 15px;
}

.gauge-segments {
    display: flex;
    height: 100%;
    border-radius: 4px;
    overflow: hidden;
}

.gauge-segment {
    flex: 1;
    height: 100%;
}

.gauge-segment.normal {
    background-color: var(--success-color);
}

.gauge-segment.warning {
    background-color: var(--warning-color);
}

.gauge-segment.critical {
    background-color: var(--danger-color);
}

.gauge-needle {
    position: absolute;
    top: -5px;
    left: 0;
    height: 25px;
    width: 2px;
    background-color: #fff;
    border: 1px solid #333;
    transform-origin: bottom center;
    transition: transform 0.5s ease;
}

.logs-container {
    max-height: 300px;
    overflow-y: auto;
    background-color: #f8f9fa;
    border-radius: 6px;
    font-family: monospace;
}

.log-entry {
    padding: 8px 12px;
    border-bottom: 1px solid #e9ecef;
    font-size: 0.9rem;
}

.log-entry:nth-child(even) {
    background-color: rgba(0, 0, 0, 0.02);
}

.log-time {
    color: #6c757d;
    margin-right: 10px;
}

.log-level {
    display: inline-block;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.8em;
    margin-right: 10px;
}

.log-level.error {
    background-color: var(--danger-color);
    color: white;
}

.log-level.warning {
    background-color: var(--warning-color);
    color: white;
}

.log-level.info {
    background-color: var(--info-color);
    color: white;
}

.log-level.debug {
    background-color: #adb5bd;
    color: white;
}

.network-stats {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 20px;
}

.network-stat {
    display: flex;
    align-items: center;
}

.stat-name {
    font-weight: 500;
    margin-right: 10px;
    color: var(--secondary-color);
}

.network-metrics {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    margin-bottom: 20px;
}

.metric-item {
    background-color: var(--background-light);
    border-radius: 8px;
    padding: 15px;
    text-align: center;
}

.metric-title {
    font-size: 0.9rem;
    color: #6c757d;
    margin-bottom: 5px;
}

.metric-value {
    font-size: 1.2rem;
    font-weight: 500;
    color: var(--secondary-color);
}

.network-chart-container {
    height: 200px;
}

.services-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
}

.service-item {
    background-color: var(--background-light);
    border-radius: 8px;
    padding: 15px;
    display: flex;
    align-items: center;
}

.service-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgba(52, 152, 219, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 15px;
}

.service-icon i {
    color: var(--primary-color);
}

.service-icon.running i {
    color: var(--success-color);
}

.service-icon.stopped i {
    color: var(--danger-color);
}

.service-details {
    flex-grow: 1;
}

.service-name {
    font-weight: 500;
    color: var(--secondary-color);
    margin-bottom: 5px;
}

.service-status {
    font-size: 0.85rem;
}

.service-status.running {
    color: var(--success-color);
}

.service-status.stopped {
    color: var(--danger-color);
}

.loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 30px 0;
}

.loading-spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top: 4px solid var(--primary-color);
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 15px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
    .diagnostics-grid {
        grid-template-columns: 1fr;
    }
    
    .resources-grid {
        grid-template-columns: 1fr;
    }
    
    .network-metrics {
        grid-template-columns: 1fr;
    }
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="{{ url_for('static', filename='js/diagnostics.js') }}"></script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\training.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Entrenamiento de IA - {{ config.app_name }}{% endblock %}

{% block content %}
<h2>Sistema de Entrenamiento de IA</h2>

<div class="training-container">
    <!-- Sección de Datasets -->
    <div class="card">
        <h3>Conjuntos de Datos</h3>
        
        <div class="tabs">
            <button class="tab-button active" data-tab="datasets-list">Lista de Datasets</button>
            <button class="tab-button" data-tab="create-dataset">Crear Dataset</button>
        </div>
        
        <div id="datasets-list" class="tab-content active">
            <table class="data-table" id="datasets-table">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Categorías</th>
                        <th>Muestras</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="5">Cargando datasets...</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div id="create-dataset" class="tab-content">
            <form id="dataset-form">
                <div class="form-group">
                    <label for="dataset-name">Nombre:</label>
                    <input type="text" id="dataset-name" required>
                </div>
                
                <div class="form-group">
                    <label for="dataset-description">Descripción:</label>
                    <textarea id="dataset-description" rows="3"></textarea>
                </div>
                
                <div class="form-group">
                    <label>Categorías:</label>
                    <div id="categories-container">
                        <div class="category-input">
                            <input type="text" name="category" placeholder="Nombre de categoría">
                            <button type="button" class="button small remove-category">-</button>
                        </div>
                    </div>
                    <button type="button" id="add-category" class="button small">Añadir Categoría</button>
                </div>
                
                <div class="button-group">
                    <button type="submit" class="button">Crear Dataset</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Sección de Entrenamiento -->
    <div class="card">
        <h3>Modelos y Entrenamiento</h3>
        
        <div class="tabs">
            <button class="tab-button active" data-tab="models-list">Modelos</button>
            <button class="tab-button" data-tab="training-jobs">Trabajos</button>
            <button class="tab-button" data-tab="create-training">Nuevo Entrenamiento</button>
        </div>
        
        <div id="models-list" class="tab-content active">
            <table class="data-table" id="models-table">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Tipo</th>
                        <th>Dataset</th>
                        <th>Precisión</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="5">Cargando modelos...</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div id="training-jobs" class="tab-content">
            <table class="data-table" id="jobs-table">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Dataset</th>
                        <th>Estado</th>
                        <th>Progreso</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="5">Cargando trabajos...</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div id="create-training" class="tab-content">
            <form id="training-form">
                <div class="form-group">
                    <label for="model-name">Nombre del Modelo:</label>
                    <input type="text" id="model-name" required>
                </div>
                
                <div class="form-group">
                    <label for="dataset-select">Dataset:</label>
                    <select id="dataset-select" required>
                        <option value="">Seleccionar dataset</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="model-type">Tipo de Modelo:</label>
                    <select id="model-type" required>
                        <option value="yolov5">YOLOv5 (Detección de objetos)</option>
                        <option value="classification">Clasificación de imágenes</option>
                        <option value="segmentation">Segmentación semántica</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>Hiperparámetros:</label>
                    <div id="hyperparams-container">
                        <div class="hyperparam-input">
                            <input type="text" name="param-name" placeholder="Nombre">
                            <input type="text" name="param-value" placeholder="Valor">
                        </div>
                    </div>
                    <button type="button" id="add-param" class="button small">Añadir Parámetro</button>
                </div>
                
                <div class="button-group">
                    <button type="submit" class="button">Iniciar Entrenamiento</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Código JavaScript para gestionar la interfaz y las llamadas AJAX
    // para el sistema de entrenamiento de IA
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\training_details.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Entrenamiento: {{ training.name }} - {{ config.app_name }}{% endblock %}

{% block extra_css %}
<style>
.training-details-container {
    padding: 20px;
}

.training-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.training-status {
    display: inline-block;
    padding: 6px 12px;
    border-radius: 4px;
    font-weight: bold;
}

.training-status.running {
    background: #d4edda;
    color: #155724;
}

.training-status.completed {
    background: #cce5ff;
    color: #004085;
}

.training-status.failed {
    background: #f8d7da;
    color: #721c24;
}

.training-status.cancelled {
    background: #fff3cd;
    color: #856404;
}

.training-status.queued {
    background: #e2e3e5;
    color: #383d41;
}

.training-info {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
}

.info-card {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.progress-section {
    margin-bottom: 20px;
}

.progress-bar {
    height: 20px;
    background: #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 10px;
}

.progress-bar .progress {
    height: 100%;
    background: #007bff;
    border-radius: 10px;
}

.metrics-section {
    margin-bottom: 20px;
}

.metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
}

.metric-card {
    background: white;
    border-radius: 6px;
    padding: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    text-align: center;
}

.metric-value {
    font-size: 2rem;
    font-weight: bold;
    color: #007bff;
}

.charts-section {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 20px;
}

.chart-container {
    flex: 1;
    min-width: 300px;
    background: white;
    border-radius: 6px;
    padding: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.results-section {
    margin-bottom: 20px;
}

.result-images {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
}

.result-image {
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.result-image img {
    width: 100%;
    height: auto;
}

.actions-section {
    margin-top: 20px;
}
</style>
{% endblock %}

{% block content %}
<div class="training-details-container">
    <div class="training-header">
        <div>
            <h2>{{ training.name }}</h2>
            <p>ID: {{ training.id }}</p>
        </div>
        <div>
            <span class="training-status {{ training.status }}">{{ training.status }}</span>
        </div>
    </div>
    
    <div class="training-info">
        <div class="info-card">
            <h3>Información Básica</h3>
            <p><strong>Dataset:</strong> {{ training.dataset_name }}</p>
            <p><strong>Tipo de Modelo:</strong> {{ training.model_type }}</p>
            <p><strong>Iniciado:</strong> {{ training.started_at|date }}</p>
            {% if training.finished_at %}
            <p><strong>Finalizado:</strong> {{ training.finished_at|date }}</p>
            {% endif %}
        </div>
        
        <div class="info-card">
            <h3>Parámetros</h3>
            <p><strong>Epochs:</strong> {{ training.params.epochs }}</p>
            <p><strong>Batch Size:</strong> {{ training.params.batch_size }}</p>
            <p><strong>Learning Rate:</strong> {{ training.params.learning_rate }}</p>
        </div>
    </div>
    
    {% if training.status == 'running' or training.status == 'queued' %}
    <div class="progress-section">
        <h3>Progreso</h3>
        <div class="progress-bar">
            <div class="progress" style="width: {{ training.progress }}%"></div>
        </div>
        <p>{{ training.progress }}% completado (Época {{ training.current_epoch }}/{{ training.total_epochs }})</p>
    </div>
    {% endif %}
    
    {% if training.metrics %}
    <div class="metrics-section">
        <h3>Métricas</h3>
        <div class="metrics-grid">
            {% for name, value in training.metrics.items() %}
            <div class="metric-card">
                <p class="metric-value">{{ value }}</p>
                <p class="metric-label">{{ name }}</p>
            </div>
            {% endfor %}
        </div>
    </div>
    
    <div class="charts-section">
        <div class="chart-container">
            <h3>Precisión por Época</h3>
            <canvas id="accuracy-chart"></canvas>
        </div>
        
        <div class="chart-container">
            <h3>Pérdida por Época</h3>
            <canvas id="loss-chart"></canvas>
        </div>
    </div>
    {% endif %}
    
    {% if training.results %}
    <div class="results-section">
        <h3>Resultados</h3>
        <div class="result-images">
            {% for result in training.results %}
            <div class="result-image">
                <img src="{{ result.image_url }}" alt="Result {{ loop.index }}">
                <p>{{ result.description }}</p>
            </div>
            {% endfor %}
        </div>
    </div>
    {% endif %}
    
    <div class="actions-section">
        <a href="{{ url_for('trainings') }}" class="btn">Volver a Entrenamientos</a>
        
        {% if training.status == 'running' %}
        <button class="btn cancel-training" data-id="{{ training.id }}">Cancelar Entrenamiento</button>
        {% endif %}
        
        {% if training.status == 'completed' %}
        <a href="{{ url_for('api_export_model', training_id=training.id) }}" class="btn primary">Exportar Modelo</a>
        <button class="btn deploy-model" data-id="{{ training.id }}">Implementar Modelo</button>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const trainingId = '{{ training.id }}';
    const trainingStatus = '{{ training.status }}';
    
    // Si el entrenamiento está en progreso, actualizar cada 3 segundos
    if (trainingStatus === 'running' || trainingStatus === 'queued') {
        setInterval(updateTrainingStatus, 3000);
    }
    
    // Evento para cancelar entrenamiento
    const cancelButton = document.querySelector('.cancel-training');
    if (cancelButton) {
        cancelButton.addEventListener('click', function() {
            if (confirm('¿Estás seguro de que deseas cancelar este entrenamiento?')) {
                fetch(`/api/trainings/${trainingId}/cancel`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        window.location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                });
            }
        });
    }
    
    // Evento para implementar modelo
    const deployButton = document.querySelector('.deploy-model');
    if (deployButton) {
        deployButton.addEventListener('click', function() {
            if (confirm('¿Deseas implementar este modelo en el sistema?')) {
                fetch(`/api/trainings/${trainingId}/deploy`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        alert('Modelo implementado correctamente');
                    } else {
                        alert('Error: ' + data.message);
                    }
                });
            }
        });
    }
    
    // Cargar gráficos si hay métricas disponibles
    {% if training.metrics and training.history %}
    
    // Gráfico de precisión
    const accuracyCtx = document.getElementById('accuracy-chart').getContext('2d');
    const accuracyChart = new Chart(accuracyCtx, {
        type: 'line',
        data: {
            labels: Array.from({length: {{ training.history.accuracy|length }}}, (_, i) => i + 1),
            datasets: [{
                label: 'Precisión',
                data: {{ training.history.accuracy|tojson }},
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 2,
                tension: 0.1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    max: 1
                }
            }
        }
    });
    
    // Gráfico de pérdida
    const lossCtx = document.getElementById('loss-chart').getContext('2d');
    const lossChart = new Chart(lossCtx, {
        type: 'line',
        data: {
            labels: Array.from({length: {{ training.history.loss|length }}}, (_, i) => i + 1),
            datasets: [{
                label: 'Pérdida',
                data: {{ training.history.loss|tojson }},
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 2,
                tension: 0.1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    
    {% endif %}
    
    function updateTrainingStatus() {
        fetch(`/api/trainings/${trainingId}/status`)
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    const training = data.training;
                    
                    // Actualizar barra de progreso
                    document.querySelector('.progress').style.width = `${training.progress}%`;
                    document.querySelector('.progress-section p').textContent = 
                        `${training.progress}% completado (Época ${training.current_epoch}/${training.total_epochs})`;
                    
                    // Actualizar estado
                    const statusElement = document.querySelector('.training-status');
                    statusElement.textContent = training.status;
                    statusElement.className = `training-status ${training.status}`;
                    
                    // Si completado, recargar la página
                    if (training.status !== 'running' && training.status !== 'queued') {
                        window.location.reload();
                    }
                }
            });
    }
});
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\trainings.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Entrenamientos - {{ config.app_name }}{% endblock %}

{% block content %}
<div class="trainings-container">
    <h2>Entrenamientos</h2>
    
    <div class="active-trainings">
        <h3>Entrenamientos Activos</h3>
        
        {% if active_trainings %}
            <div class="trainings-grid">
                {% for training in active_trainings %}
                <div class="training-card" data-id="{{ training.id }}">
                    <div class="training-header">
                        <h4>{{ training.name }}</h4>
                        <span class="training-status {{ training.status }}">{{ training.status }}</span>
                    </div>
                    
                    <div class="training-info">
                        <p><strong>Dataset:</strong> {{ training.dataset_name }}</p>
                        <p><strong>Modelo:</strong> {{ training.model_type }}</p>
                        <p><strong>Iniciado:</strong> {{ training.start_time }}</p>
                    </div>
                    
                    <div class="training-progress">
                        <div class="progress-bar">
                            <div class="progress" style="width: {{ training.progress }}%"></div>
                        </div>
                        <p>{{ training.progress }}% completado (Época {{ training.current_epoch }}/{{ training.total_epochs }})</p>
                    </div>
                    
                    <div class="training-actions">
                        <a href="{{ url_for('view_training', training_id=training.id) }}" class="btn">Ver detalles</a>
                        <button class="btn cancel-training" data-id="{{ training.id }}">Cancelar</button>
                    </div>
                </div>
                {% endfor %}
            </div>
        {% else %}
            <p class="empty-state">No hay entrenamientos activos actualmente.</p>
        {% endif %}
    </div>
    
    <div class="completed-trainings">
        <h3>Entrenamientos Completados</h3>
        
        {% if completed_trainings %}
            <div class="trainings-grid">
                {% for training in completed_trainings %}
                <div class="training-card" data-id="{{ training.id }}">
                    <div class="training-header">
                        <h4>{{ training.name }}</h4>
                        <span class="training-status {{ training.status }}">{{ training.status }}</span>
                    </div>
                    
                    <div class="training-info">
                        <p><strong>Dataset:</strong> {{ training.dataset_name }}</p>
                        <p><strong>Modelo:</strong> {{ training.model_type }}</p>
                        <p><strong>Completado:</strong> {{ training.end_time }}</p>
                    </div>
                    
                    <div class="training-metrics">
                        <div class="metric">
                            <p class="metric-value">{{ training.metrics.accuracy|default('N/A') }}</p>
                            <p class="metric-label">Precisión</p>
                        </div>
                        <div class="metric">
                            <p class="metric-value">{{ training.metrics.loss|default('N/A') }}</p>
                            <p class="metric-label">Pérdida</p>
                        </div>
                    </div>
                    
                    <div class="training-actions">
                        <a href="{{ url_for('view_training', training_id=training.id) }}" class="btn">Ver detalles</a>
                        <a href="{{ url_for('api_export_model', training_id=training.id) }}" class="btn">Exportar modelo</a>
                    </div>
                </div>
                {% endfor %}
            </div>
        {% else %}
            <p class="empty-state">No hay entrenamientos completados.</p>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Actualizar estado de entrenamientos activos cada 5 segundos
    if (document.querySelectorAll('.active-trainings .training-card').length > 0) {
        setInterval(updateActiveTrainings, 5000);
    }
    
    // Cancelar entrenamiento
    document.querySelectorAll('.cancel-training').forEach(button => {
        button.addEventListener('click', function() {
            const trainingId = this.dataset.id;
            
            if (confirm('¿Estás seguro de que deseas cancelar este entrenamiento?')) {
                fetch(`/api/trainings/${trainingId}/cancel`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        window.location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                });
            }
        });
    });
    
    function updateActiveTrainings() {
        document.querySelectorAll('.active-trainings .training-card').forEach(card => {
            const trainingId = card.dataset.id;
            
            fetch(`/api/trainings/${trainingId}/status`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const training = data.training;
                        
                        // Actualizar barra de progreso
                        card.querySelector('.progress').style.width = `${training.progress}%`;
                        card.querySelector('.training-progress p').textContent = 
                            `${training.progress}% completado (Época ${training.current_epoch}/${training.total_epochs})`;
                        
                        // Actualizar estado
                        const statusElement = card.querySelector('.training-status');
                        statusElement.textContent = training.status;
                        statusElement.className = `training-status ${training.status}`;
                        
                        // Si completado, recargar la página
                        if (training.status === 'completed' || training.status === 'failed' || training.status === 'cancelled') {
                            window.location.reload();
                        }
                    }
                });
        });
    }
});
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\webcam_test.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Prueba de WebCam - {{ config.app_name }}{% endblock %}

{% block content %}
<h2>Prueba Directa de WebCam</h2>

<div class="debug-container">
    <div class="card">
        <h3>Vista directa de WebCam</h3>
        <p>Esta es una vista directa de la webcam, sin pasar por el sistema de gestión de cámaras:</p>
        
        <div class="video-container">
            <img src="{{ url_for('webcam_feed') }}" alt="Webcam feed" style="width: 100%; max-width: 640px;">
        </div>
        
        <p><small>Si no ves el video, comprueba que tu navegador tenga permisos para acceder a la webcam.</small></p>
    </div>
    
    <div class="card">
        <h3>Información de Diagnóstico</h3>
        <p>Si la webcam no funciona, verifica lo siguiente:</p>
        <ul>
            <li>La webcam está conectada y funciona con otras aplicaciones</li>
            <li>No hay otra aplicación usando la webcam actualmente</li>
            <li>Tu navegador tiene permisos para acceder a la webcam</li>
            <li>El servidor Flask tiene permisos para acceder a la webcam</li>
        </ul>
        
        <p>Prueba con diferentes índices de cámara:</p>
        <ul>
            <li><a href="{{ url_for('webcam_test') }}?camera=0">Cámara 0</a></li>
            <li><a href="{{ url_for('webcam_test') }}?camera=1">Cámara 1</a></li>
            <li><a href="{{ url_for('webcam_test') }}?camera=2">Cámara 2</a></li>
        </ul>
    </div>
</div>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\whatsapp_config.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Configuración de WhatsApp - {{ config.app_name }}{% endblock %}

{% block content %}
<div class="whatsapp-config-container">
    <h2>Notificaciones de WhatsApp</h2>
    
    <div class="status-card">
        <div class="status-header">
            <h3>Estado del Servicio</h3>
            <div class="toggle-container">
                <label class="toggle-switch">
                    <input type="checkbox" id="whatsapp-active-toggle" {% if whatsapp_config.active %}checked{% endif %} title="Activar/Desactivar notificaciones de WhatsApp">
                    <span class="toggle-slider"></span>
                </label>
                <span class="toggle-status {% if whatsapp_config.active %}active{% else %}inactive{% endif %}">
                    {% if whatsapp_config.active %}Activo{% else %}Inactivo{% endif %}
                </span>
            </div>
        </div>
        
        <div class="status-info">
            <div class="info-item">
                <span class="info-label">Mensajes enviados hoy:</span>
                <span class="info-value">{{ whatsapp_config.messages_sent_today }}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Límite diario:</span>
                <span class="info-value">{{ whatsapp_config.daily_limit }}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Destinatarios configurados:</span>
                <span class="info-value">{{ whatsapp_config.recipients|length }}</span>
            </div>
        </div>
    </div>
    
    <div class="config-grid">
        <div class="config-card api-settings">
            <h3>Configuración de API</h3>
            <form id="api-settings-form">
                <div class="form-group">
                    <label for="api-key">API Key:</label>
                    <input type="password" id="api-key" value="{{ whatsapp_config.api_key }}" class="form-control">
                    <button type="button" class="show-hide-btn" data-target="api-key">Mostrar</button>
                </div>
                
                <div class="form-group">
                    <label for="phone-id">ID de Teléfono:</label>
                    <input type="text" id="phone-id" value="{{ whatsapp_config.phone_id }}" class="form-control">
                </div>
                
                <div class="form-group">
                    <label for="business-account-id">ID de Cuenta de Negocio:</label>
                    <input type="text" id="business-account-id" value="{{ whatsapp_config.business_account_id }}" class="form-control">
                </div>
                
                <div class="form-group">
                    <label for="daily-limit">Límite Diario de Mensajes:</label>
                    <input type="number" id="daily-limit" value="{{ whatsapp_config.daily_limit }}" min="1" max="1000" class="form-control">
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn primary">Guardar Configuración</button>
                    <button type="button" id="test-connection-btn" class="btn">Probar Conexión</button>
                </div>
            </form>
        </div>
        
        <div class="config-card alert-settings">
            <h3>Configuración de Alertas</h3>
            <form id="alert-settings-form">
                <div class="form-group">
                    <label>Niveles de Alerta a Notificar:</label>
                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" name="alert-level" value="critical" 
                                  {% if 'critical' in whatsapp_config.alert_levels %}checked{% endif %}>
                            Crítica
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="alert-level" value="warning" 
                                  {% if 'warning' in whatsapp_config.alert_levels %}checked{% endif %}>
                            Advertencia
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="alert-level" value="info" 
                                  {% if 'info' in whatsapp_config.alert_levels %}checked{% endif %}>
                            Informativa
                        </label>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Tipos de Alerta a Notificar:</label>
                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" name="alert-type" value="intrusion" 
                                  {% if 'intrusion' in whatsapp_config.alert_types %}checked{% endif %}>
                            Intrusión
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="alert-type" value="fire" 
                                  {% if 'fire' in whatsapp_config.alert_types %}checked{% endif %}>
                            Incendio
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="alert-type" value="safety_violation" 
                                  {% if 'safety_violation' in whatsapp_config.alert_types %}checked{% endif %}>
                            Violación de Seguridad
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="alert-type" value="face" 
                                  {% if 'face' in whatsapp_config.alert_types %}checked{% endif %}>
                            Reconocimiento Facial
                        </label>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn primary">Guardar Configuración</button>
                </div>
            </form>
        </div>
    </div>
    
    <div class="recipients-section">
        <h3>Destinatarios</h3>
        
        <div class="add-recipient-form">
            <form id="add-recipient-form">
                <div class="form-group">
                    <input type="text" id="new-recipient-name" placeholder="Nombre" required>
                </div>
                <div class="form-group">
                    <input type="tel" id="new-recipient-phone" placeholder="Número de teléfono (incluir código de país)" required>
                </div>
                <button type="submit" class="btn primary">Añadir Destinatario</button>
            </form>
        </div>
        
        <div class="recipients-list">
            {% if whatsapp_config.recipients %}
                {% for recipient in whatsapp_config.recipients %}
                <div class="recipient-card" data-phone="{{ recipient.phone }}">
                    <div class="recipient-info">
                        <h4>{{ recipient.name }}</h4>
                        <p>{{ recipient.phone }}</p>
                    </div>
                    <div class="recipient-actions">
                        <label class="toggle-switch">
                            <input type="checkbox" class="recipient-active-toggle" 
                                  {% if recipient.active %}checked{% endif %}
                                  data-phone="{{ recipient.phone }}"
                                  title="Activar/Desactivar este destinatario">
                            <span class="toggle-slider"></span>
                        </label>
                        <button class="btn delete-recipient" data-phone="{{ recipient.phone }}">Eliminar</button>
                        <button class="btn test-recipient" data-phone="{{ recipient.phone }}">Enviar Prueba</button>
                    </div>
                </div>
                {% endfor %}
            {% else %}
                <p class="empty-state">No hay destinatarios configurados. Añade uno para comenzar a enviar notificaciones.</p>
            {% endif %}
        </div>
    </div>
    
    <div class="setup-guide">
        <h3>Guía de Configuración</h3>
        <div class="guide-content">
            <h4>Cómo obtener credenciales de WhatsApp Business API</h4>
            <ol>
                <li>Regístrate en <a href="https://developers.facebook.com/" target="_blank" rel="noopener noreferrer">Facebook for Developers</a></li>
                <li>Crea una aplicación de tipo "Business"</li>
                <li>Añade la funcionalidad de WhatsApp a tu aplicación</li>
                <li>Configura un número de teléfono para pruebas o solicita acceso a la API completa</li>
                <li>Obtén las credenciales (API Key, Phone ID, etc.) desde el Panel de WhatsApp</li>
            </ol>
            
            <h4>Notas importantes:</h4>
            <ul>
                <li>El número de teléfono debe incluir el código de país (ej: +5491123456789)</li>
                <li>Para recibir mensajes, los destinatarios deben enviar primero un mensaje a tu número de WhatsApp Business</li>
                <li>Existen límites en la cantidad de mensajes que puedes enviar a cada destinatario</li>
            </ul>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Activar/desactivar WhatsApp
    document.getElementById('whatsapp-active-toggle').addEventListener('change', function() {
        const active = this.checked;
        
        fetch('/api/whatsapp/toggle', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                active: active
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                document.querySelector('.toggle-status').textContent = active ? 'Activo' : 'Inactivo';
                document.querySelector('.toggle-status').className = 
                    'toggle-status ' + (active ? 'active' : 'inactive');
            } else {
                alert('Error: ' + data.message);
                this.checked = !active;  // Revertir cambio
            }
        });
    });
    
    // Guardar configuración de API
    document.getElementById('api-settings-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const apiKey = document.getElementById('api-key').value;
        const phoneId = document.getElementById('phone-id').value;
        const businessAccountId = document.getElementById('business-account-id').value;
        const dailyLimit = document.getElementById('daily-limit').value;
        
        fetch('/api/whatsapp/settings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                api_key: apiKey,
                phone_id: phoneId,
                business_account_id: businessAccountId,
                daily_limit: parseInt(dailyLimit)
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                alert('Configuración guardada correctamente');
            } else {
                alert('Error: ' + data.message);
            }
        });
    });
    
    // Guardar configuración de alertas
    document.getElementById('alert-settings-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const alertLevels = Array.from(document.querySelectorAll('input[name="alert-level"]:checked')).map(cb => cb.value);
        const alertTypes = Array.from(document.querySelectorAll('input[name="alert-type"]:checked')).map(cb => cb.value);
        
        fetch('/api/whatsapp/alert_settings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                alert_levels: alertLevels,
                alert_types: alertTypes
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                alert('Configuración de alertas guardada correctamente');
            } else {
                alert('Error: ' + data.message);
            }
        });
    });
    
    // Añadir nuevo destinatario
    document.getElementById('add-recipient-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const name = document.getElementById('new-recipient-name').value;
        const phone = document.getElementById('new-recipient-phone').value;
        
        fetch('/api/whatsapp/recipients', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: name,
                phone: phone
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
            }
        });
    });
    
    // Activar/desactivar destinatario
    document.querySelectorAll('.recipient-active-toggle').forEach(toggle => {
        toggle.addEventListener('change', function() {
            const phone = this.dataset.phone;
            const active = this.checked;
            
            fetch(`/api/whatsapp/recipients/${encodeURIComponent(phone)}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    active: active
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status !== 'success') {
                    alert('Error: ' + data.message);
                    this.checked = !active;  // Revertir cambio
                }
            });
        });
    });
    
    // Eliminar destinatario
    document.querySelectorAll('.delete-recipient').forEach(button => {
        button.addEventListener('click', function() {
            const phone = this.dataset.phone;
            
            if (confirm('¿Está seguro de que desea eliminar este destinatario?')) {
                fetch(`/api/whatsapp/recipients/${encodeURIComponent(phone)}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        this.closest('.recipient-card').remove();
                    } else {
                        alert('Error: ' + data.message);
                    }
                });
            }
        });
    });
    
    // Probar API
    document.getElementById('test-connection-btn').addEventListener('click', function() {
        this.disabled = true;
        this.textContent = 'Probando...';
        
        fetch('/api/whatsapp/test', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                alert('Conexión exitosa: ' + data.message);
            } else {
                alert('Error: ' + data.message);
            }
        })
        .finally(() => {
            this.disabled = false;
            this.textContent = 'Probar Conexión';
        });
    });
    
    // Enviar mensaje de prueba a un destinatario
    document.querySelectorAll('.test-recipient').forEach(button => {
        button.addEventListener('click', function() {
            const phone = this.dataset.phone;
            
            this.disabled = true;
            this.textContent = 'Enviando...';
            
            fetch(`/api/whatsapp/test/${encodeURIComponent(phone)}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    alert('Mensaje de prueba enviado correctamente');
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .finally(() => {
                this.disabled = false;
                this.textContent = 'Enviar Prueba';
            });
        });
    });
    
    // Mostrar/ocultar API Key
    document.querySelectorAll('.show-hide-btn').forEach(button => {
        button.addEventListener('click', function() {
            const targetId = this.dataset.target;
            const inputEl = document.getElementById(targetId);
            
            if (inputEl.type === 'password') {
                inputEl.type = 'text';
                this.textContent = 'Ocultar';
            } else {
                inputEl.type = 'password';
                this.textContent = 'Mostrar';
            }
        });
    });
});
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\components\camera_stream.html
--------------------------------------------------------------------------------
<!-- Componente de Stream de Cámara -->
<div class="camera-stream-container">
    <div class="stream-header">
        <h3 id="stream-title">{{ camera_name }}</h3>
        <div class="stream-controls">
            <button class="btn-icon refresh-stream" onclick="refreshStream({{ camera_id }})">
                <i class="fas fa-sync"></i>
            </button>
            <button class="btn-icon fullscreen-stream" onclick="toggleFullscreen('stream-{{ camera_id }}')">
                <i class="fas fa-expand"></i>
            </button>
        </div>
    </div>
    
    <div class="stream-body" id="stream-{{ camera_id }}">
        <img src="/api/camera/{{ camera_id }}/stream?width=640&height=480" alt="Camera Stream" id="camera-stream-{{ camera_id }}">
        <div class="stream-overlay">
            <div class="detection-info" id="detection-info-{{ camera_id }}"></div>
            <div class="stream-status" id="stream-status-{{ camera_id }}">
                <span class="status-indicator"></span>
                <span class="status-text">En vivo</span>
            </div>
        </div>
    </div>
    
    <div class="stream-footer">
        <div class="detection-controls">
            <button class="btn detect-btn" onclick="toggleDetection({{ camera_id }}, 'pose')">
                <i class="fas fa-walking"></i> Postura
            </button>
            <button class="btn detect-btn" onclick="toggleDetection({{ camera_id }}, 'fire')">
                <i class="fas fa-fire"></i> Fuego
            </button>
            <button class="btn detect-btn" onclick="toggleDetection({{ camera_id }}, 'water')">
                <i class="fas fa-water"></i> Agua
            </button>
            <button class="btn detect-btn" onclick="toggleDetection({{ camera_id }}, 'face')">
                <i class="fas fa-user"></i> Facial
            </button>
        </div>
        <div class="capture-controls">
            <button class="btn capture-btn" onclick="captureSnapshot({{ camera_id }})">
                <i class="fas fa-camera"></i> Capturar
            </button>
            <button class="btn record-btn" onclick="toggleRecording({{ camera_id }})">
                <i class="fas fa-video"></i> <span id="record-text-{{ camera_id }}">Grabar</span>
            </button>
        </div>
    </div>
</div>

<script>
    // Variables para estado de la cámara
    let isDetecting{{ camera_id }} = false;
    let detectionType{{ camera_id }} = null;
    let isRecording{{ camera_id }} = false;
    
    // Función para refrescar stream
    function refreshStream(cameraId) {
        const streamImg = document.getElementById(`camera-stream-${cameraId}`);
        const currentSrc = streamImg.src.split('?')[0];
        streamImg.src = `${currentSrc}?width=640&height=480&t=${new Date().getTime()}`;
    }
    
    // Función para pantalla completa
    function toggleFullscreen(elementId) {
        const element = document.getElementById(elementId);
        
        if (!document.fullscreenElement) {
            if (element.requestFullscreen) {
                element.requestFullscreen();
            } else if (element.webkitRequestFullscreen) {
                element.webkitRequestFullscreen();
            } else if (element.msRequestFullscreen) {
                element.msRequestFullscreen();
            }
        } else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            }
        }
    }
    
    // Función para activar/desactivar detección
    function toggleDetection(cameraId, detectionType) {
        // Obtener variable dinámica
        const isDetectingVar = eval(`isDetecting${cameraId}`);
        const currentType = eval(`detectionType${cameraId}`);
        
        if (isDetectingVar && currentType === detectionType) {
            // Desactivar la detección actual
            fetch(`/api/detectors/${detectionType}/disable?camera_id=${cameraId}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                eval(`isDetecting${cameraId} = false`);
                eval(`detectionType${cameraId} = null`);
                document.getElementById(`detection-info-${cameraId}`).innerHTML = '';
                showAlert(`Detección de ${detectionType} desactivada`, 'info');
            });
        } else {
            // Desactivar detección anterior si hay alguna
            if (isDetectingVar) {
                fetch(`/api/detectors/${currentType}/disable?camera_id=${cameraId}`, {
                    method: 'POST'
                });
            }
            
            // Activar nueva detección
            fetch(`/api/detectors/${detectionType}/enable?camera_id=${cameraId}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                eval(`isDetecting${cameraId} = true`);
                eval(`detectionType${cameraId} = "${detectionType}"`);
                showAlert(`Detección de ${detectionType} activada`, 'success');
                
                // Iniciar polling para resultados de detección
                pollDetectionResults(cameraId, detectionType);
            });
        }
    }
    
    // Polling para resultados de detección
    function pollDetectionResults(cameraId, detectionType) {
        // Verificar si la detección sigue activa
        if (!eval(`isDetecting${cameraId}`) || eval(`detectionType${cameraId}`) !== detectionType) {
            return;
        }
        
        fetch(`/api/detectors/${detectionType}/results?camera_id=${cameraId}`)
            .then(response => response.json())
            .then(data => {
                if (data.results) {
                    const infoElement = document.getElementById(`detection-info-${cameraId}`);
                    infoElement.innerHTML = '';
                    
                    // Mostrar resultados según tipo de detección
                    if (detectionType === 'pose') {
                        data.results.forEach(pose => {
                            infoElement.innerHTML += `<div class="detection-item">${pose.posture}: ${Math.round(pose.confidence*100)}%</div>`;
                        });
                    } else if (detectionType === 'face') {
                        data.results.forEach(face => {
                            infoElement.innerHTML += `<div class="detection-item">${face.name || 'Desconocido'}</div>`;
                        });
                    } else {
                        infoElement.innerHTML = `<div class="detection-item">${data.results.status || 'Analizando...'}</div>`;
                    }
                }
                
                // Continuar polling
                setTimeout(() => pollDetectionResults(cameraId, detectionType), 1000);
            })
            .catch(error => {
                console.error("Error polling detection results:", error);
                setTimeout(() => pollDetectionResults(cameraId, detectionType), 2000);
            });
    }
    
    // Capturar instantánea
    function captureSnapshot(cameraId) {
        fetch(`/api/camera/${cameraId}/snapshot`, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.path) {
                showAlert(`Instantánea guardada: ${data.filename}`, 'success');
                
                // Opcional: mostrar vista previa
                const preview = document.createElement('div');
                preview.className = 'snapshot-preview';
                preview.innerHTML = `
                    <img src="${data.path}" alt="Snapshot">
                    <div class="snapshot-actions">
                        <a href="${data.path}" download="${data.filename}" class="btn download-btn">
                            <i class="fas fa-download"></i> Descargar
                        </a>
                        <button class="btn close-btn" onclick="this.parentNode.parentNode.remove()">
                            <i class="fas fa-times"></i> Cerrar
                        </button>
                    </div>
                `;
                document.body.appendChild(preview);
            } else {
                showAlert(`Error: ${data.error}`, 'error');
            }
        });
    }
    
    // Iniciar/detener grabación
    function toggleRecording(cameraId) {
        const isRecordingVar = eval(`isRecording${cameraId}`);
        const recordBtn = document.querySelector(`.record-btn`);
        const recordText = document.getElementById(`record-text-${cameraId}`);
        
        if (!isRecordingVar) {
            // Iniciar grabación
            fetch(`/api/camera/${cameraId}/record/start`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'recording') {
                    eval(`isRecording${cameraId} = true`);
                    recordBtn.classList.add('recording');
                    recordText.textContent = 'Detener';
                    showAlert('Grabación iniciada', 'success');
                } else {
                    showAlert(`Error: ${data.error}`, 'error');
                }
            });
        } else {
            // Detener grabación
            fetch(`/api/camera/${cameraId}/record/stop`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                eval(`isRecording${cameraId} = false`);
                recordBtn.classList.remove('recording');
                recordText.textContent = 'Grabar';
                showAlert(`Grabación guardada: ${data.filename}`, 'success');
            });
        }
    }
</script> 

--------------------------------------------------------------------------------

📄 templates\errors\404.html
--------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página no encontrada</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding-top: 50px; }
        h1 { color: #444; }
        .error-box { max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="error-box">
        <h1>404 - Página no encontrada</h1>
        <p>Lo sentimos, la página que buscas no existe.</p>
        <p><a href="/">Volver al inicio</a></p>
    </div>
</body>
</html> 

--------------------------------------------------------------------------------

📄 templates\errors\500.html
--------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error del Servidor</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding-top: 50px; }
        h1 { color: #d44; }
        .error-box { max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="error-box">
        <h1>500 - Error del Servidor</h1>
        <p>Lo sentimos, ha ocurrido un error interno.</p>
        <p>Por favor intenta nuevamente más tarde.</p>
        <p><a href="/">Volver al inicio</a></p>
    </div>
</body>
</html> 

--------------------------------------------------------------------------------

📄 templates\modes\forensic.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Análisis Forense - Sistema de Vigilancia IA{% endblock %}

{% block content %}
<style>
    .search-results {
        margin-top: 30px;
    }
    
    .results-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
    }
    
    .results-table th,
    .results-table td {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: left;
    }
    
    .results-table th {
        background-color: #f5f5f5;
        font-weight: bold;
    }
    
    .results-table tr:nth-child(even) {
        background-color: #f9f9f9;
    }
    
    .results-table tr:hover {
        background-color: #f0f0f0;
    }
    
    .loading {
        padding: 15px;
        text-align: center;
        color: #666;
    }
    
    .error {
        padding: 15px;
        color: #721c24;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
    }
    
    .form-row {
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 15px;
        gap: 15px;
    }
    
    .form-group {
        flex: 1 1 calc(50% - 15px);
        min-width: 250px;
    }
</style>
    <h2>Análisis Forense</h2>
    
    <div class="card">
        <h3>Búsqueda Avanzada</h3>
        <form id="forensic-search-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="start-date">Fecha inicio:</label>
                    <input type="datetime-local" id="start-date" name="start_date">
                </div>
                <div class="form-group">
                    <label for="end-date">Fecha fin:</label>
                    <input type="datetime-local" id="end-date" name="end_date">
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="camera-select">Cámara:</label>
                    <select id="camera-select" name="camera_id">
                        <option value="">Todas las cámaras</option>
                        <!-- Opciones de cámaras se cargarán dinámicamente -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="event-type">Tipo de evento:</label>
                    <select id="event-type" name="event_type">
                        <option value="">Todos los eventos</option>
                        <option value="detection">Detección</option>
                        <option value="motion">Movimiento</option>
                        <option value="intrusion">Intrusión</option>
                        <option value="face">Reconocimiento facial</option>
                    </select>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="object-type">Objeto detectado:</label>
                    <select id="object-type" name="object_type">
                        <option value="">Cualquier objeto</option>
                        <option value="person">Persona</option>
                        <option value="car">Vehículo</option>
                        <option value="bicycle">Bicicleta</option>
                        <option value="motorcycle">Motocicleta</option>
                        <option value="bag">Bolso/Mochila</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="min-confidence">Confianza mínima:</label>
                    <input type="range" id="min-confidence" name="min_confidence" min="0" max="100" value="50">
                    <span id="confidence-value">50%</span>
                </div>
            </div>
            
            <button type="submit" class="btn">Buscar</button>
        </form>
    </div>
    
    <div class="search-results">
        <h3>Resultados</h3>
        <div id="results-container">
            <p>Realiza una búsqueda para ver resultados.</p>
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Cargar opciones de cámaras disponibles
        fetch('/api/cameras')
            .then(response => response.json())
            .then(cameras => {
                const cameraSelect = document.getElementById('camera-select');
                cameras.forEach(camera => {
                    const option = document.createElement('option');
                    option.value = camera.id;
                    option.textContent = camera.name;
                    cameraSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Error al cargar cámaras:', error));
        
        // Actualizar el valor del control deslizante de confianza
        const confidenceSlider = document.getElementById('min-confidence');
        const confidenceValue = document.getElementById('confidence-value');
        
        confidenceSlider.addEventListener('input', function() {
            confidenceValue.textContent = this.value + '%';
        });
        
        // Manejar el envío del formulario de búsqueda
        const searchForm = document.getElementById('forensic-search-form');
        const resultsContainer = document.getElementById('results-container');
        
        searchForm.addEventListener('submit', function(event) {
            event.preventDefault();
            
            // Mostrar indicador de carga
            resultsContainer.innerHTML = '<p class="loading">Buscando eventos, por favor espere...</p>';
            
            // Recopilar datos del formulario
            const formData = new FormData(searchForm);
            
            // Preparar objeto de filtros
            const filters = {};
            
            for (const [key, value] of formData.entries()) {
                if (value) {  // Solo incluir campos con valor
                    // Para fechas, asegúrate de que estén en formato ISO
                    if (key === 'start_date' || key === 'end_date') {
                        try {
                            // Asegurarse de que la fecha tenga formato ISO
                            const dateObj = new Date(value);
                            filters[key] = dateObj.toISOString();
                        } catch (e) {
                            console.error(`Error formateando fecha ${key}: ${e}`);
                            filters[key] = value;
                        }
                    } else if (key === 'min_confidence') {
                        // Convertir a número
                        filters[key] = parseInt(value, 10);
                    } else if (key === 'camera_id') {
                        // Convertir a número si es ID de cámara
                        filters[key] = parseInt(value, 10);
                    } else {
                        filters[key] = value;
                    }
                }
            }
            
            console.log("Enviando filtros:", filters); // Para diagnóstico
            
            // Preparar datos para enviar a la API
            const searchParams = {
                filters: filters,
                limit: 50,
                offset: 0
            };
            
            // Enviar solicitud a la API
            fetch('/api/forensic/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(searchParams)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error HTTP: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("Resultados recibidos:", data); // Para diagnóstico
                
                if (data.count === 0) {
                    resultsContainer.innerHTML = '<p>No se encontraron resultados que coincidan con los criterios de búsqueda.</p>';
                    return;
                }
                
                // Construir tabla de resultados
                let resultsHTML = `
                    <p>Se encontraron ${data.count} resultados:</p>
                    <table class="results-table">
                        <thead>
                            <tr>
                                <th>Fecha/Hora</th>
                                <th>Cámara</th>
                                <th>Tipo</th>
                                <th>Detecciones</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                `;
                
                // Añadir filas para cada resultado
                data.results.forEach(event => {
                    const date = new Date(event.timestamp);
                    const formattedDate = date.toLocaleString();
                    
                    // Extraer objetos detectados
                    let detections = '';
                    try {
                        if (typeof event.detections === 'string') {
                            const detectionsObj = JSON.parse(event.detections);
                            if (Array.isArray(detectionsObj)) {
                                detections = detectionsObj.map(d => 
                                    `${d.class} (${Math.round(d.confidence * 100)}%)`
                                ).join(', ');
                            }
                        } else if (Array.isArray(event.detections)) {
                            detections = event.detections.map(d => 
                                `${d.class} (${Math.round(d.confidence * 100)}%)`
                            ).join(', ');
                        }
                    } catch (e) {
                        console.error("Error procesando detecciones:", e);
                        detections = 'Error al procesar detecciones';
                    }
                    
                    resultsHTML += `
                        <tr>
                            <td>${formattedDate}</td>
                            <td>${event.camera_name}</td>
                            <td>${event.event_type}</td>
                            <td>${detections || 'No disponible'}</td>
                            <td>
                                <button class="btn btn-small" onclick="viewEvent('${event.id}')">Ver detalles</button>
                            </td>
                        </tr>
                    `;
                });
                
                resultsHTML += `
                        </tbody>
                    </table>
                `;
                
                resultsContainer.innerHTML = resultsHTML;
            })
            .catch(error => {
                console.error('Error en búsqueda forense:', error);
                resultsContainer.innerHTML = `<p class="error">Error al realizar la búsqueda: ${error.message}. Intente nuevamente.</p>`;
            });
        });
    });
    
    // Función para ver detalles de un evento
    function viewEvent(eventId) {
        window.location.href = `/forensic/event/${eventId}`;
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\modes\normal.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Modo Normal - Sistema de Vigilancia IA{% endblock %}

{% block content %}
    <h2>Modo Normal</h2>
    
    <div class="card">
        <p>El modo normal ofrece vigilancia estándar con detección de personas, vehículos y objetos.</p>
    </div>
    
    <div class="dashboard">
        <div class="card">
            <h3>Cámaras Disponibles</h3>
            <p>Seleccione las cámaras para este modo.</p>
        </div>
    </div>
    
    <div class="card">
        <h3>Vista en tiempo real</h3>
        <div class="camera-container">
            <p>No hay cámaras seleccionadas.</p>
        </div>
    </div>
{% endblock %} 

--------------------------------------------------------------------------------

📄 templates\modes\retail.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Modo Comercial - Sistema de Vigilancia IA{% endblock %}

{% block content %}
    <h2>Modo Comercial</h2>
    
    <div class="card">
        <p>El modo comercial está optimizado para entornos de venta al por menor, con análisis de comportamiento de clientes y prevención de robos.</p>
    </div>
    
    <div class="dashboard">
        <div class="card">
            <h3>Métricas de Clientes</h3>
            <p>Conteo de visitantes y análisis de flujo en tienda.</p>
        </div>
        
        <div class="card">
            <h3>Zonas de Interés</h3>
            <p>Configure áreas de monitoreo especial para productos de alto valor.</p>
        </div>
    </div>
    
    <div class="card">
        <h3>Vista en tiempo real</h3>
        <div class="camera-container">
            <p>No hay cámaras configuradas.</p>
        </div>
    </div>
{% endblock %} 

--------------------------------------------------------------------------------

📄 tests\test_alert_manager.py
--------------------------------------------------------------------------------
import unittest
from datetime import datetime, timedelta
from src.alert_manager import AlertManager

class TestAlertManager(unittest.TestCase):
    def setUp(self):
        self.alert_manager = AlertManager()
        
    def test_add_alert(self):
        """Prueba la funcionalidad básica de añadir alertas."""
        # Crear alerta de prueba
        alert_data = {
            'type': 'motion',
            'description': 'Movimiento detectado en cámara 1',
            'camera_id': 'cam1',
            'priority': 'medium'
        }
        
        # Añadir alerta
        alert_id = self.alert_manager.add_alert(alert_data)
        
        # Verificar que el ID no está vacío
        self.assertTrue(alert_id)
        
        # Verificar que se añadió la alerta
        self.assertEqual(self.alert_manager.get_alert_count(), 1)
        
    def test_type_validation(self):
        """Prueba la validación de tipos."""
        # Debería fallar si alert_data no es un diccionario
        with self.assertRaises(TypeError):
            self.alert_manager.add_alert("esto no es un diccionario")
            
        # Debería fallar si faltan campos obligatorios
        with self.assertRaises(ValueError):
            self.alert_manager.add_alert({'type': 'test'})
            
    def test_get_alert_count_by_type(self):
        """Prueba el contador de alertas por tipo."""
        # Añadir varias alertas de diferentes tipos
        self.alert_manager.add_alert({
            'type': 'motion',
            'description': 'Movimiento detectado',
            'timestamp': datetime.now().isoformat()
        })
        
        self.alert_manager.add_alert({
            'type': 'motion',
            'description': 'Otro movimiento',
            'timestamp': datetime.now().isoformat()
        })
        
        self.alert_manager.add_alert({
            'type': 'person',
            'description': 'Persona detectada',
            'timestamp': datetime.now().isoformat()
        })
        
        # Obtener conteo por tipo
        counts = self.alert_manager.get_alert_count_by_type()
        
        # Verificar resultados
        self.assertEqual(counts.get('motion', 0), 2)
        self.assertEqual(counts.get('person', 0), 1)
        
    def test_get_alert_count_since(self):
        """Prueba el contador de alertas desde una fecha."""
        # Fechas de prueba
        now = datetime.now()
        one_hour_ago = now - timedelta(hours=1)
        
        # Añadir alertas con diferentes fechas
        self.alert_manager.add_alert({
            'type': 'test',
            'description': 'Alerta antigua',
            'timestamp': one_hour_ago.isoformat()
        })
        
        self.alert_manager.add_alert({
            'type': 'test',
            'description': 'Alerta reciente',
            'timestamp': now.isoformat()
        })
        
        # Contar alertas desde hace 30 minutos
        thirty_mins_ago = now - timedelta(minutes=30)
        count = self.alert_manager.get_alert_count_since(thirty_mins_ago)
        
        # Debería ser solo 1 (la reciente)
        self.assertEqual(count, 1)

if __name__ == '__main__':
    unittest.main() 

--------------------------------------------------------------------------------

📄 test_captures\test_20250328_233652.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 test_captures\test_20250328_233744.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 test_captures\test_20250328_234052.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 test_captures\test_20250329_000009.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 test_captures\test_20250329_000146.jpg (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 tools\camera_tester.py
--------------------------------------------------------------------------------
# src/tools/camera_tester.py

import cv2
import time
import os
import threading
import numpy as np
from datetime import datetime
import argparse
import sys

# Agregar directorio raíz al path para importar módulos del proyecto
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class CameraTester:
    """Utilidad para probar cámaras y detectores con feeds reales."""
    
    def __init__(self, camera_url=None, save_dir="test_captures"):
        self.camera_url = camera_url
        self.save_dir = save_dir
        self.capture = None
        self.is_running = False
        self.frame_count = 0
        self.fps = 0
        self.last_fps_time = time.time()
        
        # Crear directorio si no existe
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
            
    def open_camera(self, camera_url=None):
        """Abre una conexión a la cámara."""
        if camera_url:
            self.camera_url = camera_url
            
        # Si es un número entero, se asume que es una webcam local
        if isinstance(self.camera_url, int) or (isinstance(self.camera_url, str) and self.camera_url.isdigit()):
            self.capture = cv2.VideoCapture(int(self.camera_url))
        else:
            self.capture = cv2.VideoCapture(self.camera_url)
            
        if not self.capture.isOpened():
            raise Exception(f"No se pudo abrir la cámara: {self.camera_url}")
            
        # Configurar resolución para mejor rendimiento
        self.capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        self.capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
        
        return self.capture.isOpened()
        
    def start_test_stream(self, detector=None, display=True):
        """Inicia un stream de prueba con la cámara."""
        if not self.capture or not self.capture.isOpened():
            if not self.open_camera():
                return False
        
        self.is_running = True
        self.test_thread = threading.Thread(target=self._test_stream_worker, 
                                           args=(detector, display))
        self.test_thread.daemon = True
        self.test_thread.start()
        return True
    
    def _test_stream_worker(self, detector=None, display=True):
        """Worker para procesar el stream de la cámara."""
        while self.is_running:
            ret, frame = self.capture.read()
            if not ret:
                print("Error al leer el frame de la cámara")
                time.sleep(0.5)
                continue
                
            self.frame_count += 1
            
            # Calcular FPS
            current_time = time.time()
            time_diff = current_time - self.last_fps_time
            if time_diff >= 1.0:
                self.fps = self.frame_count / time_diff
                self.frame_count = 0
                self.last_fps_time = current_time
            
            # Aplicar detector si está disponible
            detection_results = None
            if detector:
                try:
                    detection_results = detector.detect(frame)
                    # Dibujar resultados en el frame
                    frame = self._draw_detections(frame, detection_results)
                except Exception as e:
                    print(f"Error en detector: {str(e)}")
            
            # Mostrar información
            cv2.putText(frame, f"FPS: {self.fps:.1f}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            if display:
                cv2.imshow("Camera Test", frame)
                key = cv2.waitKey(1)
                if key == 27:  # Esc
                    self.stop_test()
                elif key == ord('s'):  # Guardar captura
                    self._save_frame(frame, detection_results)
            
        if self.capture:
            self.capture.release()
        cv2.destroyAllWindows()
    
    def _draw_detections(self, frame, results):
        """Dibuja los resultados de detección en el frame."""
        if not results:
            return frame
            
        # El formato exacto dependerá de los detectores
        if isinstance(results, dict):
            # Dibujar detecciones de objetos
            if 'detections' in results:
                for det in results['detections']:
                    if 'bbox' in det:
                        x, y, w, h = det['bbox']
                        confidence = det.get('confidence', 0)
                        label = det.get('class', 'Object')
                        
                        color = (0, 255, 0)  # Verde por defecto
                        if label.lower() in ['fire', 'fuego']:
                            color = (0, 0, 255)  # Rojo
                        elif label.lower() in ['smoke', 'humo']:
                            color = (128, 128, 128)  # Gris
                        elif label.lower() in ['water', 'agua', 'flood', 'inundación']:
                            color = (255, 0, 0)  # Azul
                            
                        cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                        cv2.putText(frame, f"{label} {confidence:.2f}", 
                                   (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
            
            # Dibujar poses de personas
            if 'pose_landmarks' in results and results['pose_landmarks']:
                landmarks = results['pose_landmarks']
                # Depende del formato exacto que use el detector de poses
                # Esta es solo una implementación de ejemplo
                
            # Dibujar rostros
            if 'faces' in results:
                for face in results['faces']:
                    if 'bbox' in face:
                        x, y, w, h = face['bbox']
                        name = face.get('name', 'Desconocido')
                        confidence = face.get('confidence', 0)
                        
                        color = (0, 255, 255)  # Amarillo
                        if name.lower() != 'desconocido':
                            color = (0, 255, 0)  # Verde para conocidos
                            
                        cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                        cv2.putText(frame, f"{name} {confidence:.2f}", 
                                   (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        
        return frame
    
    def _save_frame(self, frame, results=None):
        """Guarda el frame actual con timestamp."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self.save_dir}/capture_{timestamp}.jpg"
        cv2.imwrite(filename, frame)
        
        # Guardar resultados de detección si existen
        if results:
            import json
            with open(f"{self.save_dir}/capture_{timestamp}_detections.json", 'w') as f:
                json.dump(results, f, indent=2)
        
        print(f"Imagen guardada: {filename}")
    
    def stop_test(self):
        """Detiene el test en curso."""
        self.is_running = False
        if hasattr(self, 'test_thread'):
            self.test_thread.join(timeout=1.0)


def load_detector(detector_type):
    """Carga un detector según el tipo especificado."""
    try:
        if detector_type == 'pose':
            try:
                # Intentar importar mediapipe
                import mediapipe
                from src.ai_modules.pose_detector import PoseDetector
                return PoseDetector()
            except ImportError:
                print(f"Error al cargar detector 'pose': No module named 'mediapipe'")
                print("Instale mediapipe con: pip install mediapipe")
                return None
            
        elif detector_type == 'fire':
            try:
                # Verificar si opencv está disponible con los módulos necesarios
                import cv2
                if not hasattr(cv2, 'createBackgroundSubtractorMOG2'):
                    raise ImportError("OpenCV no tiene los módulos necesarios")
                from src.ai_modules.fire_smoke_detector import FireSmokeDetector
                return FireSmokeDetector()
            except ImportError as e:
                print(f"Error al cargar detector 'fire': {str(e)}")
                return None
            
        elif detector_type == 'water':
            try:
                from src.ai_modules.water_flood_detector import WaterFloodDetector
                return WaterFloodDetector()
            except ImportError as e:
                print(f"Error al cargar detector 'water': {str(e)}")
                return None
            
        elif detector_type == 'face':
            try:
                # Verificar si face_recognition está disponible
                import face_recognition
                from src.ai_modules.face_recognition_enhanced import EnhancedFaceRecognizer
                return EnhancedFaceRecognizer()
            except ImportError:
                print(f"Error al cargar detector 'face': No module named 'face_recognition'")
                print("Instale face_recognition con: pip install face_recognition")
                return None
            
        elif detector_type == 'all':
            try:
                from src.ai_modules.detection_manager import AdvancedDetectionManager
                return AdvancedDetectionManager()
            except ImportError as e:
                print(f"Error al cargar detector combinado: {str(e)}")
                return None
            
        return None
            
    except Exception as e:
        print(f"Error al cargar detector '{detector_type}': {str(e)}")
        return None


def check_dependencies():
    """Verifica las dependencias necesarias para el tester de cámaras."""
    missing = []
    
    # Verificar dependencias críticas
    try:
        import cv2
    except ImportError:
        missing.append("opencv-python")
    
    try:
        import numpy
    except ImportError:
        missing.append("numpy")
    
    # Verificar dependencias opcionales
    optional_missing = []
    
    try:
        import mediapipe
    except ImportError:
        optional_missing.append("mediapipe")
    
    try:
        import face_recognition
    except ImportError:
        optional_missing.append("face_recognition")
        
    try:
        import tensorflow
    except ImportError:
        optional_missing.append("tensorflow")
    
    # Mostrar resultados
    if missing:
        print("ADVERTENCIA: Faltan dependencias críticas:")
        for dep in missing:
            print(f"- {dep}")
        print("Instale estas dependencias con: pip install " + " ".join(missing))
        return False
    
    if optional_missing:
        print("NOTA: Algunas dependencias opcionales no están instaladas:")
        for dep in optional_missing:
            print(f"- {dep}")
        print("Para funcionalidad completa, instale con: pip install " + " ".join(optional_missing))
    
    return len(missing) == 0


def main():
    """Función principal."""
    parser = argparse.ArgumentParser(description='Herramienta para probar cámaras y detectores.')
    parser.add_argument('--camera', '-c', help='URL o ID de la cámara (0, 1, etc. para cámaras locales)')
    parser.add_argument('--detector', '-d', choices=['pose', 'fire', 'water', 'face', 'all'],
                       help='Tipo de detector a utilizar')
    parser.add_argument('--save-dir', '-s', default='test_captures',
                       help='Directorio para guardar capturas')
    parser.add_argument('--no-display', action='store_true',
                       help='No mostrar interfaz gráfica (solo guardar)')
    
    args = parser.parse_args()
    
    # Si no se especifica cámara, usar la primera webcam
    camera_url = args.camera if args.camera else 0
    
    # Cargar detector si se especificó
    detector = None
    if args.detector:
        detector = load_detector(args.detector)
        if not detector:
            print(f"No se pudo cargar el detector '{args.detector}'. Continuando sin detector.")
    
    # Iniciar tester
    tester = CameraTester(camera_url=camera_url, save_dir=args.save_dir)
    
    try:
        if tester.open_camera():
            print(f"Cámara abierta correctamente: {camera_url}")
            
            # Iniciar stream
            tester.start_test_stream(detector=detector, display=not args.no_display)
            
            # Si se muestra la interfaz, mantener el programa corriendo
            if not args.no_display:
                try:
                    while tester.is_running:
                        time.sleep(0.1)
                except KeyboardInterrupt:
                    print("Interrumpido por el usuario.")
                    tester.stop_test()
        else:
            print(f"No se pudo abrir la cámara: {camera_url}")
            
    except Exception as e:
        print(f"Error: {str(e)}")
    finally:
        tester.stop_test()
        print("Test finalizado.")

if __name__ == "__main__":
    main()

--------------------------------------------------------------------------------

📄 tools\module_checker.py
--------------------------------------------------------------------------------
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import importlib
import sys
import os
import inspect
import json
import time
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_modules(verbose=False):
    """Verifica que todos los módulos críticos estén disponibles y funcionando."""
    
    critical_modules = [
        # Módulos centrales
        {"name": "src.database", "classes": ["Camera", "Alert", "DetectionEvent"]},
        {"name": "src.camera_manager", "classes": ["CameraManager"]},
        
        # Módulos de IA
        {"name": "src.ai_modules.detection_manager", "classes": ["AdvancedDetectionManager"]},
        {"name": "src.ai_modules.pose_detector", "classes": ["PoseDetector"]},
        {"name": "src.ai_modules.fire_smoke_detector", "classes": ["FireSmokeDetector"]},
        {"name": "src.ai_modules.water_flood_detector", "classes": ["WaterFloodDetector"]},
        {"name": "src.ai_modules.face_recognition_enhanced", "classes": ["EnhancedFaceRecognizer"]},
        
        # Módulos de utilidad
        {"name": "src.utils.hardware_detector", "classes": ["HardwareDetector"]},
        {"name": "src.utils.logger", "classes": []},
        {"name": "src.utils.error_handler", "classes": []},
        
        # Comunicación
        {"name": "src.whatsapp_connector", "classes": ["WhatsAppConnector"]}
    ]
    
    results = {}
    
    # Verificar dependencias externas
    external_dependencies = [
        "flask", "cv2", "numpy", "tensorflow", "torch", "sqlalchemy"
    ]
    
    results["external_dependencies"] = check_external_dependencies(external_dependencies, verbose)
    
    # Verificar módulos del sistema
    for module_info in critical_modules:
        module_name = module_info["name"]
        required_classes = module_info["classes"]
        
        try:
            module_result = check_module(module_name, required_classes, verbose)
            results[module_name] = module_result
        except Exception as e:
            if verbose:
                logger.error(f"Error al verificar módulo {module_name}: {str(e)}")
            results[module_name] = {
                "status": "ERROR",
                "error": str(e)
            }
    
    # Resultados finales
    success_count = sum(1 for mod, data in results.items() 
                       if mod != "external_dependencies" and data["status"] == "OK")
    dependency_success = sum(1 for dep, status in results["external_dependencies"].items() 
                           if status.startswith("OK"))
    
    if verbose:
        logger.info(f"Resumen de verificación:")
        logger.info(f"- Módulos del sistema: {success_count}/{len(critical_modules)} OK")
        logger.info(f"- Dependencias externas: {dependency_success}/{len(external_dependencies)} OK")
    
    return results

def check_module(module_name, required_classes=None, verbose=False):
    """Verifica un módulo específico y sus clases."""
    result = {
        "status": "Unknown",
        "classes": {},
        "error": None
    }
    
    try:
        # Importar módulo
        if verbose:
            logger.info(f"Verificando módulo: {module_name}")
            
        module = importlib.import_module(module_name)
        result["status"] = "OK"
        
        # Verificar clases si se especificaron
        if required_classes:
            for class_name in required_classes:
                if hasattr(module, class_name):
                    result["classes"][class_name] = "OK"
                    
                    # Verificación extra para clases específicas (opcional)
                    cls = getattr(module, class_name)
                    if hasattr(cls, "__version__"):
                        result["classes"][class_name] += f" (v{cls.__version__})"
                else:
                    result["classes"][class_name] = "NO ENCONTRADA"
                    if result["status"] == "OK":
                        result["status"] = "PARCIAL"
        
        # Verificación extra para módulos específicos
        if module_name == "src.database":
            try:
                db_module = importlib.import_module("src.database")
                db = getattr(db_module, "db")
                result["database_initialized"] = hasattr(db, "Model")
            except Exception as e:
                result["database_error"] = str(e)
                
    except ImportError:
        result["status"] = "ERROR"
        result["error"] = f"Módulo no encontrado: {module_name}"
        if verbose:
            logger.error(f"Módulo no encontrado: {module_name}")
    except Exception as e:
        result["status"] = "ERROR"
        result["error"] = str(e)
        if verbose:
            logger.error(f"Error al verificar módulo {module_name}: {str(e)}")
    
    return result

def check_external_dependencies(dependencies, verbose=False):
    """Verifica dependencias externas."""
    results = {}
    
    for dep in dependencies:
        try:
            if verbose:
                logger.info(f"Verificando dependencia: {dep}")
                
            module = importlib.import_module(dep)
            version = getattr(module, "__version__", "Desconocida")
            results[dep] = f"OK (versión: {version})"
        except ImportError:
            results[dep] = "NO INSTALADO"
        except Exception as e:
            results[dep] = f"ERROR: {str(e)}"
    
    return results

def generate_report(results, output_file=None):
    """Genera un reporte detallado de la verificación."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    report = {
        "timestamp": timestamp,
        "results": results,
        "system_info": {
            "python_version": sys.version,
            "platform": sys.platform,
            "interpreter": sys.executable
        }
    }
    
    # Añadir información adicional del sistema
    try:
        import platform
        report["system_info"]["os"] = platform.platform()
        report["system_info"]["processor"] = platform.processor()
    except:
        pass
    
    # Guardar reporte si se especificó archivo
    if output_file:
        with open(output_file, 'w') as f:
            json.dump(report, f, indent=2)
            if verbose:
                logger.info(f"Reporte guardado en: {output_file}")
    
    return report

def suggest_fixes(results):
    """Sugiere soluciones para problemas detectados."""
    suggestions = {}
    
    # Revisar dependencias externas
    for dep, status in results.get("external_dependencies", {}).items():
        if "NO INSTALADO" in status:
            suggestions[dep] = f"Instalar con: pip install {dep}"
    
    # Revisar módulos del sistema
    for module, data in results.items():
        if module == "external_dependencies":
            continue
            
        if data.get("status") != "OK":
            # Si hay error específico
            error = data.get("error", "")
            if "No module named" in error:
                missing_module = error.split("'")[1]
                suggestions[module] = f"Falta el módulo '{missing_module}'. Verifica la instalación o estructura del proyecto."
            elif error:
                suggestions[module] = f"Error: {error}"
            else:
                suggestions[module] = "Módulo con problemas no identificados."
    
    return suggestions

def main():
    """Función principal."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Verifica módulos del sistema.')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Mostrar información detallada')
    parser.add_argument('--output', '-o', 
                       help='Archivo de salida para guardar el reporte')
    parser.add_argument('--suggestions', '-s', action='store_true',
                       help='Mostrar sugerencias para solucionar problemas')
    
    args = parser.parse_args()
    
    start_time = time.time()
    results = check_modules(verbose=args.verbose)
    elapsed = time.time() - start_time
    
    logger.info(f"Verificación completada en {elapsed:.2f} segundos")
    
    if args.suggestions:
        suggestions = suggest_fixes(results)
        if suggestions:
            logger.info("\nSugerencias para solucionar problemas:")
            for mod, suggestion in suggestions.items():
                logger.info(f"- {mod}: {suggestion}")
        else:
            logger.info("No se encontraron problemas que requieran sugerencias.")
    
    if args.output:
        generate_report(results, args.output)

if __name__ == "__main__":
    main()

--------------------------------------------------------------------------------

📄 tools\test_mediapipe.py
--------------------------------------------------------------------------------
import cv2
import mediapipe as mp
import time

def test_mediapipe_pose():
    """
    Prueba la detección de poses con MediaPipe usando la webcam.
    Muestra las poses detectadas y dibuja puntos en las muñecas y hombros.
    """
    # Inicializar captura de video
    cap = cv2.VideoCapture(0)
    
    # Configurar detector de pose
    mp_pose = mp.solutions.pose
    mp_drawing = mp.solutions.drawing_utils
    pose = mp_pose.Pose(
        static_image_mode=False,
        min_detection_confidence=0.5,
        min_tracking_confidence=0.5
    )
    
    print("Probando detección de poses con MediaPipe...")
    print("Presiona 'q' para salir")
    
    # Loop principal
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print("Error al leer de la webcam")
            break
            
        # Convertir a RGB (MediaPipe requiere RGB)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # Detectar poses
        results = pose.process(rgb_frame)
        
        # Dibujar landmarks
        if results.pose_landmarks:
            mp_drawing.draw_landmarks(
                frame, 
                results.pose_landmarks, 
                mp_pose.POSE_CONNECTIONS
            )
            
            # Verificar si las manos están levantadas
            landmarks = results.pose_landmarks.landmark
            
            # Coordenadas de puntos clave (hombros y muñecas)
            left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value]
            right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value]
            left_wrist = landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value]
            right_wrist = landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value]
            
            # Comprobar si ambas muñecas están por encima de los hombros
            hands_raised = (left_wrist.y < left_shoulder.y - 0.1 and 
                          right_wrist.y < right_shoulder.y - 0.1)
            
            # Dibujar texto indicador
            status = "MANOS LEVANTADAS" if hands_raised else "Manos no levantadas"
            color = (0, 255, 0) if hands_raised else (0, 0, 255)
            cv2.putText(frame, status, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
            
        # Mostrar imagen
        cv2.imshow('MediaPipe Pose Test', frame)
        
        # Salir con 'q'
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break
    
    # Liberar recursos
    cap.release()
    cv2.destroyAllWindows()
    
if __name__ == "__main__":
    test_mediapipe_pose() 

--------------------------------------------------------------------------------

📄 tools\test_ppe_detection.py
--------------------------------------------------------------------------------
import cv2
import sys
import os
import numpy as np

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.industrial_safety_agent import IndustrialSafetyAgent
from src.alert_manager import AlertManager
from src.object_detector import ObjectDetector

def test_ppe_detection():
    """
    Prueba la detección de EPP usando la webcam.
    Muestra si se detecta casco y chaleco de seguridad.
    """
    # Inicializar componentes
    alert_manager = AlertManager()
    object_detector = ObjectDetector()
    industrial_agent = IndustrialSafetyAgent(None, alert_manager, object_detector)
    
    # Inicializar captura de video
    cap = cv2.VideoCapture(0)
    
    print("Probando detección de EPP...")
    print("Presiona 'q' para salir")
    
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print("Error al leer de la webcam")
            break
        
        # Simular una detección de persona (en un caso real esto vendría del detector de objetos)
        h, w = frame.shape[:2]
        person_detection = {
            'bbox': [int(w*0.25), int(h*0.1), int(w*0.5), int(h*0.8)],
            'class': 'person',
            'confidence': 0.95
        }
        
        # Dibujar recuadro de la persona
        x, y, w, h = person_detection['bbox']
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
        
        # Detectar EPP
        ppe_results = industrial_agent._detect_ppe(person_detection, frame)
        
        # Mostrar resultados
        text_y = 30
        font_scale = 0.7
        
        # Casco
        helmet_status = "Casco: Detectado ✓" if ppe_results['has_helmet'] else "Casco: No detectado ✗"
        color = (0, 255, 0) if ppe_results['has_helmet'] else (0, 0, 255)
        cv2.putText(frame, helmet_status, (10, text_y), 
                   cv2.FONT_HERSHEY_SIMPLEX, font_scale, color, 2)
        text_y += 30
        
        # Chaleco
        vest_status = "Chaleco: Detectado ✓" if ppe_results['has_safety_vest'] else "Chaleco: No detectado ✗"
        color = (0, 255, 0) if ppe_results['has_safety_vest'] else (0, 0, 255)
        cv2.putText(frame, vest_status, (10, text_y), 
                   cv2.FONT_HERSHEY_SIMPLEX, font_scale, color, 2)
        text_y += 30
        
        # Mostrar frame con resultados
        cv2.imshow('Detección de EPP', frame)
        
        # Salir con 'q'
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break
    
    # Liberar recursos
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    test_ppe_detection() 

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\PROJECT_README.md
--------------------------------------------------------------------------------
# Sistema de Vigilancia Inteligente

Este documento registra el desarrollo y estructura del Sistema de Vigilancia Inteligente, un proyecto que combina visión por computadora, inteligencia artificial y vigilancia en tiempo real.

## Estructura del Proyecto 

vigilancia-ia/
├── app.py # Aplicación principal Flask
├── config/ # Archivos de configuración
│ └── system_config.json # Configuración del sistema
├── data/ # Datos persistentes
│ └── known_faces/ # Rostros conocidos para reconocimiento facial
├── models/ # Modelos de IA preentrenados
├── src/ # Código fuente de componentes
│ ├── agent_manager.py # Gestión de agentes de IA
│ ├── alert_manager.py # Sistema de gestión de alertas
│ ├── camera_manager.py # Gestión de cámaras
│ ├── face_recognition.py # Reconocimiento facial
│ ├── mcp_framework.py # Framework de comunicación entre componentes
│ ├── model_trainer.py # Entrenamiento de modelos de IA
│ ├── motion_detector.py # Detección de movimiento
│ ├── object_detector.py # Detección de objetos
│ ├── operation_mode.py # Gestión de modos de operación
│ └── video_capture.py # Captura de video
├── static/ # Archivos estáticos para la web
│ ├── css/
│ │ └── style.css # Estilos CSS
│ └── js/
│ └── main.js # JavaScript principal
└── templates/ # Plantillas HTML
├── alerts.html # Página de alertas
├── base.html # Plantilla base
├── cameras.html # Gestión de cámaras
├── dashboard.html # Panel de control
├── index.html # Página de inicio
└── modes.html # Modos de vigilancia



## Historial de Desarrollo

### Fase 1: Estructura Base
- Creación de la estructura básica de archivos
- Implementación del patrón MVC
- Configuración del servidor Flask
- Creación de plantillas HTML y CSS básico

### Fase 2: Componentes Core
- Creación de gestores de cámaras, alertas y agentes
- Implementación del framework MCP para comunicación
- Integración de detección de movimiento básica

### Fase 3: Interfaces Web
- Implementación de herencia de plantillas con Jinja2
- Mejora de la interfaz con CSS más detallado
- Implementación de interactividad con JavaScript
- Configuración de endpoints API REST

### Fase 4: Captura de Video y Detección
- Implementación de captura de video multihilo
- Integración de detección de objetos simulada
- Visualización de streams de cámara en el dashboard
- Endpoints para controlar cámaras remotamente

### Fase 5: Reconocimiento Facial
- Implementación de detección facial con OpenCV
- Sistema de reconocimiento de personas conocidas
- API para registrar nuevos rostros
- Visualización de resultados de reconocimiento

## Componentes Principales

### MCP Framework
El sistema utiliza un patrón de comunicación basado en mensajes llamado MCP (Message Communication Protocol), que permite la comunicación asíncrona entre los diferentes componentes y agentes.

### Sistema de Cámaras
El sistema puede gestionar múltiples cámaras simultáneamente, cada una en su propio hilo. Soporta diferentes fuentes de video:
- Webcams locales
- Cámaras IP por RTSP/HTTP
- Archivos de video pregrabados

### Detección de Objetos
Utiliza un sistema de detección de objetos basado en modelos preentrenados (simulado en la versión actual). Detecta personas, vehículos y otros objetos relevantes.

### Reconocimiento Facial
Implementa reconocimiento facial para identificar personas conocidas. El sistema puede:
- Detectar rostros en los frames de video
- Reconocer personas registradas
- Almacenar nuevos rostros para entrenamiento
- Mostrar nombres e información sobre personas reconocidas

### Sistema de Alertas
Genera alertas basadas en detecciones y reglas configurables. Las alertas pueden enviarse por:
- Notificaciones en la interfaz web
- Correo electrónico (simulado)
- SMS (simulado)

## Modos de Operación

El sistema soporta diferentes modos de operación que ajustan la sensibilidad y comportamiento:

- **normal**: Vigilancia estándar con detección básica de movimiento
- **barrio_privado**: Optimizado para vigilancia residencial con detección de perímetro
- **aeropuerto**: Configuración para espacios grandes con alto tránsito
- **comercial**: Enfocado en seguridad de locales comerciales

## Próximos Pasos

1. ~~Implementar reconocimiento facial~~ (Completado)
2. Mejorar sistema de alertas con filtros y reglas avanzadas
3. Implementar grabación de video cuando se detectan eventos
4. Mejorar la interfaz de usuario con más controles y visualizaciones
5. Implementar sistema de autenticación de usuarios



Recomendación para el Próximo Paso del Desarrollo
Después de analizar el estado actual del sistema y las opciones disponibles, recomiendo avanzar primero con el sistema de mejoras para la detección y gestión de alarmas por las siguientes razones:
Ventajas de implementar primero la gestión de alarmas mejorada:
1. Soluciona un problema visible y actual: Las falsas detecciones ya están ocurriendo en el sistema existente, lo que puede generar alertas innecesarias y reducir la confianza en el sistema.
Proporciona valor inmediato: Al definir zonas de interés y reglas más inteligentes, el sistema ganará precisión inmediatamente sin necesitar cambios arquitectónicos mayores.
3. Implementación incremental: Podemos implementarlo por fases:
Primero: Definición de zonas de interés (ROI)
Segundo: Reglas de alarma configurables
Tercero: Sistema de clasificación de alarmas
Base para futuras mejoras: Un buen sistema de alarmas servirá como fundamento para cuando implementemos agentes de IA más avanzados, ya que estos podrán enviar sus resultados a un sistema de reglas ya maduro.
Plan de implementación propuesto:
Fase 1: Zonas de Interés (ROI)
Crear una interfaz para dibujar zonas en el video
Implementar la lógica para filtrar detecciones según zonas
Guardar/cargar configuraciones de zonas por cámara
Fase 2: Sistema de Reglas
Crear un editor de reglas con condiciones configurables
Implementar evaluador de reglas en tiempo real
Integrar con el sistema de alertas existente
Fase 3: Clasificación de Alarmas
Implementar niveles de alarma (información, advertencia, alarma, crítica)
Agregar acciones personalizables por nivel de alarma
Mejorar la visualización de alertas en la interfaz
Una vez que estas mejoras estén implementadas y funcionando correctamente, sería un buen momento para avanzar con el sistema de agentes de IA más avanzado, ya que estos agentes podrán aprovechar la infraestructura de reglas y alarmas mejorada.
¿Te parece bien comenzar con la implementación de las zonas de interés (ROI) como primer paso?


ok creo que debemos avanzar y mejorar!

1- sistema de entrenamientos y dataset para las IA, para que puedan aprender y mejorar sobre algun tema especifico, ejemplo Un agente especializado en sospechosos de hurto en un supermercado, otro ejemplo un sospechoso merodeando, activar sistema de seguimiento por camaras enviar alertas y fotos de momentos claves a estación de monitoreo o guardia.
2- aparte de editar los agentes quiero poder tener control total de crear agentes nuevos, entrenarlos con dataset espesificos, que puedan tener retroalimentación de los eventos y aprender en base a respuestas humanas. aparte quisiera tener un agente puntual el cual pueda interpretar por ejemplo un intento de asalto o intento de robo, comprendiendo la situación, ejemplo una persona con armas, personas levantando las 2 manos, personas tirandose al piso etc.
3- Agregar el modo industrial, este modo identifica posibles peligros, focos de incendio, cumplimiento de reglas de seguridad e higene de la empresa. 
4- sería bueno hacer conexión con sistemas de IA externo como claude, google gemini, u otras?
5- conexión con Whatsapp para el envío automatico de eventos a guardias.
6- gestión e interacción con mapas, coordenadas, etc. para poder enviar datos o recibir datos de rondas de los guardias, etc.

## Nuevas Funcionalidades Implementadas

### 1. Sistema de Entrenamiento de IA y Datasets Personalizados

Hemos implementado un sistema completo para entrenar modelos de IA con datasets específicos:

- **Gestor de Datasets**: Permite crear, gestionar y organizar conjuntos de datos para diferentes situaciones de seguridad
- **Etiquetado de Imágenes**: Interfaz para clasificar y etiquetar imágenes para entrenamiento
- **Entrenamiento de Modelos**: Proceso automatizado para generar modelos de IA a partir de los datasets
- **Especialización por casos de uso**: Soporte para modelos especializados en situaciones específicas como hurtos, merodeo, comportamientos sospechosos, etc.

Este sistema permite crear agentes altamente especializados para situaciones específicas, mejorando significativamente la precisión y reduciendo las falsas alarmas.

### 2. Creación Dinámica de Agentes

Hemos desarrollado una "fábrica de agentes" que permite:

- **Crear nuevos agentes** desde la interfaz web sin necesidad de programación
- **Plantillas de agentes** para diferentes propósitos: detección, alertas, análisis de situaciones, etc.
- **Configuración flexible** con parámetros personalizables
- **Sistema de retroalimentación** que permite a los agentes aprender de las respuestas humanas
- **Agente de análisis situacional** capaz de interpretar escenarios complejos como intentos de robo, asaltos o comportamientos sospechosos

### 3. Modo Industrial

Se ha añadido un modo especializado para entornos industriales que incluye:

- **Detección de peligros**: Identificación automática de situaciones de riesgo
- **Monitoreo de incendios**: Detección temprana de focos de incendio o humo
- **Cumplimiento de seguridad**: Verificación del uso de equipos de protección personal (EPP)
- **Reglas de higiene**: Monitoreo del cumplimiento de protocolos de higiene y seguridad
- **Zonas restringidas**: Alerta cuando personas ingresan a áreas peligrosas o no autorizadas

### 4. Integración con Servicios de IA Externos

Se ha implementado conexión con servicios avanzados de IA como:

- **Claude de Anthropic**: Para análisis avanzado de situaciones y comprensión de contextos complejos
- **Google Gemini**: Para reconocimiento y análisis de imágenes con alta precisión
- **Interfaz unificada**: Conector que permite alternar entre diferentes servicios según necesidades
- **Modo híbrido**: Combina modelos locales e IA externa para optimizar rendimiento y costos

Estas integraciones permiten análisis mucho más sofisticados de situaciones complejas, como identificar asaltos basándose en la postura de las personas, presencia de armas, y otros factores contextuales.

### 5. Conexión con WhatsApp

Se ha implementado un sistema completo de notificaciones por WhatsApp:

- **Envío automático** de alertas importantes a guardias y responsables de seguridad
- **Compartición de imágenes** capturadas en el momento de la detección
- **Comandos por mensaje**: Posibilidad de enviar comandos básicos a través de mensajes
- **Gestión de cooldown**: Sistema inteligente para evitar sobrecarga de notificaciones
- **Personalización de mensajes** según tipo y severidad de alertas

### 6. Sistema de Gestión Geográfica y Seguimiento

Se ha desarrollado un sistema completo de gestión geoespacial:

- **Mapas interactivos**: Visualización en tiempo real de guardias, ubicaciones y zonas
- **Creación de rutas**: Definición de recorridos para rondas de vigilancia
- **Geocercas**: Creación de perímetros virtuales con alertas automáticas
- **Seguimiento de guardias**: Monitoreo de posición y cumplimiento de rutas
- **Alertas por desviación**: Notificaciones cuando los guardias se desvían de rutas o tiempos establecidos
- **Integración con cámaras**: Asociación de ubicaciones físicas con cámaras del sistema

## Conclusión

Con estas nuevas funcionalidades, el Sistema de Vigilancia Inteligente se ha transformado en una solución extremadamente versátil y potente, capaz de adaptarse a múltiples escenarios de seguridad, desde comercial hasta industrial, con capacidades avanzadas de IA y gestión de personal de seguridad.

La arquitectura modular basada en agentes permite seguir expandiendo el sistema según sea necesario, añadiendo nuevas capacidades y adaptándose a requisitos específicos de diferentes entornos de seguridad.



Plan de Implementación para Completar el Sistema
Me alegra que el sistema básico esté funcionando. Ahora vamos a elaborar un plan detallado para implementar las funcionalidades restantes:
1. Creación y Configuración de Agentes
Implementación necesaria:
Interfaz de creación de agentes: Formulario web para crear nuevos agentes especificando roles, comportamientos y parámetros
Sistema de plantillas: Biblioteca de plantillas de agentes predefinidos
Panel de configuración: Para ajustar parámetros de los agentes existentes
Monitoreo de agentes: Visualización del estado y rendimiento de los agentes
2. Sistema de Entrenamiento con Datasets Personalizados
Implementación necesaria:
Gestor de datasets: Interfaz para subir, etiquetar y organizar imágenes
Pipeline de entrenamiento: Sistema para entrenar modelos con los datasets
Validación y pruebas: Herramientas para verificar rendimiento de modelos
Exportación e implementación: Mecanismo para integrar nuevos modelos al sistema
3. Modo Industrial
Implementación necesaria:
Detector de EPP: Para identificar equipos de protección personal
Zonas de riesgo: Definición y monitoreo de áreas peligrosas
Detector de incendios/humo: Algoritmos especializados para detectar fuego
Reglas de seguridad industrial: Sistema para definir y verificar cumplimiento
Alertas específicas: Notificaciones adaptadas al contexto industrial
4. Seguridad del Sistema
Implementación necesaria:
Sistema de autenticación: Login/logout con niveles de acceso
Gestión de usuarios: Creación y administración de cuentas
Registro de actividad: Seguimiento de acciones de usuarios
Cifrado de datos sensibles: Protección de información crítica
Gestión de backups: Respaldo automático de configuraciones y datos
5. Sistema de Alertas Avanzado
Implementación necesaria:
Configuración de umbrales: Personalización de condiciones para disparar alertas
Enriquecimiento de alertas: Añadir contexto y recomendaciones
Canales múltiples: Email, SMS, WhatsApp, aplicación móvil
Escalamiento: Reglas para escalar alertas no atendidas
Programación: Activación/desactivación según horarios
6. Integración de Correo Electrónico
Implementación necesaria:
Configuración SMTP: Conexión con servidores de correo
Plantillas de mensajes: Diseño de correos para diferentes tipos de alertas
Gestión de destinatarios: Listas de correo según roles y responsabilidades
7. Configuración completa de WhatsApp
Implementación necesaria:
Webhook para respuestas: Recepción de comandos desde WhatsApp
Reglas de cooldown: Evitar spam de mensajes
Confirmación de recepción: Verificar que alertas fueron recibidas
Mensajes multimedia: Envío de imágenes, videos y ubicaciones
8. Otras Mejoras Importantes
Visualización avanzada:
Dashboard personalizable: Widgets configurables según necesidades
Reportes históricos: Análisis de eventos pasados
Heatmaps: Mapas de calor para visualizar zonas de actividad
Integración con sistemas externos:
APIs para otros sistemas: Integración con plataformas de terceros
Exportación de datos: Respaldo en la nube o sistemas corporativos
Integración con sistemas de control de acceso: Puertas, torniquetes, etc.
Performance:
Optimización para múltiples cámaras: Procesamiento distribuido
Caché inteligente: Reducir carga de procesamiento
Compresión adaptativa: Ajuste automático según ancho de banda
Hoja de Ruta Recomendada
Fase 1: Fundamentos (1-2 semanas)
Sistema de autenticación y seguridad
Configuración completa de alertas básicas
Integración de correo electrónico
Fase 2: IA Avanzada (2-3 semanas)
Sistema de entrenamiento con datasets
Creación y gestión de agentes
Mejora del sistema de detección
Fase 3: Modos especializados (2-3 semanas)
Modo industrial completo
Sistema de geocercas y seguimiento
Integración de WhatsApp bidireccional
Fase 4: Refinamiento (2-3 semanas)
UI/UX mejorada
Optimización de rendimiento
Documentación completa
4. Testing y depuración final


-------------------------------------------------------------------
Proximos pasos:

Estrategias de mejora para convertir VigIA en un sistema de seguridad integral
Para transformar tu sistema de vigilancia inteligente en una solución de seguridad completa y adaptable a diversos sectores, podemos implementar las siguientes tecnologías y técnicas:
1. Mejoras en Inteligencia Artificial y Análisis de Video

Redes neuronales transformers para análisis de video: Implementar arquitecturas como VideoSwin o ViViT que superan a los modelos tradicionales en comprensión contextual de escenas.
Aprendizaje por refuerzo para cámaras PTZ: Sistemas que aprendan automáticamente a controlar cámaras móviles para seguir objetos de interés, optimizando los ángulos de visión.
Análisis de comportamiento predictivo: Algoritmos que identifiquen patrones anómalos antes de que se conviertan en incidentes (merodeadores que evolucionan hacia intrusiones).
Reconocimiento de actividades complejas: Detección de interacciones sospechosas entre personas (intercambios, seguimientos, confrontaciones).
Análisis de multitudes y control de aforo: Detección de densidad de personas, comportamientos grupales anómalos y control preciso de ocupación.

2. Integración con Otros Sistemas de Seguridad

Integración con sistemas de control de acceso: Validación cruzada entre detecciones visuales y registros de acceso (tarjetas RFID, biometría).
Interfaz con sistemas de alarma e incendio: Respuesta coordinada ante emergencias, usando las cámaras para verificar alarmas.
Interconexión con BMS (Building Management Systems): Integración con sistemas de gestión de edificios para control holístico.
Comunicación con sistemas de televigilancia municipal: Para barrios y espacios públicos, habilitando coordinación con centros de monitoreo gubernamentales.
Integración con drones de vigilancia: Para inspección automática de perímetros extensos en respuesta a alertas.

3. Mejoras en Ciberseguridad

Cifrado de extremo a extremo: Para todas las comunicaciones y almacenamiento de video.
Firewalls de aplicación y análisis de tráfico anómalo: Protección contra intentos de intrusión en la red de cámaras.
Autenticación multifactor para acceso administrativo: Incrementar seguridad para evitar accesos no autorizados.
Federación de identidades y SSO: Para entornos corporativos con múltiples sistemas de gestión.
Sandboxing completo: Aislar componentes críticos en contenedores para prevenir compromiso total del sistema.

4. Arquitectura Distribuida y Redundante

Procesamiento de borde (Edge Computing): Desplegar capacidades de análisis en dispositivos perimetrales reduciendo latencia.
Arquitectura de microservicios containerizada: Facilitar el despliegue, la escalabilidad y el mantenimiento.
Malla de servicios (Service Mesh): Mejorar la comunicación entre componentes con descubrimiento, balanceo y resilencia.
Replicación geográfica: Múltiples centros de procesamiento para tolerancia a fallos regionales.
Infraestructura como código (IaC): Automatizar despliegues para mantener consistencia en todas las instalaciones.

5. Almacenamiento y Gestión de Datos

Sistemas de almacenamiento jerárquico: Combinar almacenamiento rápido para datos recientes con archivado económico para registros históricos.
Compresión inteligente basada en contenido: Ajustar dinámicamente la calidad del video según el contenido (mayor resolución donde hay personas).
Blockchain para cadena de custodia: Garantizar la integridad de evidencias mediante hashes almacenados en blockchain.
Gestión del ciclo de vida de la información: Políticas automatizadas para retención y eliminación conforme a regulaciones.
Data lake para análisis histórico: Permita análisis retrospectivos de patrones de seguridad a largo plazo.

6. Comunicaciones Avanzadas

Red 5G privada: Para transmisión de video de alta densidad con baja latencia.
Protocolos de malla inalámbrica: Para entornos donde el cableado es difícil o costoso.
Sistemas redundantes satelitales: Como respaldo para ubicaciones críticas o remotas.
WebRTC para transmisión P2P segura: Reducir carga en servidores centrales para visualización.
Comunicación interoperable con servicios de emergencia: Integración con estándares como CAP (Common Alerting Protocol).

7. Interfaces y Experiencia de Usuario

Realidad aumentada para personal de seguridad: Superponer información de amenazas sobre video en tiempo real para guardias.
Visualización geoespacial 3D: Para complejos industriales y campus grandes.
Gestión mediante comandos de voz: Interfaces conversacionales para operaciones manos-libres.
Dashboards personalizables por rol: Diferentes vistas para personal de seguridad, administración y emergencias.
Aplicaciones móviles seguras: Para monitoreo remoto y notificaciones.

8. Adaptaciones Específicas por Sector
Barrios y Edificios

Integración con intercomunicadores y porteros eléctricos
Reconocimiento de vehículos y residentes
Detección de visitantes recurrentes no registrados

Empresas

Monitoreo de áreas restringidas y clasificadas
Análisis de comportamiento en ubicaciones sensibles
Correlación con registros de actividad de los sistemas informáticos

Industrias

Detección de elementos de protección personal
Monitoreo de procedimientos de seguridad operacional
Detección de fugas, humo o condiciones peligrosas

Retail

Análisis de tráfico de clientes y mapas de calor
Detección de comportamientos de shoplifting
Integración con sistemas antihurto EAS

Gobierno

Verificación de identidad multinivel
Análisis forense avanzado
Controles de acceso por niveles de autorización

9. Inteligencia Situacional

Fusión de sensores heterogéneos: Combinar datos de cámaras, micrófonos, sensores ambientales y de movimiento.
Gemelos digitales de instalaciones: Modelos 3D interactivos para visualizar todos los aspectos de seguridad.
Análisis de amenazas basado en OSINT: Incorporar fuentes abiertas para contextualizar riesgos (eventos sociales, climatología).
Correlación temporal de eventos: Identificar patrones complejos que ocurren en secuencia a través de múltiples sensores.

10. Cumplimiento Normativo y Ético

Difuminado automático de rostros en áreas públicas: Para cumplir con GDPR y otras regulaciones de privacidad.
Sistema de trazabilidad de acceso a datos: Registro inmutable de quién accede a qué grabaciones y por qué motivo.
Auditoría automatizada de sesgos en IA: Verificación continua para evitar discriminación algorítmica.
Proporcionalidad configurable: Ajuste de la intensidad de monitoreo según el nivel de riesgo y requisitos legales.

Al implementar estas tecnologías y enfoques de manera modular, tu sistema VigIA podría convertirse en una plataforma de seguridad verdaderamente completa, aplicable a cualquier entorno y escalable según necesidades específicas. La clave estará en mantener la filosofía de diseño modular, permitiendo que cada cliente active solo los componentes relevantes para su caso de uso.


RESPUESTA:

Análisis de Viabilidad y Complejidad de las Mejoras Propuestas
Evaluación General
Las mejoras descritas en el PROJECT_README.md representan una visión ambiciosa y completa para un sistema de vigilancia de última generación. Evaluaré la viabilidad y complejidad de implementación para cada categoría principal:
1. Mejoras en IA y Análisis de Video
Viabilidad: Alta a Media
Complejidad: Media a Alta
Implementable a corto plazo:
Análisis de comportamiento predictivo básico
Reconocimiento de actividades simples
Control de aforo y análisis de densidad
Desafíos técnicos:
Las arquitecturas transformer para video (VideoSwin, ViViT) requieren GPU potentes
El aprendizaje por refuerzo para cámaras PTZ necesita un entorno de simulación antes de implementación real
2. Integración con Otros Sistemas de Seguridad
Viabilidad: Alta
Complejidad: Media
Implementable a corto plazo:
API REST para sistemas de control de acceso
Interfaz con sistemas de alarma estándar
Webhooks para notificaciones bidireccionales
Consideraciones:
Se requieren APIs documentadas de los sistemas externos
Necesitará protocolos de autenticación seguros
3. Mejoras en Ciberseguridad
Viabilidad: Alta
Complejidad: Media
Implementable a corto plazo:
Cifrado de datos en tránsito (HTTPS)
Autenticación multifactor
Firewalls básicos y reglas de acceso
Consideraciones:
El cifrado de extremo a extremo para video aumenta la carga computacional
La federación de identidades requiere infraestructura adicional
4. Arquitectura Distribuida
Viabilidad: Media
Complejidad: Alta
Implementable a corto plazo:
Contenedores Docker para componentes individuales
Balanceo de carga básico
Desafíos significativos:
Edge computing requiere hardware especializado
La arquitectura de microservicios completa necesita rediseño sustancial
5. Modo Industrial (Ya implementado parcialmente)
Viabilidad: Alta
Complejidad: Media-Baja
Ya implementado:
Detección de EPP
Análisis de posturas
Detección básica de fuego/humo
Próximos pasos viables:
Mejorar la precisión con modelos específicos
Añadir más reglas de seguridad industrial específicas por sector
Plan de Implementación Recomendado
Fase 1 (Corto plazo - 1-3 meses)
Perfeccionar el modo industrial existente:
Entrenamiento de modelos específicos para EPP con datos reales
Mejora de la interfaz de usuario para configuración de zonas
Generación de reportes automatizados
Mejoras de seguridad básicas:
Implementar HTTPS en toda la aplicación
Añadir autenticación multifactor
Cifrado de datos sensibles
Integración con sistemas básicos:
APIs para sistemas de control de acceso
Webhooks para alarmas
Fase 2 (Medio plazo - 3-6 meses)
Mejoras en IA:
Implementar análisis de comportamiento predictivo simple
Detección de actividades sospechosas básicas
Control de aforo y densidad de personas
Arquitectura distribuida inicial:
Dockerización de componentes
Mejora de la escalabilidad horizontal
Interfaces avanzadas:
Visualización geoespacial básica
Dashboards personalizables por rol
Fase 3 (Largo plazo - 6-12 meses)
IA avanzada:
Implementar modelos transformer para análisis de video
Aprendizaje por refuerzo para cámaras PTZ
Análisis forense avanzado
Arquitectura completa:
Edge computing para procesamiento en cámaras
Microservicios completos con service mesh
Replicación geográfica
Funcionalidades sectoriales:
Implementación de soluciones verticales específicas
Integración con sistemas gubernamentales
Consideraciones de Recursos
Para implementar estas mejoras se necesitaría:
1. Equipo de desarrollo:
2-3 desarrolladores backend (Python/Flask)
1-2 especialistas en ML/Computer Vision
1 especialista en seguridad informática
1 desarrollador frontend
Infraestructura:
Servidores con GPUs para entrenamiento de modelos
Almacenamiento escalable para videos
Entornos de staging y producción
3. Presupuesto aproximado:
Fase 1: $50,000 - $80,000
Fase 2: $100,000 - $150,000
Fase 3: $200,000 - $300,000
Conclusión
El proyecto tiene una base sólida con el modo industrial ya implementado. Es completamente viable implementar la mayoría de las mejoras propuestas, pero recomiendaría un enfoque por fases priorizando:
Primero: Perfeccionar lo existente y añadir seguridad básica
Segundo: Mejorar capacidades de IA e iniciar arquitectura distribuida
Tercero: Implementar características avanzadas y especializadas
El mayor desafío técnico está en la implementación de modelos de IA avanzados y la arquitectura distribuida completa, que requieren experiencia especializada y recursos computacionales significativos.

---------------

Próximos Pasos
Si encuentras errores adicionales en la aplicación, sería útil que los compartieras para poder abordarlos. Si deseas mejorar la robustez de la aplicación, podrías considerar:
Implementar más validaciones en las API
Mejorar el manejo de errores en las funciones principales
Agregar funcionalidad de registro más detallada para facilitar la depuración


Detector de asalto:

Datos e Información sobre el Sistema de Detección de Asaltos
Este agente implementa una funcionalidad avanzada para detectar posibles situaciones de asalto o robo, utilizando análisis de comportamiento:
Detección de múltiples comportamientos sospechosos:
Manos levantadas (indicador clásico de asalto a un banco o tienda)
Personas en el suelo (posibles rehenes o víctimas)
Movimientos bruscos/corriendo (huida o pánico)
Armas visibles
Rostros cubiertos (pasamontañas, máscaras)
Cambios súbitos en agrupaciones de personas (dispersión o concentración repentina)
Análisis multi-frame:
Mantiene un historial de detecciones para analizar comportamientos a lo largo del tiempo
Detecta cambios súbitos en el número de personas (indicador de pánico)
Evaluación ponderada de amenazas:
Asigna diferentes pesos a cada comportamiento sospechoso
Calcula un "nivel de amenaza" combinado
Aplica un multiplicador por combinación de factores (múltiples comportamientos sospechosos simultáneos son más alarmantes)
4. Sistema de alertas críticas:
Genera alertas de alta prioridad cuando se supera un umbral
Incluye capturas de imagen de la situación
Implementa un sistema de "cooldown" para evitar alertas repetitivas
3. Implementación práctica del detector
La implementación actual incluye algunos métodos que están "simulados" en esta versión. Para una implementación completa, estos métodos necesitarían:
Detección de manos levantadas:
Requeriría un modelo de estimación de poses (como OpenPose, MediaPipe o BlazePose)
Detectaría la posición relativa de las articulaciones de hombros, codos y muñecas
Detección de rostros cubiertos:
Requeriría un detector facial más avanzado
Analizaría la visibilidad de características faciales
Detección de movimiento rápido:
Implementaría seguimiento de objetos entre frames
Calcularía vectores de velocidad para cada persona detectada
En una implementación más avanzada, el sistema podría integrarse con otros modelos especializados o utilizar aprendizaje por refuerzo para mejorar la precisión de las detecciones con el tiempo.
4. Acceso a la configuración
La página de configuración del detector de asaltos ya está implementada y accesible en /assault-config. Desde allí, los usuarios pueden:
Activar/desactivar el detector
Ajustar el umbral de confianza
Seleccionar qué comportamientos sospechosos considerar
Configurar los destinatarios de alertas
Probar el detector

------------------------------
IMPORTANTE!!
Otras Mejoras Recomendadas
Para mejorar la robustez general del sistema, recomendaría implementar pruebas unitarias para los componentes clave, lo que ayudaría a detectar estos problemas antes de que aparezcan en producción.
También sería útil añadir comprobaciones de tipo en las funciones críticas para evitar errores inesperados cuando los datos no son del tipo esperado.

Evaluación del Estado Actual del Sistema y Pasos Pendientes
Estado de Implementación: 40% completado
Desglose por áreas principales:
| Área | Estado | Completitud |
|------|--------|-------------|
| Sistema base (cámaras, detección, interfaz) | Funcional | 80% |
| Detección de asaltos | Simulado, sin detección real de posturas | 30% |
| Modo industrial | Estructura básica implementada | 40% |
| Gestión de datasets y entrenamiento | Parcialmente implementado | 35% |
| Sistema de alertas avanzado | Estructura básica, falta refinamiento | 45% |
| Creación dinámica de agentes | Parcialmente implementado | 40% |
| Integración con IA externa | No implementado | 0% |
| Conexión WhatsApp | Estructura básica | 25% |
| Gestión geoespacial | No implementado | 0% |
| Robustez (pruebas, validaciones de tipo) | No implementado | 5% |
Próximos pasos críticos:
Implementar validación de tipos y manejo de errores (prioridad alta)
Esto reducirá significativamente los errores que estamos encontrando
Debería agregarse a todas las funciones públicas de las clases principales
Integrar detección real de poses humanas para el detector de asaltos
Reemplazar la simulación actual con un modelo real como MediaPipe
Esto permitiría probar la detección de manos levantadas con la webcam
3. Desarrollar pruebas unitarias para los componentes clave
Comenzar con AlertManager, CameraManager y el detector de asaltos
Implementar pruebas para los escenarios más críticos
Respuesta a tu pregunta sobre pruebas:
Actualmente, el sistema de detección de asaltos está simulado, por lo que no detectará realmente si levantas las manos frente a la webcam. Para implementar esta funcionalidad necesitamos:
Integrar una biblioteca de detección de poses como MediaPipe o BlazePose:
Modificar el método _detect_raised_hands en AssaultDetectionAgent para usar detección real:
3. Luego podrías probar el sistema activando la webcam y levantando las manos para ver si genera una alerta.



---------------------------------------------------

Estado actual del sistema
Basado en las interacciones, parece que hay un sistema de vigilancia inteligente con un módulo industrial que tiene varios problemas:
Problemas con la visualización de cámaras - No se puede ver el video en vivo de la cámara web
Configuración de zonas de peligro - No se pueden dibujar o editar áreas
Errores de configuración - Errores como 'IndustrialSafetyManager' object has no attribute 'fire_detection_enabled'
Alertas - Las alertas manuales parecen funcionar pero hay problemas con la detección automática
Integración con Bootstrap - Errores como "bootstrap is not defined"
Componentes principales
Para entender mejor el sistema, vamos a listar sus componentes principales:
app.py - El servidor Flask principal, con endpoints API para diversas funcionalidades
src/industrial_safety.py - Gestor de seguridad industrial que maneja configuraciones
src/industrial_safety_agent.py - Agente encargado de la detección de problemas de seguridad
4. src/alert_manager.py - Sistema para gestionar alertas
templates/industrial.html - Interfaz de usuario para configurar el modo industrial
Lo que está funcionando
Carga básica del sistema
Módulo de alertas manuales
Interfaz básica de usuario
Lo que no está funcionando
Visualización de video en vivo
Configuración de áreas de detección
Detección automática de incendios/EPP
Guardado de configuraciones
Plan para resolver los problemas
Necesitamos un enfoque sistemático para solucionar los problemas pendientes:
Visualización de cámaras: Implementar correctamente el streaming de video
Configuración de zonas: Asegurar que el canvas y sus eventos funcionan correctamente
Integración con Bootstrap: Verificar que todas las dependencias estén cargadas
Atributos de IndustrialSafetyManager: Asegurarnos de que todos los atributos necesarios estén definidos
Mejorar el manejo de errores: Para tener mejor información sobre lo que falla
Voy a crear un resumen completo con recomendaciones para el usuario.
</think>
Diagnóstico y Plan Completo del Sistema de Vigilancia Industrial
Vamos a hacer un repaso general del sistema, analizando lo que funciona, lo que falta, y cómo podemos mejorarlo.
Estado Actual del Sistema
Lo que está funcionando:
Inicialización básica del sistema
Interfaz general del módulo industrial
Sistema de alertas manuales
Configuraciones básicas en la interfaz
Visualización de estadísticas
Backend API para ciertas funcionalidades
Lo que NO está funcionando:
Visualización de video en vivo de las cámaras
Definición y guardado de zonas de peligro
Detección automática de incendios/EPP
Configuración efectiva de parámetros
Sistema de notificaciones emergentes
Arquitectura del Sistema
El sistema está compuesto por estos componentes principales:
Backend (Python/Flask):
app.py: Servidor principal con endpoints API
src/industrial_safety.py: Gestor de seguridad industrial
src/industrial_safety_agent.py: Agente encargado de la detección
src/alert_manager.py: Sistema para gestionar alertas
Frontend (HTML/JavaScript):
templates/industrial.html: Interfaz de usuario
Funcionalidades JavaScript para interactuar con APIs
Plan de Acción para Completar el Sistema
1. Visualización de Video en Vivo
2. Atributos Faltantes en IndustrialSafetyManager
3. Corregir la Funcionalidad de Zonas
La funcionalidad de creación de zonas requiere:
Un canvas que permita dibujar sobre la imagen de la cámara
JavaScript para manejar los eventos de dibujo
Almacenamiento de coordenadas en el backend
API para guardar y cargar zonas
Ya has implementado parte de esto, pero falta asegurarse de que el HTML contenga la estructura necesaria:
4. Debugging Mejorado
Para ayudar a identificar problemas específicos, agrega estas funciones de diagnóstico:
Resumen de Tareas Pendientes
Implementar visualización de video en vivo
Asegurarse de que camera-stream existe y recibe datos
Añadir manejo de errores en la carga de stream
Corregir configuración de zonas
Verificar estructura HTML para zonas
Asegurar que initZoneCanvas se ejecuta correctamente
Implementar guardado de zonas en backend
Arreglar configuración de detección de incendios
Asegurar que IndustrialSafetyManager tiene todos los atributos
Corregir endpoint /api/industrial/fire-detection/config
Mejorar sistema de alertas
Asegurar carga correcta de Bootstrap
Implementar mostrado de alertas en tiempo real
Testing integral
Probar cada componente individualmente
Verificar integración entre componentes
Recomendaciones Finales
Revisar errores en consola: Los errores específicos te dan pistas sobre qué está fallando
Implementar cambios gradualmente: Resuelve un problema a la vez y prueba
Verificar conexiones backend-frontend: Asegura que las API responden correctamente
Revisar nombres de variables: Asegúrate de que coincidan en frontend y backend
Con estas correcciones e implementaciones, deberías tener un sistema de vigilancia industrial completamente funcional, capaz de monitorear cámaras, detectar riesgos y gestionar alertas.

Visión General del Sistema de Vigilancia Inteligente
1. Arquitectura General del Sistema
Estructura Principal
El sistema está basado en una arquitectura modular y extensible con los siguientes componentes:
Sistema de Vigilancia Inteligente
├── Núcleo del Sistema (Core)
│   ├── Servidor Flask (app.py)
│   ├── Gestión de Hilos (threading.py)
│   └── API RESTful
├── Gestión de Cámaras
│   ├── Captura de Video (video_capture.py)
│   ├── Transmisión MJPEG/H264
│   └── Control PTZ (si aplica)
├── Framework MCP (Mission Control & Processing)
│   ├── Orquestador MCP
│   ├── Sistema de Agentes Inteligentes
│   └── Gestión de Prioridad de Tareas
├── Procesamiento de Imágenes
│   ├── Detección de Objetos (object_detector.py)
│   ├── Reconocimiento Facial (face_recognition.py)
│   ├── Análisis de Comportamientos (varios agentes)
│   └── Modelos de Machine Learning
├── Sistema de Alertas
│   ├── Gestor de Alertas (alert_manager.py)
│   ├── Notificaciones (WhatsApp, Email, etc.)
│   └── Histórico y Estadísticas
├── Interfaz de Usuario
│   ├── Dashboard Web
│   ├── Configuración del Sistema
│   ├── Visualización de Cámaras
│   └── Gestión de Alertas
└── Módulos Especializados
    ├── Modo Industrial (industrial_safety.py)
    ├── Detección de Asaltos (assault_detection_agent.py)
    ├── Análisis de Situaciones (situation_analysis_agent.py)
    └── Tracking Geográfico (geo_manager.py)



Flujo de Datos
Captura de Video: Las cámaras envían frames a video_capture.py
Procesamiento: Los frames son analizados por diversos detectores y agentes
Análisis: Los resultados de la detección son procesados por agentes especializados
Alertas: Las situaciones relevantes generan alertas en alert_manager.py
Notificaciones: Las alertas pueden activar notificaciones por varios canales
Visualización: Todo se muestra en el dashboard web en tiempo real
2. Sistema de Inteligencia Artificial
Framework MCP (Mission Control & Processing)
El corazón del sistema de IA es el framework MCP, un sistema propio basado en agentes con estas características:
Orquestador MCP: Gestiona el ciclo de vida de los agentes y coordina sus actividades
Agentes Inteligentes: Entidades autónomas especializadas en tareas específicas
Comunicación Entre Agentes: Sistema de mensajes para coordinación y colaboración
Priorización: Capacidad para asignar recursos según la importancia de las tareas
Tipos de Agentes Implementados
Agentes de Detección: Procesan imágenes buscando objetos o situaciones específicas
DetectionAgent: Agente genérico de detección de objetos
AssaultDetectionAgent: Especializado en detectar posibles asaltos
IndustrialSafetyAgent: Enfocado en riesgos industriales
Agentes de Análisis: Analizan resultados para identificar situaciones complejas
SituationAnalysisAgent: Utiliza IA externa para comprender escenarios complejos
FireDetectionAgent: Especializado en detectar incendios/humo
Agentes de Notificación: Gestionan la comunicación de alertas
AlertAgent: Gestiona el envío de alertas a través de la interfaz
WhatsAppAlertAgent: Especializado en enviar notificaciones por WhatsApp
Agentes de Gestión: Administran recursos del sistema
CameraAgent: Gestiona el estado y configuración de las cámaras
GuardTrackingAgent: Monitorea la posición geográfica de guardias
Sistema de Creación de Agentes
Existe un sistema inicial para crear nuevos agentes de forma dinámica:
AgentTemplateManager: Gestor de plantillas para crear nuevos agentes
Interfaz web para configurar parámetros básicos
Capacidad para asociar modelos de ML con agentes específicos
3. Sistema de Gestión de Cámaras
Fuentes de Video Compatibles
Cámaras IP (RTSP, HTTP, MJPEG)
Webcams USB
Archivos de video (para pruebas/simulación)
Transmisiones RTMP/HLS
Características de Gestión
Multihilo: Cada cámara funciona en su propio hilo para no bloquear el sistema
Auto-reconexión: Intentos automáticos de reconexión si se pierde la señal
Configuración Dinámica: Ajustes de resolución, FPS, etc. en tiempo real
Transmisión Adaptativa: Ajuste de calidad según disponibilidad de red
ROI (Regiones de Interés)
Definición de zonas específicas para análisis en cada cámara
Diferentes configuraciones de sensibilidad por zona
Reglas específicas asociadas a cada región
4. Modos Preconfigurados
El sistema ofrece varios modos predefinidos que ajustan todos los parámetros para escenarios específicos:
Modo Normal
Configuración estándar para vigilancia general
Detección de movimiento básica
Reconocimiento facial para control de acceso
Modo Comercial
Optimizado para tiendas y comercios
Detección de comportamientos sospechosos
Análisis de flujo de clientes
Alertas de intrusión fuera de horario
Modo Aeropuerto
Alta sensibilidad para grandes espacios
Reconocimiento facial avanzado
Detección de objetos abandonados
Seguimiento de personas específicas
Modo Residencial (Barrio Privado)
Enfocado en control de acceso
Detección de intrusiones perimetrales
Reconocimiento de vehículos
Alertas de comportamientos inusuales
Modo Industrial
Detección de equipos de protección personal (EPP)
Monitoreo de zonas peligrosas
Detección temprana de incendios
Cumplimiento de protocolos de seguridad
5. Machine Learning y Deep Learning
Modelos Implementados
1. Detección de Objetos: YOLOv5/v8 para identificar personas, vehículos, objetos
Reconocimiento Facial: Sistema basado en CNN para identificación de personas
Análisis Postural: Detección de posturas (manos levantadas, persona caída)
Detección de Anomalías: Identificación de comportamientos inusuales
5. Clasificación de Situaciones: Categorización de escenarios (normal, sospechoso, peligroso)
Sistema de Entrenamiento
Gestor de Datasets: Para crear conjuntos de datos personalizados
Herramientas de Etiquetado: Interfaz para clasificar y etiquetar imágenes
Procesos de Entrenamiento: Flujos automatizados para reentrenar modelos
Validación y Testing: Herramientas para evaluar el rendimiento de los modelos
Integración con IA Externa
Conectores para servicios como Claude, Google Gemini
Capacidad de análisis de alto nivel para situaciones complejas
Interpretación contextual avanzada mediante LLMs
6. Dashboard y Sistema de Alertas
Dashboard Principal
Visión general del estado del sistema
Monitoreo de cámaras activas
Estadísticas de detecciones y alertas
Controles rápidos para configuración
Visualización de Cámaras
Stream en vivo de múltiples cámaras
Superposición de detecciones y metadatos
Herramientas de zoom y control PTZ
Reproducción de eventos históricos
Sistema de Alertas
Alertas en Tiempo Real: Notificaciones inmediatas en dashboard
Clasificación por Severidad: Priorización de alertas (informativa, advertencia, crítica)
Filtros y Búsqueda: Herramientas para gestionar grandes volúmenes de alertas
Confirmación y Seguimiento: Workflow para atender y resolver alertas
Notificaciones
Integración WhatsApp: Envío de alertas y capturas por WhatsApp
Correo Electrónico: Resúmenes y alertas críticas
Notificaciones Push: Para aplicaciones móviles (planificado)
Integración con Sistemas Externos: APIs para conectar con otras plataformas
7. Estado Actual y Próximos Pasos
Estado de Implementación
| Módulo | Estado | Completitud |
|--------|--------|-------------|
| Sistema Base | Funcional | 85% |
| Gestión de Cámaras | Funcional | 80% |
| Framework MCP | Operativo | 70% |
| Detección de Objetos | Implementado | 75% |
| Reconocimiento Facial | Básico | 60% |
| Detección de Asaltos | Parcial | 40% |
| Modo Industrial | En desarrollo | 45% |
| Dashboard | Funcional | 70% |
| Sistema de Alertas | Operativo | 65% |
| Integración WhatsApp | Básica | 30% |
| Gestión Geoespacial | Inicial | 20% |
| IA Externa | Conceptual | 15% |
Próximos Desarrollos Prioritarios
Completar Modo Industrial
Finalizar visualización de cámaras en vivo
Implementar gestión de zonas de peligro
Mejorar detección de incendios y EPP
Mejorar Sistema de Agentes
Completar interfaz de creación dinámica de agentes
Implementar retroalimentación y aprendizaje continuo
Mejorar la coordinación entre agentes
Ampliar Capacidades de ML/DL
Implementar sistema completo de entrenamiento
Mejorar detección postural para identificar asaltos
Desarrollar modelos específicos para comportamientos sospechosos
Expandir Integración con Servicios Externos
Completar conexión con Claude/Gemini para análisis avanzado
Mejorar sistema de notificaciones WhatsApp
Implementar APIs para sistemas de terceros
Desarrollar Gestión Geoespacial
Completar sistema de seguimiento de guardias
Implementar geocercas y rutas
Integrar mapas interactivos en dashboard
8. Arquitectura Técnica
Stack Tecnológico
Backend: Python con Flask
Frontend: HTML5, JavaScript, Bootstrap
Base de Datos: SQLite (desarrollo), PostgreSQL (producción)
ML/DL: PyTorch, TensorFlow, OpenCV
Comunicación: RESTful APIs, WebSockets
Despliegue: Docker, opcionalmente Kubernetes

Diagrama de Componentes

                  ┌─────────────┐
                  │  Frontend   │
                  │  Dashboard  │
                  └──────┬──────┘
                         │
                         ▼
┌─────────────┐    ┌──────────────┐    ┌─────────────┐
│  Cámaras    │───▶│ Flask Server │◀───│ Servicios   │
│  y Sensores │    │    (API)     │    │ Externos    │
└─────────────┘    └──────┬───────┘    └─────────────┘
                         │
        ┌────────────────┼────────────────┐
        │                │                │
        ▼                ▼                ▼
┌─────────────┐    ┌──────────────┐    ┌─────────────┐
│ Detección y │    │ Framework MCP│    │ Sistema de  │
│ Análisis    │───▶│ (Orquestador)│───▶│ Alertas     │
└─────────────┘    └──────────────┘    └─────────────┘


9. Recomendaciones para el Desarrollo Futuro
Priorizar la Robustez
Implementar pruebas unitarias para componentes críticos
Mejorar manejo de errores y validación de tipos
Implementar capacidades de auto-recuperación
Enfoque Gradual en ML/DL
Comenzar con modelos simples bien ajustados
Implementar evaluación sistemática de precisión
Crear proceso para mejorar modelos con nuevos datos
Arquitectura Modular
Continuar el enfoque de módulos independientes
Documentar interfaces entre componentes
Facilitar la adición de nuevos agentes y funcionalidades
4. Escalabilidad
Diseñar para crecimiento en número de cámaras
Optimizar procesamiento para reducir carga de CPU/GPU
Considerar despliegue distribuido para grandes instalaciones
Esta visión general del sistema proporciona un mapa completo de la arquitectura actual, capacidades y direcciones futuras del sistema de vigilancia inteligente.

--------------------------------
Nueva estructura de proyecto

4. Verificar y actualizar la estructura de archivos del proyecto
Para asegurarnos de que todos los archivos estén en su lugar, aquí está la estructura de directorios del proyecto:


proyecto/
├── app.py
├── config/
│   ├── system_config.json
│   └── forensic/
├── data/
│   ├── videos/
│   └── forensic/
│       └── evidence/
├── src/
│   ├── assault_detection_agent.py
│   ├── camera_manager.py
│   ├── ensemble_detection_agent.py
│   ├── forensic_analysis.py
│   ├── generative_description_agent.py
│   ├── industrial_safety_agent.py
│   ├── mcp_framework.py
│   ├── object_detector.py
│   ├── operation_mode_router.py
│   ├── retail_security_agent.py
│   └── ... (otros archivos)
├── static/
│   ├── css/
│   ├── js/
│   └── img/
├── templates/
│   ├── advanced_settings.html
│   ├── base.html
│   ├── commercial.html
│   ├── dashboard.html
│   ├── forensic.html
│   ├── industrial.html
│   └── ... (otros templates)
├── tools/
│   └── test_ppe_detection.py
├── docs/
│   ├── TECHNICAL_DOCS.md
│   ├── TESTING_GUIDE.md
│   └── USER_GUIDE.md
├── requirements.txt
└── README.md


5. Instrucciones para ejecutar y probar el sistema
Una vez corregidos los errores, puedes iniciar el sistema con estos pasos:
Asegúrate de tener todas las dependencias instaladas:
2. Verifica que existan los directorios necesarios:
Inicia la aplicación:
Accede al sistema a través del navegador:
El sistema ahora incluye todas las nuevas funcionalidades:
IA generativa para descripciones
Ensemble de modelos para mayor precisión
Configuración avanzada personalizable
Análisis forense completo

   # Ejecutar en la terminal
   pip install -r requirements.txt

      mkdir -p config/forensic data/videos data/forensic/evidence

         ls src/

            python app.py


-------------------------------------------

DATOS GENERALES:

Resumen Tecnológico del Sistema de Vigilancia IA
1. Tecnologías Principales
Backend
Python: Lenguaje principal del sistema
Flask: Framework web para la API REST y servidor web
Blueprints de Flask: Para organización modular de rutas (main_bp, api_bp)
Jinja2: Motor de plantillas para renderizar HTML
Base de Datos
SQLAlchemy: ORM (Object-Relational Mapping) para interactuar con la base de datos
SQLite: Base de datos por defecto para almacenamiento (configurable para otros sistemas)
Modelos de datos: Camera, Alert, DetectionEvent para gestionar entidades del sistema
Procesamiento de Imágenes
OpenCV (cv2): Biblioteca principal para captura de video, procesamiento de imágenes y detección
Múltiples backends de cámaras: MSMF (Media Foundation), DirectShow, Video for Windows
2. Módulos del Sistema
Módulo de Cámaras
Sistema de gestión de cámaras: Permite configurar, monitorear y administrar cámaras IP, RTSP y webcams
Detección dinámica de interfaces: Intenta automáticamente diferentes métodos de conexión a cámaras
Streaming en tiempo real: Captura y transmisión de video mediante HTTP streaming
Módulo de Detección y AI
Detectores avanzados: Integración con sistemas de IA para detección
Tipos de detección:
Detección de poses (personas)
Reconocimiento facial
Detección de incendios/humo
Detección de agua/inundaciones
Procesamiento asíncrono: Sistema de colas para análisis en segundo plano
Módulo de Alertas
Sistema de notificaciones: Generación y gestión de alertas en tiempo real
Clasificación por severidad: Alertas críticas, altas, medias, bajas
Gestión del ciclo de vida: Creación, notificación, resolución de alertas
Módulo de Diagnósticos
Monitoreo de recursos: CPU, memoria, disco usando psutil
Diagnóstico de cámaras: Pruebas de conectividad y rendimiento
Monitoreo de red: Análisis de tráfico y estado de la red
Herramientas forenses: Análisis post-evento y recuperación de datos
Módulo de Configuración
Gestión centralizada: Interfaz para todos los parámetros del sistema
Perfiles de operación: Modos normal, mejorado, crítico y bajo consumo
Integración con APIs externas: Configuración para WhatsApp, Telegram, Email, SMS
3. Arquitectura y Patrones
Arquitectura del Sistema
Arquitectura modular: Componentes independientes y reutilizables
Patrón MVC: Separación de modelo, vista y controlador
API RESTful: Interfaces programáticas para integración con otros sistemas
Blueprints de Flask: Organización de rutas por funcionalidad
Gestión de Datos
Modelos relacionales: Estructura de datos normalizada
Operaciones CRUD: Creación, lectura, actualización y eliminación de entidades
Migraciones: Esquema de base de datos actualizable
4. Interfaz de Usuario
Frontend
HTML5/CSS3: Estructura y estilos modernos
JavaScript: Interactividad del lado del cliente
Jinja2 Templates: Renderizado de vistas dinámicas
Diseño responsivo: Adaptación a diferentes tamaños de pantalla
Componentes reutilizables: Sistema modular de componentes de UI
Elementos UI
Dashboard: Visualización centralizada del estado del sistema
Monitoreo en tiempo real: Visualización de cámaras y alertas
Gestor de cámaras: Configuración y control
Centro de alertas: Gestión y visualización de alertas
Diagnósticos y estadísticas: Monitoreo de recursos y rendimiento
Panel de configuración: Ajustes del sistema
5. Integraciones y APIs
APIs Externas
Servicios de mensajería: WhatsApp, Telegram, Email, SMS
Servicios cloud: Google Cloud, Firebase
OpenAI: Integración para análisis inteligente
Home Assistant/Zoneminder: Integración con sistemas de domótica
Seguridad
Gestión de claves API: Almacenamiento seguro de credenciales
Verificación de endpoints: Validación de solicitudes
Registro de actividad: Logging detallado de acciones del sistema
6. Utilidades y Herramientas
Utilidades del Sistema
Logging avanzado: Registro multinivel de eventos y errores
Manejo de excepciones: Captura y gestión centralizada de errores
Creación de directorios: Gestión automática de estructura de archivos
Gestión de recursos: Control de memoria y CPU
Herramientas de Desarrollo
Infraestructura para pruebas: Endpoints de prueba para validación
Datos de demostración: Inicialización automática para desarrollo
Funciones de diagnóstico: Herramientas para depuración
7. Modo de Operación
El sistema implementa diferentes modos de operación que pueden ser configurados según las necesidades:
Modo normal: Equilibrio entre funcionalidad y uso de recursos
Modo mejorado: Mayor sensibilidad y procesamiento avanzado
Modo bajo consumo: Operación con recursos mínimos
Modo crítico: Máxima sensibilidad para situaciones de emergencia
Cada módulo del sistema puede adaptarse a estos modos, ajustando parámetros como frecuencia de muestreo, sensibilidad de detección y consumo de recursos.
---
Este sistema integra tecnologías modernas de procesamiento de imágenes, IA y desarrollo web para crear una plataforma completa de vigilancia inteligente, adaptable a diversos entornos y necesidades de seguridad.

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\app.py
--------------------------------------------------------------------------------
from flask import Flask, send_from_directory, render_template, g
from src.database import db
from src.utils.logger import setup_logging
from src.utils.error_handler import register_error_handlers
import os
from datetime import datetime

def create_app():
app = Flask(__name__)

    # Configuración
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev_key_change_in_production')
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get(
        'DATABASE_URL', 'sqlite:///app.db'
    )
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Inicializar extensiones
    db.init_app(app)
    
    # Configurar logging
    logger = setup_logging(app)
    
    # Registrar manejadores de error
    register_error_handlers(app)
    
    # Registrar funciones para usar en todas las plantillas
    @app.context_processor
    def utility_processor():
        return {'now': datetime.now}
    
    # Registrar filtro de fecha personalizado
    @app.template_filter('date')
    def format_date(value):
        if isinstance(value, str):
            try:
                value = datetime.fromisoformat(value)
except:
                return value
        if isinstance(value, datetime):
            return value.strftime('%d/%m/%Y %H:%M')
        return str(value)
    
    # Registrar blueprints (rutas)
    from src.routes.main import main_bp
    from src.routes.api import api_bp
    
    app.register_blueprint(main_bp)
    app.register_blueprint(api_bp, url_prefix='/api')
    
    # Crear tablas en la primera ejecución
    with app.app_context():
        db.create_all()
        logger.info("Tablas de base de datos creadas/verificadas")
        
        # Inicializar datos de demostración si estamos en modo debug
        if app.debug:
            from src.utils.init_db import initialize_demo_data
            initialize_demo_data()
            logger.info("Datos de demostración inicializados")
    
    # Crear directorio para capturas de test si no existe
    test_captures_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'test_captures')
    if not os.path.exists(test_captures_dir):
        os.makedirs(test_captures_dir)
    
    # Permitir servir archivos de capturas de test
    @app.route('/test_captures/<path:filename>')
    def test_captures(filename):
        return send_from_directory('test_captures', filename)
    
    # Crear otros directorios necesarios
    directories = ['snapshots', 'recordings', 'alert_captures']
    for directory in directories:
        dir_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), directory)
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
            logger.info(f"Directorio creado: {directory}")
    
    # Crear directorios necesarios al iniciar la aplicación
    def create_directories_function(app):
        """Crea los directorios necesarios para la aplicación"""
        directories = [
            'snapshots', 
            'recordings', 
            'alert_captures', 
            'detection_snapshots',
            'test_captures'
        ]
        for directory in directories:
            if not os.path.exists(directory):
                os.makedirs(directory)
                app.logger.info(f"Directorio creado: {directory}")

    create_directories_function(app)
    
    # Servir archivos de capturas y grabaciones
    @app.route('/detection_snapshots/<path:filename>')
    def detection_snapshots(filename):
        return send_from_directory('detection_snapshots', filename)

    @app.route('/recordings/<path:filename>')
    def recordings(filename):
        return send_from_directory('recordings', filename)

    @app.route('/snapshots/<path:filename>')
    def snapshots(filename):
        return send_from_directory('snapshots', filename)

    @app.route('/alert_captures/<path:filename>')
    def alert_captures(filename):
        return send_from_directory('alert_captures', filename)
    
    # Asegurarse de que el directorio de diagnóstico existe
    @app.route('/diagnostics/<path:filename>')
    def diagnostics(filename):
        diagnostics_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'diagnostics')
        if not os.path.exists(diagnostics_dir):
            os.makedirs(diagnostics_dir)
        return send_from_directory('diagnostics', filename)
    
    @app.route('/camera/testing')
    def camera_testing():
        """Página de prueba de detectores en tiempo real"""
        return render_template('camera_testing.html')
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(host='0.0.0.0', port=5000, debug=True)


--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\extract_system_info.py
--------------------------------------------------------------------------------
import os
import time
import datetime
import shutil
from pathlib import Path

def get_files_sorted_by_time(directory, exclude_dirs=None, exclude_patterns=None):
    """Obtiene los archivos ordenados por tiempo de modificación (más reciente primero)"""
    if exclude_dirs is None:
        exclude_dirs = ['.git', '__pycache__', '.venv', 'venv', 'vigilai_env', 'node_modules']
    
    if exclude_patterns is None:
        exclude_patterns = [
            'vigilai_env/Lib', 'vigilai_env\\Lib',
            '.venv/Lib', '.venv\\Lib',
            'venv/Lib', 'venv\\Lib',
            'site-packages', 'dist-packages',
            'pip/_vendor', 'pip\\_vendor'
        ]
    
    file_list = []
    for root, dirs, files in os.walk(directory):
        # Excluir directorios no deseados
        dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
        
        # Excluir si la ruta coincide con algún patrón a excluir
        if should_exclude_path(root, exclude_patterns):
            dirs[:] = []  # No explorar subdirectorios
            continue
            
        for file in files:
            file_path = os.path.join(root, file)
            try:
                mod_time = os.path.getmtime(file_path)
                file_list.append((file_path, mod_time))
            except Exception as e:
                print(f"Error al acceder a {file_path}: {e}")
    
    # Ordenar por tiempo de modificación (más reciente primero)
    file_list.sort(key=lambda x: x[1], reverse=True)
    return file_list

def format_datetime(timestamp):
    """Formatea una marca de tiempo en una fecha legible"""
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

def get_file_extension(file_path):
    """Retorna la extensión del archivo"""
    _, ext = os.path.splitext(file_path)
    return ext.lower()

def is_binary_file(file_path):
    """Verifica si un archivo es binario basado en su extensión"""
    binary_extensions = ['.pyc', '.png', '.jpg', '.jpeg', '.gif', '.pdf', '.zip', 
                         '.tar', '.gz', '.exe', '.dll', '.so', '.bin', '.dat', 
                         '.mp3', '.mp4', '.avi', '.mov', '.sqlite', '.db']
    return get_file_extension(file_path) in binary_extensions

def should_exclude_directory(root, exclude_dirs):
    """Determina si un directorio debe ser excluido basado en nombres de directorios"""
    for exclude_dir in exclude_dirs:
        if exclude_dir in root.split(os.sep):
            return True
    return False

def should_exclude_path(path, exclude_patterns):
    """Determina si una ruta debe ser excluida basado en patrones"""
    # Normalizar slashes para que funcione en cualquier SO
    normalized_path = path.replace('\\', '/').lower()
    
    for pattern in exclude_patterns:
        pattern = pattern.lower().replace('\\', '/')
        if pattern in normalized_path:
            return True
    return False

def generate_system_report(project_dir, output_file, recent_files_count=20):
    """Genera un informe completo del sistema"""
    # Directorios a excluir
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    # Patrones de ruta a excluir
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor',
        'python3', 'python2',
        'bin/python', 'Scripts'
    ]
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # Encabezado del informe
        f.write("=" * 80 + "\n")
        f.write(f"INFORME DEL SISTEMA DE VIGILANCIA IA\n")
        f.write(f"Generado el {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 80 + "\n\n")
        
        # Sección 1: Estructura del directorio
        f.write("1. ESTRUCTURA DEL PROYECTO\n")
        f.write("=" * 80 + "\n\n")
        
        # Recorrer y mostrar la estructura de directorios
        for root, dirs, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
            
            # Saltar este directorio si debe ser excluido
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                dirs[:] = []  # No explorar subdirectorios
                continue
            
            level = root.replace(project_dir, '').count(os.sep)
            indent = ' ' * 4 * level
            rel_path = os.path.relpath(root, project_dir)
            if rel_path == '.':
                f.write(f"{indent}📁 /\n")
            else:
                f.write(f"{indent}📁 {os.path.basename(root)}/\n")
            
            sub_indent = ' ' * 4 * (level + 1)
            for file in sorted(files):
                if not file.startswith('.'):
                    f.write(f"{sub_indent}📄 {file}\n")
        
        f.write("\n\n")
        
        # Sección 2: Archivos recientes
        f.write("2. ÚLTIMOS ARCHIVOS MODIFICADOS\n")
        f.write("=" * 80 + "\n\n")
        
        recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:recent_files_count]
        for file_path, mod_time in recent_files:
            rel_path = os.path.relpath(file_path, project_dir)
            f.write(f"📄 {rel_path}\n")
            f.write(f"   Última modificación: {format_datetime(mod_time)}\n\n")
        
        f.write("\n\n")
        
        # Sección 3: Contenido de los archivos
        f.write("3. CONTENIDO DE LOS ARCHIVOS\n")
        f.write("=" * 80 + "\n\n")
        
        for root, _, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
            
            for file in sorted(files):
                if file.startswith('.') or file == output_file:
                    continue
                
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, project_dir)
                
                if is_binary_file(file_path):
                    f.write(f"📄 {rel_path} (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)\n\n")
                    continue
                
                try:
                    # Intentar leer el archivo
                    with open(file_path, 'r', encoding='utf-8') as source_file:
                        content = source_file.read()
                        
                    f.write(f"📄 {rel_path}\n")
                    f.write("-" * 80 + "\n")
                    f.write(content)
                    f.write("\n\n")
                    f.write("-" * 80 + "\n\n")
                except Exception as e:
                    f.write(f"📄 {rel_path} (ERROR AL LEER: {str(e)})\n\n")
        
        # Sección 4: Resumen final
        f.write("4. RESUMEN DEL SISTEMA\n")
        f.write("=" * 80 + "\n\n")
        
        # Contar archivos por tipo
        file_types = {}
        total_files = 0
        total_lines = 0
        
        for root, _, files in os.walk(project_dir):
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
                
            for file in files:
                if file.startswith('.'):
                    continue
                    
                file_path = os.path.join(root, file)
                ext = get_file_extension(file_path)
                
                if ext not in file_types:
                    file_types[ext] = 0
                file_types[ext] += 1
                total_files += 1
                
                if not is_binary_file(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as source_file:
                            lines = len(source_file.readlines())
                            total_lines += lines
                    except:
                        pass
        
        f.write(f"Total de archivos: {total_files}\n")
        f.write(f"Total de líneas de código (aproximado): {total_lines}\n\n")
        
        f.write("Distribución por tipo de archivo:\n")
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
            if ext == '':
                ext = '(sin extensión)'
            f.write(f"  {ext}: {count} archivos\n")

if __name__ == "__main__":
    # Directorio del proyecto (directorio actual)
    project_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Nombre del archivo de salida
    output_file = os.path.join(project_dir, "resumen.txt")
    
    print(f"Generando informe del sistema en: {output_file}")
    print(f"Excluyendo entornos virtuales y sus librerías...")
    generate_system_report(project_dir, output_file)
    print(f"Informe completado. El archivo generado tiene un tamaño de: {os.path.getsize(output_file) / (1024*1024):.2f} MB")
    
    # Crear una copia adicional con los últimos 10 archivos modificados
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor'
    ]
    
    recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:10]
    recent_files_dir = os.path.join(project_dir, "ultimos_archivos_modificados")
    
    # Crear directorio si no existe
    if not os.path.exists(recent_files_dir):
        os.makedirs(recent_files_dir)
    
    # Copiar los archivos más recientes
    for file_path, _ in recent_files:
        if os.path.exists(file_path):
            # Crear estructura de directorios si es necesario
            rel_path = os.path.relpath(file_path, project_dir)
            dest_path = os.path.join(recent_files_dir, rel_path)
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
            
            # Copiar el archivo
            try:
                shutil.copy2(file_path, dest_path)
                print(f"Copiado: {rel_path}")
            except Exception as e:
                print(f"Error al copiar {rel_path}: {e}")
    
    print(f"Se han copiado los {len(recent_files)} archivos más recientes a: {recent_files_dir}") 

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\resumen.txt (ERROR AL LEER: )

📄 ultimos_archivos_modificados\instance\app.db (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 ultimos_archivos_modificados\logs\surveillance.log (ERROR AL LEER: 'utf-8' codec can't decode byte 0xf3 in position 783: invalid continuation byte)

📄 ultimos_archivos_modificados\src\camera_manager.py
--------------------------------------------------------------------------------
# src/camera_manager.py

import cv2
import requests
import json
import threading
import time
import socket
import subprocess
import logging
import os
from queue import Queue
from concurrent.futures import ThreadPoolExecutor
import platform

logger = logging.getLogger(__name__)

class CameraManager:
    """
    Gestor centralizado de cámaras que permite:
    - Descubrir cámaras automáticamente
    - Conectar con diferentes protocolos
    - Monitorear estado de la conexión
    - Distribuir frames a diferentes procesadores
    """
    
    def __init__(self, max_cameras=10):
        self.cameras = {}
        self.active_streams = {}
        self.frame_queues = {}
        self.max_cameras = max_cameras
        self.discovery_thread = None
        self.is_discovering = False
        
    def add_camera(self, camera_id, url, name=None, camera_type=None, credentials=None, parameters=None):
        """
        Agrega una cámara al gestor.
        
        Args:
            camera_id: Identificador único de la cámara
            url: URL de conexión (RTSP, HTTP, local device)
            name: Nombre descriptivo
            camera_type: Tipo de cámara (IP, USB, etc.)
            credentials: Diccionario con credenciales (usuario, contraseña)
            parameters: Parámetros adicionales
        """
        if len(self.cameras) >= self.max_cameras:
            logger.warning(f"Límite de cámaras alcanzado ({self.max_cameras})")
            return False
            
        # Preparar URL con credenciales si aplica
        connection_url = url
        if credentials and "://" in url:
            protocol, address = url.split("://", 1)
            if credentials.get('username') and credentials.get('password'):
                connection_url = f"{protocol}://{credentials['username']}:{credentials['password']}@{address}"
        
        self.cameras[camera_id] = {
            'id': camera_id,
            'name': name or f"Cámara {camera_id}",
            'url': url,
            'connection_url': connection_url,
            'type': camera_type or self._detect_camera_type(url),
            'credentials': credentials or {},
            'parameters': parameters or {},
            'status': 'inactive',
            'last_frame_time': None,
            'frame_count': 0,
            'fps': 0
        }
        
        return True
        
    def start_camera(self, camera_id):
        """Inicia el streaming de una cámara con manejo de errores mejorado."""
        if camera_id not in self.cameras:
            logger.error(f"Cámara {camera_id} no encontrada")
            return False
        
        if camera_id in self.active_streams:
            logger.info(f"Cámara {camera_id} ya está activa")
            return True
        
        camera = self.cameras[camera_id]
        camera['status'] = 'starting'
        
        # Implementar manejo de errores específicos de plataforma
        if platform.system() == 'Windows':
            # En Windows, intentar diferentes backends
            url = camera['connection_url']
            if isinstance(url, str) and url.isdigit():
                url = int(url)
            
            # Crear una cola para frames
            self.frame_queues[camera_id] = Queue(maxsize=30)
            
            # Iniciar thread de captura con mayor resiliencia
            thread = threading.Thread(
                target=self._windows_camera_worker,
                args=(camera_id, url),
                daemon=True
            )
            
            # Almacenar referencias
            self.active_streams[camera_id] = {
                'thread': thread,
                'active': True,
                'capture': None,  # Se manejará en el worker
                'fps': 0,
                'last_frame_time': 0
            }
            
            thread.start()
            camera['status'] = 'active'
            logger.info(f"Cámara {camera_id} iniciada (Windows)")
            return True
        else:
            # Crear cola para frames
            self.frame_queues[camera_id] = Queue(maxsize=30)
            
            # Iniciar thread de captura
            thread = threading.Thread(
                target=self._camera_stream_worker,
                args=(camera_id,),
                daemon=True
            )
            
            # Almacenar referencias
            self.active_streams[camera_id] = {
                'thread': thread,
                'active': True,
                'capture': None
            }
            
            thread.start()
            camera['status'] = 'connecting'
            
            return True
    
    def _windows_camera_worker(self, camera_id, url):
        """Worker especializado para cámaras en Windows con manejo de errores mejorado."""
        frame_queue = self.frame_queues[camera_id]
        stream_info = self.active_streams[camera_id]
        camera = self.cameras[camera_id]
        
        # Intentar abrir la cámara con diferentes backends
        capture = None
        backends = [
            {"source": url},
            {"source": url, "api": cv2.CAP_DSHOW},
            {"source": url, "api": cv2.CAP_MSMF},
            {"source": f"video={url}", "api": cv2.CAP_DSHOW}
        ]
        
        for backend in backends:
            try:
                if "api" in backend:
                    capture = cv2.VideoCapture(backend["source"], backend["api"])
                else:
                    capture = cv2.VideoCapture(backend["source"])
                    
                if capture.isOpened():
                    logger.info(f"Cámara {camera_id} abierta con éxito usando: {backend}")
                    break
                else:
                    logger.warning(f"No se pudo abrir cámara {camera_id} con: {backend}")
                    capture.release()
                    capture = None
            except Exception as e:
                logger.warning(f"Error al intentar abrir cámara {camera_id} con {backend}: {str(e)}")
                if capture:
                    capture.release()
                    capture = None
        
        if not capture or not capture.isOpened():
            logger.error(f"No se pudo conectar a cámara {camera_id} con ningún backend")
            self.cameras[camera_id]['status'] = 'error'
            stream_info['active'] = False
            return
        
        # Configurar captura para mejor rendimiento
        if isinstance(url, int):  # Solo para cámaras locales
            capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            capture.set(cv2.CAP_PROP_FPS, 30)
        
        stream_info['capture'] = capture
        self.cameras[camera_id]['status'] = 'active'
        
        # Para medir FPS
        frame_count = 0
        start_time = time.time()
        fps_update_interval = 1.0  # Actualizar FPS cada segundo
        
        # Control de reconexión
        max_failures = 5
        consecutive_failures = 0
        
        while stream_info['active']:
            try:
                ret, frame = capture.read()
                
                if not ret or frame is None:
                    consecutive_failures += 1
                    logger.warning(f"Fallo al leer frame ({consecutive_failures}/{max_failures})")
                    
                    if consecutive_failures >= max_failures:
                        logger.error(f"Demasiados fallos consecutivos, reiniciando cámara {camera_id}")
                        self.cameras[camera_id]['status'] = 'reconnecting'
                        
                        # Reiniciar captura
                        capture.release()
                        time.sleep(1)
                        
                        # Reabrir con el mismo método que funcionó antes
                        for backend in backends:
                            try:
                                if "api" in backend:
                                    capture = cv2.VideoCapture(backend["source"], backend["api"])
                                else:
                                    capture = cv2.VideoCapture(backend["source"])
                                    
                                if capture.isOpened():
                                    break
                                else:
                                    capture.release()
                            except:
                                pass
                        
                        if not capture or not capture.isOpened():
                            logger.error(f"Fallo al reconectar cámara {camera_id}")
                            self.cameras[camera_id]['status'] = 'error'
                            break
                            
                        stream_info['capture'] = capture
                        self.cameras[camera_id]['status'] = 'active'
                        consecutive_failures = 0
                        continue
                        
                    time.sleep(0.1)
                    continue
                    
                # Resetear contador de fallos cuando tenemos un frame exitoso
                consecutive_failures = 0
                
                # Actualizar contadores y estadísticas
                frame_count += 1
                current_time = time.time()
                elapsed = current_time - start_time
                
                # Actualizar FPS periódicamente
                if elapsed >= fps_update_interval:
                    fps = frame_count / elapsed
                    self.cameras[camera_id]['fps'] = fps
                    stream_info['fps'] = fps
                    self.cameras[camera_id]['frame_count'] += frame_count
                    
                    # Resetear contadores
                    frame_count = 0
                    start_time = current_time
                    
                self.cameras[camera_id]['last_frame_time'] = current_time
                
                # Añadir el frame a la grabación si está activa
                if hasattr(self, 'recorders') and camera_id in self.recorders:
                    self.add_frame_to_recording(camera_id, frame)
                
                # Poner frame en cola, descartar el más antiguo si está llena
                if frame_queue.full():
                    try:
                        frame_queue.get_nowait()
                    except:
                        pass
                    
                # Añadir nuevo frame a la cola
                try:
                    frame_queue.put_nowait({
                        'camera_id': camera_id,
                        'timestamp': current_time,
                        'frame': frame
                    })
                except:
                    pass
                
            except Exception as e:
                logger.error(f"Error en procesamiento de frame para cámara {camera_id}: {str(e)}")
                time.sleep(0.5)
            
        # Liberar recursos al terminar
        logger.info(f"Finalizando worker de cámara {camera_id}")
        if 'capture' in stream_info and stream_info['capture']:
            try:
                stream_info['capture'].release()
            except:
                pass
    
    def _camera_stream_worker(self, camera_id):
        """Worker para mantener el stream de una cámara."""
        camera = self.cameras[camera_id]
        stream_info = self.active_streams[camera_id]
        frame_queue = self.frame_queues[camera_id]
        
        # Intentar abrir la cámara
        capture = cv2.VideoCapture(camera['connection_url'])
        if not capture.isOpened():
            logger.error(f"No se pudo conectar a cámara {camera_id}: {camera['connection_url']}")
            self.cameras[camera_id]['status'] = 'error'
            stream_info['active'] = False
            return
            
        stream_info['capture'] = capture
        self.cameras[camera_id]['status'] = 'active'
        
        # Para medir FPS
        frame_count = 0
        start_time = time.time()
        
        while stream_info['active']:
            ret, frame = capture.read()
            
            if not ret:
                # Intentar reconectar
                logger.warning(f"Pérdida de conexión con cámara {camera_id}, intentando reconectar...")
                self.cameras[camera_id]['status'] = 'reconnecting'
                capture.release()
                time.sleep(2)  # Esperar antes de reconectar
                
                # Reintentar conexión
                capture = cv2.VideoCapture(camera['connection_url'])
                if not capture.isOpened():
                    logger.error(f"Fallo al reconectar cámara {camera_id}")
                    self.cameras[camera_id]['status'] = 'error'
                    break
                    
                stream_info['capture'] = capture
                self.cameras[camera_id]['status'] = 'active'
                continue
                
            # Actualizar contadores
            frame_count += 1
            current_time = time.time()
            elapsed = current_time - start_time
            
            # Actualizar FPS cada segundo
            if elapsed >= 1.0:
                self.cameras[camera_id]['fps'] = frame_count / elapsed
                self.cameras[camera_id]['frame_count'] += frame_count
                frame_count = 0
                start_time = current_time
                
            self.cameras[camera_id]['last_frame_time'] = current_time
            
            # Añadir el frame a la grabación si está activa
            if hasattr(self, 'recorders') and camera_id in self.recorders:
                self.add_frame_to_recording(camera_id, frame)
            
            # Poner frame en la cola, descartando el más antiguo si está llena
            if frame_queue.full():
                try:
                    frame_queue.get_nowait()
                except:
                    pass
                    
            try:
                frame_queue.put_nowait({
                    'camera_id': camera_id,
                    'timestamp': current_time,
                    'frame': frame
                })
            except:
                pass
        
        # Limpieza al finalizar
        if capture and capture.isOpened():
            capture.release()
            
        self.cameras[camera_id]['status'] = 'inactive'
    
    def get_frame(self, camera_id, wait=False):
        """
        Obtiene el último frame disponible de una cámara.
        
        Args:
            camera_id: ID de la cámara
            wait: Si es True, espera hasta que haya un frame disponible
            
        Returns:
            dict con el frame y metadatos, o None si no hay frames
        """
        if camera_id not in self.frame_queues:
            return None
            
        frame_queue = self.frame_queues[camera_id]
        
        if frame_queue.empty():
            if not wait:
                return None
                
        try:
            if wait:
                return frame_queue.get(timeout=2.0)
            else:
                return frame_queue.get_nowait()
        except:
            return None
    
    def stop_camera(self, camera_id):
        """Detiene el streaming de una cámara."""
        if camera_id not in self.active_streams:
            logger.warning(f"Cámara {camera_id} no está activa")
            return True
        
        # Marcar para detención
        self.active_streams[camera_id]['active'] = False
        
        # Esperar a que el thread termine
        max_wait = 5.0  # Segundos máximos a esperar
        start_time = time.time()
        
        while self.active_streams[camera_id]['thread'].is_alive():
            if time.time() - start_time > max_wait:
                logger.warning(f"Tiempo de espera agotado para detener cámara {camera_id}")
                break
            time.sleep(0.1)
        
        # Liberar recursos
        if 'capture' in self.active_streams[camera_id] and self.active_streams[camera_id]['capture']:
            self.active_streams[camera_id]['capture'].release()
        
        # Actualizar estado
        if camera_id in self.cameras:
            self.cameras[camera_id]['status'] = 'inactive'
        
        # Limpiar referencias
        if camera_id in self.frame_queues:
            # Vaciar la cola
            while not self.frame_queues[camera_id].empty():
                try:
                    self.frame_queues[camera_id].get_nowait()
                except:
                    pass
            del self.frame_queues[camera_id]
        
        del self.active_streams[camera_id]
        
        logger.info(f"Cámara {camera_id} detenida correctamente")
        return True
    
    def is_camera_active(self, camera_id):
        """Verifica si una cámara está activa."""
        return camera_id in self.active_streams and self.active_streams[camera_id]['active']
    
    def discover_cameras(self, methods=None, network_range=None):
        """
        Busca cámaras disponibles en la red o conectadas localmente.
        
        Args:
            methods: Lista de métodos de descubrimiento a usar
                     ('onvif', 'rtsp_scan', 'usb', 'ip_scan')
            network_range: Rango de red a escanear (ej: "192.168.1.0/24")
        
        Returns:
            list: Lista de cámaras descubiertas
        """
        if self.is_discovering:
            logger.warning("Ya hay un proceso de descubrimiento en curso")
            return []
            
        if not methods:
            methods = ['usb', 'onvif', 'rtsp_scan']
            
        if not network_range:
            # Intentar detectar la red local
            network_range = self._detect_local_network()
            
        self.is_discovering = True
        discovered = []
        
        # Iniciar en un thread para no bloquear
        self.discovery_thread = threading.Thread(
            target=self._discovery_worker,
            args=(methods, network_range, discovered),
            daemon=True
        )
        self.discovery_thread.start()
        
        return discovered
    
    def _discovery_worker(self, methods, network_range, results):
        """Worker para descubrimiento de cámaras."""
        logger.info(f"Iniciando descubrimiento de cámaras con métodos: {methods}")
        
        # Detectar cámaras USB
        if 'usb' in methods:
            usb_cameras = self.discover_usb_cameras()
            results.extend(usb_cameras)
            logger.info(f"Detectadas {len(usb_cameras)} cámaras USB")
            
        # Detectar cámaras ONVIF
        if 'onvif' in methods:
            try:
                onvif_cameras = self._discover_onvif_cameras(network_range)
                results.extend(onvif_cameras)
                logger.info(f"Detectadas {len(onvif_cameras)} cámaras ONVIF")
            except Exception as e:
                logger.error(f"Error en descubrimiento ONVIF: {str(e)}")
        
        # Escaneo básico de puertos RTSP
        if 'rtsp_scan' in methods and network_range:
            rtsp_cameras = self._scan_rtsp_cameras(network_range)
            results.extend(rtsp_cameras)
            logger.info(f"Detectadas {len(rtsp_cameras)} cámaras RTSP")
            
        logger.info(f"Descubrimiento finalizado. Total: {len(results)} cámaras")
        self.is_discovering = False
    
    def discover_usb_cameras(self):
        """Descubre cámaras USB conectadas al sistema (incluidas webcams integradas)."""
        discovered = []
        
        # Determinar sistema operativo para método de escaneo
        if platform.system() == 'Windows':
            # Método para Windows - probar hasta 10 índices
            for i in range(10):
                cap = cv2.VideoCapture(i, cv2.CAP_DSHOW)  # DirectShow en Windows para mejor detección
                if cap.isOpened():
                    # Obtener información de la cámara
                    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                    
                    # Intentar obtener nombre de dispositivo
                    try:
                        import win32com.client
                        wmi = win32com.client.GetObject("winmgmts:")
                        for device in wmi.InstancesOf("Win32_PnPEntity"):
                            if "camera" in device.Caption.lower() or "webcam" in device.Caption.lower():
                                name = device.Caption
                                break
                        else:
                            name = f"Cámara USB {i}"
                    except:
                        name = f"Cámara USB {i}"
                    
                    camera_info = {
                        'id': str(i),
                        'name': name,
                        'url': str(i),
                        'type': 'USB',
                        'resolution': f"{int(width)}x{int(height)}",
                        'is_integrated': i == 0  # Asumimos que índice 0 suele ser la webcam integrada
                    }
                    discovered.append(camera_info)
                    cap.release()
        
        elif platform.system() == 'Linux':
            # Método para Linux - escanear dispositivos en /dev/video*
            import glob
            devices = glob.glob('/dev/video*')
            
            for idx, device in enumerate(devices):
                try:
                    device_num = int(device.split('video')[1])
                    cap = cv2.VideoCapture(device_num)
                    if cap.isOpened():
                        # Obtener información de la cámara
                        width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                        height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                        
                        # Intentar obtener nombre de dispositivo desde udev
                        try:
                            import subprocess
                            cmd = f"udevadm info --name={device} | grep ID_MODEL="
                            result = subprocess.check_output(cmd, shell=True, text=True)
                            name = result.strip().split('=')[1].replace('_', ' ')
                        except:
                            name = f"Cámara Linux {device_num}"
                        
                        camera_info = {
                            'id': str(device_num),
                            'name': name,
                            'url': str(device_num),
                            'type': 'USB',
                            'resolution': f"{int(width)}x{int(height)}",
                            'is_integrated': 'integrated' in name.lower() or device_num == 0
                        }
                        discovered.append(camera_info)
                        cap.release()
                except Exception as e:
                    logger.warning(f"Error al comprobar dispositivo {device}: {str(e)}")
        
        else:  # macOS u otros
            # Método genérico - probar índices 0-5
            for i in range(5):
                cap = cv2.VideoCapture(i)
                if cap.isOpened():
                    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                    
                    camera_info = {
                        'id': str(i),
                        'name': f"Cámara {i}",
                        'url': str(i),
                        'type': 'USB',
                        'resolution': f"{int(width)}x{int(height)}",
                        'is_integrated': i == 0
                    }
                    discovered.append(camera_info)
                    cap.release()
        
        return discovered
    
    def _discover_onvif_cameras(self, network_range):
        """Detecta cámaras usando protocolo ONVIF."""
        # Esta implementación requiere instalar onvif-zeep-async o similar
        # Para simplificar, devolvemos una lista vacía
        return []
    
    def _scan_rtsp_cameras(self, network_range):
        """Escanea la red buscando servidores RTSP."""
        # Esta implementación requiere escaneo de puertos
        # Para simplificar, devolvemos una lista vacía
        return []
    
    def _detect_local_network(self):
        """Detecta la red local del servidor."""
        try:
            # Esta es una forma simple de obtener la IP local
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            
            # Construir rango /24 basado en la IP
            ip_parts = local_ip.split('.')
            network = f"{ip_parts[0]}.{ip_parts[1]}.{ip_parts[2]}.0/24"
            return network
        except:
            return "192.168.1.0/24"  # Red por defecto
    
    def _detect_camera_type(self, url):
        """Detecta el tipo de cámara basado en la URL."""
        if isinstance(url, int) or (isinstance(url, str) and url.isdigit()):
            return "USB"
        elif url.startswith("rtsp://"):
            return "RTSP"
        elif url.startswith("http://") or url.startswith("https://"):
            return "HTTP"
        else:
            return "Unknown"
    
    def get_status(self):
        """Devuelve el estado actual de todas las cámaras."""
        status = {
            'total_cameras': len(self.cameras),
            'active_cameras': len(self.active_streams),
            'discovering': self.is_discovering,
            'cameras': []
        }
        
        for camera_id, camera in self.cameras.items():
            camera_status = {
                'id': camera_id,
                'name': camera['name'],
                'type': camera['type'],
                'status': camera['status'],
                'fps': camera.get('fps', 0)
            }
            status['cameras'].append(camera_status)
            
        return status
    
    def start_recording(self, camera_id, output_path, fps=15, resolution=(640, 480)):
        """Inicia la grabación de video para una cámara específica"""
        try:
            if camera_id not in self.cameras:
                logger.error(f"Cámara {camera_id} no encontrada")
                return False
            
            if camera_id not in self.active_streams:
                logger.error(f"Cámara {camera_id} no está activa")
                return False
            
            # Verificar si ya hay una grabación en curso
            if hasattr(self, 'recorders') and camera_id in self.recorders:
                logger.warning(f"Ya existe una grabación para la cámara {camera_id}")
                return False
            
            # Inicializar diccionario de grabadoras si no existe
            if not hasattr(self, 'recorders'):
                self.recorders = {}
            
            # Configurar el escritor de video
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Códec MP4
            out = cv2.VideoWriter(output_path, fourcc, fps, resolution)
            
            # Guardar referencia
            self.recorders[camera_id] = {
                'writer': out,
                'start_time': time.time(),
                'frame_count': 0,
                'filepath': output_path
            }
            
            logger.info(f"Grabación iniciada para cámara {camera_id}: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"Error al iniciar grabación para cámara {camera_id}: {str(e)}")
            return False
        
    def stop_recording(self, camera_id):
        """Detiene la grabación de video para una cámara específica"""
        try:
            if not hasattr(self, 'recorders') or camera_id not in self.recorders:
                logger.warning(f"No hay grabación activa para la cámara {camera_id}")
                return False
            
            recorder = self.recorders[camera_id]
            
            # Detener el escritor de video
            recorder['writer'].release()
            
            # Calcular duración
            duration = time.time() - recorder['start_time']
            
            result = {
                'filepath': recorder['filepath'],
                'duration': duration,
                'frame_count': recorder['frame_count']
            }
            
            # Eliminar la referencia
            del self.recorders[camera_id]
            
            logger.info(f"Grabación detenida para cámara {camera_id}: {result['filepath']}")
            return result
            
        except Exception as e:
            logger.error(f"Error al detener grabación para cámara {camera_id}: {str(e)}")
            return False
        
    def add_frame_to_recording(self, camera_id, frame):
        """Añade un frame a la grabación en curso"""
        if hasattr(self, 'recorders') and camera_id in self.recorders:
            try:
                recorder = self.recorders[camera_id]
                
                # Redimensionar el frame si es necesario
                height, width = frame.shape[:2]
                writer = recorder['writer']
                writer_width = int(writer.get(cv2.CAP_PROP_FRAME_WIDTH))
                writer_height = int(writer.get(cv2.CAP_PROP_FRAME_HEIGHT))
                
                if width != writer_width or height != writer_height:
                    frame = cv2.resize(frame, (writer_width, writer_height))
                    
                # Escribir el frame
                recorder['writer'].write(frame)
                recorder['frame_count'] += 1
                return True
                
            except Exception as e:
                logger.error(f"Error al añadir frame a grabación para cámara {camera_id}: {str(e)}")
                
        return False

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\src\routes\api.py
--------------------------------------------------------------------------------
from flask import Blueprint, jsonify, request, Response
from src.database import db, Camera, Alert, DetectionEvent
from src.agent_manager import AgentManager
import logging
import time
import os
import cv2
import json
import threading
from datetime import datetime, timedelta
import platform
import psutil

api_bp = Blueprint('api', __name__)
logger = logging.getLogger(__name__)

def try_alternate_camera_sources(primary_source):
    """Intenta diferentes backend/APIs de OpenCV para abrir la cámara"""
    if isinstance(primary_source, int):
        # Para webcams, intentar diferentes backends
        alternate_sources = [
            primary_source,  # Original
            f"msmf:{primary_source}",  # Microsoft Media Foundation
            f"dshow:{primary_source}",  # DirectShow
            f"vfw:{primary_source}"     # Video for Windows
        ]
        
        for source in alternate_sources:
            try:
                cap = cv2.VideoCapture(source)
                if cap.isOpened():
                    logger.info(f"Cámara abierta con éxito usando fuente: {source}")
                    return cap
                cap.release()
            except Exception as e:
                logger.warning(f"Error intentando abrir cámara con fuente {source}: {str(e)}")
                
        # Último intento: especificar parámetros MSMF
        try:
            cap = cv2.VideoCapture(primary_source, cv2.CAP_MSMF)
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            cap.set(cv2.CAP_PROP_FPS, 30)
            if cap.isOpened():
                return cap
            cap.release()
        except:
            pass
            
    # Si todos los intentos fallan o no es un índice numérico, intentar con la fuente original
    return cv2.VideoCapture(primary_source)

@api_bp.route('/status')
def status():
    return jsonify({'status': 'online'})

@api_bp.route('/cameras', methods=['GET'])
def get_cameras():
    try:
        cameras = Camera.query.all()
        result = [{
            'id': camera.id,
            'name': camera.name,
            'url': camera.url,
            'location': camera.location,
            'active': camera.active
        } for camera in cameras]
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error al obtener cámaras: {str(e)}")
        return jsonify({'error': 'Error al obtener cámaras'}), 500

@api_bp.route('/cameras', methods=['POST'])
def add_camera():
    try:
        data = request.json
        camera = Camera(
            name=data.get('name'),
            url=data.get('url'),
            location=data.get('location', ''),
            active=data.get('active', True)
        )
        db.session.add(camera)
        db.session.commit()
        return jsonify({'id': camera.id, 'message': 'Cámara añadida correctamente'}), 201
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al añadir cámara: {str(e)}")
        return jsonify({'error': 'Error al añadir cámara'}), 500

@api_bp.route('/alerts', methods=['GET'])
def get_alerts():
    try:
        alerts = Alert.query.order_by(Alert.timestamp.desc()).limit(50).all()
        result = [{
            'id': alert.id,
            'camera_id': alert.camera_id,
            'timestamp': alert.timestamp.isoformat(),
            'alert_type': alert.alert_type,
            'severity': alert.severity,
            'description': alert.description,
            'resolved': alert.resolved
        } for alert in alerts]
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error al obtener alertas: {str(e)}")
        return jsonify({'error': 'Error al obtener alertas'}), 500

@api_bp.route('/alerts/<int:alert_id>/resolve', methods=['POST'])
def resolve_alert(alert_id):
    try:
        alert = Alert.query.get_or_404(alert_id)
        alert.resolved = True
        db.session.commit()
        return jsonify({'message': 'Alerta marcada como resuelta'})
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al resolver alerta: {str(e)}")
        return jsonify({'error': 'Error al resolver alerta'}), 500

@api_bp.route('/modes', methods=['GET'])
def get_modes():
    """Obtiene los modos de operación disponibles"""
    try:
        from src.modes_config import OPERATION_MODES
        
        # Obtener el modo actual
        current_mode = request.args.get('current', True)
        
        # Preparar respuesta
        response = {
            'modes': []
        }
        
        # Añadir información de cada modo
        for mode_id, mode_info in OPERATION_MODES.items():
            mode_data = {
                'id': mode_id,
                'name': mode_info['name'],
                'description': mode_info['description']
            }
            response['modes'].append(mode_data)
            
        # Si se solicitó, añadir información sobre el modo actual
        if current_mode:
            from src.operation_mode import OperationMode
            op_mode = OperationMode()
            response['current_mode'] = op_mode.get_current_mode()
            
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Error al obtener modos: {str(e)}")
        return jsonify({'error': 'Error al obtener modos de operación'}), 500

@api_bp.route('/modes/<mode_id>', methods=['POST'])
def set_mode(mode_id):
    """Cambia el modo de operación del sistema"""
    try:
        from src.modes_config import OPERATION_MODES
        from src.operation_mode import OperationMode
        from src.agent_manager import AgentManager
        
        # Verificar que el modo existe
        if mode_id not in OPERATION_MODES:
            return jsonify({'error': 'Modo de operación no válido'}), 400
            
        # Cambiar el modo
        op_mode = OperationMode()
        success = op_mode.set_mode(mode_id)
        
        if not success:
            return jsonify({'error': 'No se pudo cambiar el modo de operación'}), 500
            
        # Activar los agentes correspondientes
        agent_manager = AgentManager()
        agent_manager.activate_agents_for_mode(mode_id)
        
        return jsonify({
            'success': True,
            'mode': mode_id,
            'name': OPERATION_MODES[mode_id]['name'],
            'message': f'Modo cambiado a {OPERATION_MODES[mode_id]["name"]}'
        })
        
    except Exception as e:
        logger.error(f"Error al cambiar modo: {str(e)}")
        return jsonify({'error': 'Error al cambiar modo de operación'}), 500

@api_bp.route('/forensic/search', methods=['POST'])
def forensic_search():
    """Realiza una búsqueda forense de eventos"""
    try:
        from src.forensic_analysis import ForensicAnalysis
        
        # Obtener parámetros de búsqueda del cuerpo de la solicitud
        search_params = request.json or {}
        
        # Crear log detallado para diagnóstico
        logger.info(f"Búsqueda forense con parámetros: {search_params}")
        
        # Obtener límite y desplazamiento para paginación
        limit = int(search_params.get('limit', 50))
        offset = int(search_params.get('offset', 0))
        
        # Realizar búsqueda
        forensic = ForensicAnalysis()
        filters = search_params.get('filters', {})
        logger.info(f"Aplicando filtros: {filters}")
        
        results = forensic.search_events(
            filters=filters,
            limit=limit,
            offset=offset
        )
        
        return jsonify({
            'success': True,
            'count': len(results),
            'results': results
        })
        
    except Exception as e:
        logger.error(f"Error en búsqueda forense: {str(e)}", exc_info=True)
        return jsonify({'error': f'Error al realizar búsqueda forense: {str(e)}'}), 500

@api_bp.route('/forensic/test', methods=['GET'])
def forensic_test():
    """Endpoint de prueba para verificar que la API forense funciona"""
    return jsonify({
        'success': True,
        'message': 'API forense funcionando correctamente'
    })

@api_bp.route('/detectors', methods=['GET'])
def get_detectors():
    """Obtiene la lista de detectores disponibles y su estado"""
    try:
        # Datos de prueba para desarrollo
        mock_detectors = [
            "pose_detection",
            "fire_smoke_detection", 
            "water_flood_detection",
            "face_recognition"
        ]
        
        mock_stats = {
            "frames_processed": 1256,
            "detections": 345,
            "alerts_generated": 12,
            "avg_processing_time": 45.2,
            "max_processing_time": 120.5,
            "min_processing_time": 28.1,
            "queue_size": 0,
            "detectors": {
                "pose_detection": {
                    "interval": 0.5,
                    "last_execution": time.time() - 2.3,
                    "time_since_last": 2.3,
                    "active": True
                },
                "fire_smoke_detection": {
                    "interval": 1.0,
                    "last_execution": time.time() - 0.8,
                    "time_since_last": 0.8,
                    "active": True
                },
                "water_flood_detection": {
                    "interval": 2.0,
                    "last_execution": time.time() - 1.5,
                    "time_since_last": 1.5,
                    "active": False
                },
                "face_recognition": {
                    "interval": 1.5,
                    "last_execution": time.time() - 3.2,
                    "time_since_last": 3.2,
                    "active": True
                }
            }
        }
        
        return jsonify({
            'status': 'success',
            'detectors': mock_detectors,
            'stats': mock_stats,
            'async_mode': True,
            'active': True
        })
        
    except Exception as e:
        logger.error(f"Error al obtener detectores: {str(e)}")
        return jsonify({'error': 'Error al obtener detectores'}), 500

@api_bp.route('/detectors/<detector_id>/toggle', methods=['POST'])
def toggle_detector(detector_id):
    """Activa o desactiva un detector específico"""
    try:
        # Obtener estado solicitado
        data = request.json or {}
        active = data.get('active')
        
        if active is None:
            return jsonify({'error': 'Se requiere el parámetro "active"'}), 400
            
        # Para desarrollo, simplemente devuelve success
        return jsonify({
            'status': 'success',
            'detector_id': detector_id,
            'active': active,
            'message': f'Detector {detector_id} {"activado" if active else "desactivado"}'
        })
        
    except Exception as e:
        logger.error(f"Error al modificar detector: {str(e)}")
        return jsonify({'error': 'Error al modificar detector'}), 500

@api_bp.route('/system/hardware', methods=['GET'])
def get_hardware_info():
    """Obtiene información sobre el hardware del sistema"""
    try:
        from src.utils.hardware_detector import HardwareDetector
        
        detector = HardwareDetector()
        
        return jsonify({
            'status': 'success',
            'cpu': detector.cpu_info,
            'gpu': detector.gpu_info,
            'frameworks': {
                'tensorflow': detector.tensorflow_available,
                'pytorch': detector.torch_available,
                'onnx': detector.onnx_available
            }
        })
        
    except Exception as e:
        logger.error(f"Error al obtener información de hardware: {str(e)}")
        return jsonify({'error': 'Error al obtener información de hardware'}), 500

@api_bp.route('/system/hardware/optimize', methods=['POST'])
def optimize_hardware():
    """Optimiza la configuración para el hardware disponible"""
    try:
        from src.utils.hardware_detector import HardwareDetector
        
        # Obtener el framework a optimizar, si se especificó
        data = request.json or {}
        framework = data.get('framework')  # tensorflow, torch, onnx, o None para todos
        
        detector = HardwareDetector()
        config = detector.configure_for_optimal_performance(framework)
        
        return jsonify({
            'status': 'success',
            'message': 'Configuración optimizada aplicada',
            'configuration': config
        })
        
    except Exception as e:
        logger.error(f"Error al optimizar hardware: {str(e)}")
        return jsonify({'error': 'Error al optimizar hardware'}), 500

@api_bp.route('/cameras/discover', methods=['POST'])
def discover_cameras():
    """Descubre cámaras disponibles en el sistema y la red"""
    try:
        from src.camera_manager import CameraManager
        
        data = request.json or {}
        methods = data.get('methods', ['usb', 'onvif', 'rtsp_scan'])
        network_range = data.get('network_range')
        
        # Obtener o crear instancia de CameraManager
        camera_manager = _get_camera_manager()
        
        # Iniciar descubrimiento
        discovered = camera_manager.discover_cameras(
            methods=methods,
            network_range=network_range
        )
        
        return jsonify({
            'status': 'success',
            'message': 'Descubrimiento de cámaras iniciado',
            'discovery_status': camera_manager.is_discovering,
            'initial_results': discovered
        })
        
    except Exception as e:
        logger.error(f"Error al descubrir cámaras: {str(e)}")
        return jsonify({'error': 'Error al descubrir cámaras'}), 500

@api_bp.route('/cameras/status', methods=['GET'])
def get_cameras_status():
    """Obtiene el estado actual de todas las cámaras para actualización"""
    try:
        # Obtener todas las cámaras
        cameras = Camera.query.all()
        
        # Obtener estado desde CameraManager
        camera_manager = _get_camera_manager()
        manager_status = camera_manager.get_status()
        
        # Combinar información
        result = []
        
        for camera in cameras:
            # Obtener estadísticas del manager si está disponible
            stats = {}
            for cam_info in manager_status.get('cameras', []):
                if cam_info.get('id') == camera.id:
                    stats = {
                        'status': cam_info.get('status', 'unknown'),
                        'fps': cam_info.get('fps', 0)
                    }
                    break
            
            # Crear diccionario de cámara
            camera_info = {
                'id': camera.id,
                'name': camera.name,
                'location': camera.location,
                'url': camera.url,
                'active': camera.active,
                'stats': stats,
                'last_event': None
            }
            
            # Obtener último evento
            last_event = DetectionEvent.query.filter_by(
                camera_id=camera.id
            ).order_by(DetectionEvent.timestamp.desc()).first()
            
            if last_event:
                camera_info['last_event'] = {
                    'id': last_event.id,
                    'event_type': last_event.event_type,
                    'timestamp': last_event.timestamp.timestamp(),
                    'formatted_time': last_event.timestamp.strftime('%H:%M:%S')
                }
            
            result.append(camera_info)
        
        return jsonify({
            'status': 'success',
            'cameras': result,
            'total': len(result),
            'active': sum(1 for c in result if c['active']),
            'server_time': time.time()
        })
        
    except Exception as e:
        logger.error(f"Error al obtener estado de cámaras: {str(e)}")
        return jsonify({'error': f'Error al obtener estado: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/start', methods=['POST'])
def start_camera_stream(camera_id):
    """Inicia el streaming de una cámara"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Verificar si la cámara ya está activa para evitar errores
        camera_manager = _get_camera_manager()
        if camera_manager.is_camera_active(camera_id):
            logger.info(f"La cámara {camera_id} ya está activa")
            # Actualizar estado en la base de datos si no coincide
            if not camera.active:
                camera.active = True
                db.session.commit()
            
            return jsonify({
                'status': 'success',
                'message': f'Cámara {camera_id} ya estaba activa'
            })
        
        # Intentar iniciar la cámara con manejo de errores más robusto
        try:
            success = camera_manager.start_camera(camera_id)
            
            if success:
                # Actualizar estado en la base de datos
                camera.active = True
                db.session.commit()
                
                return jsonify({
                    'status': 'success',
                    'message': f'Cámara {camera_id} iniciada correctamente'
                })
            else:
                return jsonify({
                    'status': 'error',
                    'message': 'No se pudo iniciar la cámara'
                }), 500
        except Exception as camera_error:
            logger.error(f"Error específico al iniciar cámara {camera_id}: {str(camera_error)}")
            return jsonify({
                'status': 'error',
                'message': f'Error al iniciar cámara: {str(camera_error)}'
            }), 500
            
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error general al iniciar cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error al iniciar cámara: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/stop', methods=['POST'])
def stop_camera_stream(camera_id):
    """Detiene el streaming de una cámara"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Actualizar estado en la base de datos
        camera.active = False
        db.session.commit()
        
        # Detener la cámara en el CameraManager
        camera_manager = _get_camera_manager()
        success = camera_manager.stop_camera(camera_id)
        
        if not success:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo detener la cámara'
            }), 500
            
        return jsonify({
            'status': 'success',
            'message': f'Cámara {camera_id} detenida correctamente'
        })
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al detener cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error al detener cámara: {str(e)}'}), 500

@api_bp.route('/cameras/<camera_id>', methods=['DELETE'])
def remove_camera(camera_id):
    """Elimina una cámara del sistema"""
    try:
        # Verificar si la cámara existe en la base de datos
        camera = Camera.query.filter_by(id=camera_id).first()
        if not camera:
            return jsonify({'error': f'Cámara {camera_id} no encontrada'}), 404
        
        # Detener la cámara si está activa
        try:
            from src.camera_manager import CameraManager
            camera_manager = _get_camera_manager()
            if camera_id in camera_manager.active_streams:
                camera_manager.stop_camera(camera_id)
        except Exception as e:
            logger.warning(f"Error al detener cámara antes de eliminar: {str(e)}")
        
        # Eliminar de la base de datos
        db.session.delete(camera)
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': f'Cámara {camera_id} eliminada correctamente'
        })
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al eliminar cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error al eliminar cámara: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>', methods=['PUT'])
def update_camera(camera_id):
    """Actualiza una cámara existente"""
    try:
        camera = Camera.query.get_or_404(camera_id)
        data = request.json
        
        if 'name' in data:
            camera.name = data['name']
        if 'url' in data:
            camera.url = data['url']
        if 'location' in data:
            camera.location = data['location']
        if 'active' in data is not None:
            camera.active = data['active']
            
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': 'Cámara actualizada correctamente'
        })
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al actualizar cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error al actualizar cámara: {str(e)}'}), 500

# Función auxiliar para obtener o crear una instancia de CameraManager
def _get_camera_manager():
    """Obtiene o crea una instancia de CameraManager"""
    # En una aplicación real, esto podría ser un singleton o estar en el contexto de la aplicación
    from src.camera_manager import CameraManager
    from flask import current_app
    
    if not hasattr(current_app, 'camera_manager'):
        current_app.camera_manager = CameraManager()
        
        # Cargar cámaras existentes desde la base de datos
        cameras = Camera.query.all()
        for camera in cameras:
            # Convertir a int si es un número para webcams
            url = camera.url
            if url.isdigit():
                url = int(url)
                
            current_app.camera_manager.add_camera(
                camera_id=str(camera.id),
                url=url,
                name=camera.name,
                camera_type=None,  # Se detectará automáticamente
                parameters={'location': camera.location}
            )
    
    return current_app.camera_manager

@api_bp.route('/system/diagnostics', methods=['GET'])
def run_diagnostics():
    """Ejecuta diagnósticos del sistema"""
    try:
        # Importar aquí para evitar dependencias circulares
        import importlib.util
        import sys
        import os
        
        # Preparar ruta al módulo de diagnóstico - CORREGIR RUTA
        module_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), 
                                  'tools/module_checker.py')
        
        # Verificar si el archivo existe
        if not os.path.exists(module_path):
            return jsonify({
                'error': f'No se encuentra el archivo de diagnóstico: {module_path}'
            }), 404
            
        # Cargar y ejecutar el módulo
        spec = importlib.util.spec_from_file_location("module_checker", module_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules["module_checker"] = module
        spec.loader.exec_module(module)
        
        # Ejecutar diagnóstico
        results = module.check_modules(verbose=False)
        report = module.generate_report(results)
        
        return jsonify({
            'status': 'success',
            'diagnostics': report
        })
        
    except Exception as e:
        logger.error(f"Error al ejecutar diagnósticos: {str(e)}")
        return jsonify({'error': f'Error al ejecutar diagnósticos: {str(e)}'}), 500

@api_bp.route('/cameras/test', methods=['POST'])
def test_camera():
    """Realiza una prueba rápida de conexión a una cámara"""
    try:
        data = request.json
        logger.debug(f"Datos recibidos en /cameras/test: {data}")
        
        if not data:
            logger.warning("No se proporcionaron datos en la solicitud")
            return jsonify({'error': 'No se proporcionó información para la prueba'}), 400
            
        # Compatibilidad con ambos formatos
        camera_url = data.get('url') or data.get('camera_url')
        logger.debug(f"URL de cámara extraída: {camera_url}")
        
        if not camera_url:
            logger.warning("No se proporcionó URL de cámara")
            return jsonify({'error': 'Se requiere URL de cámara'}), 400
            
        # Si es un índice numérico, convertir a entero
        if isinstance(camera_url, str) and camera_url.isdigit():
            camera_url = int(camera_url)
            
        # Intentar abrir la cámara
        cap = cv2.VideoCapture(camera_url)
        if not cap.isOpened():
            return jsonify({
                'status': 'error',
                'message': 'No se pudo conectar a la cámara',
                'details': 'La cámara no pudo ser abierta con la URL proporcionada'
            }), 400
            
        # Capturar un frame
        ret, frame = cap.read()
        cap.release()
        
        if not ret:
            return jsonify({
                'status': 'error',
                'message': 'Conexión establecida pero no se pudo obtener imagen',
                'details': 'La cámara se conectó pero no devolvió frames'
            }), 400
            
        # Obtener información
        height, width = frame.shape[:2]
        
        # Guardar captura de prueba
        test_dir = 'test_captures'
        if not os.path.exists(test_dir):
            os.makedirs(test_dir)
            
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"test_{timestamp}.jpg"
        filepath = os.path.join(test_dir, filename)
        
        cv2.imwrite(filepath, frame)
        
        return jsonify({
            'status': 'success',
            'message': 'Cámara probada correctamente',
            'resolution': f"{width}x{height}",
            'test_image': f"/test_captures/{filename}"
        })
        
    except Exception as e:
        logger.error(f"Error al probar cámara: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error al probar cámara: {str(e)}',
            'details': str(e)
        }), 500

@api_bp.route('/cameras/test/<test_id>/stop', methods=['POST'])
def stop_camera_test(test_id):
    """Detiene una prueba de cámara"""
    try:
        if not hasattr(current_app, 'camera_testers') or test_id not in current_app.camera_testers:
            return jsonify({'error': 'Test no encontrado'}), 404
            
        tester = current_app.camera_testers[test_id]
        tester.stop_test()
        
        # Eliminar referencia
        del current_app.camera_testers[test_id]
        
        return jsonify({
            'status': 'success',
            'message': 'Prueba de cámara detenida'
        })
        
    except Exception as e:
        logger.error(f"Error al detener test de cámara: {str(e)}")
        return jsonify({'error': f'Error al detener test: {str(e)}'}), 500

@api_bp.route('/cameras/test/<test_id>/captures', methods=['GET'])
def get_test_captures(test_id):
    """Obtiene las capturas guardadas de un test"""
    try:
        if not hasattr(current_app, 'camera_testers') or test_id not in current_app.camera_testers:
            return jsonify({'error': 'Test no encontrado'}), 404
            
        tester = current_app.camera_testers[test_id]
        save_dir = tester.save_dir
        
        # Listar archivos en el directorio
        captures = []
        if os.path.exists(save_dir):
            for filename in os.listdir(save_dir):
                if filename.endswith('.jpg') and not filename.endswith('_thumbnail.jpg'):
                    file_path = os.path.join(save_dir, filename)
                    
                    # Verificar si hay un JSON asociado
                    json_path = file_path.replace('.jpg', '_detections.json')
                    has_detections = os.path.exists(json_path)
                    
                    # Crear thumbnail si no existe
                    thumbnail_path = file_path.replace('.jpg', '_thumbnail.jpg')
                    if not os.path.exists(thumbnail_path):
                        try:
                            # Crear thumbnail
                            img = cv2.imread(file_path)
                            height, width = img.shape[:2]
                            max_size = 320
                            
                            # Redimensionar manteniendo proporción
                            if height > width:
                                new_height = max_size
                                new_width = int(width * (max_size / height))
                            else:
                                new_width = max_size
                                new_height = int(height * (max_size / width))
                                
                            resized = cv2.resize(img, (new_width, new_height))
                            cv2.imwrite(thumbnail_path, resized)
                        except:
                            pass
                    
                    # Añadir a la lista
                    captures.append({
                        'filename': filename,
                        'path': f'/test_captures/{filename}',
                        'thumbnail': f'/test_captures/{os.path.basename(thumbnail_path)}',
                        'has_detections': has_detections,
                        'timestamp': os.path.getmtime(file_path)
                    })
                    
        # Ordenar por timestamp (más reciente primero)
        captures.sort(key=lambda x: x['timestamp'], reverse=True)
                    
        return jsonify({
            'status': 'success',
            'captures': captures
        })
        
    except Exception as e:
        logger.error(f"Error al obtener capturas de test: {str(e)}")
        return jsonify({'error': f'Error al obtener capturas: {str(e)}'}), 500

@api_bp.route('/system/hardware/nvidia', methods=['GET'])
def get_nvidia_info():
    """Obtiene información detallada sobre GPUs NVIDIA"""
    try:
        from src.utils.hardware_detector import HardwareDetector
        
        detector = HardwareDetector()
        nvidia_gpus = detector._detect_nvidia_gpu()
        
        if not nvidia_gpus:
            return jsonify({
                'status': 'not_available',
                'message': 'No se detectaron GPUs NVIDIA en el sistema'
            })
        
        return jsonify({
            'status': 'success',
            'nvidia_gpus': nvidia_gpus,
            'count': len(nvidia_gpus)
        })
        
    except Exception as e:
        logger.error(f"Error al obtener información de NVIDIA: {str(e)}")
        return jsonify({'error': f'Error al obtener información de NVIDIA: {str(e)}'}), 500

@api_bp.route('/system/hardware/optimize/nvidia', methods=['POST'])
def optimize_for_nvidia():
    """Optimiza el sistema específicamente para GPUs NVIDIA GeForce"""
    try:
        from src.utils.hardware_detector import HardwareDetector
        
        detector = HardwareDetector()
        config = detector.configure_for_geforce()
        
        if config['status'] == 'not_available':
            return jsonify({
                'status': 'not_available',
                'message': 'No se detectaron GPUs NVIDIA GeForce en el sistema'
            })
        
        return jsonify({
            'status': 'success',
            'message': 'Sistema optimizado para NVIDIA GeForce',
            'configuration': config
        })
        
    except Exception as e:
        logger.error(f"Error al optimizar para NVIDIA: {str(e)}")
        return jsonify({'error': f'Error al optimizar para NVIDIA: {str(e)}'}), 500

@api_bp.route('/cameras/discover/usb', methods=['GET'])
def discover_usb_cameras():
    """Descubre cámaras USB conectadas al sistema (incluidas webcams integradas)"""
    try:
        from src.camera_manager import CameraManager
        
        # Obtener o crear instancia de CameraManager
        camera_manager = _get_camera_manager()
        
        # Descubrir cámaras USB
        discovered = camera_manager.discover_usb_cameras()
        
        return jsonify({
            'status': 'success',
            'cameras': discovered,
            'count': len(discovered)
        })
        
    except Exception as e:
        logger.error(f"Error al descubrir cámaras USB: {str(e)}")
        return jsonify({'error': f'Error al descubrir cámaras USB: {str(e)}'}), 500

@api_bp.route('/camera/<int:camera_id>/stream', methods=['GET'])
def camera_stream(camera_id):
    """Transmite el stream de video de una cámara en formato MJPEG"""
    try:
        # Verificar si existe la cámara
        camera = Camera.query.get_or_404(camera_id)
        
        # Obtener la URL de la cámara antes de entrar al generador
        camera_url = camera.url
        # Convertir a número si es un índice
        if camera_url.isdigit():
            camera_url = int(camera_url)
            
        # Parámetros para el stream
        width = request.args.get('width', 640, type=int)
        height = request.args.get('height', 480, type=int)
        fps_limit = request.args.get('fps', 15, type=int)
        
        # Crear función de generación de frames que no dependa de current_app
        def generate():
            # Intentar abrir la cámara directamente
            cap = try_alternate_camera_sources(camera_url)
            
            if not cap.isOpened():
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n'
                       b'Error: No se pudo conectar a la camara\r\n\r\n')
                return
                
            # Control de FPS
            min_interval = 1.0 / fps_limit
            last_frame_time = 0
            
            try:
                while True:
                    # Control de FPS
                    current_time = time.time()
                    if current_time - last_frame_time < min_interval:
                        time.sleep(0.01)
                        continue
                        
                    # Leer frame
                    ret, frame = cap.read()
                    if not ret or frame is None:
                        logger.warning(f"Error al leer el frame de la cámara {camera_id}")
                        yield (b'--frame\r\n'
                               b'Content-Type: image/jpeg\r\n\r\n'
                               b'Error: No frame available\r\n\r\n')
                        time.sleep(0.5)
                        continue
                    
                    # Redimensionar si es necesario
                    if width and height:
                        frame = cv2.resize(frame, (width, height))
                        
                    # Convertir a JPEG
                    _, jpeg = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 85])
                    
                    last_frame_time = current_time
                    
                    # Enviar frame
                    yield (b'--frame\r\n'
                           b'Content-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n')
            finally:
                # Asegurarse de liberar la cámara
                cap.release()
                
        # Devolver el stream como respuesta MJPEG
        return Response(generate(),
                       mimetype='multipart/x-mixed-replace; boundary=frame')
        
    except Exception as e:
        logger.error(f"Error en stream de cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error en stream: {str(e)}'}), 500

@api_bp.route('/camera/<int:camera_id>/snapshot', methods=['POST'])
def capture_snapshot(camera_id):
    """Captura una instantánea de la cámara"""
    try:
        # Verificar si existe la cámara
        camera = Camera.query.get_or_404(camera_id)
        
        # Comprobar si el directorio existe antes de intentar cualquier cosa
        save_dir = 'snapshots'
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
            
        # Verificar si la cámara está activa
        camera_manager = _get_camera_manager()
        
        if not camera_manager.is_camera_active(camera_id):
            # Intentar iniciar la cámara para la captura
            try:
                logger.info(f"Intentando iniciar cámara {camera_id} para captura")
                camera_manager.start_camera(camera_id)
                # Pequeña espera para que la cámara se inicialice
                time.sleep(2)
            except Exception as cam_error:
                logger.error(f"No se pudo iniciar la cámara para captura: {str(cam_error)}")
                return jsonify({'error': 'No se pudo iniciar la cámara para captura'}), 400
                
        # Intentar obtener un frame con tiempo de espera
        max_attempts = 3
        frame_data = None
        
        for attempt in range(max_attempts):
            frame_data = camera_manager.get_frame(camera_id, wait=True)
            if frame_data:
                break
            time.sleep(0.5)  # Esperar antes del siguiente intento
            
        if not frame_data:
            logger.error(f"No se pudo obtener imagen de la cámara {camera_id} después de {max_attempts} intentos")
            return jsonify({'error': 'No se pudo obtener imagen de la cámara'}), 400
            
        frame = frame_data['frame']
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"camera_{camera_id}_{timestamp}.jpg"
        filepath = os.path.join(save_dir, filename)
        
        # Guardar imagen
        cv2.imwrite(filepath, frame)
        
        # Crear registro de evento sin intentar procesar detecciones si hay error
        event = DetectionEvent(
            camera_id=camera_id,
            event_type="snapshot",
            timestamp=datetime.now(),
            details=json.dumps({
                'filename': filename,
                'path': filepath
            })
        )
        
        db.session.add(event)
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'filename': filename,
            'path': f"/{save_dir}/{filename}"
        })
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al capturar instantánea: {str(e)}")
        return jsonify({'error': f'Error al capturar instantánea: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/record/start', methods=['POST'])
def start_camera_recording(camera_id):
    """Inicia la grabación de video de una cámara"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Verificar si la cámara está activa
        camera_manager = _get_camera_manager()
        if not camera_manager.is_camera_active(camera_id):
            return jsonify({
                'status': 'error',
                'message': 'La cámara no está activa'
            }), 400
            
        # Directorio para grabaciones
        recordings_dir = 'recordings'
        if not os.path.exists(recordings_dir):
            os.makedirs(recordings_dir)
            
        # Nombre de archivo con timestamp
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"cam_{camera_id}_{timestamp}.mp4"
        filepath = os.path.join(recordings_dir, filename)
        
        # Iniciar grabación
        success = camera_manager.start_recording(camera_id, filepath)
        
        if success:
            # Crear evento de sistema
            event = DetectionEvent(
                camera_id=camera_id,
                event_type="recording_start",
                timestamp=datetime.now(),
                details=json.dumps({
                    'filename': filename,
                    'path': filepath
                })
            )
            db.session.add(event)
            db.session.commit()
            
            return jsonify({
                'status': 'success',
                'message': 'Grabación iniciada',
                'filename': filename,
                'path': f"/recordings/{filename}"
            })
        else:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo iniciar la grabación'
            }), 500
            
    except Exception as e:
        logger.error(f"Error al iniciar grabación: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error al iniciar grabación: {str(e)}'
        }), 500

@api_bp.route('/cameras/<int:camera_id>/record/stop', methods=['POST'])
def stop_camera_recording(camera_id):
    """Detiene la grabación de video de una cámara"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Detener grabación
        camera_manager = _get_camera_manager()
        result = camera_manager.stop_recording(camera_id)
        
        if result and 'filepath' in result:
            # Crear evento de sistema
            event = DetectionEvent(
                camera_id=camera_id,
                event_type="recording_stop",
                timestamp=datetime.now(),
                details=json.dumps({
                    'filename': os.path.basename(result['filepath']),
                    'path': result['filepath'],
                    'duration': result.get('duration', 0)
                })
            )
            db.session.add(event)
            db.session.commit()
            
            return jsonify({
                'status': 'success',
                'message': 'Grabación detenida',
                'filename': os.path.basename(result['filepath']),
                'path': f"/recordings/{os.path.basename(result['filepath'])}",
                'duration': result.get('duration', 0)
            })
        else:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo detener la grabación o no hay grabación activa'
            }), 400
            
    except Exception as e:
        logger.error(f"Error al detener grabación: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error al detener grabación: {str(e)}'
        }), 500

@api_bp.route('/cameras/<int:camera_id>/capture-detection', methods=['POST'])
def capture_detection_snapshot(camera_id):
    """Captura una instantánea con anotaciones de detección"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Verificar si la cámara está activa
        camera_manager = _get_camera_manager()
        if not camera_manager.is_camera_active(camera_id):
            return jsonify({
                'status': 'error',
                'message': 'La cámara no está activa'
            }), 400
            
        # Obtener un frame
        frame_data = camera_manager.get_frame(camera_id, wait=True)
        if not frame_data:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo obtener frame de la cámara'
            }), 400
            
        # Obtener parámetros de detección
        data = request.json or {}
        detectors = data.get('detectors', ['pose', 'fire', 'water', 'face'])
        
        # Inicializar el detector
        from src.ai_modules.detection_manager import AdvancedDetectionManager
        detector = AdvancedDetectionManager()
        
        # Procesar frame con detectores
        frame = frame_data['frame']
        detection_results = {}
        detection_image = frame.copy()
        
        # Realizar detecciones y dibujar resultados
        for detector_type in detectors:
            if detector_type == 'pose':
                results = detector.process_pose(frame)
                detection_results['pose'] = results
                # Dibujar resultados
                for person in results:
                    if 'bbox' in person:
                        x, y, w, h = person['bbox']
                        cv2.rectangle(detection_image, (x, y), (x+w, y+h), (0, 255, 0), 2)
                        confidence = person.get('confidence', 0)
                        cv2.putText(detection_image, f"Person: {confidence:.2f}", 
                                   (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
            elif detector_type == 'fire':
                results = detector.process_fire(frame)
                detection_results['fire'] = results
                # Dibujar resultados
                if results.get('detected', False):
                    cv2.putText(detection_image, f"FIRE DETECTED! ({results.get('confidence', 0):.2f})", 
                               (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                
            elif detector_type == 'water':
                results = detector.process_water(frame)
                detection_results['water'] = results
                # Dibujar resultados
                if results.get('detected', False):
                    cv2.putText(detection_image, f"WATER DETECTED! ({results.get('confidence', 0):.2f})", 
                               (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
                
            elif detector_type == 'face':
                results = detector.process_face(frame)
                detection_results['face'] = results
                # Dibujar resultados
                for face in results:
                    if 'bbox' in face:
                        x, y, w, h = face['bbox']
                        cv2.rectangle(detection_image, (x, y), (x+w, y+h), (255, 0, 255), 2)
                        name = face.get('name', 'Unknown')
                        confidence = face.get('confidence', 0)
                        cv2.putText(detection_image, f"{name}: {confidence:.2f}", 
                                   (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 255), 2)
        
        # Guardar las imágenes
        snapshots_dir = 'detection_snapshots'
        if not os.path.exists(snapshots_dir):
            os.makedirs(snapshots_dir)
            
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Guardar frame original
        orig_filename = f"original_{camera_id}_{timestamp}.jpg"
        orig_filepath = os.path.join(snapshots_dir, orig_filename)
        cv2.imwrite(orig_filepath, frame)
        
        # Guardar imagen con detecciones
        det_filename = f"detection_{camera_id}_{timestamp}.jpg"
        det_filepath = os.path.join(snapshots_dir, det_filename)
        cv2.imwrite(det_filepath, detection_image)
        
        # Crear evento
        event = DetectionEvent(
            camera_id=camera_id,
            event_type="detection_snapshot",
            timestamp=datetime.now(),
            details=json.dumps({
                'original_image': orig_filename,
                'detection_image': det_filename,
                'detections': detection_results
            })
        )
        db.session.add(event)
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': 'Captura con detecciones guardada',
            'original_image': f"/{snapshots_dir}/{orig_filename}",
            'detection_image': f"/{snapshots_dir}/{det_filename}",
            'timestamp': timestamp,
            'detections': detection_results
        })
        
    except Exception as e:
        logger.error(f"Error al capturar instantánea con detecciones: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error al capturar instantánea: {str(e)}'
        }), 500

@api_bp.route('/detectors/<detector_type>/enable', methods=['POST'])
def enable_detector(detector_type):
    """Habilita un detector específico para una cámara"""
    try:
        # Verificar parámetros
        camera_id = request.args.get('camera_id', type=int)
        if not camera_id:
            return jsonify({'error': 'Se requiere ID de cámara'}), 400
            
        # Verificar que la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Verificar tipo de detector válido
        valid_detectors = ['pose', 'fire', 'water', 'face', 'all']
        if detector_type not in valid_detectors:
            return jsonify({'error': f'Tipo de detector no válido: {detector_type}'}), 400
            
        # Activar detector
        from src.ai_modules.detection_manager import AdvancedDetectionManager
        detector_manager = AdvancedDetectionManager()
        
        # Almacenar la configuración para esta cámara
        if not hasattr(current_app, 'active_detectors'):
            current_app.active_detectors = {}
            
        if camera_id not in current_app.active_detectors:
            current_app.active_detectors[camera_id] = {}
            
        current_app.active_detectors[camera_id][detector_type] = {
            'active': True,
            'last_results': None,
            'start_time': time.time()
        }
        
        # Iniciar detección si la cámara está activa
        camera_manager = _get_camera_manager()
        if not camera_manager.is_camera_active(camera_id):
            camera_manager.start_camera(camera_id)
            
        # Iniciar thread de detección si no está en ejecución
        if not hasattr(current_app, 'detection_threads'):
            current_app.detection_threads = {}
            
        if camera_id not in current_app.detection_threads or not current_app.detection_threads[camera_id].is_alive():
            detection_thread = threading.Thread(
                target=_detection_worker,
                args=(camera_id, detector_manager),
                daemon=True
            )
            current_app.detection_threads[camera_id] = detection_thread
            detection_thread.start()
            
        return jsonify({
            'status': 'success',
            'message': f'Detector {detector_type} habilitado para cámara {camera_id}',
            'camera_id': camera_id,
            'detector': detector_type
        })
        
    except Exception as e:
        logger.error(f"Error al habilitar detector {detector_type}: {str(e)}")
        return jsonify({'error': f'Error al habilitar detector: {str(e)}'}), 500

@api_bp.route('/detectors/<detector_type>/disable', methods=['POST'])
def disable_detector(detector_type):
    """Deshabilita un detector específico para una cámara"""
    try:
        # Verificar parámetros
        camera_id = request.args.get('camera_id', type=int)
        if not camera_id:
            return jsonify({'error': 'Se requiere ID de cámara'}), 400
            
        # Verificar que la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Desactivar detector
        if hasattr(current_app, 'active_detectors') and camera_id in current_app.active_detectors:
            if detector_type in current_app.active_detectors[camera_id]:
                current_app.active_detectors[camera_id][detector_type]['active'] = False
                del current_app.active_detectors[camera_id][detector_type]
                
                # Si no hay más detectores activos, detener el thread
                if not current_app.active_detectors[camera_id]:
                    if hasattr(current_app, 'detection_threads') and camera_id in current_app.detection_threads:
                        # No podemos detener threads directamente en Python
                        # El thread terminará automáticamente cuando verifique que no hay detectores activos
                        pass
            
        return jsonify({
            'status': 'success',
            'message': f'Detector {detector_type} deshabilitado para cámara {camera_id}',
            'camera_id': camera_id,
            'detector': detector_type
        })
        
    except Exception as e:
        logger.error(f"Error al deshabilitar detector {detector_type}: {str(e)}")
        return jsonify({'error': f'Error al deshabilitar detector: {str(e)}'}), 500

@api_bp.route('/detectors/<detector_type>/results', methods=['GET'])
def get_detector_results(detector_type):
    """Obtiene los resultados más recientes de un detector"""
    try:
        # Verificar parámetros
        camera_id = request.args.get('camera_id', type=int)
        if not camera_id:
            return jsonify({'error': 'Se requiere ID de cámara'}), 400
            
        # Verificar que hay resultados disponibles
        if not hasattr(current_app, 'active_detectors') or \
           camera_id not in current_app.active_detectors or \
           detector_type not in current_app.active_detectors[camera_id]:
            return jsonify({
                'status': 'inactive',
                'message': f'Detector {detector_type} no está activo para cámara {camera_id}'
            })
            
        # Obtener resultados
        detector_info = current_app.active_detectors[camera_id][detector_type]
        
        return jsonify({
            'status': 'success',
            'camera_id': camera_id,
            'detector': detector_type,
            'results': detector_info.get('last_results'),
            'processing_time': detector_info.get('processing_time', 0),
            'last_update': time.time() - detector_info.get('last_update', 0)
        })
        
    except Exception as e:
        logger.error(f"Error al obtener resultados de detector {detector_type}: {str(e)}")
        return jsonify({'error': f'Error al obtener resultados: {str(e)}'}), 500

def _detection_worker(camera_id, detector_manager):
    """Worker para detecciones en segundo plano"""
    from flask import current_app
    
    # Crear un contexto de aplicación para este thread
    with current_app.app_context():
        try:
            logger.info(f"Iniciando worker de detección para cámara {camera_id}")
            camera_manager = _get_camera_manager()
            
            while (hasattr(current_app, 'active_detectors') and 
                   camera_id in current_app.active_detectors and 
                   any(detector['active'] for detector in current_app.active_detectors[camera_id].values())):
                
                # Obtener frame actual
                frame_data = camera_manager.get_frame(camera_id, wait=True)
                if not frame_data:
                    time.sleep(0.1)
                    continue
                    
                frame = frame_data['frame']
                
                # Procesar con cada detector activo
                for detector_type, detector_info in current_app.active_detectors[camera_id].items():
                    if not detector_info['active']:
                        continue
                        
                    start_time = time.time()
                    
                    try:
                        # Procesar según tipo de detector
                        if detector_type == 'pose':
                            results = detector_manager.process_pose(frame)
                        elif detector_type == 'fire':
                            results = detector_manager.process_fire(frame)
                        elif detector_type == 'water':
                            results = detector_manager.process_water(frame)
                        elif detector_type == 'face':
                            results = detector_manager.process_face(frame)
                        elif detector_type == 'all':
                            results = detector_manager.process_all(frame)
                        else:
                            results = None
                            
                        # Actualizar resultados
                        processing_time = time.time() - start_time
                        
                        detector_info['last_results'] = results
                        detector_info['last_update'] = time.time()
                        detector_info['processing_time'] = processing_time
                        
                        # Crear alerta si se detectó algo de interés
                        if results and _should_create_alert(detector_type, results):
                            _create_detection_alert(camera_id, detector_type, results)
                            
                    except Exception as e:
                        logger.error(f"Error en procesamiento de {detector_type} para cámara {camera_id}: {str(e)}")
                
                # Esperar antes del siguiente procesamiento
                time.sleep(0.1)
                
        except Exception as e:
            logger.error(f"Error en detection worker para cámara {camera_id}: {str(e)}")

def _should_create_alert(detector_type, results):
    """Determina si se debe crear una alerta basada en los resultados de detección"""
    if detector_type == 'fire' and results.get('detected') == True:
        return True
    elif detector_type == 'water' and results.get('detected') == True:
        return True
    elif detector_type == 'pose' and any(pose.get('confidence', 0) > 0.7 for pose in results):
        return True
    
    return False

def _create_detection_alert(camera_id, detector_type, results):
    """Crea una alerta basada en la detección"""
    try:
        # Obtener cámara
        camera = Camera.query.get(camera_id)
        if not camera:
            return
            
        # Determinar tipo y severidad
        alert_type = f"{detector_type}_detection"
        severity = "high" if detector_type in ['fire', 'water'] else "medium"
        
        # Crear descripción
        if detector_type == 'fire':
            description = f"Posible fuego detectado en {camera.name} ({camera.location})"
        elif detector_type == 'water':
            description = f"Posible inundación detectada en {camera.name} ({camera.location})"
        elif detector_type == 'pose':
            poses = [pose['posture'] for pose in results if pose.get('confidence', 0) > 0.7]
            description = f"Postura sospechosa detectada en {camera.name}: {', '.join(poses)}"
        else:
            description = f"Detección de {detector_type} en {camera.name}"
            
        # Guardar captura para evidencia
        camera_manager = _get_camera_manager()
        frame_data = camera_manager.get_frame(camera_id, wait=True)
        
        image_path = None
        if frame_data:
            save_dir = 'alert_captures'
            if not os.path.exists(save_dir):
                os.makedirs(save_dir)
                
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"alert_{camera_id}_{detector_type}_{timestamp}.jpg"
            filepath = os.path.join(save_dir, filename)
            
            cv2.imwrite(filepath, frame_data['frame'])
            image_path = f"/{save_dir}/{filename}"
            
        # Crear alerta
        alert = Alert(
            camera_id=camera_id,
            timestamp=datetime.now(),
            alert_type=alert_type,
            severity=severity,
            description=description,
            resolved=False,
            image_path=image_path,
            details=json.dumps(results)
        )
        
        db.session.add(alert)
        db.session.commit()
        
        logger.info(f"Alerta creada: {description}")
        
        # También crear un evento de detección
        event = DetectionEvent(
            camera_id=camera_id,
            event_type=alert_type,
            timestamp=datetime.now(),
            details=json.dumps({
                'alert_id': alert.id,
                'detector': detector_type,
                'results': results
            })
        )
        
        db.session.add(event)
        db.session.commit()
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error al crear alerta de detección: {str(e)}")

@api_bp.route('/events/recent', methods=['GET'])
def get_recent_events():
    """Obtiene eventos recientes para actualización en tiempo real"""
    try:
        # Parámetros opcionales
        since = request.args.get('since', type=float)  # Timestamp Unix
        limit = request.args.get('limit', 10, type=int)
        camera_id = request.args.get('camera_id', type=int)
        
        # Construir query
        query = DetectionEvent.query
        
        if since:
            since_date = datetime.fromtimestamp(since)
            query = query.filter(DetectionEvent.timestamp > since_date)
            
        if camera_id:
            query = query.filter(DetectionEvent.camera_id == camera_id)
            
        # Ordenar y limitar
        events = query.order_by(DetectionEvent.timestamp.desc()).limit(limit).all()
        
        # Procesar resultados
        result = []
        for event in events:
            # Parsear detalles JSON
            try:
                details = json.loads(event.details) if event.details else {}
            except:
                details = {}
                
            # Obtener información de cámara
            camera = Camera.query.get(event.camera_id)
            camera_name = camera.name if camera else f"Cámara {event.camera_id}"
            
            # Crear resultado
            event_data = {
                'id': event.id,
                'timestamp': event.timestamp.timestamp(),
                'formatted_time': event.timestamp.strftime('%H:%M:%S'),
                'event_type': event.event_type,
                'camera_id': event.camera_id,
                'camera_name': camera_name,
                'details': details
            }
            
            result.append(event_data)
            
        return jsonify({
            'status': 'success',
            'events': result,
            'count': len(result),
            'server_time': time.time()
        })
        
    except Exception as e:
        logger.error(f"Error al obtener eventos recientes: {str(e)}")
        return jsonify({'error': f'Error al obtener eventos: {str(e)}'}), 500

@api_bp.route('/summary/today', methods=['GET'])
def get_today_summary():
    """Obtiene un resumen de actividad del día de hoy"""
    try:
        # Calcular inicio y fin del día de hoy
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow = today + timedelta(days=1)
        
        # Estadísticas de alertas
        alert_count = Alert.query.filter(
            Alert.timestamp >= today,
            Alert.timestamp < tomorrow
        ).count()
        
        # Estadísticas de detecciones
        detection_count = DetectionEvent.query.filter(
            DetectionEvent.timestamp >= today,
            DetectionEvent.timestamp < tomorrow
        ).count()
        
        # Detectores por tipo
        detector_counts = {}
        detectors = ['pose', 'fire', 'water', 'face']
        
        for detector in detectors:
            count = DetectionEvent.query.filter(
                DetectionEvent.timestamp >= today,
                DetectionEvent.timestamp < tomorrow,
                DetectionEvent.event_type.like(f"%{detector}%")
            ).count()
            
            detector_counts[detector] = count
        
        # Alertas por severidad
        severity_counts = {}
        severities = ['low', 'medium', 'high', 'critical']
        
        for severity in severities:
            count = Alert.query.filter(
                Alert.timestamp >= today,
                Alert.timestamp < tomorrow,
                Alert.severity == severity
            ).count()
            
            severity_counts[severity] = count
            
        # Tiempo de actividad
        uptime = 0
        try:
            with open('uptime.log', 'r') as f:
                uptime = float(f.read().strip())
        except:
            uptime = time.time() - os.path.getctime(__file__)
            
        # Formatear tiempo de actividad
        uptime_hours = int(uptime / 3600)
        uptime_formatted = f"{uptime_hours}h"
        
        return jsonify({
            'status': 'success',
            'timestamp': time.time(),
            'date': today.strftime('%Y-%m-%d'),
            'stats': {
                'alerts': alert_count,
                'detections': detection_count,
                'cameras_active': Camera.query.filter_by(active=True).count(),
                'uptime': uptime_formatted,
                'uptime_seconds': uptime
            },
            'detectors': detector_counts,
            'severity': severity_counts
        })
        
    except Exception as e:
        logger.error(f"Error al obtener resumen diario: {str(e)}")
        return jsonify({'error': f'Error al obtener resumen: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/diagnostic', methods=['POST'])
def camera_diagnostic(camera_id):
    """Realiza un diagnóstico de cámara para identificar problemas"""
    try:
        # Verificar si la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        results = {
            'camera_id': camera_id,
            'name': camera.name,
            'url': camera.url,
            'tests': {},
            'suggestions': []
        }
        
        # Test 1: Verificar si podemos abrir la cámara
        try:
            # Si es un índice numérico, convertir a entero
            url = camera.url
            if url.isdigit():
                url = int(url)
                
            cap = cv2.VideoCapture(url)
            if not cap.isOpened():
                results['tests']['connection'] = 'failed'
                results['suggestions'].append('No se pudo conectar a la cámara. Verifique que la URL o ID sea correcta.')
            else:
                results['tests']['connection'] = 'passed'
                
                # Test 2: Obtener un frame
                ret, frame = cap.read()
                if not ret or frame is None:
                    results['tests']['frame_capture'] = 'failed'
                    results['suggestions'].append('La cámara se conectó pero no se pudo obtener imagen.')
                else:
                    results['tests']['frame_capture'] = 'passed'
                    
                    # Obtener información adicional
                    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                    fps = cap.get(cv2.CAP_PROP_FPS)
                    
                    results['camera_info'] = {
                        'resolution': f"{int(width)}x{int(height)}",
                        'fps': fps
                    }
                    
                    # Guardar un frame para verificación
                    if not os.path.exists('diagnostics'):
                        os.makedirs('diagnostics')
                        
                    test_file = f"diagnostics/camera_{camera_id}_test.jpg"
                    cv2.imwrite(test_file, frame)
                    results['test_image'] = f"/diagnostics/{os.path.basename(test_file)}"
                
                # Liberar recursos
                cap.release()
        
        except Exception as e:
            results['tests']['exception'] = str(e)
            results['suggestions'].append(f'Error al probar la cámara: {str(e)}')
            
        # Test 3: Verificar integración con el CameraManager
        camera_manager = _get_camera_manager()
        camera_already_active = camera_manager.is_camera_active(camera_id)
        
        if not camera_already_active:
            try:
                started = camera_manager.start_camera(camera_id)
                if started:
                    results['tests']['camera_manager'] = 'passed'
                    
                    # Esperar un momento y obtener frame
                    time.sleep(1)
                    frame_data = camera_manager.get_frame(camera_id, wait=True)
                    
                    if frame_data:
                        results['tests']['camera_manager_frame'] = 'passed'
                    else:
                        results['tests']['camera_manager_frame'] = 'failed'
                        results['suggestions'].append('El CameraManager no pudo obtener un frame de la cámara.')
                        
                    # Detener la cámara si la iniciamos para el test
                    camera_manager.stop_camera(camera_id)
                else:
                    results['tests']['camera_manager'] = 'failed'
                    results['suggestions'].append('No se pudo iniciar la cámara con el CameraManager.')
            except Exception as e:
                results['tests']['camera_manager'] = 'failed'
                results['suggestions'].append(f'Error con CameraManager: {str(e)}')
        else:
            results['tests']['camera_manager'] = 'passed'
            results['tests']['camera_manager_active'] = True
            
        # Agregar sugerencias generales
        if 'failed' in [v for k, v in results['tests'].items()]:
            results['suggestions'].append('Si es una cámara USB, verifique que esté conectada y no esté siendo usada por otra aplicación.')
            results['suggestions'].append('Si es una cámara IP, verifique que esté en la misma red y que la URL sea correcta.')
            results['suggestions'].append('Intente reiniciar la aplicación o el sistema si los problemas persisten.')
        
        return jsonify(results)
        
    except Exception as e:
        logger.error(f"Error en diagnóstico de cámara {camera_id}: {str(e)}")
        return jsonify({'error': f'Error en diagnóstico: {str(e)}'}), 500

@api_bp.route('/cameras/test-interfaces', methods=['GET'])
def test_interfaces():
    """Endpoint para probar que las interfaces web funcionan"""
    try:
        # Información general del sistema
        info = {
            'status': 'online',
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'endpoints': {
                'cameras': '/api/cameras',
                'alerts': '/api/alerts',
                'summary': '/api/summary/today',
                'events': '/api/events/recent'
            },
            'cameras_count': Camera.query.count(),
            'active_cameras': Camera.query.filter_by(active=True).count(),
            'total_alerts': Alert.query.count(),
            'open_alerts': Alert.query.filter_by(resolved=False).count(),
            'server_info': {
                'python_version': platform.python_version(),
                'system': platform.system(),
                'architecture': platform.machine()
            }
        }
        
        return jsonify(info)
    except Exception as e:
        logger.error(f"Error en test de interfaces: {str(e)}")
        return jsonify({'error': str(e)}), 500

@api_bp.route('/cameras/<int:camera_id>/test-detectors', methods=['POST'])
def test_camera_detectors(camera_id):
    """Realiza una prueba de detectores en una cámara"""
    try:
        # Verificar que la cámara existe
        camera = Camera.query.get_or_404(camera_id)
        
        # Parámetros
        data = request.json or {}
        detectors = data.get('detectors', ['pose', 'fire', 'water', 'face'])
        
        # Asegurarse de que la cámara está activa
        camera_manager = _get_camera_manager()
        if not camera_manager.is_camera_active(camera_id):
            # Iniciar la cámara primero
            success = camera_manager.start_camera(camera_id)
            if not success:
                return jsonify({
                    'status': 'error',
                    'message': 'No se pudo iniciar la cámara para la prueba'
                }), 400
            # Esperar un momento para que se inicialice
            time.sleep(2)
            
        # Obtener un frame para procesar
        frame_data = camera_manager.get_frame(camera_id, wait=True)
        if not frame_data:
            return jsonify({
                'status': 'error',
                'message': 'No se pudo obtener frame de la cámara'
            }), 400
            
        # Guardar el frame para referencia
        frame = frame_data['frame']
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        test_dir = 'test_captures'
        
        if not os.path.exists(test_dir):
            os.makedirs(test_dir)
            
        test_image = f"{test_dir}/detector_test_{camera_id}_{timestamp}.jpg"
        cv2.imwrite(test_image, frame)
        
        # Inicializar el detector
        from src.ai_modules.detection_manager import AdvancedDetectionManager
        detector = AdvancedDetectionManager()
        
        # Resultados por detector
        results = {}
        detection_image = frame.copy()
        
        # Procesar con cada detector solicitado
        for detector_type in detectors:
            if detector_type == 'pose':
                detector_result = detector.process_pose(frame)
                results['pose'] = detector_result
                # Dibujar resultados en la imagen
                for person in detector_result:
                    if 'bbox' in person:
                        x, y, w, h = person['bbox']
                        cv2.rectangle(detection_image, (x, y), (x+w, y+h), (0, 255, 0), 2)
                        confidence = person.get('confidence', 0)
                        cv2.putText(detection_image, f"Person: {confidence:.2f}", 
                                    (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
            elif detector_type == 'fire':
                detector_result = detector.process_fire(frame)
                results['fire'] = detector_result
                # Dibujar resultados en la imagen
                if detector_result.get('detected', False):
                    # Texto en la esquina superior
                    cv2.putText(detection_image, f"FIRE DETECTED! ({detector_result.get('confidence', 0):.2f})", 
                                (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                
            elif detector_type == 'water':
                detector_result = detector.process_water(frame)
                results['water'] = detector_result
                # Dibujar resultados en la imagen
                if detector_result.get('detected', False):
                    # Texto en la esquina superior
                    cv2.putText(detection_image, f"WATER DETECTED! ({detector_result.get('confidence', 0):.2f})", 
                                (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
                
            elif detector_type == 'face':
                detector_result = detector.process_face(frame)
                results['face'] = detector_result
                # Dibujar resultados en la imagen
                for face in detector_result:
                    if 'bbox' in face:
                        x, y, w, h = face['bbox']
                        cv2.rectangle(detection_image, (x, y), (x+w, y+h), (255, 0, 255), 2)
                        name = face.get('name', 'Unknown')
                        confidence = face.get('confidence', 0)
                        cv2.putText(detection_image, f"{name}: {confidence:.2f}", 
                                    (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 255), 2)
        
        # Guardar imagen con detecciones
        detection_image_path = f"{test_dir}/detection_{camera_id}_{timestamp}.jpg"
        cv2.imwrite(detection_image_path, detection_image)
        
        # Devolver resultados
        return jsonify({
            'status': 'success',
            'camera_id': camera_id,
            'timestamp': timestamp,
            'results': results,
            'original_image': f"/{test_image}",
            'detection_image': f"/{detection_image_path}",
            'detectors_used': detectors
        })
        
    except Exception as e:
        logger.error(f"Error en prueba de detectores: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': f'Error en prueba de detectores: {str(e)}'
        }), 500

@api_bp.route('/cameras/<int:camera_id>', methods=['GET'])
def get_camera(camera_id):
    """Obtener información de una cámara específica"""
    try:
        camera = Camera.query.get(camera_id)
        
        if not camera:
            logger.warning(f"Cámara {camera_id} no encontrada")
            return jsonify({
                'status': 'error',
                'message': f'No se encontró la cámara con ID {camera_id}'
            }), 404
        
        # Convertir a diccionario
        camera_data = {
            'id': camera.id,
            'name': camera.name,
            'url': camera.url,
            'location': camera.location,
            'type': camera.type,
            'active': camera.active,
            'last_seen': camera.last_seen.isoformat() if camera.last_seen else None,
            'resolution': camera.resolution,
            'status': camera.status
        }
        
        return jsonify(camera_data)
    except Exception as e:
        logger.error(f"Error al obtener cámara: {str(e)}")
        return jsonify({'error': f'Error al obtener cámara: {str(e)}'}), 500

@api_bp.route('/cameras/<int:camera_id>/start', methods=['POST'])
def start_camera(camera_id):
    """Iniciar una cámara específica"""
    try:
        camera = Camera.query.get(camera_id)
        
        if not camera:
            logger.warning(f"Cámara {camera_id} no encontrada")
            return jsonify({
                'status': 'error',
                'message': f'No se encontró la cámara con ID {camera_id}'
            }), 404
        
        # Obtener el gestor de cámaras
        camera_manager = _get_camera_manager()
        
        # Iniciar la cámara
        success = camera_manager.start_camera(camera_id)
        
        if success:
            # Actualizar el estado en la base de datos
            camera.active = True
            camera.status = 'active'
            db.session.commit()
            
            return jsonify({
                'status': 'success',
                'message': f'Cámara {camera.name} iniciada correctamente'
            })
        else:
            return jsonify({
                'status': 'error',
                'message': f'No se pudo iniciar la cámara {camera.name}'
            }), 500
            
    except Exception as e:
        return jsonify({'error': f'Error al iniciar cámara: {str(e)}'}), 500

@api_bp.route('/dashboard/stats', methods=['GET'])
def get_dashboard_stats():
    """Obtener estadísticas para el dashboard"""
    try:
        # Obtener estadísticas básicas
        active_cameras = Camera.query.filter_by(active=True).count()
        total_cameras = Camera.query.count()
        
        active_alerts = Alert.query.filter_by(resolved=False).count()
        
        # Alertas de hoy
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        alerts_today = Alert.query.filter(Alert.timestamp >= today).count()
        
        # Detecciones totales
        total_detections = DetectionEvent.query.count()
        
        # Detecciones de hoy
        detections_today = DetectionEvent.query.filter(
            DetectionEvent.timestamp >= today
        ).count()
        
        # Estado del sistema
        system_status = 'normal'  # Esto podría determinarse mediante alguna lógica más compleja
        
        # Uso de recursos del sistema (esto sería diferente en un sistema real)
        import psutil
        cpu_usage = psutil.cpu_percent()
        memory_usage = psutil.virtual_memory().percent
        disk_usage = psutil.disk_usage('/').percent
        
        return jsonify({
            'cameras': {
                'active': active_cameras,
                'total': total_cameras,
                'percentage': round((active_cameras / total_cameras) * 100) if total_cameras > 0 else 0
            },
            'alerts': {
                'active': active_alerts,
                'today': alerts_today
            },
            'detections': {
                'total': total_detections,
                'today': detections_today
            },
            'system': {
                'status': system_status,
                'cpu': cpu_usage,
                'memory': memory_usage,
                'disk': disk_usage
            }
        })
    except Exception as e:
        return jsonify({'error': f'Error al obtener estadísticas: {str(e)}'}), 500

@api_bp.route('/events/hourly', methods=['GET'])
def get_hourly_events():
    """Obtener eventos por hora para gráficos"""
    try:
        # Obtener timestamp para las últimas 24 horas
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=24)
        
        # Preparar array con horas (formato de 24 horas)
        hours = [(start_time + timedelta(hours=i)).hour for i in range(24)]
        counts = [0] * 24
        
        # Consultar eventos
        events = DetectionEvent.query.filter(
            DetectionEvent.timestamp >= start_time,
            DetectionEvent.timestamp <= end_time
        ).all()
        
        # Contar eventos por hora
        for event in events:
            hour_idx = (event.timestamp.hour - start_time.hour) % 24
            counts[hour_idx] += 1
        
        return jsonify({
            'hours': hours,
            'counts': counts
        })
    except Exception as e:
        return jsonify({'error': f'Error al obtener eventos por hora: {str(e)}'}), 500

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\src\utils\init_db.py
--------------------------------------------------------------------------------
from src.database import db, Camera, Alert, DetectionEvent
from datetime import datetime, timedelta

def initialize_demo_data():
    """Inicializa datos de demostración en la base de datos"""
    
    # Verificar si ya existen cámaras
    if Camera.query.count() == 0:
        # Crear cámaras de ejemplo
        cameras = [
            Camera(id=1, name="Entrada Principal", url="rtsp://admin:password@192.168.1.100:554/stream1", 
                  location="Entrada", type="rtsp", active=True, status="active"),
            Camera(id=2, name="Patio Trasero", url="rtsp://admin:password@192.168.1.101:554/stream1", 
                  location="Patio", type="rtsp", active=True, status="active"),
            Camera(id=3, name="Estacionamiento", url="0", 
                  location="Exterior", type="webcam", active=True, status="active")
        ]
        
        db.session.add_all(cameras)
        db.session.commit() 

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\templates\dashboard.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Dashboard - Sistema de Vigilancia IA{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
{% endblock %}

{% block content %}
<div class="dashboard">
    <!-- Estado del sistema -->
    <div class="section-header">
        <h1>Dashboard de Vigilancia</h1>
        <div class="actions">
            <button class="btn info-btn" id="refreshBtn"><i class="fas fa-sync"></i> Actualizar</button>
        </div>
    </div>
    
    <!-- Resumen estadístico -->
    <div class="grid-container animate-in">
        <div class="grid-item stat-card">
            <div class="stat-icon">
                <i class="fas fa-video"></i>
            </div>
            <div class="stat-content">
                <h3 id="totalCameras">0</h3>
                <p>Cámaras Conectadas</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon warning">
                <i class="fas fa-bell"></i>
            </div>
            <div class="stat-content">
                <h3 id="totalAlerts">0</h3>
                <p>Alertas Hoy</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon success">
                <i class="fas fa-user-shield"></i>
            </div>
            <div class="stat-content">
                <h3 id="peopleDetected">0</h3>
                <p>Personas Detectadas</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon danger">
                <i class="fas fa-exclamation-circle"></i>
            </div>
            <div class="stat-content">
                <h3 id="criticalEvents">0</h3>
                <p>Eventos Críticos</p>
            </div>
        </div>
    </div>
    
    <!-- Estado de cámaras -->
    <div class="dual-column">
        <div class="column">
            <div class="card animate-in" style="animation-delay: 0.1s;">
                <div class="card-header">
                    <h2><i class="fas fa-video"></i> Estado de Cámaras</h2>
                    <div class="card-actions">
                        <button class="btn-icon" id="monitoringBtn"><i class="fas fa-external-link-alt"></i></button>
                    </div>
                </div>
                <div class="card-body" id="camerasStatus">
                    <div class="loader-container">
                        <div class="loader"></div>
                        <p>Cargando cámaras...</p>
                    </div>
                </div>
            </div>
            
            <!-- Recursos del sistema -->
            <div class="card animate-in" style="animation-delay: 0.2s;">
                <div class="card-header">
                    <h2><i class="fas fa-microchip"></i> Recursos del Sistema</h2>
                </div>
                <div class="card-body">
                    <div class="resource-meters">
                        <div class="resource-meter">
                            <div class="resource-label">CPU</div>
                            <div class="progress-bar">
                                <div class="progress" id="cpuUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                        <div class="resource-meter">
                            <div class="resource-label">RAM</div>
                            <div class="progress-bar">
                                <div class="progress" id="ramUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                        <div class="resource-meter">
                            <div class="resource-label">Disco</div>
                            <div class="progress-bar">
                                <div class="progress" id="diskUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="column">
            <!-- Alertas recientes -->
            <div class="card animate-in" style="animation-delay: 0.3s;">
                <div class="card-header">
                    <h2><i class="fas fa-bell"></i> Alertas Recientes</h2>
                    <div class="card-actions">
                        <button class="btn-icon" id="alertsBtn"><i class="fas fa-external-link-alt"></i></button>
                    </div>
                </div>
                <div class="card-body" id="recentAlerts">
                    <div class="loader-container">
                        <div class="loader"></div>
                        <p>Cargando alertas...</p>
            </div>
        </div>
    </div>
    
            <!-- Actividad -->
            <div class="card animate-in" style="animation-delay: 0.4s;">
                <div class="card-header">
                    <h2><i class="fas fa-chart-line"></i> Actividad Reciente</h2>
                </div>
                <div class="card-body">
                    <div class="activity-chart-container">
                        <canvas id="activityChart"></canvas>
            </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .dashboard {
        margin-top: 20px;
    }
    
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .section-header h1 {
        margin: 0;
        font-size: 1.8rem;
        color: var(--secondary-color);
    }
    
    .dual-column {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-top: 20px;
    }
    
    .resource-meters {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .resource-meter {
        margin-bottom: 10px;
    }
    
    .resource-label {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        font-weight: 500;
    }
    
    .progress-bar {
        height: 10px;
        background-color: #e9ecef;
        border-radius: 5px;
        overflow: hidden;
    }
    
    .progress {
        height: 100%;
        background-color: var(--primary-color);
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        color: white;
        transition: width 0.5s ease;
    }
    
    .camera-status-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
    }
    
    .camera-status-item {
        background-color: #f8f9fa;
        border-radius: 6px;
        padding: 12px;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }
    
    .camera-status-icon {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        margin-bottom: 5px;
    }
    
    .camera-status-icon.active {
        background-color: var(--success-color);
    }
    
    .camera-status-icon.inactive {
        background-color: var(--secondary-color);
    }
    
    .camera-status-icon.error {
        background-color: var(--danger-color);
    }
    
    .camera-status-name {
        font-weight: 500;
        margin-bottom: 2px;
        font-size: 0.9rem;
    }
    
    .camera-status-info {
        font-size: 0.8rem;
        color: #6c757d;
    }
    
    .alert-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }
    
    .alert-item {
        padding: 10px;
        border-radius: 6px;
        display: flex;
        align-items: center;
    }
    
    .alert-item.low {
        background-color: rgba(52, 152, 219, 0.1);
        border-left: 3px solid var(--info-color);
    }
    
    .alert-item.medium {
        background-color: rgba(243, 156, 18, 0.1);
        border-left: 3px solid var(--warning-color);
    }
    
    .alert-item.high {
        background-color: rgba(231, 76, 60, 0.1);
        border-left: 3px solid var(--danger-color);
    }
    
    .alert-icon {
        margin-right: 15px;
        font-size: 1.2rem;
    }
    
    .alert-item.low .alert-icon {
        color: var(--info-color);
    }
    
    .alert-item.medium .alert-icon {
        color: var(--warning-color);
    }
    
    .alert-item.high .alert-icon {
        color: var(--danger-color);
    }
    
    .alert-content {
        flex: 1;
    }
    
    .alert-title {
        font-weight: 500;
        margin: 0 0 5px 0;
    }
    
    .alert-info {
        display: flex;
        font-size: 0.8rem;
        color: #6c757d;
    }
    
    .alert-camera {
        margin-right: 10px;
    }
    
    .alert-time {
        flex: 1;
        text-align: right;
    }
    
    .loader-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px;
    }
    
    .loader {
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--primary-color);
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .activity-chart-container {
        width: 100%;
        height: 200px;
    }
    
    @media (max-width: 768px) {
        .dual-column {
            grid-template-columns: 1fr;
        }
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// JavaScript necesario para el dashboard
document.addEventListener('DOMContentLoaded', function() {
    loadDashboardData();
    setupActivityChart();
    
    // Actualizar datos cada 30 segundos
    setInterval(loadDashboardData, 30000);
    
    // Botón de actualización manual
    document.getElementById('refreshBtn').addEventListener('click', loadDashboardData);
    
    // Botones de navegación
    document.getElementById('monitoringBtn').addEventListener('click', function() {
        window.location.href = '/monitoring';
    });
    
    document.getElementById('alertsBtn').addEventListener('click', function() {
        window.location.href = '/alerts';
    });
});

// Cargar datos del dashboard
function loadDashboardData() {
    // Actualizar estadísticas
    fetch('/api/dashboard/stats')
            .then(response => response.json())
            .then(data => {
            document.getElementById('totalCameras').textContent = data.cameras_active;
            document.getElementById('totalAlerts').textContent = data.alerts_today;
            document.getElementById('peopleDetected').textContent = data.people_detected;
            document.getElementById('criticalEvents').textContent = data.critical_events;
            
            // Actualizar recursos del sistema
            document.getElementById('cpuUsage').style.width = data.system.cpu_usage + '%';
            document.getElementById('cpuUsage').textContent = data.system.cpu_usage + '%';
            
            document.getElementById('ramUsage').style.width = data.system.memory_usage + '%';
            document.getElementById('ramUsage').textContent = data.system.memory_usage + '%';
            
            document.getElementById('diskUsage').style.width = data.system.disk_usage + '%';
            document.getElementById('diskUsage').textContent = data.system.disk_usage + '%';
            
            // Color de la barra según nivel
            colorizeProgressBar('cpuUsage', data.system.cpu_usage);
            colorizeProgressBar('ramUsage', data.system.memory_usage);
            colorizeProgressBar('diskUsage', data.system.disk_usage);
        })
        .catch(error => console.error('Error cargando estadísticas:', error));
        
    // Actualizar estado de cámaras
    fetch('/api/cameras')
        .then(response => response.json())
        .then(cameras => {
            const camerasContainer = document.getElementById('camerasStatus');
            
            if (cameras.length === 0) {
                camerasContainer.innerHTML = '<p class="no-data">No hay cámaras configuradas</p>';
                return;
            }
            
            let cameraHTML = '<div class="camera-status-list">';
            
            cameras.forEach(camera => {
                const statusClass = camera.active ? 'active' : 'inactive';
                cameraHTML += `
                    <div class="camera-status-item">
                        <div class="camera-status-icon ${statusClass}"></div>
                        <div class="camera-status-name">${camera.name}</div>
                        <div class="camera-status-info">${camera.active ? 'Activa' : 'Inactiva'}</div>
                    </div>
                `;
            });
            
            cameraHTML += '</div>';
            camerasContainer.innerHTML = cameraHTML;
        })
        .catch(error => console.error('Error cargando cámaras:', error));
        
    // Actualizar alertas recientes
    fetch('/api/alerts?limit=5')
        .then(response => response.json())
        .then(alerts => {
            const alertsContainer = document.getElementById('recentAlerts');
            
            if (alerts.length === 0) {
                alertsContainer.innerHTML = '<p class="no-data">No hay alertas recientes</p>';
                return;
            }
            
            let alertsHTML = '<div class="alert-list">';
            
            alerts.forEach(alert => {
                const severityClass = getSeverityClass(alert.severity);
                const icon = getSeverityIcon(alert.severity);
                
                alertsHTML += `
                    <div class="alert-item ${severityClass}">
                        <div class="alert-icon">
                            <i class="${icon}"></i>
                        </div>
                        <div class="alert-content">
                            <div class="alert-title">${alert.alert_type}</div>
                            <div class="alert-info">
                                <span class="alert-camera">Cámara ${alert.camera_id}</span>
                                <span class="alert-time">${formatDate(alert.timestamp)}</span>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            alertsHTML += '</div>';
            alertsContainer.innerHTML = alertsHTML;
        })
        .catch(error => console.error('Error cargando alertas:', error));
}

// Inicializar gráfico de actividad
function setupActivityChart() {
    const ctx = document.getElementById('activityChart').getContext('2d');
    
    // Datos de ejemplo
    const labels = Array.from({length: 12}, (_, i) => {
        const hour = new Date().getHours() - 11 + i;
        return (hour < 0 ? hour + 24 : hour) + ':00';
    });
    
    // Gráfico
    const activityChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                label: 'Eventos',
                data: [5, 8, 12, 7, 10, 15, 18, 14, 9, 12, 13, 10],
                borderColor: '#3498db',
                backgroundColor: 'rgba(52, 152, 219, 0.1)',
                tension: 0.4,
                fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                    grid: {
                        display: true,
                        color: 'rgba(0, 0, 0, 0.05)'
                        }
                    },
                    x: {
                    grid: {
                        display: false
                    }
                }
            }
        }
    });
    
    // Actualizar con datos reales
    fetch('/api/events/hourly')
            .then(response => response.json())
            .then(data => {
            // Actualizar datos
            activityChart.data.datasets[0].data = data.counts;
            activityChart.update();
        })
        .catch(error => console.error('Error cargando datos de actividad:', error));
}

// Funciones auxiliares
function getSeverityClass(severity) {
    switch(severity) {
        case 'high': case 'critical': return 'high';
        case 'medium': return 'medium';
        default: return 'low';
    }
}

function getSeverityIcon(severity) {
    switch(severity) {
        case 'high': case 'critical': return 'fas fa-exclamation-circle';
        case 'medium': return 'fas fa-exclamation-triangle';
        default: return 'fas fa-info-circle';
    }
}

function formatDate(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
}

function colorizeProgressBar(id, value) {
    const element = document.getElementById(id);
    if (value < 70) {
        element.style.backgroundColor = 'var(--success-color)';
    } else if (value < 90) {
        element.style.backgroundColor = 'var(--warning-color)';
    } else {
        element.style.backgroundColor = 'var(--danger-color)';
    }
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\PROJECT_README.md
--------------------------------------------------------------------------------
# Sistema de Vigilancia Inteligente

Este documento registra el desarrollo y estructura del Sistema de Vigilancia Inteligente, un proyecto que combina visión por computadora, inteligencia artificial y vigilancia en tiempo real.

## Estructura del Proyecto 

vigilancia-ia/
├── app.py # Aplicación principal Flask
├── config/ # Archivos de configuración
│ └── system_config.json # Configuración del sistema
├── data/ # Datos persistentes
│ └── known_faces/ # Rostros conocidos para reconocimiento facial
├── models/ # Modelos de IA preentrenados
├── src/ # Código fuente de componentes
│ ├── agent_manager.py # Gestión de agentes de IA
│ ├── alert_manager.py # Sistema de gestión de alertas
│ ├── camera_manager.py # Gestión de cámaras
│ ├── face_recognition.py # Reconocimiento facial
│ ├── mcp_framework.py # Framework de comunicación entre componentes
│ ├── model_trainer.py # Entrenamiento de modelos de IA
│ ├── motion_detector.py # Detección de movimiento
│ ├── object_detector.py # Detección de objetos
│ ├── operation_mode.py # Gestión de modos de operación
│ └── video_capture.py # Captura de video
├── static/ # Archivos estáticos para la web
│ ├── css/
│ │ └── style.css # Estilos CSS
│ └── js/
│ └── main.js # JavaScript principal
└── templates/ # Plantillas HTML
├── alerts.html # Página de alertas
├── base.html # Plantilla base
├── cameras.html # Gestión de cámaras
├── dashboard.html # Panel de control
├── index.html # Página de inicio
└── modes.html # Modos de vigilancia



## Historial de Desarrollo

### Fase 1: Estructura Base
- Creación de la estructura básica de archivos
- Implementación del patrón MVC
- Configuración del servidor Flask
- Creación de plantillas HTML y CSS básico

### Fase 2: Componentes Core
- Creación de gestores de cámaras, alertas y agentes
- Implementación del framework MCP para comunicación
- Integración de detección de movimiento básica

### Fase 3: Interfaces Web
- Implementación de herencia de plantillas con Jinja2
- Mejora de la interfaz con CSS más detallado
- Implementación de interactividad con JavaScript
- Configuración de endpoints API REST

### Fase 4: Captura de Video y Detección
- Implementación de captura de video multihilo
- Integración de detección de objetos simulada
- Visualización de streams de cámara en el dashboard
- Endpoints para controlar cámaras remotamente

### Fase 5: Reconocimiento Facial
- Implementación de detección facial con OpenCV
- Sistema de reconocimiento de personas conocidas
- API para registrar nuevos rostros
- Visualización de resultados de reconocimiento

## Componentes Principales

### MCP Framework
El sistema utiliza un patrón de comunicación basado en mensajes llamado MCP (Message Communication Protocol), que permite la comunicación asíncrona entre los diferentes componentes y agentes.

### Sistema de Cámaras
El sistema puede gestionar múltiples cámaras simultáneamente, cada una en su propio hilo. Soporta diferentes fuentes de video:
- Webcams locales
- Cámaras IP por RTSP/HTTP
- Archivos de video pregrabados

### Detección de Objetos
Utiliza un sistema de detección de objetos basado en modelos preentrenados (simulado en la versión actual). Detecta personas, vehículos y otros objetos relevantes.

### Reconocimiento Facial
Implementa reconocimiento facial para identificar personas conocidas. El sistema puede:
- Detectar rostros en los frames de video
- Reconocer personas registradas
- Almacenar nuevos rostros para entrenamiento
- Mostrar nombres e información sobre personas reconocidas

### Sistema de Alertas
Genera alertas basadas en detecciones y reglas configurables. Las alertas pueden enviarse por:
- Notificaciones en la interfaz web
- Correo electrónico (simulado)
- SMS (simulado)

## Modos de Operación

El sistema soporta diferentes modos de operación que ajustan la sensibilidad y comportamiento:

- **normal**: Vigilancia estándar con detección básica de movimiento
- **barrio_privado**: Optimizado para vigilancia residencial con detección de perímetro
- **aeropuerto**: Configuración para espacios grandes con alto tránsito
- **comercial**: Enfocado en seguridad de locales comerciales

## Próximos Pasos

1. ~~Implementar reconocimiento facial~~ (Completado)
2. Mejorar sistema de alertas con filtros y reglas avanzadas
3. Implementar grabación de video cuando se detectan eventos
4. Mejorar la interfaz de usuario con más controles y visualizaciones
5. Implementar sistema de autenticación de usuarios



Recomendación para el Próximo Paso del Desarrollo
Después de analizar el estado actual del sistema y las opciones disponibles, recomiendo avanzar primero con el sistema de mejoras para la detección y gestión de alarmas por las siguientes razones:
Ventajas de implementar primero la gestión de alarmas mejorada:
1. Soluciona un problema visible y actual: Las falsas detecciones ya están ocurriendo en el sistema existente, lo que puede generar alertas innecesarias y reducir la confianza en el sistema.
Proporciona valor inmediato: Al definir zonas de interés y reglas más inteligentes, el sistema ganará precisión inmediatamente sin necesitar cambios arquitectónicos mayores.
3. Implementación incremental: Podemos implementarlo por fases:
Primero: Definición de zonas de interés (ROI)
Segundo: Reglas de alarma configurables
Tercero: Sistema de clasificación de alarmas
Base para futuras mejoras: Un buen sistema de alarmas servirá como fundamento para cuando implementemos agentes de IA más avanzados, ya que estos podrán enviar sus resultados a un sistema de reglas ya maduro.
Plan de implementación propuesto:
Fase 1: Zonas de Interés (ROI)
Crear una interfaz para dibujar zonas en el video
Implementar la lógica para filtrar detecciones según zonas
Guardar/cargar configuraciones de zonas por cámara
Fase 2: Sistema de Reglas
Crear un editor de reglas con condiciones configurables
Implementar evaluador de reglas en tiempo real
Integrar con el sistema de alertas existente
Fase 3: Clasificación de Alarmas
Implementar niveles de alarma (información, advertencia, alarma, crítica)
Agregar acciones personalizables por nivel de alarma
Mejorar la visualización de alertas en la interfaz
Una vez que estas mejoras estén implementadas y funcionando correctamente, sería un buen momento para avanzar con el sistema de agentes de IA más avanzado, ya que estos agentes podrán aprovechar la infraestructura de reglas y alarmas mejorada.
¿Te parece bien comenzar con la implementación de las zonas de interés (ROI) como primer paso?


ok creo que debemos avanzar y mejorar!

1- sistema de entrenamientos y dataset para las IA, para que puedan aprender y mejorar sobre algun tema especifico, ejemplo Un agente especializado en sospechosos de hurto en un supermercado, otro ejemplo un sospechoso merodeando, activar sistema de seguimiento por camaras enviar alertas y fotos de momentos claves a estación de monitoreo o guardia.
2- aparte de editar los agentes quiero poder tener control total de crear agentes nuevos, entrenarlos con dataset espesificos, que puedan tener retroalimentación de los eventos y aprender en base a respuestas humanas. aparte quisiera tener un agente puntual el cual pueda interpretar por ejemplo un intento de asalto o intento de robo, comprendiendo la situación, ejemplo una persona con armas, personas levantando las 2 manos, personas tirandose al piso etc.
3- Agregar el modo industrial, este modo identifica posibles peligros, focos de incendio, cumplimiento de reglas de seguridad e higene de la empresa. 
4- sería bueno hacer conexión con sistemas de IA externo como claude, google gemini, u otras?
5- conexión con Whatsapp para el envío automatico de eventos a guardias.
6- gestión e interacción con mapas, coordenadas, etc. para poder enviar datos o recibir datos de rondas de los guardias, etc.

## Nuevas Funcionalidades Implementadas

### 1. Sistema de Entrenamiento de IA y Datasets Personalizados

Hemos implementado un sistema completo para entrenar modelos de IA con datasets específicos:

- **Gestor de Datasets**: Permite crear, gestionar y organizar conjuntos de datos para diferentes situaciones de seguridad
- **Etiquetado de Imágenes**: Interfaz para clasificar y etiquetar imágenes para entrenamiento
- **Entrenamiento de Modelos**: Proceso automatizado para generar modelos de IA a partir de los datasets
- **Especialización por casos de uso**: Soporte para modelos especializados en situaciones específicas como hurtos, merodeo, comportamientos sospechosos, etc.

Este sistema permite crear agentes altamente especializados para situaciones específicas, mejorando significativamente la precisión y reduciendo las falsas alarmas.

### 2. Creación Dinámica de Agentes

Hemos desarrollado una "fábrica de agentes" que permite:

- **Crear nuevos agentes** desde la interfaz web sin necesidad de programación
- **Plantillas de agentes** para diferentes propósitos: detección, alertas, análisis de situaciones, etc.
- **Configuración flexible** con parámetros personalizables
- **Sistema de retroalimentación** que permite a los agentes aprender de las respuestas humanas
- **Agente de análisis situacional** capaz de interpretar escenarios complejos como intentos de robo, asaltos o comportamientos sospechosos

### 3. Modo Industrial

Se ha añadido un modo especializado para entornos industriales que incluye:

- **Detección de peligros**: Identificación automática de situaciones de riesgo
- **Monitoreo de incendios**: Detección temprana de focos de incendio o humo
- **Cumplimiento de seguridad**: Verificación del uso de equipos de protección personal (EPP)
- **Reglas de higiene**: Monitoreo del cumplimiento de protocolos de higiene y seguridad
- **Zonas restringidas**: Alerta cuando personas ingresan a áreas peligrosas o no autorizadas

### 4. Integración con Servicios de IA Externos

Se ha implementado conexión con servicios avanzados de IA como:

- **Claude de Anthropic**: Para análisis avanzado de situaciones y comprensión de contextos complejos
- **Google Gemini**: Para reconocimiento y análisis de imágenes con alta precisión
- **Interfaz unificada**: Conector que permite alternar entre diferentes servicios según necesidades
- **Modo híbrido**: Combina modelos locales e IA externa para optimizar rendimiento y costos

Estas integraciones permiten análisis mucho más sofisticados de situaciones complejas, como identificar asaltos basándose en la postura de las personas, presencia de armas, y otros factores contextuales.

### 5. Conexión con WhatsApp

Se ha implementado un sistema completo de notificaciones por WhatsApp:

- **Envío automático** de alertas importantes a guardias y responsables de seguridad
- **Compartición de imágenes** capturadas en el momento de la detección
- **Comandos por mensaje**: Posibilidad de enviar comandos básicos a través de mensajes
- **Gestión de cooldown**: Sistema inteligente para evitar sobrecarga de notificaciones
- **Personalización de mensajes** según tipo y severidad de alertas

### 6. Sistema de Gestión Geográfica y Seguimiento

Se ha desarrollado un sistema completo de gestión geoespacial:

- **Mapas interactivos**: Visualización en tiempo real de guardias, ubicaciones y zonas
- **Creación de rutas**: Definición de recorridos para rondas de vigilancia
- **Geocercas**: Creación de perímetros virtuales con alertas automáticas
- **Seguimiento de guardias**: Monitoreo de posición y cumplimiento de rutas
- **Alertas por desviación**: Notificaciones cuando los guardias se desvían de rutas o tiempos establecidos
- **Integración con cámaras**: Asociación de ubicaciones físicas con cámaras del sistema

## Conclusión

Con estas nuevas funcionalidades, el Sistema de Vigilancia Inteligente se ha transformado en una solución extremadamente versátil y potente, capaz de adaptarse a múltiples escenarios de seguridad, desde comercial hasta industrial, con capacidades avanzadas de IA y gestión de personal de seguridad.

La arquitectura modular basada en agentes permite seguir expandiendo el sistema según sea necesario, añadiendo nuevas capacidades y adaptándose a requisitos específicos de diferentes entornos de seguridad.



Plan de Implementación para Completar el Sistema
Me alegra que el sistema básico esté funcionando. Ahora vamos a elaborar un plan detallado para implementar las funcionalidades restantes:
1. Creación y Configuración de Agentes
Implementación necesaria:
Interfaz de creación de agentes: Formulario web para crear nuevos agentes especificando roles, comportamientos y parámetros
Sistema de plantillas: Biblioteca de plantillas de agentes predefinidos
Panel de configuración: Para ajustar parámetros de los agentes existentes
Monitoreo de agentes: Visualización del estado y rendimiento de los agentes
2. Sistema de Entrenamiento con Datasets Personalizados
Implementación necesaria:
Gestor de datasets: Interfaz para subir, etiquetar y organizar imágenes
Pipeline de entrenamiento: Sistema para entrenar modelos con los datasets
Validación y pruebas: Herramientas para verificar rendimiento de modelos
Exportación e implementación: Mecanismo para integrar nuevos modelos al sistema
3. Modo Industrial
Implementación necesaria:
Detector de EPP: Para identificar equipos de protección personal
Zonas de riesgo: Definición y monitoreo de áreas peligrosas
Detector de incendios/humo: Algoritmos especializados para detectar fuego
Reglas de seguridad industrial: Sistema para definir y verificar cumplimiento
Alertas específicas: Notificaciones adaptadas al contexto industrial
4. Seguridad del Sistema
Implementación necesaria:
Sistema de autenticación: Login/logout con niveles de acceso
Gestión de usuarios: Creación y administración de cuentas
Registro de actividad: Seguimiento de acciones de usuarios
Cifrado de datos sensibles: Protección de información crítica
Gestión de backups: Respaldo automático de configuraciones y datos
5. Sistema de Alertas Avanzado
Implementación necesaria:
Configuración de umbrales: Personalización de condiciones para disparar alertas
Enriquecimiento de alertas: Añadir contexto y recomendaciones
Canales múltiples: Email, SMS, WhatsApp, aplicación móvil
Escalamiento: Reglas para escalar alertas no atendidas
Programación: Activación/desactivación según horarios
6. Integración de Correo Electrónico
Implementación necesaria:
Configuración SMTP: Conexión con servidores de correo
Plantillas de mensajes: Diseño de correos para diferentes tipos de alertas
Gestión de destinatarios: Listas de correo según roles y responsabilidades
7. Configuración completa de WhatsApp
Implementación necesaria:
Webhook para respuestas: Recepción de comandos desde WhatsApp
Reglas de cooldown: Evitar spam de mensajes
Confirmación de recepción: Verificar que alertas fueron recibidas
Mensajes multimedia: Envío de imágenes, videos y ubicaciones
8. Otras Mejoras Importantes
Visualización avanzada:
Dashboard personalizable: Widgets configurables según necesidades
Reportes históricos: Análisis de eventos pasados
Heatmaps: Mapas de calor para visualizar zonas de actividad
Integración con sistemas externos:
APIs para otros sistemas: Integración con plataformas de terceros
Exportación de datos: Respaldo en la nube o sistemas corporativos
Integración con sistemas de control de acceso: Puertas, torniquetes, etc.
Performance:
Optimización para múltiples cámaras: Procesamiento distribuido
Caché inteligente: Reducir carga de procesamiento
Compresión adaptativa: Ajuste automático según ancho de banda
Hoja de Ruta Recomendada
Fase 1: Fundamentos (1-2 semanas)
Sistema de autenticación y seguridad
Configuración completa de alertas básicas
Integración de correo electrónico
Fase 2: IA Avanzada (2-3 semanas)
Sistema de entrenamiento con datasets
Creación y gestión de agentes
Mejora del sistema de detección
Fase 3: Modos especializados (2-3 semanas)
Modo industrial completo
Sistema de geocercas y seguimiento
Integración de WhatsApp bidireccional
Fase 4: Refinamiento (2-3 semanas)
UI/UX mejorada
Optimización de rendimiento
Documentación completa
4. Testing y depuración final


-------------------------------------------------------------------
Proximos pasos:

Estrategias de mejora para convertir VigIA en un sistema de seguridad integral
Para transformar tu sistema de vigilancia inteligente en una solución de seguridad completa y adaptable a diversos sectores, podemos implementar las siguientes tecnologías y técnicas:
1. Mejoras en Inteligencia Artificial y Análisis de Video

Redes neuronales transformers para análisis de video: Implementar arquitecturas como VideoSwin o ViViT que superan a los modelos tradicionales en comprensión contextual de escenas.
Aprendizaje por refuerzo para cámaras PTZ: Sistemas que aprendan automáticamente a controlar cámaras móviles para seguir objetos de interés, optimizando los ángulos de visión.
Análisis de comportamiento predictivo: Algoritmos que identifiquen patrones anómalos antes de que se conviertan en incidentes (merodeadores que evolucionan hacia intrusiones).
Reconocimiento de actividades complejas: Detección de interacciones sospechosas entre personas (intercambios, seguimientos, confrontaciones).
Análisis de multitudes y control de aforo: Detección de densidad de personas, comportamientos grupales anómalos y control preciso de ocupación.

2. Integración con Otros Sistemas de Seguridad

Integración con sistemas de control de acceso: Validación cruzada entre detecciones visuales y registros de acceso (tarjetas RFID, biometría).
Interfaz con sistemas de alarma e incendio: Respuesta coordinada ante emergencias, usando las cámaras para verificar alarmas.
Interconexión con BMS (Building Management Systems): Integración con sistemas de gestión de edificios para control holístico.
Comunicación con sistemas de televigilancia municipal: Para barrios y espacios públicos, habilitando coordinación con centros de monitoreo gubernamentales.
Integración con drones de vigilancia: Para inspección automática de perímetros extensos en respuesta a alertas.

3. Mejoras en Ciberseguridad

Cifrado de extremo a extremo: Para todas las comunicaciones y almacenamiento de video.
Firewalls de aplicación y análisis de tráfico anómalo: Protección contra intentos de intrusión en la red de cámaras.
Autenticación multifactor para acceso administrativo: Incrementar seguridad para evitar accesos no autorizados.
Federación de identidades y SSO: Para entornos corporativos con múltiples sistemas de gestión.
Sandboxing completo: Aislar componentes críticos en contenedores para prevenir compromiso total del sistema.

4. Arquitectura Distribuida y Redundante

Procesamiento de borde (Edge Computing): Desplegar capacidades de análisis en dispositivos perimetrales reduciendo latencia.
Arquitectura de microservicios containerizada: Facilitar el despliegue, la escalabilidad y el mantenimiento.
Malla de servicios (Service Mesh): Mejorar la comunicación entre componentes con descubrimiento, balanceo y resilencia.
Replicación geográfica: Múltiples centros de procesamiento para tolerancia a fallos regionales.
Infraestructura como código (IaC): Automatizar despliegues para mantener consistencia en todas las instalaciones.

5. Almacenamiento y Gestión de Datos

Sistemas de almacenamiento jerárquico: Combinar almacenamiento rápido para datos recientes con archivado económico para registros históricos.
Compresión inteligente basada en contenido: Ajustar dinámicamente la calidad del video según el contenido (mayor resolución donde hay personas).
Blockchain para cadena de custodia: Garantizar la integridad de evidencias mediante hashes almacenados en blockchain.
Gestión del ciclo de vida de la información: Políticas automatizadas para retención y eliminación conforme a regulaciones.
Data lake para análisis histórico: Permita análisis retrospectivos de patrones de seguridad a largo plazo.

6. Comunicaciones Avanzadas

Red 5G privada: Para transmisión de video de alta densidad con baja latencia.
Protocolos de malla inalámbrica: Para entornos donde el cableado es difícil o costoso.
Sistemas redundantes satelitales: Como respaldo para ubicaciones críticas o remotas.
WebRTC para transmisión P2P segura: Reducir carga en servidores centrales para visualización.
Comunicación interoperable con servicios de emergencia: Integración con estándares como CAP (Common Alerting Protocol).

7. Interfaces y Experiencia de Usuario

Realidad aumentada para personal de seguridad: Superponer información de amenazas sobre video en tiempo real para guardias.
Visualización geoespacial 3D: Para complejos industriales y campus grandes.
Gestión mediante comandos de voz: Interfaces conversacionales para operaciones manos-libres.
Dashboards personalizables por rol: Diferentes vistas para personal de seguridad, administración y emergencias.
Aplicaciones móviles seguras: Para monitoreo remoto y notificaciones.

8. Adaptaciones Específicas por Sector
Barrios y Edificios

Integración con intercomunicadores y porteros eléctricos
Reconocimiento de vehículos y residentes
Detección de visitantes recurrentes no registrados

Empresas

Monitoreo de áreas restringidas y clasificadas
Análisis de comportamiento en ubicaciones sensibles
Correlación con registros de actividad de los sistemas informáticos

Industrias

Detección de elementos de protección personal
Monitoreo de procedimientos de seguridad operacional
Detección de fugas, humo o condiciones peligrosas

Retail

Análisis de tráfico de clientes y mapas de calor
Detección de comportamientos de shoplifting
Integración con sistemas antihurto EAS

Gobierno

Verificación de identidad multinivel
Análisis forense avanzado
Controles de acceso por niveles de autorización

9. Inteligencia Situacional

Fusión de sensores heterogéneos: Combinar datos de cámaras, micrófonos, sensores ambientales y de movimiento.
Gemelos digitales de instalaciones: Modelos 3D interactivos para visualizar todos los aspectos de seguridad.
Análisis de amenazas basado en OSINT: Incorporar fuentes abiertas para contextualizar riesgos (eventos sociales, climatología).
Correlación temporal de eventos: Identificar patrones complejos que ocurren en secuencia a través de múltiples sensores.

10. Cumplimiento Normativo y Ético

Difuminado automático de rostros en áreas públicas: Para cumplir con GDPR y otras regulaciones de privacidad.
Sistema de trazabilidad de acceso a datos: Registro inmutable de quién accede a qué grabaciones y por qué motivo.
Auditoría automatizada de sesgos en IA: Verificación continua para evitar discriminación algorítmica.
Proporcionalidad configurable: Ajuste de la intensidad de monitoreo según el nivel de riesgo y requisitos legales.

Al implementar estas tecnologías y enfoques de manera modular, tu sistema VigIA podría convertirse en una plataforma de seguridad verdaderamente completa, aplicable a cualquier entorno y escalable según necesidades específicas. La clave estará en mantener la filosofía de diseño modular, permitiendo que cada cliente active solo los componentes relevantes para su caso de uso.


RESPUESTA:

Análisis de Viabilidad y Complejidad de las Mejoras Propuestas
Evaluación General
Las mejoras descritas en el PROJECT_README.md representan una visión ambiciosa y completa para un sistema de vigilancia de última generación. Evaluaré la viabilidad y complejidad de implementación para cada categoría principal:
1. Mejoras en IA y Análisis de Video
Viabilidad: Alta a Media
Complejidad: Media a Alta
Implementable a corto plazo:
Análisis de comportamiento predictivo básico
Reconocimiento de actividades simples
Control de aforo y análisis de densidad
Desafíos técnicos:
Las arquitecturas transformer para video (VideoSwin, ViViT) requieren GPU potentes
El aprendizaje por refuerzo para cámaras PTZ necesita un entorno de simulación antes de implementación real
2. Integración con Otros Sistemas de Seguridad
Viabilidad: Alta
Complejidad: Media
Implementable a corto plazo:
API REST para sistemas de control de acceso
Interfaz con sistemas de alarma estándar
Webhooks para notificaciones bidireccionales
Consideraciones:
Se requieren APIs documentadas de los sistemas externos
Necesitará protocolos de autenticación seguros
3. Mejoras en Ciberseguridad
Viabilidad: Alta
Complejidad: Media
Implementable a corto plazo:
Cifrado de datos en tránsito (HTTPS)
Autenticación multifactor
Firewalls básicos y reglas de acceso
Consideraciones:
El cifrado de extremo a extremo para video aumenta la carga computacional
La federación de identidades requiere infraestructura adicional
4. Arquitectura Distribuida
Viabilidad: Media
Complejidad: Alta
Implementable a corto plazo:
Contenedores Docker para componentes individuales
Balanceo de carga básico
Desafíos significativos:
Edge computing requiere hardware especializado
La arquitectura de microservicios completa necesita rediseño sustancial
5. Modo Industrial (Ya implementado parcialmente)
Viabilidad: Alta
Complejidad: Media-Baja
Ya implementado:
Detección de EPP
Análisis de posturas
Detección básica de fuego/humo
Próximos pasos viables:
Mejorar la precisión con modelos específicos
Añadir más reglas de seguridad industrial específicas por sector
Plan de Implementación Recomendado
Fase 1 (Corto plazo - 1-3 meses)
Perfeccionar el modo industrial existente:
Entrenamiento de modelos específicos para EPP con datos reales
Mejora de la interfaz de usuario para configuración de zonas
Generación de reportes automatizados
Mejoras de seguridad básicas:
Implementar HTTPS en toda la aplicación
Añadir autenticación multifactor
Cifrado de datos sensibles
Integración con sistemas básicos:
APIs para sistemas de control de acceso
Webhooks para alarmas
Fase 2 (Medio plazo - 3-6 meses)
Mejoras en IA:
Implementar análisis de comportamiento predictivo simple
Detección de actividades sospechosas básicas
Control de aforo y densidad de personas
Arquitectura distribuida inicial:
Dockerización de componentes
Mejora de la escalabilidad horizontal
Interfaces avanzadas:
Visualización geoespacial básica
Dashboards personalizables por rol
Fase 3 (Largo plazo - 6-12 meses)
IA avanzada:
Implementar modelos transformer para análisis de video
Aprendizaje por refuerzo para cámaras PTZ
Análisis forense avanzado
Arquitectura completa:
Edge computing para procesamiento en cámaras
Microservicios completos con service mesh
Replicación geográfica
Funcionalidades sectoriales:
Implementación de soluciones verticales específicas
Integración con sistemas gubernamentales
Consideraciones de Recursos
Para implementar estas mejoras se necesitaría:
1. Equipo de desarrollo:
2-3 desarrolladores backend (Python/Flask)
1-2 especialistas en ML/Computer Vision
1 especialista en seguridad informática
1 desarrollador frontend
Infraestructura:
Servidores con GPUs para entrenamiento de modelos
Almacenamiento escalable para videos
Entornos de staging y producción
3. Presupuesto aproximado:
Fase 1: $50,000 - $80,000
Fase 2: $100,000 - $150,000
Fase 3: $200,000 - $300,000
Conclusión
El proyecto tiene una base sólida con el modo industrial ya implementado. Es completamente viable implementar la mayoría de las mejoras propuestas, pero recomiendaría un enfoque por fases priorizando:
Primero: Perfeccionar lo existente y añadir seguridad básica
Segundo: Mejorar capacidades de IA e iniciar arquitectura distribuida
Tercero: Implementar características avanzadas y especializadas
El mayor desafío técnico está en la implementación de modelos de IA avanzados y la arquitectura distribuida completa, que requieren experiencia especializada y recursos computacionales significativos.

---------------

Próximos Pasos
Si encuentras errores adicionales en la aplicación, sería útil que los compartieras para poder abordarlos. Si deseas mejorar la robustez de la aplicación, podrías considerar:
Implementar más validaciones en las API
Mejorar el manejo de errores en las funciones principales
Agregar funcionalidad de registro más detallada para facilitar la depuración


Detector de asalto:

Datos e Información sobre el Sistema de Detección de Asaltos
Este agente implementa una funcionalidad avanzada para detectar posibles situaciones de asalto o robo, utilizando análisis de comportamiento:
Detección de múltiples comportamientos sospechosos:
Manos levantadas (indicador clásico de asalto a un banco o tienda)
Personas en el suelo (posibles rehenes o víctimas)
Movimientos bruscos/corriendo (huida o pánico)
Armas visibles
Rostros cubiertos (pasamontañas, máscaras)
Cambios súbitos en agrupaciones de personas (dispersión o concentración repentina)
Análisis multi-frame:
Mantiene un historial de detecciones para analizar comportamientos a lo largo del tiempo
Detecta cambios súbitos en el número de personas (indicador de pánico)
Evaluación ponderada de amenazas:
Asigna diferentes pesos a cada comportamiento sospechoso
Calcula un "nivel de amenaza" combinado
Aplica un multiplicador por combinación de factores (múltiples comportamientos sospechosos simultáneos son más alarmantes)
4. Sistema de alertas críticas:
Genera alertas de alta prioridad cuando se supera un umbral
Incluye capturas de imagen de la situación
Implementa un sistema de "cooldown" para evitar alertas repetitivas
3. Implementación práctica del detector
La implementación actual incluye algunos métodos que están "simulados" en esta versión. Para una implementación completa, estos métodos necesitarían:
Detección de manos levantadas:
Requeriría un modelo de estimación de poses (como OpenPose, MediaPipe o BlazePose)
Detectaría la posición relativa de las articulaciones de hombros, codos y muñecas
Detección de rostros cubiertos:
Requeriría un detector facial más avanzado
Analizaría la visibilidad de características faciales
Detección de movimiento rápido:
Implementaría seguimiento de objetos entre frames
Calcularía vectores de velocidad para cada persona detectada
En una implementación más avanzada, el sistema podría integrarse con otros modelos especializados o utilizar aprendizaje por refuerzo para mejorar la precisión de las detecciones con el tiempo.
4. Acceso a la configuración
La página de configuración del detector de asaltos ya está implementada y accesible en /assault-config. Desde allí, los usuarios pueden:
Activar/desactivar el detector
Ajustar el umbral de confianza
Seleccionar qué comportamientos sospechosos considerar
Configurar los destinatarios de alertas
Probar el detector

------------------------------
IMPORTANTE!!
Otras Mejoras Recomendadas
Para mejorar la robustez general del sistema, recomendaría implementar pruebas unitarias para los componentes clave, lo que ayudaría a detectar estos problemas antes de que aparezcan en producción.
También sería útil añadir comprobaciones de tipo en las funciones críticas para evitar errores inesperados cuando los datos no son del tipo esperado.

Evaluación del Estado Actual del Sistema y Pasos Pendientes
Estado de Implementación: 40% completado
Desglose por áreas principales:
| Área | Estado | Completitud |
|------|--------|-------------|
| Sistema base (cámaras, detección, interfaz) | Funcional | 80% |
| Detección de asaltos | Simulado, sin detección real de posturas | 30% |
| Modo industrial | Estructura básica implementada | 40% |
| Gestión de datasets y entrenamiento | Parcialmente implementado | 35% |
| Sistema de alertas avanzado | Estructura básica, falta refinamiento | 45% |
| Creación dinámica de agentes | Parcialmente implementado | 40% |
| Integración con IA externa | No implementado | 0% |
| Conexión WhatsApp | Estructura básica | 25% |
| Gestión geoespacial | No implementado | 0% |
| Robustez (pruebas, validaciones de tipo) | No implementado | 5% |
Próximos pasos críticos:
Implementar validación de tipos y manejo de errores (prioridad alta)
Esto reducirá significativamente los errores que estamos encontrando
Debería agregarse a todas las funciones públicas de las clases principales
Integrar detección real de poses humanas para el detector de asaltos
Reemplazar la simulación actual con un modelo real como MediaPipe
Esto permitiría probar la detección de manos levantadas con la webcam
3. Desarrollar pruebas unitarias para los componentes clave
Comenzar con AlertManager, CameraManager y el detector de asaltos
Implementar pruebas para los escenarios más críticos
Respuesta a tu pregunta sobre pruebas:
Actualmente, el sistema de detección de asaltos está simulado, por lo que no detectará realmente si levantas las manos frente a la webcam. Para implementar esta funcionalidad necesitamos:
Integrar una biblioteca de detección de poses como MediaPipe o BlazePose:
Modificar el método _detect_raised_hands en AssaultDetectionAgent para usar detección real:
3. Luego podrías probar el sistema activando la webcam y levantando las manos para ver si genera una alerta.



---------------------------------------------------

Estado actual del sistema
Basado en las interacciones, parece que hay un sistema de vigilancia inteligente con un módulo industrial que tiene varios problemas:
Problemas con la visualización de cámaras - No se puede ver el video en vivo de la cámara web
Configuración de zonas de peligro - No se pueden dibujar o editar áreas
Errores de configuración - Errores como 'IndustrialSafetyManager' object has no attribute 'fire_detection_enabled'
Alertas - Las alertas manuales parecen funcionar pero hay problemas con la detección automática
Integración con Bootstrap - Errores como "bootstrap is not defined"
Componentes principales
Para entender mejor el sistema, vamos a listar sus componentes principales:
app.py - El servidor Flask principal, con endpoints API para diversas funcionalidades
src/industrial_safety.py - Gestor de seguridad industrial que maneja configuraciones
src/industrial_safety_agent.py - Agente encargado de la detección de problemas de seguridad
4. src/alert_manager.py - Sistema para gestionar alertas
templates/industrial.html - Interfaz de usuario para configurar el modo industrial
Lo que está funcionando
Carga básica del sistema
Módulo de alertas manuales
Interfaz básica de usuario
Lo que no está funcionando
Visualización de video en vivo
Configuración de áreas de detección
Detección automática de incendios/EPP
Guardado de configuraciones
Plan para resolver los problemas
Necesitamos un enfoque sistemático para solucionar los problemas pendientes:
Visualización de cámaras: Implementar correctamente el streaming de video
Configuración de zonas: Asegurar que el canvas y sus eventos funcionan correctamente
Integración con Bootstrap: Verificar que todas las dependencias estén cargadas
Atributos de IndustrialSafetyManager: Asegurarnos de que todos los atributos necesarios estén definidos
Mejorar el manejo de errores: Para tener mejor información sobre lo que falla
Voy a crear un resumen completo con recomendaciones para el usuario.
</think>
Diagnóstico y Plan Completo del Sistema de Vigilancia Industrial
Vamos a hacer un repaso general del sistema, analizando lo que funciona, lo que falta, y cómo podemos mejorarlo.
Estado Actual del Sistema
Lo que está funcionando:
Inicialización básica del sistema
Interfaz general del módulo industrial
Sistema de alertas manuales
Configuraciones básicas en la interfaz
Visualización de estadísticas
Backend API para ciertas funcionalidades
Lo que NO está funcionando:
Visualización de video en vivo de las cámaras
Definición y guardado de zonas de peligro
Detección automática de incendios/EPP
Configuración efectiva de parámetros
Sistema de notificaciones emergentes
Arquitectura del Sistema
El sistema está compuesto por estos componentes principales:
Backend (Python/Flask):
app.py: Servidor principal con endpoints API
src/industrial_safety.py: Gestor de seguridad industrial
src/industrial_safety_agent.py: Agente encargado de la detección
src/alert_manager.py: Sistema para gestionar alertas
Frontend (HTML/JavaScript):
templates/industrial.html: Interfaz de usuario
Funcionalidades JavaScript para interactuar con APIs
Plan de Acción para Completar el Sistema
1. Visualización de Video en Vivo
2. Atributos Faltantes en IndustrialSafetyManager
3. Corregir la Funcionalidad de Zonas
La funcionalidad de creación de zonas requiere:
Un canvas que permita dibujar sobre la imagen de la cámara
JavaScript para manejar los eventos de dibujo
Almacenamiento de coordenadas en el backend
API para guardar y cargar zonas
Ya has implementado parte de esto, pero falta asegurarse de que el HTML contenga la estructura necesaria:
4. Debugging Mejorado
Para ayudar a identificar problemas específicos, agrega estas funciones de diagnóstico:
Resumen de Tareas Pendientes
Implementar visualización de video en vivo
Asegurarse de que camera-stream existe y recibe datos
Añadir manejo de errores en la carga de stream
Corregir configuración de zonas
Verificar estructura HTML para zonas
Asegurar que initZoneCanvas se ejecuta correctamente
Implementar guardado de zonas en backend
Arreglar configuración de detección de incendios
Asegurar que IndustrialSafetyManager tiene todos los atributos
Corregir endpoint /api/industrial/fire-detection/config
Mejorar sistema de alertas
Asegurar carga correcta de Bootstrap
Implementar mostrado de alertas en tiempo real
Testing integral
Probar cada componente individualmente
Verificar integración entre componentes
Recomendaciones Finales
Revisar errores en consola: Los errores específicos te dan pistas sobre qué está fallando
Implementar cambios gradualmente: Resuelve un problema a la vez y prueba
Verificar conexiones backend-frontend: Asegura que las API responden correctamente
Revisar nombres de variables: Asegúrate de que coincidan en frontend y backend
Con estas correcciones e implementaciones, deberías tener un sistema de vigilancia industrial completamente funcional, capaz de monitorear cámaras, detectar riesgos y gestionar alertas.

Visión General del Sistema de Vigilancia Inteligente
1. Arquitectura General del Sistema
Estructura Principal
El sistema está basado en una arquitectura modular y extensible con los siguientes componentes:
Sistema de Vigilancia Inteligente
├── Núcleo del Sistema (Core)
│   ├── Servidor Flask (app.py)
│   ├── Gestión de Hilos (threading.py)
│   └── API RESTful
├── Gestión de Cámaras
│   ├── Captura de Video (video_capture.py)
│   ├── Transmisión MJPEG/H264
│   └── Control PTZ (si aplica)
├── Framework MCP (Mission Control & Processing)
│   ├── Orquestador MCP
│   ├── Sistema de Agentes Inteligentes
│   └── Gestión de Prioridad de Tareas
├── Procesamiento de Imágenes
│   ├── Detección de Objetos (object_detector.py)
│   ├── Reconocimiento Facial (face_recognition.py)
│   ├── Análisis de Comportamientos (varios agentes)
│   └── Modelos de Machine Learning
├── Sistema de Alertas
│   ├── Gestor de Alertas (alert_manager.py)
│   ├── Notificaciones (WhatsApp, Email, etc.)
│   └── Histórico y Estadísticas
├── Interfaz de Usuario
│   ├── Dashboard Web
│   ├── Configuración del Sistema
│   ├── Visualización de Cámaras
│   └── Gestión de Alertas
└── Módulos Especializados
    ├── Modo Industrial (industrial_safety.py)
    ├── Detección de Asaltos (assault_detection_agent.py)
    ├── Análisis de Situaciones (situation_analysis_agent.py)
    └── Tracking Geográfico (geo_manager.py)



Flujo de Datos
Captura de Video: Las cámaras envían frames a video_capture.py
Procesamiento: Los frames son analizados por diversos detectores y agentes
Análisis: Los resultados de la detección son procesados por agentes especializados
Alertas: Las situaciones relevantes generan alertas en alert_manager.py
Notificaciones: Las alertas pueden activar notificaciones por varios canales
Visualización: Todo se muestra en el dashboard web en tiempo real
2. Sistema de Inteligencia Artificial
Framework MCP (Mission Control & Processing)
El corazón del sistema de IA es el framework MCP, un sistema propio basado en agentes con estas características:
Orquestador MCP: Gestiona el ciclo de vida de los agentes y coordina sus actividades
Agentes Inteligentes: Entidades autónomas especializadas en tareas específicas
Comunicación Entre Agentes: Sistema de mensajes para coordinación y colaboración
Priorización: Capacidad para asignar recursos según la importancia de las tareas
Tipos de Agentes Implementados
Agentes de Detección: Procesan imágenes buscando objetos o situaciones específicas
DetectionAgent: Agente genérico de detección de objetos
AssaultDetectionAgent: Especializado en detectar posibles asaltos
IndustrialSafetyAgent: Enfocado en riesgos industriales
Agentes de Análisis: Analizan resultados para identificar situaciones complejas
SituationAnalysisAgent: Utiliza IA externa para comprender escenarios complejos
FireDetectionAgent: Especializado en detectar incendios/humo
Agentes de Notificación: Gestionan la comunicación de alertas
AlertAgent: Gestiona el envío de alertas a través de la interfaz
WhatsAppAlertAgent: Especializado en enviar notificaciones por WhatsApp
Agentes de Gestión: Administran recursos del sistema
CameraAgent: Gestiona el estado y configuración de las cámaras
GuardTrackingAgent: Monitorea la posición geográfica de guardias
Sistema de Creación de Agentes
Existe un sistema inicial para crear nuevos agentes de forma dinámica:
AgentTemplateManager: Gestor de plantillas para crear nuevos agentes
Interfaz web para configurar parámetros básicos
Capacidad para asociar modelos de ML con agentes específicos
3. Sistema de Gestión de Cámaras
Fuentes de Video Compatibles
Cámaras IP (RTSP, HTTP, MJPEG)
Webcams USB
Archivos de video (para pruebas/simulación)
Transmisiones RTMP/HLS
Características de Gestión
Multihilo: Cada cámara funciona en su propio hilo para no bloquear el sistema
Auto-reconexión: Intentos automáticos de reconexión si se pierde la señal
Configuración Dinámica: Ajustes de resolución, FPS, etc. en tiempo real
Transmisión Adaptativa: Ajuste de calidad según disponibilidad de red
ROI (Regiones de Interés)
Definición de zonas específicas para análisis en cada cámara
Diferentes configuraciones de sensibilidad por zona
Reglas específicas asociadas a cada región
4. Modos Preconfigurados
El sistema ofrece varios modos predefinidos que ajustan todos los parámetros para escenarios específicos:
Modo Normal
Configuración estándar para vigilancia general
Detección de movimiento básica
Reconocimiento facial para control de acceso
Modo Comercial
Optimizado para tiendas y comercios
Detección de comportamientos sospechosos
Análisis de flujo de clientes
Alertas de intrusión fuera de horario
Modo Aeropuerto
Alta sensibilidad para grandes espacios
Reconocimiento facial avanzado
Detección de objetos abandonados
Seguimiento de personas específicas
Modo Residencial (Barrio Privado)
Enfocado en control de acceso
Detección de intrusiones perimetrales
Reconocimiento de vehículos
Alertas de comportamientos inusuales
Modo Industrial
Detección de equipos de protección personal (EPP)
Monitoreo de zonas peligrosas
Detección temprana de incendios
Cumplimiento de protocolos de seguridad
5. Machine Learning y Deep Learning
Modelos Implementados
1. Detección de Objetos: YOLOv5/v8 para identificar personas, vehículos, objetos
Reconocimiento Facial: Sistema basado en CNN para identificación de personas
Análisis Postural: Detección de posturas (manos levantadas, persona caída)
Detección de Anomalías: Identificación de comportamientos inusuales
5. Clasificación de Situaciones: Categorización de escenarios (normal, sospechoso, peligroso)
Sistema de Entrenamiento
Gestor de Datasets: Para crear conjuntos de datos personalizados
Herramientas de Etiquetado: Interfaz para clasificar y etiquetar imágenes
Procesos de Entrenamiento: Flujos automatizados para reentrenar modelos
Validación y Testing: Herramientas para evaluar el rendimiento de los modelos
Integración con IA Externa
Conectores para servicios como Claude, Google Gemini
Capacidad de análisis de alto nivel para situaciones complejas
Interpretación contextual avanzada mediante LLMs
6. Dashboard y Sistema de Alertas
Dashboard Principal
Visión general del estado del sistema
Monitoreo de cámaras activas
Estadísticas de detecciones y alertas
Controles rápidos para configuración
Visualización de Cámaras
Stream en vivo de múltiples cámaras
Superposición de detecciones y metadatos
Herramientas de zoom y control PTZ
Reproducción de eventos históricos
Sistema de Alertas
Alertas en Tiempo Real: Notificaciones inmediatas en dashboard
Clasificación por Severidad: Priorización de alertas (informativa, advertencia, crítica)
Filtros y Búsqueda: Herramientas para gestionar grandes volúmenes de alertas
Confirmación y Seguimiento: Workflow para atender y resolver alertas
Notificaciones
Integración WhatsApp: Envío de alertas y capturas por WhatsApp
Correo Electrónico: Resúmenes y alertas críticas
Notificaciones Push: Para aplicaciones móviles (planificado)
Integración con Sistemas Externos: APIs para conectar con otras plataformas
7. Estado Actual y Próximos Pasos
Estado de Implementación
| Módulo | Estado | Completitud |
|--------|--------|-------------|
| Sistema Base | Funcional | 85% |
| Gestión de Cámaras | Funcional | 80% |
| Framework MCP | Operativo | 70% |
| Detección de Objetos | Implementado | 75% |
| Reconocimiento Facial | Básico | 60% |
| Detección de Asaltos | Parcial | 40% |
| Modo Industrial | En desarrollo | 45% |
| Dashboard | Funcional | 70% |
| Sistema de Alertas | Operativo | 65% |
| Integración WhatsApp | Básica | 30% |
| Gestión Geoespacial | Inicial | 20% |
| IA Externa | Conceptual | 15% |
Próximos Desarrollos Prioritarios
Completar Modo Industrial
Finalizar visualización de cámaras en vivo
Implementar gestión de zonas de peligro
Mejorar detección de incendios y EPP
Mejorar Sistema de Agentes
Completar interfaz de creación dinámica de agentes
Implementar retroalimentación y aprendizaje continuo
Mejorar la coordinación entre agentes
Ampliar Capacidades de ML/DL
Implementar sistema completo de entrenamiento
Mejorar detección postural para identificar asaltos
Desarrollar modelos específicos para comportamientos sospechosos
Expandir Integración con Servicios Externos
Completar conexión con Claude/Gemini para análisis avanzado
Mejorar sistema de notificaciones WhatsApp
Implementar APIs para sistemas de terceros
Desarrollar Gestión Geoespacial
Completar sistema de seguimiento de guardias
Implementar geocercas y rutas
Integrar mapas interactivos en dashboard
8. Arquitectura Técnica
Stack Tecnológico
Backend: Python con Flask
Frontend: HTML5, JavaScript, Bootstrap
Base de Datos: SQLite (desarrollo), PostgreSQL (producción)
ML/DL: PyTorch, TensorFlow, OpenCV
Comunicación: RESTful APIs, WebSockets
Despliegue: Docker, opcionalmente Kubernetes

Diagrama de Componentes

                  ┌─────────────┐
                  │  Frontend   │
                  │  Dashboard  │
                  └──────┬──────┘
                         │
                         ▼
┌─────────────┐    ┌──────────────┐    ┌─────────────┐
│  Cámaras    │───▶│ Flask Server │◀───│ Servicios   │
│  y Sensores │    │    (API)     │    │ Externos    │
└─────────────┘    └──────┬───────┘    └─────────────┘
                         │
        ┌────────────────┼────────────────┐
        │                │                │
        ▼                ▼                ▼
┌─────────────┐    ┌──────────────┐    ┌─────────────┐
│ Detección y │    │ Framework MCP│    │ Sistema de  │
│ Análisis    │───▶│ (Orquestador)│───▶│ Alertas     │
└─────────────┘    └──────────────┘    └─────────────┘


9. Recomendaciones para el Desarrollo Futuro
Priorizar la Robustez
Implementar pruebas unitarias para componentes críticos
Mejorar manejo de errores y validación de tipos
Implementar capacidades de auto-recuperación
Enfoque Gradual en ML/DL
Comenzar con modelos simples bien ajustados
Implementar evaluación sistemática de precisión
Crear proceso para mejorar modelos con nuevos datos
Arquitectura Modular
Continuar el enfoque de módulos independientes
Documentar interfaces entre componentes
Facilitar la adición de nuevos agentes y funcionalidades
4. Escalabilidad
Diseñar para crecimiento en número de cámaras
Optimizar procesamiento para reducir carga de CPU/GPU
Considerar despliegue distribuido para grandes instalaciones
Esta visión general del sistema proporciona un mapa completo de la arquitectura actual, capacidades y direcciones futuras del sistema de vigilancia inteligente.

--------------------------------
Nueva estructura de proyecto

4. Verificar y actualizar la estructura de archivos del proyecto
Para asegurarnos de que todos los archivos estén en su lugar, aquí está la estructura de directorios del proyecto:


proyecto/
├── app.py
├── config/
│   ├── system_config.json
│   └── forensic/
├── data/
│   ├── videos/
│   └── forensic/
│       └── evidence/
├── src/
│   ├── assault_detection_agent.py
│   ├── camera_manager.py
│   ├── ensemble_detection_agent.py
│   ├── forensic_analysis.py
│   ├── generative_description_agent.py
│   ├── industrial_safety_agent.py
│   ├── mcp_framework.py
│   ├── object_detector.py
│   ├── operation_mode_router.py
│   ├── retail_security_agent.py
│   └── ... (otros archivos)
├── static/
│   ├── css/
│   ├── js/
│   └── img/
├── templates/
│   ├── advanced_settings.html
│   ├── base.html
│   ├── commercial.html
│   ├── dashboard.html
│   ├── forensic.html
│   ├── industrial.html
│   └── ... (otros templates)
├── tools/
│   └── test_ppe_detection.py
├── docs/
│   ├── TECHNICAL_DOCS.md
│   ├── TESTING_GUIDE.md
│   └── USER_GUIDE.md
├── requirements.txt
└── README.md


5. Instrucciones para ejecutar y probar el sistema
Una vez corregidos los errores, puedes iniciar el sistema con estos pasos:
Asegúrate de tener todas las dependencias instaladas:
2. Verifica que existan los directorios necesarios:
Inicia la aplicación:
Accede al sistema a través del navegador:
El sistema ahora incluye todas las nuevas funcionalidades:
IA generativa para descripciones
Ensemble de modelos para mayor precisión
Configuración avanzada personalizable
Análisis forense completo

   # Ejecutar en la terminal
   pip install -r requirements.txt

      mkdir -p config/forensic data/videos data/forensic/evidence

         ls src/

            python app.py


-------------------------------------------

DATOS GENERALES:

Resumen Tecnológico del Sistema de Vigilancia IA
1. Tecnologías Principales
Backend
Python: Lenguaje principal del sistema
Flask: Framework web para la API REST y servidor web
Blueprints de Flask: Para organización modular de rutas (main_bp, api_bp)
Jinja2: Motor de plantillas para renderizar HTML
Base de Datos
SQLAlchemy: ORM (Object-Relational Mapping) para interactuar con la base de datos
SQLite: Base de datos por defecto para almacenamiento (configurable para otros sistemas)
Modelos de datos: Camera, Alert, DetectionEvent para gestionar entidades del sistema
Procesamiento de Imágenes
OpenCV (cv2): Biblioteca principal para captura de video, procesamiento de imágenes y detección
Múltiples backends de cámaras: MSMF (Media Foundation), DirectShow, Video for Windows
2. Módulos del Sistema
Módulo de Cámaras
Sistema de gestión de cámaras: Permite configurar, monitorear y administrar cámaras IP, RTSP y webcams
Detección dinámica de interfaces: Intenta automáticamente diferentes métodos de conexión a cámaras
Streaming en tiempo real: Captura y transmisión de video mediante HTTP streaming
Módulo de Detección y AI
Detectores avanzados: Integración con sistemas de IA para detección
Tipos de detección:
Detección de poses (personas)
Reconocimiento facial
Detección de incendios/humo
Detección de agua/inundaciones
Procesamiento asíncrono: Sistema de colas para análisis en segundo plano
Módulo de Alertas
Sistema de notificaciones: Generación y gestión de alertas en tiempo real
Clasificación por severidad: Alertas críticas, altas, medias, bajas
Gestión del ciclo de vida: Creación, notificación, resolución de alertas
Módulo de Diagnósticos
Monitoreo de recursos: CPU, memoria, disco usando psutil
Diagnóstico de cámaras: Pruebas de conectividad y rendimiento
Monitoreo de red: Análisis de tráfico y estado de la red
Herramientas forenses: Análisis post-evento y recuperación de datos
Módulo de Configuración
Gestión centralizada: Interfaz para todos los parámetros del sistema
Perfiles de operación: Modos normal, mejorado, crítico y bajo consumo
Integración con APIs externas: Configuración para WhatsApp, Telegram, Email, SMS
3. Arquitectura y Patrones
Arquitectura del Sistema
Arquitectura modular: Componentes independientes y reutilizables
Patrón MVC: Separación de modelo, vista y controlador
API RESTful: Interfaces programáticas para integración con otros sistemas
Blueprints de Flask: Organización de rutas por funcionalidad
Gestión de Datos
Modelos relacionales: Estructura de datos normalizada
Operaciones CRUD: Creación, lectura, actualización y eliminación de entidades
Migraciones: Esquema de base de datos actualizable
4. Interfaz de Usuario
Frontend
HTML5/CSS3: Estructura y estilos modernos
JavaScript: Interactividad del lado del cliente
Jinja2 Templates: Renderizado de vistas dinámicas
Diseño responsivo: Adaptación a diferentes tamaños de pantalla
Componentes reutilizables: Sistema modular de componentes de UI
Elementos UI
Dashboard: Visualización centralizada del estado del sistema
Monitoreo en tiempo real: Visualización de cámaras y alertas
Gestor de cámaras: Configuración y control
Centro de alertas: Gestión y visualización de alertas
Diagnósticos y estadísticas: Monitoreo de recursos y rendimiento
Panel de configuración: Ajustes del sistema
5. Integraciones y APIs
APIs Externas
Servicios de mensajería: WhatsApp, Telegram, Email, SMS
Servicios cloud: Google Cloud, Firebase
OpenAI: Integración para análisis inteligente
Home Assistant/Zoneminder: Integración con sistemas de domótica
Seguridad
Gestión de claves API: Almacenamiento seguro de credenciales
Verificación de endpoints: Validación de solicitudes
Registro de actividad: Logging detallado de acciones del sistema
6. Utilidades y Herramientas
Utilidades del Sistema
Logging avanzado: Registro multinivel de eventos y errores
Manejo de excepciones: Captura y gestión centralizada de errores
Creación de directorios: Gestión automática de estructura de archivos
Gestión de recursos: Control de memoria y CPU
Herramientas de Desarrollo
Infraestructura para pruebas: Endpoints de prueba para validación
Datos de demostración: Inicialización automática para desarrollo
Funciones de diagnóstico: Herramientas para depuración
7. Modo de Operación
El sistema implementa diferentes modos de operación que pueden ser configurados según las necesidades:
Modo normal: Equilibrio entre funcionalidad y uso de recursos
Modo mejorado: Mayor sensibilidad y procesamiento avanzado
Modo bajo consumo: Operación con recursos mínimos
Modo crítico: Máxima sensibilidad para situaciones de emergencia
Cada módulo del sistema puede adaptarse a estos modos, ajustando parámetros como frecuencia de muestreo, sensibilidad de detección y consumo de recursos.
---
Este sistema integra tecnologías modernas de procesamiento de imágenes, IA y desarrollo web para crear una plataforma completa de vigilancia inteligente, adaptable a diversos entornos y necesidades de seguridad.

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\extract_system_info.py
--------------------------------------------------------------------------------
import os
import time
import datetime
import shutil
from pathlib import Path

def get_files_sorted_by_time(directory, exclude_dirs=None, exclude_patterns=None):
    """Obtiene los archivos ordenados por tiempo de modificación (más reciente primero)"""
    if exclude_dirs is None:
        exclude_dirs = ['.git', '__pycache__', '.venv', 'venv', 'vigilai_env', 'node_modules']
    
    if exclude_patterns is None:
        exclude_patterns = [
            'vigilai_env/Lib', 'vigilai_env\\Lib',
            '.venv/Lib', '.venv\\Lib',
            'venv/Lib', 'venv\\Lib',
            'site-packages', 'dist-packages',
            'pip/_vendor', 'pip\\_vendor'
        ]
    
    file_list = []
    for root, dirs, files in os.walk(directory):
        # Excluir directorios no deseados
        dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
        
        # Excluir si la ruta coincide con algún patrón a excluir
        if should_exclude_path(root, exclude_patterns):
            dirs[:] = []  # No explorar subdirectorios
            continue
            
        for file in files:
            file_path = os.path.join(root, file)
            try:
                mod_time = os.path.getmtime(file_path)
                file_list.append((file_path, mod_time))
            except Exception as e:
                print(f"Error al acceder a {file_path}: {e}")
    
    # Ordenar por tiempo de modificación (más reciente primero)
    file_list.sort(key=lambda x: x[1], reverse=True)
    return file_list

def format_datetime(timestamp):
    """Formatea una marca de tiempo en una fecha legible"""
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

def get_file_extension(file_path):
    """Retorna la extensión del archivo"""
    _, ext = os.path.splitext(file_path)
    return ext.lower()

def is_binary_file(file_path):
    """Verifica si un archivo es binario basado en su extensión"""
    binary_extensions = ['.pyc', '.png', '.jpg', '.jpeg', '.gif', '.pdf', '.zip', 
                         '.tar', '.gz', '.exe', '.dll', '.so', '.bin', '.dat', 
                         '.mp3', '.mp4', '.avi', '.mov', '.sqlite', '.db']
    return get_file_extension(file_path) in binary_extensions

def should_exclude_directory(root, exclude_dirs):
    """Determina si un directorio debe ser excluido basado en nombres de directorios"""
    for exclude_dir in exclude_dirs:
        if exclude_dir in root.split(os.sep):
            return True
    return False

def should_exclude_path(path, exclude_patterns):
    """Determina si una ruta debe ser excluida basado en patrones"""
    # Normalizar slashes para que funcione en cualquier SO
    normalized_path = path.replace('\\', '/').lower()
    
    for pattern in exclude_patterns:
        pattern = pattern.lower().replace('\\', '/')
        if pattern in normalized_path:
            return True
    return False

def generate_system_report(project_dir, output_file, recent_files_count=20):
    """Genera un informe completo del sistema"""
    # Directorios a excluir
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    # Patrones de ruta a excluir
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor',
        'python3', 'python2',
        'bin/python', 'Scripts'
    ]
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # Encabezado del informe
        f.write("=" * 80 + "\n")
        f.write(f"INFORME DEL SISTEMA DE VIGILANCIA IA\n")
        f.write(f"Generado el {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 80 + "\n\n")
        
        # Sección 1: Estructura del directorio
        f.write("1. ESTRUCTURA DEL PROYECTO\n")
        f.write("=" * 80 + "\n\n")
        
        # Recorrer y mostrar la estructura de directorios
        for root, dirs, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
            
            # Saltar este directorio si debe ser excluido
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                dirs[:] = []  # No explorar subdirectorios
                continue
            
            level = root.replace(project_dir, '').count(os.sep)
            indent = ' ' * 4 * level
            rel_path = os.path.relpath(root, project_dir)
            if rel_path == '.':
                f.write(f"{indent}📁 /\n")
            else:
                f.write(f"{indent}📁 {os.path.basename(root)}/\n")
            
            sub_indent = ' ' * 4 * (level + 1)
            for file in sorted(files):
                if not file.startswith('.'):
                    f.write(f"{sub_indent}📄 {file}\n")
        
        f.write("\n\n")
        
        # Sección 2: Archivos recientes
        f.write("2. ÚLTIMOS ARCHIVOS MODIFICADOS\n")
        f.write("=" * 80 + "\n\n")
        
        recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:recent_files_count]
        for file_path, mod_time in recent_files:
            rel_path = os.path.relpath(file_path, project_dir)
            f.write(f"📄 {rel_path}\n")
            f.write(f"   Última modificación: {format_datetime(mod_time)}\n\n")
        
        f.write("\n\n")
        
        # Sección 3: Contenido de los archivos
        f.write("3. CONTENIDO DE LOS ARCHIVOS\n")
        f.write("=" * 80 + "\n\n")
        
        for root, _, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
            
            for file in sorted(files):
                if file.startswith('.') or file == output_file:
                    continue
                
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, project_dir)
                
                if is_binary_file(file_path):
                    f.write(f"📄 {rel_path} (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)\n\n")
                    continue
                
                try:
                    # Intentar leer el archivo
                    with open(file_path, 'r', encoding='utf-8') as source_file:
                        content = source_file.read()
                        
                    f.write(f"📄 {rel_path}\n")
                    f.write("-" * 80 + "\n")
                    f.write(content)
                    f.write("\n\n")
                    f.write("-" * 80 + "\n\n")
                except Exception as e:
                    f.write(f"📄 {rel_path} (ERROR AL LEER: {str(e)})\n\n")
        
        # Sección 4: Resumen final
        f.write("4. RESUMEN DEL SISTEMA\n")
        f.write("=" * 80 + "\n\n")
        
        # Contar archivos por tipo
        file_types = {}
        total_files = 0
        total_lines = 0
        
        for root, _, files in os.walk(project_dir):
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
                
            for file in files:
                if file.startswith('.'):
                    continue
                    
                file_path = os.path.join(root, file)
                ext = get_file_extension(file_path)
                
                if ext not in file_types:
                    file_types[ext] = 0
                file_types[ext] += 1
                total_files += 1
                
                if not is_binary_file(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as source_file:
                            lines = len(source_file.readlines())
                            total_lines += lines
                    except:
                        pass
        
        f.write(f"Total de archivos: {total_files}\n")
        f.write(f"Total de líneas de código (aproximado): {total_lines}\n\n")
        
        f.write("Distribución por tipo de archivo:\n")
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
            if ext == '':
                ext = '(sin extensión)'
            f.write(f"  {ext}: {count} archivos\n")

if __name__ == "__main__":
    # Directorio del proyecto (directorio actual)
    project_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Nombre del archivo de salida
    output_file = os.path.join(project_dir, "resumen.txt")
    
    print(f"Generando informe del sistema en: {output_file}")
    print(f"Excluyendo entornos virtuales y sus librerías...")
    generate_system_report(project_dir, output_file)
    print(f"Informe completado. El archivo generado tiene un tamaño de: {os.path.getsize(output_file) / (1024*1024):.2f} MB")
    
    # Crear una copia adicional con los últimos 10 archivos modificados
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor'
    ]
    
    recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:10]
    recent_files_dir = os.path.join(project_dir, "ultimos_archivos_modificados")
    
    # Crear directorio si no existe
    if not os.path.exists(recent_files_dir):
        os.makedirs(recent_files_dir)
    
    # Copiar los archivos más recientes
    for file_path, _ in recent_files:
        if os.path.exists(file_path):
            # Crear estructura de directorios si es necesario
            rel_path = os.path.relpath(file_path, project_dir)
            dest_path = os.path.join(recent_files_dir, rel_path)
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
            
            # Copiar el archivo
            try:
                shutil.copy2(file_path, dest_path)
                print(f"Copiado: {rel_path}")
            except Exception as e:
                print(f"Error al copiar {rel_path}: {e}")
    
    print(f"Se han copiado los {len(recent_files)} archivos más recientes a: {recent_files_dir}") 

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\resumen.txt (ERROR AL LEER: )

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\instance\app.db (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\logs\surveillance.log (ERROR AL LEER: 'utf-8' codec can't decode byte 0xf3 in position 783: invalid continuation byte)

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\templates\dashboard.html
--------------------------------------------------------------------------------
{% extends "base.html" %}

{% block title %}Dashboard - Sistema de Vigilancia IA{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
{% endblock %}

{% block content %}
<div class="dashboard">
    <!-- Estado del sistema -->
    <div class="section-header">
        <h1>Dashboard de Vigilancia</h1>
        <div class="actions">
            <button class="btn info-btn" id="refreshBtn"><i class="fas fa-sync"></i> Actualizar</button>
        </div>
    </div>
    
    <!-- Resumen estadístico -->
    <div class="grid-container animate-in">
        <div class="grid-item stat-card">
            <div class="stat-icon">
                <i class="fas fa-video"></i>
            </div>
            <div class="stat-content">
                <h3 id="totalCameras">0</h3>
                <p>Cámaras Conectadas</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon warning">
                <i class="fas fa-bell"></i>
            </div>
            <div class="stat-content">
                <h3 id="totalAlerts">0</h3>
                <p>Alertas Hoy</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon success">
                <i class="fas fa-user-shield"></i>
            </div>
            <div class="stat-content">
                <h3 id="peopleDetected">0</h3>
                <p>Personas Detectadas</p>
            </div>
        </div>
        
        <div class="grid-item stat-card">
            <div class="stat-icon danger">
                <i class="fas fa-exclamation-circle"></i>
            </div>
            <div class="stat-content">
                <h3 id="criticalEvents">0</h3>
                <p>Eventos Críticos</p>
            </div>
        </div>
    </div>
    
    <!-- Estado de cámaras -->
    <div class="dual-column">
        <div class="column">
            <div class="card animate-in" style="animation-delay: 0.1s;">
                <div class="card-header">
                    <h2><i class="fas fa-video"></i> Estado de Cámaras</h2>
                    <div class="card-actions">
                        <button class="btn-icon" id="monitoringBtn"><i class="fas fa-external-link-alt"></i></button>
                    </div>
                </div>
                <div class="card-body" id="camerasStatus">
                    <div class="loader-container">
                        <div class="loader"></div>
                        <p>Cargando cámaras...</p>
                    </div>
                </div>
            </div>
            
            <!-- Recursos del sistema -->
            <div class="card animate-in" style="animation-delay: 0.2s;">
                <div class="card-header">
                    <h2><i class="fas fa-microchip"></i> Recursos del Sistema</h2>
                </div>
                <div class="card-body">
                    <div class="resource-meters">
                        <div class="resource-meter">
                            <div class="resource-label">CPU</div>
                            <div class="progress-bar">
                                <div class="progress" id="cpuUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                        <div class="resource-meter">
                            <div class="resource-label">RAM</div>
                            <div class="progress-bar">
                                <div class="progress" id="ramUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                        <div class="resource-meter">
                            <div class="resource-label">Disco</div>
                            <div class="progress-bar">
                                <div class="progress" id="diskUsage" style="width: 0%;">0%</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="column">
            <!-- Alertas recientes -->
            <div class="card animate-in" style="animation-delay: 0.3s;">
                <div class="card-header">
                    <h2><i class="fas fa-bell"></i> Alertas Recientes</h2>
                    <div class="card-actions">
                        <button class="btn-icon" id="alertsBtn"><i class="fas fa-external-link-alt"></i></button>
                    </div>
                </div>
                <div class="card-body" id="recentAlerts">
                    <div class="loader-container">
                        <div class="loader"></div>
                        <p>Cargando alertas...</p>
            </div>
        </div>
    </div>
    
            <!-- Actividad -->
            <div class="card animate-in" style="animation-delay: 0.4s;">
                <div class="card-header">
                    <h2><i class="fas fa-chart-line"></i> Actividad Reciente</h2>
                </div>
                <div class="card-body">
                    <div class="activity-chart-container">
                        <canvas id="activityChart"></canvas>
            </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .dashboard {
        margin-top: 20px;
    }
    
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .section-header h1 {
        margin: 0;
        font-size: 1.8rem;
        color: var(--secondary-color);
    }
    
    .dual-column {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-top: 20px;
    }
    
    .resource-meters {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .resource-meter {
        margin-bottom: 10px;
    }
    
    .resource-label {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        font-weight: 500;
    }
    
    .progress-bar {
        height: 10px;
        background-color: #e9ecef;
        border-radius: 5px;
        overflow: hidden;
    }
    
    .progress {
        height: 100%;
        background-color: var(--primary-color);
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        color: white;
        transition: width 0.5s ease;
    }
    
    .camera-status-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
    }
    
    .camera-status-item {
        background-color: #f8f9fa;
        border-radius: 6px;
        padding: 12px;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }
    
    .camera-status-icon {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        margin-bottom: 5px;
    }
    
    .camera-status-icon.active {
        background-color: var(--success-color);
    }
    
    .camera-status-icon.inactive {
        background-color: var(--secondary-color);
    }
    
    .camera-status-icon.error {
        background-color: var(--danger-color);
    }
    
    .camera-status-name {
        font-weight: 500;
        margin-bottom: 2px;
        font-size: 0.9rem;
    }
    
    .camera-status-info {
        font-size: 0.8rem;
        color: #6c757d;
    }
    
    .alert-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }
    
    .alert-item {
        padding: 10px;
        border-radius: 6px;
        display: flex;
        align-items: center;
    }
    
    .alert-item.low {
        background-color: rgba(52, 152, 219, 0.1);
        border-left: 3px solid var(--info-color);
    }
    
    .alert-item.medium {
        background-color: rgba(243, 156, 18, 0.1);
        border-left: 3px solid var(--warning-color);
    }
    
    .alert-item.high {
        background-color: rgba(231, 76, 60, 0.1);
        border-left: 3px solid var(--danger-color);
    }
    
    .alert-icon {
        margin-right: 15px;
        font-size: 1.2rem;
    }
    
    .alert-item.low .alert-icon {
        color: var(--info-color);
    }
    
    .alert-item.medium .alert-icon {
        color: var(--warning-color);
    }
    
    .alert-item.high .alert-icon {
        color: var(--danger-color);
    }
    
    .alert-content {
        flex: 1;
    }
    
    .alert-title {
        font-weight: 500;
        margin: 0 0 5px 0;
    }
    
    .alert-info {
        display: flex;
        font-size: 0.8rem;
        color: #6c757d;
    }
    
    .alert-camera {
        margin-right: 10px;
    }
    
    .alert-time {
        flex: 1;
        text-align: right;
    }
    
    .loader-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px;
    }
    
    .loader {
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--primary-color);
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .activity-chart-container {
        width: 100%;
        height: 200px;
    }
    
    @media (max-width: 768px) {
        .dual-column {
            grid-template-columns: 1fr;
        }
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// JavaScript necesario para el dashboard
document.addEventListener('DOMContentLoaded', function() {
    loadDashboardData();
    setupActivityChart();
    
    // Actualizar datos cada 30 segundos
    setInterval(loadDashboardData, 30000);
    
    // Botón de actualización manual
    document.getElementById('refreshBtn').addEventListener('click', loadDashboardData);
    
    // Botones de navegación
    document.getElementById('monitoringBtn').addEventListener('click', function() {
        window.location.href = '/monitoring';
    });
    
    document.getElementById('alertsBtn').addEventListener('click', function() {
        window.location.href = '/alerts';
    });
});

// Cargar datos del dashboard
function loadDashboardData() {
    // Actualizar estadísticas
    fetch('/api/dashboard/stats')
            .then(response => response.json())
            .then(data => {
            document.getElementById('totalCameras').textContent = data.cameras_active;
            document.getElementById('totalAlerts').textContent = data.alerts_today;
            document.getElementById('peopleDetected').textContent = data.people_detected;
            document.getElementById('criticalEvents').textContent = data.critical_events;
            
            // Actualizar recursos del sistema
            document.getElementById('cpuUsage').style.width = data.system.cpu_usage + '%';
            document.getElementById('cpuUsage').textContent = data.system.cpu_usage + '%';
            
            document.getElementById('ramUsage').style.width = data.system.memory_usage + '%';
            document.getElementById('ramUsage').textContent = data.system.memory_usage + '%';
            
            document.getElementById('diskUsage').style.width = data.system.disk_usage + '%';
            document.getElementById('diskUsage').textContent = data.system.disk_usage + '%';
            
            // Color de la barra según nivel
            colorizeProgressBar('cpuUsage', data.system.cpu_usage);
            colorizeProgressBar('ramUsage', data.system.memory_usage);
            colorizeProgressBar('diskUsage', data.system.disk_usage);
        })
        .catch(error => console.error('Error cargando estadísticas:', error));
        
    // Actualizar estado de cámaras
    fetch('/api/cameras')
        .then(response => response.json())
        .then(cameras => {
            const camerasContainer = document.getElementById('camerasStatus');
            
            if (cameras.length === 0) {
                camerasContainer.innerHTML = '<p class="no-data">No hay cámaras configuradas</p>';
                return;
            }
            
            let cameraHTML = '<div class="camera-status-list">';
            
            cameras.forEach(camera => {
                const statusClass = camera.active ? 'active' : 'inactive';
                cameraHTML += `
                    <div class="camera-status-item">
                        <div class="camera-status-icon ${statusClass}"></div>
                        <div class="camera-status-name">${camera.name}</div>
                        <div class="camera-status-info">${camera.active ? 'Activa' : 'Inactiva'}</div>
                    </div>
                `;
            });
            
            cameraHTML += '</div>';
            camerasContainer.innerHTML = cameraHTML;
        })
        .catch(error => console.error('Error cargando cámaras:', error));
        
    // Actualizar alertas recientes
    fetch('/api/alerts?limit=5')
        .then(response => response.json())
        .then(alerts => {
            const alertsContainer = document.getElementById('recentAlerts');
            
            if (alerts.length === 0) {
                alertsContainer.innerHTML = '<p class="no-data">No hay alertas recientes</p>';
                return;
            }
            
            let alertsHTML = '<div class="alert-list">';
            
            alerts.forEach(alert => {
                const severityClass = getSeverityClass(alert.severity);
                const icon = getSeverityIcon(alert.severity);
                
                alertsHTML += `
                    <div class="alert-item ${severityClass}">
                        <div class="alert-icon">
                            <i class="${icon}"></i>
                        </div>
                        <div class="alert-content">
                            <div class="alert-title">${alert.alert_type}</div>
                            <div class="alert-info">
                                <span class="alert-camera">Cámara ${alert.camera_id}</span>
                                <span class="alert-time">${formatDate(alert.timestamp)}</span>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            alertsHTML += '</div>';
            alertsContainer.innerHTML = alertsHTML;
        })
        .catch(error => console.error('Error cargando alertas:', error));
}

// Inicializar gráfico de actividad
function setupActivityChart() {
    const ctx = document.getElementById('activityChart').getContext('2d');
    
    // Datos de ejemplo
    const labels = Array.from({length: 12}, (_, i) => {
        const hour = new Date().getHours() - 11 + i;
        return (hour < 0 ? hour + 24 : hour) + ':00';
    });
    
    // Gráfico
    const activityChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                label: 'Eventos',
                data: [5, 8, 12, 7, 10, 15, 18, 14, 9, 12, 13, 10],
                borderColor: '#3498db',
                backgroundColor: 'rgba(52, 152, 219, 0.1)',
                tension: 0.4,
                fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                    grid: {
                        display: true,
                        color: 'rgba(0, 0, 0, 0.05)'
                        }
                    },
                    x: {
                    grid: {
                        display: false
                    }
                }
            }
        }
    });
    
    // Actualizar con datos reales
    fetch('/api/events/hourly')
            .then(response => response.json())
            .then(data => {
            // Actualizar datos
            activityChart.data.datasets[0].data = data.counts;
            activityChart.update();
        })
        .catch(error => console.error('Error cargando datos de actividad:', error));
}

// Funciones auxiliares
function getSeverityClass(severity) {
    switch(severity) {
        case 'high': case 'critical': return 'high';
        case 'medium': return 'medium';
        default: return 'low';
    }
}

function getSeverityIcon(severity) {
    switch(severity) {
        case 'high': case 'critical': return 'fas fa-exclamation-circle';
        case 'medium': return 'fas fa-exclamation-triangle';
        default: return 'fas fa-info-circle';
    }
}

function formatDate(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
}

function colorizeProgressBar(id, value) {
    const element = document.getElementById(id);
    if (value < 70) {
        element.style.backgroundColor = 'var(--success-color)';
    } else if (value < 90) {
        element.style.backgroundColor = 'var(--warning-color)';
    } else {
        element.style.backgroundColor = 'var(--danger-color)';
    }
    }
</script>
{% endblock %} 

--------------------------------------------------------------------------------

📄 ultimos_archivos_modificados\ultimos_archivos_modificados\ultimos_archivos_modificados\extract_system_info.py
--------------------------------------------------------------------------------
import os
import time
import datetime
import shutil
from pathlib import Path

def get_files_sorted_by_time(directory, exclude_dirs=None, exclude_patterns=None):
    """Obtiene los archivos ordenados por tiempo de modificación (más reciente primero)"""
    if exclude_dirs is None:
        exclude_dirs = ['.git', '__pycache__', '.venv', 'venv', 'vigilai_env', 'node_modules']
    
    if exclude_patterns is None:
        exclude_patterns = [
            'vigilai_env/Lib', 'vigilai_env\\Lib',
            '.venv/Lib', '.venv\\Lib',
            'venv/Lib', 'venv\\Lib',
            'site-packages', 'dist-packages',
            'pip/_vendor', 'pip\\_vendor'
        ]
    
    file_list = []
    for root, dirs, files in os.walk(directory):
        # Excluir directorios no deseados
        dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
        
        # Excluir si la ruta coincide con algún patrón a excluir
        if should_exclude_path(root, exclude_patterns):
            dirs[:] = []  # No explorar subdirectorios
            continue
            
        for file in files:
            file_path = os.path.join(root, file)
            try:
                mod_time = os.path.getmtime(file_path)
                file_list.append((file_path, mod_time))
            except Exception as e:
                print(f"Error al acceder a {file_path}: {e}")
    
    # Ordenar por tiempo de modificación (más reciente primero)
    file_list.sort(key=lambda x: x[1], reverse=True)
    return file_list

def format_datetime(timestamp):
    """Formatea una marca de tiempo en una fecha legible"""
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

def get_file_extension(file_path):
    """Retorna la extensión del archivo"""
    _, ext = os.path.splitext(file_path)
    return ext.lower()

def is_binary_file(file_path):
    """Verifica si un archivo es binario basado en su extensión"""
    binary_extensions = ['.pyc', '.png', '.jpg', '.jpeg', '.gif', '.pdf', '.zip', 
                         '.tar', '.gz', '.exe', '.dll', '.so', '.bin', '.dat', 
                         '.mp3', '.mp4', '.avi', '.mov', '.sqlite', '.db']
    return get_file_extension(file_path) in binary_extensions

def should_exclude_directory(root, exclude_dirs):
    """Determina si un directorio debe ser excluido basado en nombres de directorios"""
    for exclude_dir in exclude_dirs:
        if exclude_dir in root.split(os.sep):
            return True
    return False

def should_exclude_path(path, exclude_patterns):
    """Determina si una ruta debe ser excluida basado en patrones"""
    # Normalizar slashes para que funcione en cualquier SO
    normalized_path = path.replace('\\', '/').lower()
    
    for pattern in exclude_patterns:
        pattern = pattern.lower().replace('\\', '/')
        if pattern in normalized_path:
            return True
    return False

def generate_system_report(project_dir, output_file, recent_files_count=20):
    """Genera un informe completo del sistema"""
    # Directorios a excluir
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    # Patrones de ruta a excluir
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor',
        'python3', 'python2',
        'bin/python', 'Scripts'
    ]
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # Encabezado del informe
        f.write("=" * 80 + "\n")
        f.write(f"INFORME DEL SISTEMA DE VIGILANCIA IA\n")
        f.write(f"Generado el {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 80 + "\n\n")
        
        # Sección 1: Estructura del directorio
        f.write("1. ESTRUCTURA DEL PROYECTO\n")
        f.write("=" * 80 + "\n\n")
        
        # Recorrer y mostrar la estructura de directorios
        for root, dirs, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
            
            # Saltar este directorio si debe ser excluido
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                dirs[:] = []  # No explorar subdirectorios
                continue
            
            level = root.replace(project_dir, '').count(os.sep)
            indent = ' ' * 4 * level
            rel_path = os.path.relpath(root, project_dir)
            if rel_path == '.':
                f.write(f"{indent}📁 /\n")
            else:
                f.write(f"{indent}📁 {os.path.basename(root)}/\n")
            
            sub_indent = ' ' * 4 * (level + 1)
            for file in sorted(files):
                if not file.startswith('.'):
                    f.write(f"{sub_indent}📄 {file}\n")
        
        f.write("\n\n")
        
        # Sección 2: Archivos recientes
        f.write("2. ÚLTIMOS ARCHIVOS MODIFICADOS\n")
        f.write("=" * 80 + "\n\n")
        
        recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:recent_files_count]
        for file_path, mod_time in recent_files:
            rel_path = os.path.relpath(file_path, project_dir)
            f.write(f"📄 {rel_path}\n")
            f.write(f"   Última modificación: {format_datetime(mod_time)}\n\n")
        
        f.write("\n\n")
        
        # Sección 3: Contenido de los archivos
        f.write("3. CONTENIDO DE LOS ARCHIVOS\n")
        f.write("=" * 80 + "\n\n")
        
        for root, _, files in os.walk(project_dir):
            # Ignorar directorios excluidos
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
            
            for file in sorted(files):
                if file.startswith('.') or file == output_file:
                    continue
                
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, project_dir)
                
                if is_binary_file(file_path):
                    f.write(f"📄 {rel_path} (ARCHIVO BINARIO - CONTENIDO NO MOSTRADO)\n\n")
                    continue
                
                try:
                    # Intentar leer el archivo
                    with open(file_path, 'r', encoding='utf-8') as source_file:
                        content = source_file.read()
                        
                    f.write(f"📄 {rel_path}\n")
                    f.write("-" * 80 + "\n")
                    f.write(content)
                    f.write("\n\n")
                    f.write("-" * 80 + "\n\n")
                except Exception as e:
                    f.write(f"📄 {rel_path} (ERROR AL LEER: {str(e)})\n\n")
        
        # Sección 4: Resumen final
        f.write("4. RESUMEN DEL SISTEMA\n")
        f.write("=" * 80 + "\n\n")
        
        # Contar archivos por tipo
        file_types = {}
        total_files = 0
        total_lines = 0
        
        for root, _, files in os.walk(project_dir):
            if should_exclude_directory(root, exclude_dirs) or should_exclude_path(root, exclude_patterns):
                continue
                
            for file in files:
                if file.startswith('.'):
                    continue
                    
                file_path = os.path.join(root, file)
                ext = get_file_extension(file_path)
                
                if ext not in file_types:
                    file_types[ext] = 0
                file_types[ext] += 1
                total_files += 1
                
                if not is_binary_file(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as source_file:
                            lines = len(source_file.readlines())
                            total_lines += lines
                    except:
                        pass
        
        f.write(f"Total de archivos: {total_files}\n")
        f.write(f"Total de líneas de código (aproximado): {total_lines}\n\n")
        
        f.write("Distribución por tipo de archivo:\n")
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
            if ext == '':
                ext = '(sin extensión)'
            f.write(f"  {ext}: {count} archivos\n")

if __name__ == "__main__":
    # Directorio del proyecto (directorio actual)
    project_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Nombre del archivo de salida
    output_file = os.path.join(project_dir, "resumen.txt")
    
    print(f"Generando informe del sistema en: {output_file}")
    print(f"Excluyendo entornos virtuales y sus librerías...")
    generate_system_report(project_dir, output_file)
    print(f"Informe completado. El archivo generado tiene un tamaño de: {os.path.getsize(output_file) / (1024*1024):.2f} MB")
    
    # Crear una copia adicional con los últimos 10 archivos modificados
    exclude_dirs = [
        '.git', '__pycache__', '.pytest_cache', 'build', 'dist',
        '.venv', 'venv', 'vigilai_env', 'node_modules'
    ]
    
    exclude_patterns = [
        'vigilai_env/Lib', 'vigilai_env\\Lib',
        '.venv/Lib', '.venv\\Lib',
        'venv/Lib', 'venv\\Lib',
        'site-packages', 'dist-packages',
        'pip/_vendor', 'pip\\_vendor'
    ]
    
    recent_files = get_files_sorted_by_time(project_dir, exclude_dirs, exclude_patterns)[:10]
    recent_files_dir = os.path.join(project_dir, "ultimos_archivos_modificados")
    
    # Crear directorio si no existe
    if not os.path.exists(recent_files_dir):
        os.makedirs(recent_files_dir)
    
    # Copiar los archivos más recientes
    for file_path, _ in recent_files:
        if os.path.exists(file_path):
            # Crear estructura de directorios si es necesario
            rel_path = os.path.relpath(file_path, project_dir)
            dest_path = os.path.join(recent_files_dir, rel_path)
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
            
            # Copiar el archivo
            try:
                shutil.copy2(file_path, dest_path)
                print(f"Copiado: {rel_path}")
            except Exception as e:
                print(f"Error al copiar {rel_path}: {e}")
    
    print(f"Se han copiado los {len(recent_files)} archivos más recientes a: {recent_files_dir}") 